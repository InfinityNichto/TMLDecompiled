using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Win32;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Newtonsoft.Json.Linq;
using ReLogic.Content;
using ReLogic.Content.Sources;
using ReLogic.Graphics;
using ReLogic.Localization.IME;
using ReLogic.OS;
using ReLogic.Peripherals.RGB;
using ReLogic.Utilities;
using SDL2;
using Terraria.Achievements;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.Cinematics;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Ambience;
using Terraria.GameContent.Animations;
using Terraria.GameContent.Bestiary;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.ItemDropRules;
using Terraria.GameContent.Liquid;
using Terraria.GameContent.NetModules;
using Terraria.GameContent.Skies;
using Terraria.GameContent.UI;
using Terraria.GameContent.UI.BigProgressBar;
using Terraria.GameContent.UI.Chat;
using Terraria.GameContent.UI.Minimap;
using Terraria.GameContent.UI.ResourceSets;
using Terraria.GameContent.UI.States;
using Terraria.GameInput;
using Terraria.Graphics;
using Terraria.Graphics.CameraModifiers;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Light;
using Terraria.Graphics.Renderers;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Initializers;
using Terraria.IO;
using Terraria.Localization;
using Terraria.Map;
using Terraria.ModLoader;
using Terraria.ModLoader.Core;
using Terraria.ModLoader.Engine;
using Terraria.ModLoader.IO;
using Terraria.ModLoader.UI;
using Terraria.Net;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.Social.Steam;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.UI.Gamepad;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria;

public class Main : Game
{
	public delegate void OnPlayerSelected(PlayerFileData player);

	public static class CurrentFrameFlags
	{
		public static class Hacks
		{
			public static Matrix CurrentBackgroundMatrixForCreditsRoll;
		}

		public static int ActivePlayersCount;

		public static int SleepingPlayersCount;

		public static bool AnyActiveBossNPC;

		public static bool HadAnActiveInteractibleProjectile;
	}

	public enum WorldPreparationState
	{
		AwaitingData,
		ProcessingData,
		Ready
	}

	internal static class NativeMethods
	{
		public const uint ES_CONTINUOUS = 2147483648u;

		public const uint ES_SYSTEM_REQUIRED = 1u;

		[DllImport("kernel32.dll")]
		public static extern uint SetThreadExecutionState(uint esFlags);
	}

	private struct MouseTextCache
	{
		public bool noOverride;

		public bool isValid;

		public string cursorText;

		public int rare;

		public byte diff;

		public int X;

		public int Y;

		public int hackedScreenWidth;

		public int hackedScreenHeight;

		public string buffTooltip;
	}

	protected class TextDisplayCache
	{
		private string _originalText;

		private int _lastScreenWidth;

		private int _lastScreenHeight;

		private InputMode _lastInputMode;

		private Color originalColor;

		public List<List<TextSnippet>> TextLines { get; private set; }

		public int AmountOfLines { get; private set; }

		public void PrepareCache(string text, Color baseColor)
		{
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_007f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			if ((screenWidth != _lastScreenWidth) | (screenHeight != _lastScreenHeight) | (_originalText != text) | (PlayerInput.CurrentInputMode != _lastInputMode) | (originalColor != baseColor))
			{
				_lastScreenWidth = screenWidth;
				_lastScreenHeight = screenHeight;
				_originalText = text;
				_lastInputMode = PlayerInput.CurrentInputMode;
				text = Lang.SupportGlyphs(text);
				originalColor = baseColor;
				TextLines = Utils.WordwrapStringSmart(text, baseColor, FontAssets.MouseText.Value, 460, 10);
				AmountOfLines = TextLines.Count;
			}
		}
	}

	public struct SceneArea
	{
		public Vector2 SceneLocalScreenPositionOffset;

		public float totalWidth;

		public float totalHeight;

		public int bgTopY;
	}

	public struct InfoToSetBackColor
	{
		public bool isInGameMenuOrIsServer;

		public float CorruptionBiomeInfluence;

		public float CrimsonBiomeInfluence;

		public float JungleBiomeInfluence;

		public float MushroomBiomeInfluence;

		public float GraveyardInfluence;

		public bool BloodMoonActive;

		public bool LanternNightActive;
	}

	public ref struct CurrentPlayerOverride
	{
		private Player _prevPlayer;

		public CurrentPlayerOverride(Player player)
		{
			_prevPlayer = _currentPlayerOverride;
			_currentPlayerOverride = player;
		}

		public void Dispose()
		{
			_currentPlayerOverride = _prevPlayer;
		}
	}

	private const string versionStringBecauseTheyreTheSame = "v1.4.4.9";

	public const int curRelease = 279;

	public const string assemblyVersionNumber = "1.4.4.9";

	public const string copyrightText = "Copyright Â© 2022 Re-Logic";

	public const ulong WorldGeneratorVersion = 1198295875585uL;

	public static int mapDelay = 2;

	public static IAssetRepository Assets;

	public static AssetSourceController AssetSourceController;

	private volatile bool _musicLoaded;

	private volatile bool _artLoaded;

	private volatile bool _begunMainAsyncLoad;

	public static int CurrentDrawnEntityShader;

	public static Entity CurrentDrawnEntity;

	private static bool GameAskedToQuit = false;

	public static float ForcedMinimumZoom = 1f;

	public static SpriteViewMatrix GameViewMatrix;

	public static SpriteViewMatrix BackgroundViewMatrix;

	private static Matrix _currentWantedZoomMatrix;

	private static Matrix _uiScaleMatrix;

	private static float _uiScaleWanted = 1f;

	private static float _uiScaleUsed = 1f;

	public static float GameZoomTarget = 1f;

	public static bool LightingEveryFrame = true;

	public static bool SettingsUnlock_WorldEvil;

	public static bool SettingsEnabled_MinersWobble = true;

	public static bool SettingsEnabled_AutoReuseAllItems = false;

	public static bool SettingBlockGamepadsEntirely;

	public static bool SettingDontScaleMainMenuUp;

	public static bool SettingsEnabled_OpaqueBoxBehindTooltips = true;

	public static bool SettingMusicReplayDelayEnabled = false;

	public static bool HidePassword;

	public static bool ReversedUpDownArmorSetBonuses;

	public static Color MouseBorderColor = new Color(64, 64, 64, 64);

	public static bool MouseShowBuildingGrid;

	public static bool AllowUnfocusedInputOnGamepad;

	public static bool InvisibleCursorForGamepad = true;

	public static bool GamepadDisableCursorItemIconInner = true;

	public static bool GamepadDisableInstructionsDisplay;

	public static bool CrouchingEnabled = false;

	private static GameNotificationType _flashNotificationType = GameNotificationType.All;

	public static float MouseBuildingGridAlpha;

	public static bool CaptureModeDisabled = false;

	public bool unityMouseOver;

	public static Main instance;

	public static ChromaEngine Chroma;

	public static ChromaHotkeyPainter ChromaPainter;

	public static Camera Camera = new Camera();

	public static IPlayerRenderer PlayerRenderer = new LegacyPlayerRenderer();

	public static IPlayerRenderer PotionOfReturnRenderer = new ReturnGatePlayerRenderer();

	public static MapHeadRenderer MapPlayerRenderer = new MapHeadRenderer();

	public static NPCHeadRenderer TownNPCHeadRenderer = null;

	public static NPCHeadRenderer BossNPCHeadRenderer = null;

	public static List<TitleLinkButton> TitleLinks = new List<TitleLinkButton>();

	public static string versionNumber = "v1.4.4.9";

	public static string versionNumber2 = "v1.4.4.9";

	public static bool AnnouncementBoxDisabled;

	public static int AnnouncementBoxRange = -1;

	public static string AutogenSeedName;

	private static GameModeData _currentGameModeInfo = GameModeData.NormalMode;

	public static Dictionary<int, GameModeData> RegisteredGameModes = new Dictionary<int, GameModeData>
	{
		{
			0,
			GameModeData.NormalMode
		},
		{
			1,
			GameModeData.ExpertMode
		},
		{
			2,
			GameModeData.MasterMode
		},
		{
			3,
			GameModeData.CreativeMode
		}
	};

	private static bool? _overrideForExpertMode = null;

	private static bool? _overrideForMasterMode = null;

	public static bool drunkWorld = false;

	public static bool getGoodWorld = false;

	public static bool tenthAnniversaryWorld = false;

	public static bool dontStarveWorld = false;

	public static bool notTheBeesWorld = false;

	public static bool remixWorld = false;

	public static bool noTrapsWorld = false;

	public static bool zenithWorld = false;

	public static Vector2 destroyerHB = new Vector2(0f, 0f);

	public static FavoritesFile LocalFavoriteData = new FavoritesFile(SavePath + "/favorites.json", isCloud: false);

	public static FavoritesFile CloudFavoritesData = new FavoritesFile("ModLoader/favorites.json", isCloud: true);

	public static FileMetadata WorldFileMetadata;

	public static FileMetadata MapFileMetadata;

	public static PingMapLayer Pings = new PingMapLayer();

	public static MapIconOverlay MapIcons = new MapIconOverlay().AddLayer(new SpawnMapLayer()).AddLayer(new TeleportPylonsMapLayer()).AddLayer(Pings);

	public static CreativeUI CreativeMenu = new CreativeUI();

	private static Vector2 _lastPingMousePosition = Vector2.Zero;

	private static double _lastPingMouseDownTime = 0.0;

	private AchievementManager _achievements;

	private AchievementAdvisor _achievementAdvisor;

	public static BigProgressBarSystem BigBossProgressBar = new BigProgressBarSystem();

	public static UserInterface MenuUI = new UserInterface();

	public static UserInterface InGameUI = new UserInterface();

	private static OnPlayerSelected _pendingCharacterSelect;

	public static bool drawBackGore;

	public static ulong LobbyId = 0uL;

	private static Color[] _mapColorCacheArray = (Color[])(object)new Color[30000];

	public WaterfallManager waterfallManager;

	public static WorldSections sectionManager;

	public static bool ServerSideCharacter;

	public static string clientUUID;

	public static bool ContentLoaded = false;

	private static int toolTipDistance = 6;

	public static float GlobalTimeWrappedHourly;

	public static bool GlobalTimerPaused = false;

	public static GameTime gameTimeCache = new GameTime();

	public static ulong TileFrameSeed = (ulong)Guid.NewGuid().GetHashCode();

	private static ulong _drawCycleCounter;

	public static ContentManager ShaderContentManager;

	public static Ref<Effect> ScreenShaderRef = new Ref<Effect>();

	public static Ref<Effect> PixelShaderRef = new Ref<Effect>();

	public static Ref<Effect> TileShaderRef = new Ref<Effect>();

	public static Ref<Effect> VertexPixelShaderRef = new Ref<Effect>();

	public static int WaveQuality = 3;

	public static bool UseStormEffects = true;

	public static bool UseHeatDistortion = true;

	public static List<IEnumerator> DelayedProcesses = new List<IEnumerator>();

	public static int npcStreamSpeed = 30;

	public static int musicError;

	public static bool dedServFPS;

	public static int dedServCount1;

	public static int dedServCount2;

	public static bool superFast = false;

	public static readonly int offLimitBorderTiles = 40;

	public static readonly int maxMusic = 92;

	public const int MaxBannerTypes = 290;

	public static readonly int maxBackgrounds = 298;

	public const int MaxShopIDs = 100;

	private static float cameraLerp;

	private static int cameraLerpTimer;

	private static int cameraLerpTimeToggle;

	private static bool cameraGamePadLerp;

	public static Vector2[] OffsetsNPCOffhand = (Vector2[])(object)new Vector2[5]
	{
		new Vector2(14f, 34f),
		new Vector2(14f, 32f),
		new Vector2(14f, 26f),
		new Vector2(14f, 22f),
		new Vector2(14f, 18f)
	};

	public static Vector2[] OffsetsPlayerOffhand = (Vector2[])(object)new Vector2[20]
	{
		new Vector2(14f, 20f),
		new Vector2(14f, 20f),
		new Vector2(14f, 20f),
		new Vector2(14f, 18f),
		new Vector2(14f, 20f),
		new Vector2(16f, 4f),
		new Vector2(16f, 16f),
		new Vector2(18f, 14f),
		new Vector2(18f, 14f),
		new Vector2(18f, 14f),
		new Vector2(16f, 16f),
		new Vector2(16f, 16f),
		new Vector2(16f, 16f),
		new Vector2(16f, 16f),
		new Vector2(14f, 14f),
		new Vector2(14f, 14f),
		new Vector2(12f, 14f),
		new Vector2(14f, 16f),
		new Vector2(16f, 16f),
		new Vector2(16f, 16f)
	};

	public static Vector2[] OffsetsPlayerOnhand = (Vector2[])(object)new Vector2[20]
	{
		new Vector2(6f, 19f),
		new Vector2(5f, 10f),
		new Vector2(12f, 10f),
		new Vector2(13f, 17f),
		new Vector2(12f, 19f),
		new Vector2(5f, 10f),
		new Vector2(7f, 17f),
		new Vector2(6f, 16f),
		new Vector2(6f, 16f),
		new Vector2(6f, 16f),
		new Vector2(6f, 17f),
		new Vector2(7f, 17f),
		new Vector2(7f, 17f),
		new Vector2(7f, 17f),
		new Vector2(8f, 17f),
		new Vector2(9f, 16f),
		new Vector2(9f, 12f),
		new Vector2(8f, 17f),
		new Vector2(7f, 17f),
		new Vector2(7f, 17f)
	};

	public static Vector2[] OffsetsPlayerHeadgear = (Vector2[])(object)new Vector2[20]
	{
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 0f),
		new Vector2(0f, 0f),
		new Vector2(0f, 0f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 0f),
		new Vector2(0f, 0f),
		new Vector2(0f, 0f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f),
		new Vector2(0f, 2f)
	};

	public static Vector2 CurrentPan = Vector2.Zero;

	public static float sunCircle;

	public static int BlackFadeIn;

	public static bool noWindowBorder = false;

	public static RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;

	private string _cachedTitle;

	public static int undergroundBackground;

	public static int oldUndergroundBackground;

	public static bool skipMenu = false;

	public static bool verboseNetplay = false;

	public static bool stopTimeOuts = false;

	public static bool showSpam = false;

	public static bool showItemOwner = false;

	public static bool[] townNPCCanSpawn = new bool[NPCID.Count];

	public static int musicBox2 = -1;

	public static int musicBoxNotModifiedByVolume = -1;

	public static byte HealthBarDrawSettings = 1;

	public static bool runningCollectorsEdition;

	public static float wFrCounter;

	public static float wFrame;

	public static float upTimer;

	public static float upTimerMax;

	public static float upTimerMaxDelay;

	public static bool drawDiag;

	public static bool drawRelease;

	public static bool drawBetterDebug;

	public static bool betterDebugRelease;

	public static bool renderNow;

	public static bool drawToScreen;

	public static bool targetSet;

	public static int mouseX;

	public static int mouseY;

	public static int lastMouseX;

	public static int lastMouseY;

	private static ConcurrentQueue<Action> _mainThreadActions = new ConcurrentQueue<Action>();

	public static bool mouseLeft;

	public static bool mouseRight;

	public static bool isMouseLeftConsumedByUI = false;

	public static float essScale = 1f;

	public static int essDir = -1;

	public static float[] cloudBGX = new float[2];

	public static float cloudBGAlpha;

	public static float cloudBGActive;

	public static int[] cloudBG = new int[2] { 112, 113 };

	public static int[] treeMntBGSet1 = new int[2];

	public static int[] treeMntBGSet2 = new int[2];

	public static int[] treeMntBGSet3 = new int[2];

	public static int[] treeMntBGSet4 = new int[2];

	public static int[] treeBGSet1 = new int[3];

	public static int[] treeBGSet2 = new int[3];

	public static int[] treeBGSet3 = new int[3];

	public static int[] treeBGSet4 = new int[3];

	public static int[] corruptBG = new int[3];

	public static int[] jungleBG = new int[3];

	public static int[] snowMntBG = new int[2];

	public static int[] snowBG = new int[3];

	public static int[] hallowBG = new int[3];

	public static int[] crimsonBG = new int[3];

	public static int[] desertBG = new int[3];

	public static int[] mushroomBG = new int[3];

	public static int oceanBG;

	public static int[] underworldBG = new int[5];

	public static int[] treeX = new int[4];

	public static int[] treeStyle = new int[4];

	public static int[] caveBackX = new int[4];

	public static int[] caveBackStyle = new int[4];

	public static int iceBackStyle;

	public static int hellBackStyle;

	public static int jungleBackStyle;

	public static string debugWords = "";

	public static bool gamePad = false;

	public static bool xMas;

	public static bool halloween;

	public static bool forceXMasForToday;

	public static bool forceHalloweenForToday;

	public static bool DisableIntenseVisualEffects = false;

	public static int snowDust = 0;

	public static bool changeTheTitle;

	public static bool hairWindow;

	public static bool clothesWindow;

	public static bool ingameOptionsWindow = false;

	public static bool inFancyUI = false;

	public static int keyCount;

	public static string[] keyString = new string[10];

	public static int[] keyInt = new int[10];

	public static byte gFade;

	public static float gFader;

	public static byte gFadeDir = 1;

	public static bool shouldDrawNetDiagnosticsUI;

	private static INetDiagnosticsUI _activeNetDiagnosticsUI;

	public static IMultiplayerClosePlayersOverlay ActiveClosePlayersTeamOverlay = new NewMultiplayerClosePlayersOverlay();

	public static double UpdateTimeAccumulator;

	public static bool drawSkip;

	public static int fpsCount;

	public static Stopwatch fpsTimer = new Stopwatch();

	public bool gammaTest;

	private const bool USE_ASYNC_LOAD = true;

	private static bool _isAsyncLoadComplete;

	public static bool showSplash = true;

	public static bool ignoreErrors = true;

	public static string defaultIP = "";

	/// <summary>
	/// The rate at which <see cref="F:Terraria.Main.time" /> updates per tick.
	/// <br /> Can be modified using <see cref="M:Terraria.ModLoader.ModSystem.ModifyTimeRate(System.Double@,System.Double@,System.Double@)" />. Capped at <c>86,400.0</c>.
	/// </summary>
	public static double dayRate = 1.0;

	public static double desiredWorldTilesUpdateRate = 1.0;

	public static int maxScreenW = 1920;

	public static int maxScreenH = 1200;

	public static int minScreenW = 800;

	public static int minScreenH = 720;

	public static float iS = 1f;

	public static bool render;

	public static int qaStyle;

	public static int buffScanAreaWidth = (maxScreenW + 800) / 16 - 1;

	public static int buffScanAreaHeight = (maxScreenH + 800) / 16 - 1;

	public static float musicPitch = 0f;

	public static bool[] projHostile = new bool[ProjectileID.Count];

	public static bool[] projHook = new bool[ProjectileID.Count];

	/// <summary>
	/// Indexed by <see cref="T:Terraria.ID.BuffID" />. If <see langword="true" /> for a given <see cref="T:Terraria.ID.BuffID" />, then that buff can be applied to players by other players in PvP.
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public static bool[] pvpBuff = new bool[BuffID.Count];

	/// <summary>
	/// Allows status effects for which this is set to true to persist after the afflicted player's death.<br />
	/// Defaults to false; all vanilla flask effects have their entries here set to true.<br />
	/// </summary>
	public static bool[] persistentBuff = new bool[BuffID.Count];

	/// <summary>
	/// Categorizes status effects for which this is set to true as being from vanity pets, preventing them from overlapping with other vanity pet status effects.<br />
	/// Defaults to false; all vanilla vanity pets have their entries here set to true.<br />
	/// </summary>
	public static bool[] vanityPet = new bool[BuffID.Count];

	/// <summary>
	/// Categorizes status effects for which this is set to true as being tied to a light pet, preventing them from overlapping with other light pet status effects.<br />
	/// Defaults to false; all vanilla light pets have their entries here set to true.<br />
	/// </summary>
	public static bool[] lightPet = new bool[BuffID.Count];

	/// <summary>
	/// Categorizes status effects for which this is set to true as being from flasks, preventing them from overlapping with other flask status effects.<br />
	/// Defaults to false; all vanilla flask effects have their entries here set to true.<br />
	/// </summary>
	public static bool[] meleeBuff = new bool[BuffID.Count];

	/// <summary>
	/// Categorizes status effects for which this is set to true as being debuffs instead of buffs.<br />
	/// This has multiple effects on gameplay:<br />
	/// - the Nurse can remove the status effect when healing the afflicted player (to prevent this, refer to <see cref="F:Terraria.ID.BuffID.Sets.NurseCannotRemoveDebuff" />)<br />
	/// - the status effect cannot be cleared from overflowing the status effect cap (buffs will be cleared instead)<br />
	/// - the status effect cannot be cleared by right-clicking it (which can be done for all other status effect types)<br />
	/// Defaults to false; all vanilla debuffs have their entries here set to true.<br />
	/// </summary>
	public static bool[] debuff = new bool[BuffID.Count];

	/// <summary>
	/// Indexed by <see cref="T:Terraria.ID.BuffID" />. If <see langword="true" /> for a given <see cref="T:Terraria.ID.BuffID" />, then that buff will not be saved when exiting a world.
	/// <br /> Vanilla sets this for DoT effects (<see cref="F:Terraria.ID.BuffID.Poisoned" />), short item buffs (<see cref="F:Terraria.ID.BuffID.Panic" />), mount buffs, and conditionally-applied buffs (<see cref="F:Terraria.ID.BuffID.Campfire" />, <see cref="F:Terraria.ID.BuffID.Werewolf" />).
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public static bool[] buffNoSave = new bool[BuffID.Count];

	/// <summary>
	/// Prevents status effects which have their entries set to true from displaying the amount of time they have left.<br />
	/// Defaults to false; most, if not all, status effects which have their entries set to true here are related to mounts, pets, and summons.<br />
	/// </summary>
	public static bool[] buffNoTimeDisplay = new bool[BuffID.Count];

	public static bool[] buffDoubleApply = new bool[BuffID.Count];

	public static int maxMP = 10;

	public static string[] recentWorld = new string[maxMP];

	public static string[] recentIP = new string[maxMP];

	public static int[] recentPort = new int[maxMP];

	public static bool shortRender = true;

	public static bool BackgroundEnabled = true;

	public static int instantBGTransitionCounter = 2;

	public static int bgDelay;

	public static int bgStyle;

	internal const int BG_STYLES_COUNT = 14;

	public static float[] bgAlphaFrontLayer = new float[14];

	public static float[] bgAlphaFarBackLayer = new float[14];

	public static int[] bgFrame = new int[14];

	public static int[] bgFrameCounter = new int[14];

	public static int EquipPage;

	public static int EquipPageSelected;

	public int mouseNPCIndex = -1;

	public int mouseNPCType = -1;

	public static int wofNPCIndex = -1;

	public static int wofDrawAreaTop;

	public static int wofDrawAreaBottom;

	public static int wofDrawFrameIndex;

	public static int offScreenRange = 200;

	public RenderTarget2D backWaterTarget;

	public static RenderTarget2D waterTarget;

	public RenderTarget2D tileTarget;

	public RenderTarget2D blackTarget;

	public RenderTarget2D tile2Target;

	public RenderTarget2D wallTarget;

	public RenderTarget2D backgroundTarget;

	public static RenderTarget2D screenTarget;

	public static RenderTarget2D screenTargetSwap;

	public static int maxMapUpdates = 250000;

	public static bool refreshMap;

	public static int loadMapLastX;

	public static bool loadMapLock;

	public static bool loadMap;

	public static bool mapReady;

	public static int textureMaxWidth = 2000;

	public static int textureMaxHeight = 1800;

	public static bool updateMap;

	public static int mapMinX = 0;

	public static int mapMaxX = 0;

	public static int mapMinY;

	public static int mapMaxY;

	public static int mapTimeMax = 30;

	public static int mapTime = mapTimeMax;

	public static bool clearMap;

	public static int mapTargetX = 5;

	public static int mapTargetY = 2;

	public RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];

	public RenderTarget2D mapSectionTexture;

	public static bool[,] initMap = new bool[mapTargetX, mapTargetY];

	public static bool[,] mapWasContentLost = new bool[mapTargetX, mapTargetY];

	public const int numInfoIcons = 13;

	public static Color OurFavoriteColor = new Color(255, 231, 69);

	public static bool mapInit;

	public static bool mapEnabled = true;

	public static int mapStyle = 1;

	public static float grabMapX;

	public static float grabMapY;

	public static int miniMapX;

	public static int miniMapY;

	public static int miniMapWidth;

	public static int miniMapHeight;

	public static float mapMinimapDefaultScale = 1.05f;

	public static float mapMinimapScale = mapMinimapDefaultScale;

	public static float mapMinimapAlpha = 1f;

	public static float mapOverlayScale = 2.5f;

	public static float mapOverlayAlpha = 0.35f;

	public static bool mapFullscreen;

	public static bool resetMapFull;

	public static float mapFullscreenScale = 4f;

	public static Vector2 mapFullscreenPos = new Vector2(-1f, -1f);

	private static bool IsEnginePreloaded;

	private static bool IsEngineLoaded;

	private static uint _gameUpdateCount;

	public static bool SkipAssemblyLoad;

	private int firstTileX;

	private int lastTileX;

	private int firstTileY;

	private int lastTileY;

	internal double bgParallax;

	internal int bgStartX;

	internal int bgLoops;

	private int bgStartY;

	private int bgLoopsY;

	internal int bgTopY;

	public static int renderCount = 99;

	private const int MF_BYPOSITION = 1024;

	public static GraphicsDeviceManager graphics;

	public static SpriteBatch spriteBatch;

	public static TileBatch tileBatch;

	public static BasicDebugDrawer DebugDrawer;

	public static SamplerState SamplerStateForCursor = SamplerState.LinearClamp;

	public static GenerationProgress AutogenProgress = new GenerationProgress();

	private static Process tServer;

	private static Stopwatch saveTime = new Stopwatch();

	public static KeyboardState keyState;

	public static KeyboardState oldKeyState;

	public static Color mcColor = new Color(1f, 0.6f, 0f);

	public static Color hcColor = new Color(1f, 0.15f, 0.1f);

	public static Color creativeModeColor = Color.Lerp(Color.HotPink, Color.White, 0.1f);

	public static Color legendaryModeColor = Color.LimeGreen;

	public static Color highVersionColor = new Color(255, 255, 0);

	public static Color errorColor = new Color(255, 0, 0);

	public static bool craftingHide;

	public static bool armorHide;

	public static float shimmerAlpha = 0f;

	public static float shimmerDarken = 0f;

	public static float shimmerBrightenDelay = 0f;

	public static float craftingAlpha = 1f;

	public static float armorAlpha = 1f;

	public static float[] buffAlpha = new float[BuffID.Count];

	public static bool afterPartyOfDoom = false;

	public static bool hardMode;

	public float chestLootScale = 1f;

	public bool chestLootHover;

	public float chestStackScale = 1f;

	public bool chestStackHover;

	public float chestDepositScale = 1f;

	public bool chestDepositHover;

	public float chestRenameScale = 1f;

	public bool chestRenameHover;

	public float chestCancelScale = 1f;

	public bool chestCancelHover;

	public static Vector2 sceneWaterPos = Vector2.Zero;

	public static Vector2 sceneTilePos = Vector2.Zero;

	public static Vector2 sceneTile2Pos = Vector2.Zero;

	public static Vector2 sceneWallPos = Vector2.Zero;

	public static Vector2 sceneBackgroundPos = Vector2.Zero;

	public static bool maxQ = true;

	public static float gfxQuality = 1f;

	public static float gfxRate = 0.01f;

	public int DiscoStyle;

	public static int DiscoR = 255;

	public static int DiscoB;

	public static int DiscoG;

	public static int teamCooldown;

	public static int teamCooldownLen = 300;

	public static bool gamePaused;

	public static bool gameInactive;

	public static int updatesCountedForFPS;

	public static int drawsCountedForFPS;

	public static int uCount;

	public static int updateRate;

	public static int frameRate;

	public static bool RGBRelease;

	public static bool qRelease = false;

	public static bool netRelease;

	public static bool frameRelease;

	public static bool showFrameRate = false;

	public static int magmaBGFrame;

	public static int magmaBGFrameCounter;

	public static int saveTimer = 0;

	public static bool autoJoin;

	public static bool serverStarting = false;

	public static float leftWorld = 0f;

	public static float rightWorld = 134400f;

	public static float topWorld = 0f;

	public static float bottomWorld = 38400f;

	/// <summary>
	/// The width of the currently-loaded world in tiles.
	/// </summary>
	public static int maxTilesX = (int)rightWorld / 16 + 1;

	/// <summary>
	/// The height of the currently-loaded world in tiles.
	/// </summary>
	public static int maxTilesY = (int)bottomWorld / 16 + 1;

	public const int sectionWidth = 200;

	public const int sectionHeight = 150;

	public static int maxSectionsX = maxTilesX / 200;

	public static int maxSectionsY = maxTilesY / 150;

	public const int maxDust = 6000;

	public static int maxDustToDraw = 6000;

	public const int maxCombatText = 100;

	public const int maxItemText = 20;

	public const int maxPlayers = 255;

	public static int maxNetPlayers = 255;

	public static readonly int maxChests = 8000;

	public static readonly int maxItems = 400;

	public static readonly int maxProjectiles = 1000;

	public static readonly int maxNPCs = 200;

	internal static UICharacterSelect _characterSelectMenu = new UICharacterSelect();

	internal static UIWorldSelect _worldSelectMenu = new UIWorldSelect();

	public static UIManageControls ManageControlsMenu = new UIManageControls();

	public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();

	public static int maxRain = 750;

	public static int slimeWarningTime;

	public static int slimeWarningDelay = 420;

	public static float slimeRainNPCSlots = 0.65f;

	public static bool[] slimeRainNPC = new bool[NPCID.Count];

	public static double slimeRainTime;

	public static bool slimeRain;

	public static int slimeRainKillCount;

	private const double slimeRainMaxTime = 54000.0;

	private const double slimeRainMinTime = 32400.0;

	private const double slimeRainMaxDelay = 604800.0;

	private const double slimeRainMinDelay = 302400.0;

	private const double LeinforsBalanceRequestForSlimeRainChance = 1.0416666666666667;

	private const double slimeRainChance = 450000.00000000006;

	public const int maxGore = 600;

	public const int InventoryItemSlotsStart = 0;

	public const int InventoryItemSlotsCount = 50;

	public const int InventoryCoinSlotsStart = 50;

	public const int InventoryCoinSlotsCount = 4;

	public const int InventoryAmmoSlotsStart = 54;

	public const int InventoryAmmoSlotsCount = 4;

	public const int InventorySlotsTotal = 58;

	public int invBottom = 210;

	public const int maxLiquidTypes = 15;

	public static float cameraX;

	public static bool drewLava;

	public static float[] liquidAlpha = new float[15];

	public static int waterStyle;

	public static int WorldRollingBackupsCountToKeep = 2;

	private static bool TOWMusicUnlocked = false;

	private static bool swapMusic = false;

	public static float caveParallax = 0.88f;

	public static int dungeonX;

	public static int dungeonY;

	public static Liquid[] liquid = new Liquid[Liquid.maxLiquid];

	public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[50000];

	public static bool dedServ;

	public static int spamCount = 0;

	public static int curMusic;

	public static int dayMusic;

	public static int ugMusic;

	public static int newMusic;

	public static bool showItemText = true;

	public static bool autoSave = true;

	public static bool validateSaves = true;

	public static bool bannerMouseOver;

	public static string buffString = "";

	public static string libPath = "";

	public static int lo;

	public static int LogoA = 255;

	public static int LogoB;

	public static bool LogoT;

	private static string _statusText = "";

	public static string worldName = "";

	public static int worldID;

	public static int background;

	public static int caveBackground = 0;

	public static float ugBackTransition;

	public static Color tileColor;

	/// <summary>
	/// The y-coordinate of the top of the dirt layer, in tile coordinates. Corresponds to 0' on the Depth Meter.
	/// </summary>
	/// <remarks>Players under the surface will have <see cref="P:Terraria.Player.ZoneDirtLayerHeight" /> set to <see langword="true" />.</remarks>
	public static double worldSurface;

	/// <summary>
	/// The y-coordinate of the top of the caverns layer, in tile coordinates.
	/// </summary>
	/// <remarks>Players in this layer will have <see cref="P:Terraria.Player.ZoneRockLayerHeight" /> set to <see langword="true" />.</remarks>
	public static double rockLayer;

	public static Color[] teamColor = (Color[])(object)new Color[6];

	public const double dayLength = 54000.0;

	public const double nightLength = 32400.0;

	public static bool dayTime = true;

	/// <summary>
	/// The time that has passed since it last became day/night.
	/// <br /> Increased by <see cref="F:Terraria.Main.dayRate" /> every tick.
	/// <br /> If it is <see cref="F:Terraria.Main.dayTime" />, this caps at <see cref="F:Terraria.Main.dayLength" />. Otherwise, this caps at <see cref="F:Terraria.Main.nightLength" />.
	/// </summary>
	/// <remarks>
	/// If you need 24-hour time, use <see cref="M:Terraria.Utils.GetDayTimeAs24FloatStartingFromMidnight" />.
	/// </remarks>
	public static double time = 13500.0;

	public static double timeForVisualEffects;

	public static int moonPhase;

	public static short sunModY;

	public static short moonModY;

	public static bool alreadyGrabbingSunOrMoon;

	public static bool bloodMoon;

	public static bool pumpkinMoon;

	public static bool snowMoon;

	public static float cloudAlpha;

	public static float maxRaining;

	public static float oldMaxRaining;

	public static double rainTime;

	public static bool raining;

	public static bool eclipse;

	public static float eclipseLight;

	public static int checkForSpawns;

	public static int helpText;

	public static int BartenderHelpTextIndex = 0;

	public static bool autoGen;

	public static bool autoPause = false;

	/// <summary>
	/// Indicates how many frames of animation are in each projectile type spritesheet.<br />
	/// Use <see cref="F:Terraria.Projectile.frame" /> to animate the projectile.<br />
	/// The <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#animationmultiple-frames">Basic Projectile Guide</see> teaches how to animate projectiles.<br />
	/// Indexed by <see cref="F:Terraria.Projectile.type" />. Defaults to 1.
	/// </summary>
	public static int[] projFrames = new int[ProjectileID.Count];

	public static bool[] projPet = new bool[ProjectileID.Count];

	public static float demonTorch = 1f;

	public static int demonTorchDir = 1;

	public static float martianLight = 1f;

	public static int martianLightDir = 1;

	public static float masterColor = 1f;

	public static int masterColorDir = 1;

	public static bool placementPreview = true;

	public static SceneMetrics SceneMetrics;

	public const int maxStars = 400;

	public static int numStars;

	public const int maxStarTypes = 4;

	public const int maxClouds = 200;

	public static int weatherCounter;

	public static int numClouds = 200;

	public static int numCloudsTemp = numClouds;

	public static float windSpeedCurrent;

	public static float windSpeedTarget;

	public static int windCounter;

	public static int extremeWindCounter;

	public static bool windPhysics = false;

	public static float windPhysicsStrength = 0.1f;

	public static bool SettingsEnabled_TilesSwayInWind = true;

	public static Cloud[] cloud = new Cloud[200];

	public static bool resetClouds = true;

	public static float SmoothedMushroomLightInfluence;

	public static int fadeCounter;

	public static float invAlpha = 1f;

	public static float invDir = 1f;

	[ThreadStatic]
	public static UnifiedRandom _rand;

	public static bool allChestStackHover;

	public static bool inventorySortMouseOver;

	public static float GraveyardVisualIntensity;

	public const int maxMoons = 9;

	public static int moonType = 0;

	public const int numTileColors = 32;

	public const int numTreeStyles = 32;

	public const int numberOfHairstyles = 165;

	public const int maxHairStyles = 165;

	public const int maxCharSelectHair = 51;

	public const int maxHairOfStylistDefault = 123;

	public static bool UseExperimentalFeatures;

	public static string DefaultSeed = "";

	public static IAudioSystem audioSystem;

	public static bool[] musicNoCrossFade = new bool[maxMusic];

	public static float[] musicFade = new float[maxMusic];

	public static float musicVolume = 1f;

	public static float ambientVolume = 1f;

	public static float soundVolume = 1f;

	public static ServerMode MenuServerMode = ServerMode.Lobby | ServerMode.FriendsCanJoin;

	/// <summary>
	/// Indexed by <see cref="T:Terraria.ID.TileID" />. If <see langword="true" /> for a given <see cref="T:Terraria.ID.TileID" />, then that tile produces light.
	/// <br /> You can set the light color for tile using <see cref="M:Terraria.ModLoader.ModBlockType.ModifyLight(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)" /> or <see cref="M:Terraria.ModLoader.GlobalBlockType.ModifyLight(System.Int32,System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)" />.
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public static bool[] tileLighted = new bool[TileID.Count];

	/// <summary>
	/// Indexed by <see cref="T:Terraria.ID.TileID" />. If <see langword="true" /> for a given <see cref="T:Terraria.ID.TileID" />, then that tile has frames for merging with <see cref="F:Terraria.ID.TileID.Dirt" />.
	/// <br /> Defaults to <see langword="false" />.
	/// </summary>
	public static bool[] tileMergeDirt = new bool[TileID.Count];

	/// <summary>
	/// If true, Tiles of the indexed Tile Type will be destroyed by weapons and projectiles.
	/// </summary>
	public static bool[] tileCut = new bool[TileID.Count];

	public static bool[] tileAlch = new bool[TileID.Count];

	/// <summary>
	/// How rarely tiny ambient dust appear from this tile. Larger values mean less frequently
	/// </summary>
	public static int[] tileShine = new int[TileID.Count];

	/// <summary>
	/// If true, the tile will be drawn to be slightly more bright. 
	/// </summary>
	public static bool[] tileShine2 = new bool[TileID.Count];

	/// <summary>
	/// If true, the wall is considered "safe" for enemy spawning purposes.
	/// </summary>
	public static bool[] wallHouse = new bool[WallID.Count];

	public static bool[] wallDungeon = new bool[WallID.Count];

	public static bool[] wallLight = new bool[WallID.Count];

	public static int[] wallBlend = new int[WallID.Count];

	public static bool[] tileStone = new bool[TileID.Count];

	/// <summary>
	/// If true for the given tile type, tiles of the type are mined using an axe instead of pickaxe.
	/// </summary>
	public static bool[] tileAxe = new bool[TileID.Count];

	public static bool[] tileHammer = new bool[TileID.Count];

	/// <summary>
	/// If true for the given tile type, tiles of the type will be destroyed if in contact with water. <see cref="P:Terraria.ObjectData.TileObjectData.WaterDeath" /> supersedes this if a <see cref="T:Terraria.ObjectData.TileObjectData" /> is available.
	/// </summary>
	public static bool[] tileWaterDeath = new bool[TileID.Count];

	/// <summary>
	/// If true for the given tile type, tiles of the type will be destroyed if in contact with lava. <see cref="P:Terraria.ObjectData.TileObjectData.LavaDeath" /> supersedes this if a <see cref="T:Terraria.ObjectData.TileObjectData" /> is available. Use <see cref="F:Terraria.Main.tileObsidianKill" /> instead if the tile should only be killed by obsidian forming over it.
	/// </summary>
	public static bool[] tileLavaDeath = new bool[TileID.Count];

	public static bool[] tileTable = new bool[TileID.Count];

	public static bool[] tileBlockLight = new bool[TileID.Count];

	public static bool[] tileNoSunLight = new bool[TileID.Count];

	public static bool[] tileDungeon = new bool[TileID.Count];

	/// <summary>
	/// If true for the given tile type, tiles will be drawn much brighter and give off additional dust if the player is under the effects of the Spelunker buff, magic lantern, or similar effect. 
	/// </summary>
	public static bool[] tileSpelunker = new bool[TileID.Count];

	public static bool[] tileSolidTop = new bool[TileID.Count];

	public static bool[] tileSolid = new bool[TileID.Count];

	public static bool[] tileBouncy = new bool[TileID.Count];

	/// <summary>
	/// The priority of this tile in relation to the Metal Detector. The tile with the highest priority in range will show the corresponding map entry. The <see href="https://terraria.wiki.gg/wiki/Metal_Detector">Metal Detector wiki page</see> lists existing values to use as reference.
	/// </summary>
	public static short[] tileOreFinderPriority = new short[TileID.Count];

	public static byte[] tileLargeFrames = new byte[TileID.Count];

	public static byte[] wallLargeFrames = new byte[WallID.Count];

	public static bool[] tileRope = new bool[TileID.Count];

	public static bool[] tileBrick = new bool[TileID.Count];

	public static bool[] tileMoss = new bool[TileID.Count];

	public static bool[] tileNoAttach = new bool[TileID.Count];

	public static bool[] tileNoFail = new bool[TileID.Count];

	public static bool[] tileCracked = new bool[TileID.Count];

	/// <summary>
	/// If true for the given tile type, tiles of the type will be destroyed if obsidian would generate at it's location because of lava and water mixing. Automatically set to true if <see cref="F:Terraria.Main.tileLavaDeath" /> is true. Many tiles are immune to lava but break if obsidian kills it, such as Statues and Anvils.
	/// </summary>
	public static bool[] tileObsidianKill = new bool[TileID.Count];

	/// <summary> Set to true if this is not a typical Terrain tile. Terrain tiles are 1x1 tiles that automatically adjust their frame values to nearby tiles. They don't have a TileObjectData.
	/// <br /> All non-1x1 tiles should set this to true. All 1x1 tiles that have a TileObjectData or that should preserve frame data should set this to true. </summary>
	public static bool[] tileFrameImportant = new bool[TileID.Count];

	public static bool[] tilePile = new bool[TileID.Count];

	public static bool[] tileBlendAll = new bool[TileID.Count];

	public static short[] tileGlowMask = new short[TileID.Count];

	public static bool[] tileContainer = new bool[TileID.Count];

	public static bool[] tileSign = new bool[TileID.Count];

	public static bool[][] tileMerge = new bool[TileID.Count][];

	public static int cageFrames = 25;

	public static bool critterCage;

	public static int[] bunnyCageFrame = new int[cageFrames];

	public static int[] bunnyCageFrameCounter = new int[cageFrames];

	public static int[] squirrelCageFrame = new int[cageFrames];

	public static int[] squirrelCageFrameCounter = new int[cageFrames];

	public static int[] squirrelCageFrameOrange = new int[cageFrames];

	public static int[] squirrelCageFrameCounterOrange = new int[cageFrames];

	public static int[] mallardCageFrame = new int[cageFrames];

	public static int[] mallardCageFrameCounter = new int[cageFrames];

	public static int[] duckCageFrame = new int[cageFrames];

	public static int[] duckCageFrameCounter = new int[cageFrames];

	public static int[] grebeCageFrame = new int[cageFrames];

	public static int[] grebeCageFrameCounter = new int[cageFrames];

	public static int[] seagullCageFrame = new int[cageFrames];

	public static int[] seagullCageFrameCounter = new int[cageFrames];

	public static int[] birdCageFrame = new int[cageFrames];

	public static int[] birdCageFrameCounter = new int[cageFrames];

	public static int[] redBirdCageFrame = new int[cageFrames];

	public static int[] redBirdCageFrameCounter = new int[cageFrames];

	public static int[] blueBirdCageFrame = new int[cageFrames];

	public static int[] blueBirdCageFrameCounter = new int[cageFrames];

	public static int[] macawCageFrame = new int[cageFrames];

	public static int[] macawCageFrameCounter = new int[cageFrames];

	public static byte[,] butterflyCageMode = new byte[9, cageFrames];

	public static int[,] butterflyCageFrame = new int[9, cageFrames];

	public static int[,] butterflyCageFrameCounter = new int[9, cageFrames];

	public static int[,] dragonflyJarFrameCounter = new int[7, cageFrames];

	public static int[,] dragonflyJarFrame = new int[7, cageFrames];

	public static int[,] scorpionCageFrame = new int[2, cageFrames];

	public static int[,] scorpionCageFrameCounter = new int[2, cageFrames];

	public static int[] snailCageFrame = new int[cageFrames];

	public static int[] snailCageFrameCounter = new int[cageFrames];

	public static int[] snail2CageFrame = new int[cageFrames];

	public static int[] snail2CageFrameCounter = new int[cageFrames];

	public static byte[] fishBowlFrameMode = new byte[cageFrames];

	public static int[] fishBowlFrame = new int[cageFrames];

	public static int[] fishBowlFrameCounter = new int[cageFrames];

	public static int[] lavaFishBowlFrame = new int[cageFrames];

	public static int[] lavaFishBowlFrameCounter = new int[cageFrames];

	public static int[] frogCageFrame = new int[cageFrames];

	public static int[] frogCageFrameCounter = new int[cageFrames];

	public static int[] mouseCageFrame = new int[cageFrames];

	public static int[] mouseCageFrameCounter = new int[cageFrames];

	public static int[] turtleCageFrame = new int[cageFrames];

	public static int[] turtleCageFrameCounter = new int[cageFrames];

	public static int[] fairyJarFrame = new int[cageFrames];

	public static int[] fairyJarFrameCounter = new int[cageFrames];

	public static byte[,] jellyfishCageMode = new byte[3, cageFrames];

	public static int[,] jellyfishCageFrame = new int[3, cageFrames];

	public static int[,] jellyfishCageFrameCounter = new int[3, cageFrames];

	public static int[] wormCageFrame = new int[cageFrames];

	public static int[] wormCageFrameCounter = new int[cageFrames];

	public static int[] maggotCageFrame = new int[cageFrames];

	public static int[] maggotCageFrameCounter = new int[cageFrames];

	public static int[] ratCageFrame = new int[cageFrames];

	public static int[] ratCageFrameCounter = new int[cageFrames];

	public static int[] ladybugCageFrame = new int[cageFrames];

	public static int[] ladybugCageFrameCounter = new int[cageFrames];

	public static int[] penguinCageFrame = new int[cageFrames];

	public static int[] penguinCageFrameCounter = new int[cageFrames];

	public static int[] waterStriderCageFrame = new int[cageFrames];

	public static int[] waterStriderCageFrameCounter = new int[cageFrames];

	public static int[] seahorseCageFrame = new int[cageFrames];

	public static int[] seahorseCageFrameCounter = new int[cageFrames];

	public static int[,] slugCageFrame = new int[3, cageFrames];

	public static int[,] slugCageFrameCounter = new int[3, cageFrames];

	public static int[] owlCageFrame = new int[cageFrames];

	public static int[] owlCageFrameCounter = new int[cageFrames];

	public static int[] grasshopperCageFrame = new int[cageFrames];

	public static int[] grasshopperCageFrameCounter = new int[cageFrames];

	public static bool[] tileSand = new bool[TileID.Count];

	/// <summary>If true, indicates that a tile has a flame texture that will draw over the tile. Modded tiles should not use this. <see cref="M:Terraria.ModLoader.ModBlockType.PostDraw(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch)" /> can be used to manually draw a flame texture.</summary>
	public static bool[] tileFlame = new bool[TileID.Count];

	/// <summary>
	/// Used to denote an NPC as being catchable by bug nets and similar.<br />
	/// Contrary to its name, this array isn't actually used for catching logic at all.<br />
	/// It is instead used to determine if an NPC can be released back into the world after being caught.<br />
	/// These NPC will be forced <see cref="F:Terraria.NPC.friendly" /> for 1.5 seconds if naturally spawned.<br />
	/// </summary>
	public static bool[] npcCatchable = new bool[NPCID.Count];

	public static int[] tileFrame = new int[TileID.Count];

	public static int[] tileFrameCounter = new int[TileID.Count];

	public static byte[] wallFrame = new byte[WallID.Count];

	public static byte[] wallFrameCounter = new byte[WallID.Count];

	public static int[] backgroundWidth = new int[maxBackgrounds];

	public static int[] backgroundHeight = new int[maxBackgrounds];

	public static HairstyleUnlocksHelper Hairstyles = new HairstyleUnlocksHelper();

	public static bool tilesLoaded = false;

	public static WorldMap Map;

	public static Tilemap tile = new Tilemap((ushort)maxTilesX, (ushort)maxTilesY);

	public static Dust[] dust = new Dust[6001];

	public static Star[] star = new Star[400];

	public static Item[] item = new Item[401];

	public static int[] timeItemSlotCannotBeReusedFor = new int[401];

	public static NPC[] npc = new NPC[201];

	public static Gore[] gore = new Gore[601];

	public static Rain[] rain = new Rain[maxRain + 1];

	public static Projectile[] projectile = new Projectile[1001];

	public static int[,] projectileIdentity = new int[256, 1001];

	public static CombatText[] combatText = new CombatText[100];

	public static PopupText[] popupText = new PopupText[20];

	public static Chest[] chest = new Chest[8000];

	public static Sign[] sign = new Sign[1000];

	public static int[] itemFrame = new int[401];

	public static int[] itemFrameCounter = new int[401];

	public static DrawAnimation[] itemAnimations = new DrawAnimation[ItemID.Count];

	private static DrawAnimation _coinOnWorldAnimation = new DrawAnimationVertical(6, 8);

	private static DrawAnimation _monkStaffT3OnWorldAnimation = new DrawAnimationVertical(5, 3);

	public static List<int> itemAnimationsRegistered = new List<int>();

	/// <summary>
	/// The position of the top left corner of the screen in world coordinates. Modify in <see cref="M:Terraria.ModLoader.ModSystem.ModifyScreenPosition" /> or <see cref="M:Terraria.ModLoader.ModPlayer.ModifyScreenPosition" />. Also consider using <c>Main.instance.CameraModifiers.Add(CameraModifier);</c> as shown in ExampleMods MinionBossBody for screen shakes.<br /><br />
	/// When manually drawing, subtracting Main.screenPosition from the world position of the thing being drawn will result in the correct screen coordinates for use in <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.Draw methods. When drawing tiles or walls, an additional offset calculated as <c>Vector2 zero = Main.drawToScreen? Vector2.Zero : new Vector2(Main.offScreenRange, Main.offScreenRange);</c> needs to be added to the coordinates.
	/// </summary>
	public static Vector2 screenPosition;

	public static Vector2 screenLastPosition;

	public static int screenWidth = 1152;

	public static int screenHeight = 864;

	public static bool screenMaximized = true;

	public static bool screenBorderless = true;

	public static int screenBorderlessPendingResizes;

	public static int teamNamePlateDistance = 2000;

	public static int multiplayerNPCSmoothingRange = 300;

	public static bool Setting_UseReducedMaxLiquids = false;

	public static int PlayerOverheadChatMessageDisplayTime = 400;

	public static object CurrentInputTextTakerOverride;

	public static bool drawingPlayerChat;

	public static bool chatRelease;

	public static string chatText = "";

	public static bool inputTextEnter;

	public static bool inputTextEscape;

	public static float[] hotbarScale = new float[10] { 1f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f };

	/// <summary>
	/// A value that oscillates between 190 and 255. It is used to drive the slight pulsing color effect seen in much of the text shown in-game. The value is used to create <see cref="T:Microsoft.Xna.Framework.Color" />s by passing in this value as either all 4 parameters or just the alpha parameter.<br /><br />
	/// <see cref="P:Terraria.Main.MouseTextColorReal" /> can be used to access the typical pulsing white <see cref="T:Microsoft.Xna.Framework.Color" /> value.
	/// </summary>
	public static byte mouseTextColor;

	public static int mouseTextColorChange = 1;

	public static bool mouseLeftRelease;

	public static bool mouseRightRelease;

	public static bool playerInventory;

	public static int stackSplit;

	public static bool preventStackSplitReset;

	public static int stackCounter;

	public static int timesTriedToFastStack;

	public static int stackDelay = 7;

	public static int superFastStack;

	public static Item mouseItem = new Item();

	public static Item guideItem = new Item();

	public static Item reforgeItem = new Item();

	public static float inventoryScale = 0.75f;

	public static bool hasFocus;

	public static Point rulerLineDisplayValues = default(Point);

	public static bool recFastScroll;

	public static bool recBigList;

	public static int recStart;

	public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];

	public static int[] availableRecipe = new int[Recipe.maxRecipes];

	public static float[] availableRecipeY = new float[Recipe.maxRecipes];

	public static int numAvailableRecipes;

	public static int focusRecipe;

	/// <summary>
	/// The index in <see cref="F:Terraria.Main.player" /> of this client's Player.
	/// <br /> If this is <c>255</c>, this client is the server.
	/// </summary>
	public static int myPlayer;

	public static Player[] player = new Player[256];

	public static Player[] playerVisualClone = new Player[256];

	public static bool[] countsAsHostForGameplay = new bool[256];

	public static int spawnTileX;

	public static int spawnTileY;

	public static bool npcChatRelease;

	public static bool editSign;

	public static bool editChest;

	public static bool blockInput = false;

	public static string blockKey;

	public static string defaultChestName;

	public static string npcChatText;

	public static bool npcChatFocus1;

	public static bool npcChatFocus2;

	public static bool npcChatFocus3;

	public static bool npcChatFocus4;

	public static int oldNPCShop;

	public static int npcChatCornerItem;

	public Chest[] shop = new Chest[2];

	public static ItemShopSellbackHelper shopSellbackHelper;

	public static int[] travelShop;

	public static List<string> anglerWhoFinishedToday;

	public static bool anglerQuestFinished;

	public static int anglerQuest;

	public static int[] anglerQuestItemNetIDs;

	public static AmbienceServer AmbienceServer;

	public static ItemDropDatabase ItemDropsDB;

	public static BestiaryDatabase BestiaryDB;

	public static ItemDropResolver ItemDropSolver;

	public static BestiaryUnlocksTracker BestiaryTracker;

	public static UIBestiaryTest BestiaryUI;

	public static TeleportPylonsSystem PylonSystem;

	public static ShopHelper ShopHelper;

	public static GolfState LocalGolfState;

	public static DroneCameraTracker DroneCameraTracker;

	public static WorkshopPublishingIndicator WorkshopPublishingIndicator;

	public static IssueReportsIndicator IssueReporterIndicator;

	public static bool Support4K;

	public static float MinimumZoomComparerX;

	public static float MinimumZoomComparerY;

	private static int _renderTargetMaxSize;

	private static GraphicsProfile _selectedGraphicsProfile;

	private static GraphicsProfile _currentGraphicsProfile;

	public static int LogicCheckScreenWidth;

	public static int LogicCheckScreenHeight;

	private static WorldPreparationState _worldPreparationState;

	public static float temporaryGUIScaleSlider;

	public static bool temporaryGUIScaleSliderUpdate;

	public static bool InGuideCraftMenu;

	public static bool InReforgeMenu;

	public static Item HoverItem;

	private static int backSpaceCount;

	private static float backSpaceRate;

	public static string motd;

	public static bool toggleFullscreen;

	public static int numDisplayModes;

	public static int[] displayWidth;

	public static int[] displayHeight;

	public static bool gameMenu;

	public static bool menuBGChangedDay;

	public static bool menuBGChangedNight;

	public static bool lockMenuBGChange;

	private static int maxLoadPlayer;

	private static int maxLoadWorld;

	public static List<PlayerFileData> PlayerList;

	public static PlayerFileData ActivePlayerFileData;

	public static Player PendingPlayer;

	public static List<WorldFileData> WorldList;

	public static WorldFileData ActiveWorldFileData;

	public static string WorldPath;

	public static string CloudWorldPath;

	public static string PlayerPath;

	public static string CloudPlayerPath;

	public static Preferences Configuration;

	public static Preferences InputProfiles;

	public static KeyboardState inputText;

	public static KeyboardState oldInputText;

	public static int PendingResolutionWidth;

	public static int PendingResolutionHeight;

	public static bool PendingBorderlessState;

	public static int invasionType;

	public static double invasionX;

	public static int invasionSize;

	public static int invasionDelay;

	public static int invasionWarn;

	public static int invasionSizeStart;

	public static bool invasionProgressNearInvasion;

	public static int invasionProgressMode;

	public static int invasionProgressIcon;

	public static int invasionProgress;

	public static int invasionProgressMax;

	public static int invasionProgressWave;

	public static int invasionProgressDisplayLeft;

	public static float invasionProgressAlpha;

	public static bool HasInteractibleObjectThatIsNotATile;

	public int currentNPCShowingChatBubble = -1;

	public static int[] npcFrameCount;

	public static Dictionary<int, byte> npcLifeBytes;

	public static bool mouseExit;

	public static float exitScale;

	public static bool mouseReforge;

	public static float reforgeScale;

	/// <summary>
	/// Used internally for network syncing. Use <see cref="P:Terraria.Main.LocalPlayer" /> to access the player for the local user.
	/// </summary>
	public static Player clientPlayer;

	public static string getIP;

	public static string getPort;

	public static bool menuMultiplayer;

	public static bool menuServer;

	/// <summary>
	/// Denotes the current network mode: <b>0</b> for single player client, <b>1</b> for multiplayer client, and <b>2</b> for server.<br />
	/// Using <see cref="T:Terraria.ID.NetmodeID" /> entries instead of 0, 1, and 2 will greatly enhance code readability.<br />
	/// Modders must properly use netMode to selectively run code. Following examples in ExampleMod and Terraria code as well as reading the <see href="https://github.com/tModLoader/tModLoader/wiki/Basic-Netcode">Basic Netcode guide</see> are the best way to learn how to use netMode correctly.<br />
	/// </summary>
	public static int netMode;

	private static int _targetNetMode;

	private static bool _hasPendingNetmodeChange;

	public const int MaxTimeout = 120;

	public static int netPlayCounter;

	public static int lastNPCUpdate;

	public static int lastItemUpdate;

	public static int maxNPCUpdates;

	public static int maxItemUpdates;

	public static string cUp;

	public static string cLeft;

	public static string cDown;

	public static string cRight;

	public static string cJump;

	public static string cThrowItem;

	public static string cHeal;

	public static string cMana;

	public static string cBuff;

	public static string cHook;

	public static string cTorch;

	public static string cInv;

	public static string cSmart;

	public static string cMount;

	public static string cFavoriteKey;

	public static bool cSmartCursorModeIsToggleAndNotHold;

	public static bool SmartCursorWanted_Mouse;

	public static bool SmartCursorWanted_GamePad;

	public static bool SmartCursorShowing;

	public static int SmartCursorX;

	public static int SmartCursorY;

	public static bool SmartInteractShowingGenuine;

	public static bool SmartInteractShowingFake;

	public static int SmartInteractX;

	public static int SmartInteractY;

	public static int SmartInteractNPC;

	public static int SmartInteractProj;

	public static bool SmartInteractPotionOfReturn;

	public static List<Point> SmartInteractTileCoords;

	public static List<Point> SmartInteractTileCoordsSelected;

	public static int TileInteractionLX;

	public static int TileInteractionLY;

	public static int TileInteractionHX;

	public static int TileInteractionHY;

	public static int cursorOverride;

	public static int signHover;

	public static string cMapZoomIn;

	public static string cMapZoomOut;

	public static string cMapAlphaUp;

	public static string cMapAlphaDown;

	public static string cMapFull;

	public static string cMapStyle;

	public static Keys FavoriteKey;

	public static ColorSlidersSet mouseColorSlider;

	public static ColorSlidersSet mouseBorderColorSlider;

	public static Color mouseColor;

	public static Color cursorColor;

	public static int cursorColorDirection;

	public static float cursorAlpha;

	public static float cursorScale;

	public static bool signBubble;

	public static int signX;

	public static int signY;

	public static bool hideUI;

	public static bool releaseUI;

	public static FrameSkipMode FrameSkipMode;

	public static bool terrariasFixedTiming;

	private int splashCounter;

	public List<int> DrawCacheNPCsMoonMoon = new List<int>(200);

	public List<int> DrawCacheNPCsOverPlayers = new List<int>(200);

	public List<int> DrawCacheNPCProjectiles = new List<int>(200);

	public List<int> DrawCacheNPCsBehindNonSolidTiles = new List<int>(200);

	public List<int> DrawCacheProjsBehindNPCsAndTiles = new List<int>(1000);

	public List<int> DrawCacheProjsBehindNPCs = new List<int>(1000);

	public List<int> DrawCacheProjsBehindProjectiles = new List<int>(1000);

	public List<int> DrawCacheProjsOverWiresUI = new List<int>(1000);

	public List<int> DrawCacheProjsOverPlayers = new List<int>(1000);

	public List<int> DrawCacheFirstFractals = new List<int>(1000);

	public static ParticleRenderer ParticleSystem_World_OverPlayers;

	public static ParticleRenderer ParticleSystem_World_BehindPlayers;

	private static WindowStateController _windowMover;

	public static AnchoredEntitiesCollection sittingManager;

	public static AnchoredEntitiesCollection sleepingManager;

	public static MinimapFrameManager MinimapFrameManagerInstance;

	public static PlayerResourceSetsManager ResourceSetsManager;

	private static bool shouldSetDefaultUIScale;

	private static float newDefaultUIScale;

	public static bool IsInTheMiddleOfLoadingSettings;

	public static Point LastLoadedResolution;

	public static bool startFullscreen;

	public static string oldStatusText;

	public static string autoGenFileLocation;

	public static bool autoShutdown;

	private uint previousExecutionState;

	public static bool fastForwardTimeToDawn;

	public static int sundialCooldown;

	public static bool fastForwardTimeToDusk;

	public static int moondialCooldown;

	private static Stopwatch splashTimer;

	public static GeneralIssueReporter IssueReporter;

	private JArray _lastLoadedPacks;

	public static bool PreventUpdatingTargets;

	private IEnumerator _gameContentLoadProcess;

	public static bool _shouldUseWindyDayMusic;

	public static bool _shouldUseStormMusic;

	private int lastMusicPlayed = -1;

	public bool playOldTile;

	private static float _minWind;

	private static float _maxWind;

	private static float _minRain;

	private static float _maxRain;

	public static float ambientWaterfallX;

	public static float ambientWaterfallY;

	public static float ambientWaterfallStrength;

	public static float ambientLavafallX;

	public static float ambientLavafallY;

	public static float ambientLavafallStrength;

	public static float ambientLavaX;

	public static float ambientLavaY;

	public static float ambientLavaStrength;

	public static int ambientCounter;

	public static IChatMonitor chatMonitor;

	public static int ProjectileUpdateLoopIndex;

	public static GameTipsDisplay gameTips;

	private Stopwatch _worldUpdateTimeTester = new Stopwatch();

	public SpelunkerProjectileHelper SpelunkerProjectileHelper = new SpelunkerProjectileHelper();

	public ChumBucketProjectileHelper ChumBucketProjectileHelper = new ChumBucketProjectileHelper();

	public static int weatherVaneBobframe;

	private float logoRotation;

	private float logoRotationDirection = -1f;

	private float logoRotationSpeed = 1f;

	private float logoScale = 1f;

	private float logoScaleDirection = 1f;

	private float logoScaleSpeed = 1f;

	private static int maxMenuItems;

	private float[] menuItemScale = new float[maxMenuItems];

	private int focusMenu = -1;

	private int selectedMenu = -1;

	private int selectedMenu2 = -1;

	public static int selectedPlayer;

	public static int selectedWorld;

	public static int menuMode;

	public static int menuSkip;

	private static bool _needsLanguageSelect;

	public static Item tooltipPrefixComparisonItem;

	private MouseTextCache _mouseTextCache;

	public int textBlinkerCount;

	public int textBlinkerState;

	public static string newWorldName;

	private static Vector3 shimmerShine;

	public static int[] specX;

	public static int[] specY;

	public TilePaintSystemV2 TilePaintSystem;

	public TileDrawing TilesRenderer;

	public WallDrawing WallsRenderer;

	private AmbientWindSystem _ambientWindSys = new AmbientWindSystem();

	private List<Player> _playersThatDrawBehindNPCs = new List<Player>(255);

	private List<Player> _playersThatDrawAfterProjectiles = new List<Player>(255);

	private List<DrawData> _voidLensData = new List<DrawData>();

	private List<DrawData> _voidLensDataSillouette = new List<DrawData>();

	private List<DrawData> _voidLensDataSillouette2 = new List<DrawData>();

	private static BlendState _multiplyBlendState;

	private static StardewValleyAnimation _stardewAnimation;

	private static UnifiedRandom _tempSeededRandom;

	private TextDisplayCache _textDisplayCache = new TextDisplayCache();

	private List<int> _occupantsListToDrawNPCHouses = new List<int>();

	private List<int> _npcsWithBannersToDraw = new List<int>();

	private bool _imeToggle;

	private static int _lastHoveredLoadoutIndex;

	private List<int> _npcTypesThatAlreadyDrewAHead = new List<int>();

	internal int[] _npcIndexWhoHoldsHeadIndex = new int[NPCHeadID.Count];

	private static List<string> _requiredObjecsForCraftingText;

	private static bool _preventCraftingBecauseClickWasUsedToChangeFocusedRecipe;

	private static int _currentRecipeBeingCrafted;

	private static bool hidePVPIcons;

	public static bool HoveringOverAnNPC;

	public static string hoverItemName;

	public static Color inventoryBack;

	public static bool mouseText;

	private static int mH;

	public static int rare;

	public static int hairStart;

	private static int oldHairStyle;

	private static Color oldHairColor;

	public static int selClothes;

	private static Color[] oldClothesColor;

	private static int oldClothesStyle;

	public static int interactedDresserTopLeftX;

	public static int interactedDresserTopLeftY;

	public static Player dresserInterfaceDummy;

	private bool _needToSetupDrawInterfaceLayers = true;

	private List<GameInterfaceLayer> _gameInterfaceLayers;

	public static GameTime _drawInterfaceGameTime;

	private byte instrumentMouseFixHack;

	private static bool _settingsButtonIsPushedToSide;

	private static bool _MouseOversCanClear;

	private static Vector2 _itemIconCacheScreenPosition;

	private static int _itemIconCacheSelectedItemID;

	private static int _itemIconCacheTime;

	private static bool _cannotDrawAccessoriesHorizontally;

	public static Color selColor;

	public static int focusColor;

	public static int colorDelay;

	public static int setKey;

	public static int bgScroll;

	public static bool autoPass;

	public static int menuFocus;

	public static float hBar;

	public static float sBar;

	public static float lBar;

	public static float aBar;

	private int grabColorSlider;

	public static bool blockMouse;

	private static bool _blockFancyUIWhileLoading;

	private bool[] menuWide = new bool[100];

	public static float GamepadCursorAlpha;

	private bool _needsMenuUIRecalculation;

	public static float MenuXMovement;

	public RejectionMenuInfo RejectionMenuInfo;

	private float _splashFrameCount;

	private bool quickSplash;

	private float hellBlackBoxBottom;

	public static float InitialMapScale;

	public static float MapScale;

	private static int _minimapTopRightAnchorOffsetTowardsLeft;

	private static int _minimapTopRightAnchorOffsetTowardsBottom;

	public static bool cancelWormHole;

	private static VertexColors _glowPaintColors;

	protected List<Tuple<int, int, ushort>> DrawWiresSpecialTiles = new List<Tuple<int, int, ushort>>();

	public static float lightning;

	private static float lightningDecay;

	private static float lightningSpeed;

	private static int thunderDelay;

	public static int thunderDistance;

	private static string[] MonolithFilterNames;

	private static string[] MonolithSkyNames;

	private static float backgroundLayerTransitionSpeed;

	public static float atmo;

	internal static float bgScale;

	internal static int bgWidthScaled;

	public static Color ColorOfTheSkies;

	internal static Color ColorOfSurfaceBackgroundsBase;

	internal static Color ColorOfSurfaceBackgroundsModified;

	internal float screenOff;

	internal float scAdj;

	private float cTop;

	private bool _isDrawingOrUpdating;

	public static List<INeedRenderTargetContent> ContentThatNeedsRenderTargets;

	private static bool _cameraPanHasBlackTransition;

	public CameraModifierStack CameraModifiers = new CameraModifierStack();

	public static bool starGame;

	public static int starsHit;

	private static string _oldNetplayStatusText;

	private static TextSnippet[] _netplayStatusTextSnippets;

	public static double ladyBugRainBoost;

	private static bool _canShowMeteorFall;

	private static bool _isResizingAndRemakingTargets;

	private static SlotId waterfallSoundSlot;

	private static SlotId lavafallSoundSlot;

	public static int DefaultDamageVariationPercent;

	public static int soundError;

	public static int ambientError;

	public static bool mouseMiddle;

	public static bool mouseXButton1;

	public static bool mouseXButton2;

	public static bool mouseMiddleRelease;

	public static bool mouseXButton1Release;

	public static bool mouseXButton2Release;

	public static Point16 trashSlotOffset;

	public static bool hidePlayerCraftingMenu;

	public static bool showServerConsole;

	public static bool Support8K;

	public static double desiredWorldEventsUpdateRate;

	/// <summary>
	/// Representation that dictates the actual amount of "world event updates" that happen in a given GAME tick. This number increases/decreases in direct tandem with
	/// <seealso cref="F:Terraria.Main.desiredWorldEventsUpdateRate" />.
	/// </summary>
	public static int worldEventUpdates;

	private double _partialWorldEventUpdates;

	public static List<TitleLinkButton> tModLoaderTitleLinks;

	private static bool hairstylesUpdatedForThisInteraction;

	private static Player _currentPlayerOverride;

	private static PosixSignalRegistration SIGINTHandler;

	private static PosixSignalRegistration SIGTERMHandler;

	public static string statusText
	{
		get
		{
			return _statusText;
		}
		set
		{
			Logging.LogStatusChange(_statusText, value);
			_statusText = value;
		}
	}

	public static UnifiedRandom rand
	{
		get
		{
			return _rand ?? (_rand = new UnifiedRandom());
		}
		set
		{
			_rand = value;
		}
	}

	public static bool CanUpdateGameplay { get; private set; }

	public static Vector2 ViewPosition => screenPosition + GameViewMatrix.Translation;

	public static Vector2 ViewSize => new Vector2((float)screenWidth, (float)screenHeight) / GameViewMatrix.Zoom;

	public static Matrix CurrentWantedZoomMatrix => _currentWantedZoomMatrix;

	public static Matrix UIScaleMatrix => _uiScaleMatrix;

	public static float UIScaleWanted => _uiScaleWanted;

	public static float UIScale
	{
		get
		{
			return _uiScaleUsed;
		}
		set
		{
			//IL_0025: Unknown result type (might be due to invalid IL or missing references)
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			_uiScaleWanted = value;
			float uIScaleMax = instance.UIScaleMax;
			if (value > uIScaleMax)
			{
				value = uIScaleMax;
			}
			_uiScaleUsed = value;
			_uiScaleMatrix = Matrix.CreateScale(value, value, 1f);
		}
	}

	public float UIScaleMax
	{
		get
		{
			int realScreenWidth = PlayerInput.RealScreenWidth;
			float val2 = Math.Min(val2: (float)PlayerInput.RealScreenHeight / 600f, val1: (float)realScreenWidth / 800f);
			return Math.Max(1f, val2);
		}
	}

	public static bool RenderTargetsRequired
	{
		get
		{
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			if (!(GameZoomTarget > 1f))
			{
				return GameViewMatrix.TransformationMatrix.M11 > 1f;
			}
			return true;
		}
	}

	public static bool IsItRaining => cloudAlpha > 0f;

	public static bool ThickMouse => MouseBorderColor != Color.Transparent;

	public static bool GamepadDisableCursorItemIcon
	{
		get
		{
			if (PlayerInput.UsingGamepad)
			{
				return GamepadDisableCursorItemIconInner;
			}
			return false;
		}
	}

	public static string SavePath => Program.SavePath;

	public static GameModeData GameModeInfo => _currentGameModeInfo;

	public static int GameMode
	{
		get
		{
			if (ActiveWorldFileData == null)
			{
				return 0;
			}
			return ActiveWorldFileData.GameMode;
		}
		set
		{
			if (ActiveWorldFileData != null && RegisteredGameModes.TryGetValue(value, out var value2))
			{
				ActiveWorldFileData.GameMode = value;
				_currentGameModeInfo = value2;
			}
		}
	}

	public static bool specialSeedWorld
	{
		get
		{
			if (!drunkWorld && !getGoodWorld && !tenthAnniversaryWorld && !notTheBeesWorld && !dontStarveWorld && !remixWorld && !noTrapsWorld)
			{
				return zenithWorld;
			}
			return true;
		}
	}

	public static bool masterMode
	{
		get
		{
			if (ActiveWorldFileData == null)
			{
				return false;
			}
			if (_overrideForMasterMode.HasValue)
			{
				return _overrideForMasterMode.Value;
			}
			if (getGoodWorld && _currentGameModeInfo.IsExpertMode)
			{
				return true;
			}
			return _currentGameModeInfo.IsMasterMode;
		}
	}

	public static bool expertMode
	{
		get
		{
			if (ActiveWorldFileData == null)
			{
				return false;
			}
			if (_overrideForExpertMode.HasValue)
			{
				return _overrideForExpertMode.Value;
			}
			if (getGoodWorld)
			{
				return true;
			}
			return _currentGameModeInfo.IsExpertMode;
		}
	}

	public static AchievementManager Achievements => instance._achievements;

	public static AchievementAdvisor AchievementAdvisor => instance._achievementAdvisor;

	public static ulong UnpausedUpdateSeed { get; private set; }

	public static Effect screenShader => ScreenShaderRef.Value;

	public static Effect pixelShader => PixelShaderRef.Value;

	public static Effect vertexPixelShader => VertexPixelShaderRef.Value;

	public static Effect tileShader => TileShaderRef.Value;

	[Old("Transform is deprecated. Please use GameViewMatrix & GUIViewMatrix")]
	public static Matrix Transform => GameViewMatrix.TransformationMatrix;

	/// <summary>
	/// Fetches the position of the mouse cursor on the screen.<br />
	/// Useful for making things visually happen near the cursor.<br />
	/// </summary>
	public static Vector2 MouseScreen => new Vector2((float)mouseX, (float)mouseY);

	/// <summary>
	/// Fetches the position of the mouse cursor in the world.<br />
	/// Useful for making things functionally happen near the cursor, such as projectile or NPC spawns.<br />
	/// </summary>
	public static Vector2 MouseWorld
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0046: Unknown result type (might be due to invalid IL or missing references)
			Vector2 result = MouseScreen + screenPosition;
			if (player[myPlayer].gravDir == -1f)
			{
				result.Y = screenPosition.Y + (float)screenHeight - (float)mouseY;
			}
			return result;
		}
	}

	public static INetDiagnosticsUI ActiveNetDiagnosticsUI
	{
		get
		{
			if (_activeNetDiagnosticsUI == null)
			{
				INetDiagnosticsUI activeNetDiagnosticsUI = (dedServ ? ((INetDiagnosticsUI)new EmptyDiagnosticsUI()) : ((INetDiagnosticsUI)new NetDiagnosticsUI()));
				_activeNetDiagnosticsUI = activeNetDiagnosticsUI;
			}
			return _activeNetDiagnosticsUI;
		}
	}

	public static uint GameUpdateCount => _gameUpdateCount;

	public static SamplerState DefaultSamplerState
	{
		get
		{
			if (!drawToScreen)
			{
				return SamplerState.PointClamp;
			}
			return SamplerState.LinearClamp;
		}
	}

	/// <summary>
	/// The y-coordinate of the top of the underworld, in tile coordinates.
	/// </summary>
	/// <remarks>Player in this layer will have <see cref="!:Player.ZoneUnderworld" /> set to <see langword="true" />.</remarks>
	public static int UnderworldLayer => maxTilesY - 200;

	public static float WindForVisuals => windSpeedCurrent;

	/// <summary>
	/// Retrieves the <see cref="T:Terraria.Player" /> object for the local user. Shorthand for <c><see cref="F:Terraria.Main.player" />[<see cref="F:Terraria.Main.myPlayer" />]</c>.<br />
	/// Many gameplay elements such as recipes, UI, TownNPC chat, and Biome logic are only executed locally, <see cref="P:Terraria.Main.LocalPlayer" /> is suitable for code relating to those situations. If the hook has a <see cref="T:Terraria.Player" /> parameter, it is likely not suitable to use <see cref="P:Terraria.Main.LocalPlayer" /> in it.
	/// </summary>
	public static Player LocalPlayer => player[myPlayer];

	public static CreativeUnlocksTracker LocalPlayerCreativeTracker => player[myPlayer].creativeTracker;

	public static int npcShop { get; internal set; }

	public static string playerPathName => ActivePlayerFileData.Path;

	public static string worldPathName => ActiveWorldFileData.Path;

	public static bool SmartCursorWanted
	{
		get
		{
			if (PlayerInput.SteamDeckIsUsed && PlayerInput.SettingsForUI.CurrentCursorMode == CursorMode.Mouse)
			{
				return SmartCursorWanted_Mouse;
			}
			if (PlayerInput.UsingGamepad)
			{
				return SmartCursorWanted_GamePad;
			}
			return SmartCursorWanted_Mouse;
		}
	}

	public static bool SmartCursorIsUsed => SmartCursorWanted;

	public static bool HasSmartInteractTarget
	{
		get
		{
			if (SmartInteractNPC == -1 && (SmartInteractX == -1 || SmartInteractY == -1))
			{
				return SmartInteractProj != -1;
			}
			return true;
		}
	}

	public static bool IsItAHappyWindyDay => _shouldUseWindyDayMusic;

	public static bool IsItStorming => _shouldUseStormMusic;

	public static bool WindyEnoughForKiteDrops => Math.Abs(windSpeedTarget) >= _maxWind;

	public static bool ShouldPVPDraw => netMode == 1;

	public int RecommendedEquipmentAreaPushUp
	{
		get
		{
			if (player[myPlayer].CanDemonHeartAccessoryBeShown())
			{
				return 610 + PlayerInput.SettingsForUI.PushEquipmentAreaUp.ToInt() * 30;
			}
			return 600;
		}
	}

	public static bool ShouldDrawInfoIconsHorizontally
	{
		get
		{
			if (_cannotDrawAccessoriesHorizontally)
			{
				return false;
			}
			if (mapStyle == 1 && mapEnabled && screenHeight < 820)
			{
				return false;
			}
			if (mapStyle != 1 && screenWidth < 855)
			{
				return false;
			}
			if (PlayerInput.UsingGamepad)
			{
				return false;
			}
			return true;
		}
	}

	public static bool CanShowInfoAccs
	{
		get
		{
			if (npcChatText == null || npcChatText == "" || player[myPlayer].chest > -1)
			{
				return player[myPlayer].sign < 0;
			}
			return false;
		}
	}

	public static Point ScreenSize => new Point(screenWidth, screenHeight);

	public static bool IsGraphicsDeviceAvailable
	{
		get
		{
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Invalid comparison between Unknown and I4
			if (!((Game)instance).GraphicsDevice.IsDisposed)
			{
				return (int)((Game)instance).GraphicsDevice.GraphicsDeviceStatus == 0;
			}
			return false;
		}
	}

	/// <summary>
	/// A color that cycles through the colors like Rainbow Brick does.
	/// </summary>
	public static Color DiscoColor => new Color(DiscoR, DiscoG, DiscoB);

	/// <summary>
	/// The typical pulsing white color used for much of the text shown in-game.
	/// </summary>
	public static Color MouseTextColorReal => new Color((float)(int)mouseTextColor / 255f, (float)(int)mouseTextColor / 255f, (float)(int)mouseTextColor / 255f, (float)(int)mouseTextColor / 255f);

	public static bool PlayerLoaded => CurrentFrameFlags.ActivePlayersCount > 0;

	/// <summary>
	/// A replacement for `Main.LocalPlayer` which respects whichever player is currently running hooks on the main thread.
	/// This works in the player select screen, and in multiplayer (when other players are updating)
	/// </summary>
	public static Player CurrentPlayer => _currentPlayerOverride ?? LocalPlayer;

	public static event Action OnEnginePreload;

	public static event Action<Vector2> OnResolutionChanged;

	public static event Action OnEngineLoad;

	public static event Action OnTickForThirdPartySoftwareOnly;

	public static event Action OnTickForInternalCodeOnly;

	public static event Action<GameTime> OnPreDraw;

	public static event Action<GameTime> OnPostDraw;

	public static event Action<Vector2, float> OnPostFullscreenMapDraw;

	public static event Action OnRenderTargetsReleased;

	public static event ResolutionChangeEvent OnRenderTargetsInitialized;

	public static void ToggleGameplayUpdates(bool state)
	{
		CanUpdateGameplay = state;
	}

	public static void SetRecommendedZoomContext(Matrix matrix)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		_currentWantedZoomMatrix = matrix;
	}

	public static void FindAnnouncementBoxStatus()
	{
		AnnouncementBoxDisabled = Program.LaunchParameters.ContainsKey("-disableannouncementbox");
		if (Program.LaunchParameters.TryGetValue("-announcementboxrange", out var value) && int.TryParse(value, out var result))
		{
			AnnouncementBoxRange = result;
		}
	}

	public static bool CanPlayCreditsRoll()
	{
		if (!gameMenu && LocalPlayer.hasCreditsSceneMusicBox)
		{
			return true;
		}
		if (gameMenu && menuMode == 3000)
		{
			return true;
		}
		return CreditsRollEvent.IsEventOngoing;
	}

	public static void SetCameraLerp(float lerp, int time)
	{
		cameraLerp = lerp;
		cameraLerpTimer = 0;
		cameraLerpTimeToggle = time;
		cameraGamePadLerp = false;
	}

	public static void SetCameraGamepadLerp(float lerp)
	{
		_ = cameraLerp;
	}

	public static Vector2 ReverseGravitySupport(Vector2 pos, float height = 0f)
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (player[myPlayer].gravDir != -1f)
		{
			return pos;
		}
		pos.Y = (float)screenHeight - pos.Y - height;
		return pos;
	}

	public static Point ReverseGravitySupport(Point pos, int height = 0)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (player[myPlayer].gravDir != -1f)
		{
			return pos;
		}
		pos.Y = screenHeight - pos.Y - height;
		return pos;
	}

	public static Rectangle ReverseGravitySupport(Rectangle box)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (player[myPlayer].gravDir != -1f)
		{
			return box;
		}
		box.Y = screenHeight - box.Y - box.Height;
		return box;
	}

	public void SetMouseNPC(int index, int type)
	{
		mouseNPCIndex = index;
		mouseNPCType = type;
	}

	public void SetMouseNPC_ToHousingQuery()
	{
		SetMouseNPC(-1, 0);
	}

	[DllImport("User32")]
	private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);

	[DllImport("User32")]
	private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

	[DllImport("User32")]
	private static extern int GetMenuItemCount(IntPtr hWnd);

	[DllImport("kernel32.dll")]
	public static extern IntPtr LoadLibrary(string dllToLoad);

	public static MoonPhase GetMoonPhase()
	{
		return (MoonPhase)moonPhase;
	}

	public static Vector2 DrawPlayerItemPos(float gravdir, int itemtype)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8c: Unknown result type (might be due to invalid IL or missing references)
		float num = 10f;
		GetItemDrawFrame(itemtype, out var _, out var r);
		Vector2 result = r.Size() / 2f;
		switch (itemtype)
		{
		case 95:
			num = 6f;
			result.Y += 2f * gravdir;
			break;
		case 1295:
			num = 4f;
			break;
		case 3611:
			num = 2f;
			break;
		case 3350:
			num = 2f;
			break;
		case 2624:
			num = 4f;
			break;
		case 3018:
			num = 2f;
			break;
		case 3007:
			num = 4f;
			result.Y -= 1f * gravdir;
			break;
		case 3107:
			num = 4f;
			result.Y += 2f * gravdir;
			break;
		case 3008:
			num = -7f;
			result.Y += 2f * gravdir;
			break;
		case 1255:
			num = 6f;
			result.Y += 0f * gravdir;
			break;
		case 2269:
			num = 2f;
			result.Y += 2f * gravdir;
			break;
		case 1265:
			num = -8f;
			result.Y += 4f * gravdir;
			break;
		case 2272:
			num = 0f;
			result.Y += 4f * gravdir;
			break;
		case 3029:
			num = 4f;
			break;
		case 4381:
			num = 4f;
			break;
		case 2796:
			num = -28f;
			result.Y += 2f * gravdir;
			break;
		case 2797:
			num = 0f;
			break;
		case 2610:
			num = 0f;
			break;
		case 2623:
			num = -30f;
			result.Y -= 4f * gravdir;
			break;
		case 3546:
			num = -14f;
			result.Y -= 6f * gravdir;
			break;
		case 1835:
			num = -2f;
			result.Y += 2f * gravdir;
			break;
		default:
			switch (itemtype)
			{
			case 2624:
				num = -4f;
				break;
			case 3859:
				num = -2f;
				break;
			case 2888:
				num = 6f;
				break;
			case 2223:
				num = 2f;
				result.Y -= 2f * gravdir;
				break;
			case 1782:
				num = 0f;
				result.Y += 4f * gravdir;
				break;
			case 1929:
				num = 0f;
				result.Y += 2f * gravdir;
				break;
			case 2270:
				num = -4f;
				break;
			case 1784:
				num = 0f;
				result.Y += 4f * gravdir;
				break;
			case 1000:
				num = 6f;
				result.Y += 0f * gravdir;
				break;
			case 1178:
				num = 4f;
				result.Y += 0f * gravdir;
				break;
			case 1319:
				num = 0f;
				result.Y += 0f * gravdir;
				break;
			case 1297:
				num = -8f;
				result.Y += 0f * gravdir;
				break;
			case 1121:
				num = 6f;
				result.Y -= 2f * gravdir;
				break;
			case 1314:
				num = 2f;
				break;
			case 1258:
				num = 2f;
				result.Y -= 2f * gravdir;
				break;
			case 1155:
				num = -10f;
				result.Y -= 2f * gravdir;
				break;
			case 1156:
				num = -2f;
				break;
			case 4703:
				num = -3f;
				result.Y -= 2f * gravdir;
				break;
			case 5117:
				num = -1f;
				break;
			case 96:
				num = -8f;
				result.Y += 2f * gravdir;
				break;
			case 1870:
				num = -8f;
				result.Y += 2f * gravdir;
				break;
			case 1260:
				num = -8f;
				result.Y += 2f * gravdir;
				break;
			case 1254:
				num = -6f;
				result.Y += 2f * gravdir;
				break;
			case 98:
				num = -5f;
				result.Y -= 2f * gravdir;
				break;
			case 534:
				num = -2f;
				result.Y += 1f * gravdir;
				break;
			case 679:
				num = 0f;
				result.Y += 2f * gravdir;
				break;
			case 964:
				num = 0f;
				result.Y += 0f * gravdir;
				break;
			case 533:
				num = -7f;
				result.Y -= 2f * gravdir;
				break;
			case 1553:
				num = -10f;
				result.Y -= 2f * gravdir;
				break;
			case 506:
				num = 0f;
				result.Y -= 2f * gravdir;
				break;
			case 1910:
				num = 0f;
				result.Y -= 2f * gravdir;
				break;
			case 494:
			case 508:
				num = -2f;
				break;
			case 434:
				num = 0f;
				result.Y -= 2f * gravdir;
				break;
			case 514:
				num = 0f;
				result.Y += 3f * gravdir;
				break;
			case 435:
			case 436:
			case 481:
			case 578:
			case 1187:
			case 1194:
			case 1201:
			case 1229:
				num = -2f;
				result.Y -= 2f * gravdir;
				break;
			case 197:
				num = -5f;
				result.Y += 4f * gravdir;
				break;
			case 4060:
				num = -2f;
				result.Y += 4f * gravdir;
				break;
			case 126:
				num = 4f;
				result.Y += 4f * gravdir;
				break;
			case 800:
				num = 4f;
				result.Y += 2f * gravdir;
				break;
			case 127:
				num = 4f;
				result.Y += 2f * gravdir;
				break;
			case 157:
				num = 6f;
				result.Y += 2f * gravdir;
				break;
			case 160:
				num = -8f;
				break;
			case 164:
			case 219:
				num = 0f;
				result.Y += 2f * gravdir;
				break;
			case 165:
			case 272:
				num = 4f;
				result.Y += 4f * gravdir;
				break;
			case 3870:
				num = 4f;
				result.Y += 4f * gravdir;
				break;
			case 266:
				num = 0f;
				result.Y += 2f * gravdir;
				break;
			case 281:
				num = 6f;
				result.Y -= 6f * gravdir;
				break;
			case 986:
				num = 6f;
				result.Y -= 10f * gravdir;
				break;
			case 682:
				num = 4f;
				break;
			case 4953:
				num = -4f;
				break;
			case 758:
				num -= 20f;
				result.Y += 0f * gravdir;
				break;
			case 759:
				num -= 18f;
				result.Y += 2f * gravdir;
				break;
			case 760:
				num -= 12f;
				result.Y += 2f * gravdir;
				break;
			case 1946:
				num -= 12f;
				result.Y += 2f * gravdir;
				break;
			case 779:
				num = 0f;
				result.Y += 2f * gravdir;
				break;
			case 5134:
				num = 0f;
				result.Y += 2f * gravdir;
				break;
			case 905:
				num = -5f;
				result.Y += 0f * gravdir;
				break;
			case 930:
				num = 4f;
				result.Y += 2f * gravdir;
				break;
			case 3788:
				num = 2f;
				result.Y += 2f * gravdir;
				break;
			}
			break;
		}
		result.X = num;
		ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
		return result;
	}

	public static void SetupTileMerge()
	{
		int count = TileID.Count;
		tileMerge = new bool[count][];
		for (int i = 0; i < tileMerge.Length; i++)
		{
			tileMerge[i] = new bool[count];
		}
		SetupAllBlockMerge();
	}

	internal static void SetupAllBlockMerge()
	{
		for (int i = 0; i < TileLoader.TileCount; i++)
		{
			bool flag = i == 10 || i == 387 || i == 541;
			bool? flag2 = TileID.Sets.BlockMergesWithMergeAllBlockOverride[i];
			if (flag2.HasValue)
			{
				bool mergeOverride = flag2.GetValueOrDefault();
				TileID.Sets.BlockMergesWithMergeAllBlock[i] = mergeOverride;
				continue;
			}
			if (TileLoader.IsClosedDoor(i))
			{
				flag = true;
			}
			TileID.Sets.BlockMergesWithMergeAllBlock[i] = !flag && tileSolid[i] && !tileSolidTop[i];
		}
	}

	/// <summary>
	/// Registers an animation for an item type to draw inside UI (not world or held item on player).
	/// To enable its animation in the world, use ItemID.Sets.AnimatesAsSoul in conjunction with this
	/// </summary>
	/// <param name="index">Item type</param>
	/// <param name="animation">Draw animation</param>
	public static void RegisterItemAnimation(int index, DrawAnimation animation)
	{
		if (!itemAnimationsRegistered.Contains(index))
		{
			itemAnimationsRegistered.Add(index);
		}
		itemAnimations[index] = animation;
	}

	public static void InitializeItemAnimations()
	{
		for (int i = 0; i < itemAnimations.Length; i++)
		{
			itemAnimations[i] = null;
		}
		itemAnimationsRegistered.Clear();
		RegisterItemAnimation(3581, new DrawAnimationVertical(4, 4));
		RegisterItemAnimation(3580, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(75, new DrawAnimationVertical(5, 8)
		{
			PingPong = true
		});
		RegisterItemAnimation(575, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(547, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(520, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(548, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(521, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(549, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(3453, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(3454, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(3455, new DrawAnimationVertical(6, 4));
		RegisterItemAnimation(4068, new DrawAnimationVertical(6, 4)
		{
			NotActuallyAnimating = true
		});
		RegisterItemAnimation(4069, new DrawAnimationVertical(6, 4)
		{
			NotActuallyAnimating = true
		});
		RegisterItemAnimation(4070, new DrawAnimationVertical(6, 4)
		{
			NotActuallyAnimating = true
		});
		for (int j = 0; j < ItemID.Sets.IsFood.Length; j++)
		{
			if (ItemID.Sets.IsFood[j])
			{
				RegisterItemAnimation(j, new DrawAnimationVertical(int.MaxValue, 3));
			}
		}
	}

	public static void AnglerQuestSwap()
	{
		if (netMode == 1)
		{
			return;
		}
		anglerWhoFinishedToday.Clear();
		anglerQuestFinished = false;
		bool flag = NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || hardMode || NPC.downedSlimeKing || NPC.downedQueenBee;
		bool flag2 = true;
		while (flag2)
		{
			flag2 = false;
			anglerQuest = rand.Next(anglerQuestItemNetIDs.Length);
			int num = anglerQuestItemNetIDs[anglerQuest];
			if (num == 2454 && (!hardMode || WorldGen.crimson))
			{
				flag2 = true;
			}
			if (num == 2457 && WorldGen.crimson)
			{
				flag2 = true;
			}
			if (num == 2462 && !hardMode)
			{
				flag2 = true;
			}
			if (num == 2463 && (!hardMode || !WorldGen.crimson))
			{
				flag2 = true;
			}
			if (num == 2465 && !hardMode)
			{
				flag2 = true;
			}
			if (num == 2468 && !hardMode)
			{
				flag2 = true;
			}
			if (num == 2471 && !hardMode)
			{
				flag2 = true;
			}
			if (num == 2473 && !hardMode)
			{
				flag2 = true;
			}
			if (num == 2477 && !WorldGen.crimson)
			{
				flag2 = true;
			}
			if (num == 2480 && !hardMode)
			{
				flag2 = true;
			}
			if (num == 2483 && !hardMode)
			{
				flag2 = true;
			}
			if (num == 2484 && !hardMode)
			{
				flag2 = true;
			}
			if (num == 2485 && WorldGen.crimson)
			{
				flag2 = true;
			}
			if ((num == 2476 || num == 2453 || num == 2473) && !flag)
			{
				flag2 = true;
			}
			ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
		}
		NetMessage.SendAnglerQuest(-1);
	}

	public void UpdateParticleSystems()
	{
		ParticleSystem_World_OverPlayers.Update();
		ParticleSystem_World_BehindPlayers.Update();
	}

	public static void TrySetPreparationState(WorldPreparationState state)
	{
		if (state == WorldPreparationState.ProcessingData)
		{
			_worldPreparationState = state;
		}
	}

	public static void UpdateWorldPreparationState()
	{
		if (netMode != 1)
		{
			_worldPreparationState = WorldPreparationState.Ready;
			return;
		}
		if (netMode == 1 && gameMenu && _worldPreparationState == WorldPreparationState.Ready)
		{
			_worldPreparationState = WorldPreparationState.AwaitingData;
		}
		if (netMode == 1 && _worldPreparationState == WorldPreparationState.ProcessingData)
		{
			_worldPreparationState = WorldPreparationState.Ready;
			gameMenu = false;
			FixUIScale();
			ChatHelper.ShowCachedMessages();
			ChatHelper.ClearDelayedMessagesCache();
		}
	}

	public static bool InSmartCursorHighlightArea(int x, int y, out bool actuallySelected)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		actuallySelected = SmartInteractTileCoordsSelected.Contains(new Point(x, y));
		if (hideUI)
		{
			return false;
		}
		if (Collision.InTileBounds(x, y, TileInteractionLX, TileInteractionLY, TileInteractionHX, TileInteractionHY))
		{
			return SmartInteractTileCoords.Contains(new Point(x, y));
		}
		return false;
	}

	public static void LoadWorlds()
	{
		WorldList.Clear();
		if (!Utils.TryCreatingDirectory(WorldPath))
		{
			return;
		}
		string[] files = Directory.GetFiles(WorldPath, "*.wld");
		int num = Math.Min(files.Length, maxLoadWorld);
		if (dedServ)
		{
			for (int i = 0; i < num; i++)
			{
				WorldFileData allMetadata = WorldFile.GetAllMetadata(files[i], cloudSave: false);
				if (allMetadata != null)
				{
					WorldList.Add(allMetadata);
				}
				else
				{
					WorldList.Add(WorldFileData.FromInvalidWorld(files[i], cloudSave: false));
				}
			}
		}
		else
		{
			for (int j = 0; j < num; j++)
			{
				WorldFileData allMetadata2 = WorldFile.GetAllMetadata(files[j], cloudSave: false);
				if (allMetadata2 != null)
				{
					WorldList.Add(allMetadata2);
				}
				else
				{
					WorldList.Add(WorldFileData.FromInvalidWorld(files[j], cloudSave: false));
				}
			}
		}
		if (SocialAPI.Cloud != null)
		{
			foreach (string item in from path in SocialAPI.Cloud.GetFiles()
				where path.StartsWith(CloudWorldPath, StringComparison.CurrentCultureIgnoreCase) && path.EndsWith(".wld", StringComparison.CurrentCultureIgnoreCase)
				select path)
			{
				WorldFileData allMetadata3 = WorldFile.GetAllMetadata(item, cloudSave: true);
				if (allMetadata3 != null)
				{
					WorldList.Add(allMetadata3);
				}
				else
				{
					WorldList.Add(WorldFileData.FromInvalidWorld(item, cloudSave: true));
				}
			}
		}
		WorldList.Sort(WorldListSortMethod);
	}

	private static int WorldListSortMethod(WorldFileData data1, WorldFileData data2)
	{
		if (data1 == null && data2 == null)
		{
			return 0;
		}
		if (data1 == null || data1.Name == null)
		{
			return 1;
		}
		if (data2 == null || data2.Name == null)
		{
			return -1;
		}
		return data1.Name.CompareTo(data2.Name);
	}

	public static void LoadPlayers()
	{
		PlayerList.Clear();
		if (!Utils.TryCreatingDirectory(PlayerPath))
		{
			return;
		}
		string[] files = Directory.GetFiles(PlayerPath, "*.plr");
		int num = Math.Min(maxLoadPlayer, files.Length);
		for (int i = 0; i < num; i++)
		{
			PlayerFileData fileData = Player.GetFileData(files[i], cloudSave: false);
			if (fileData != null)
			{
				PlayerList.Add(fileData);
			}
		}
		if (SocialAPI.Cloud != null)
		{
			foreach (string item in from path in SocialAPI.Cloud.GetFiles()
				where path.StartsWith(CloudPlayerPath, StringComparison.CurrentCultureIgnoreCase) && path.EndsWith(".plr", StringComparison.CurrentCultureIgnoreCase)
				select path)
			{
				PlayerFileData fileData2 = Player.GetFileData(item, cloudSave: true);
				if (fileData2 != null)
				{
					PlayerList.Add(fileData2);
				}
			}
		}
		PlayerList.Sort(PlayerListSortMethod);
	}

	private static int PlayerListSortMethod(PlayerFileData data1, PlayerFileData data2)
	{
		return data1.Name.CompareTo(data2.Name);
	}

	protected void OpenRecent()
	{
		try
		{
			if (!File.Exists(SavePath + Path.DirectorySeparatorChar + "servers.dat"))
			{
				return;
			}
			using FileStream input = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Open);
			using BinaryReader binaryReader = new BinaryReader(input);
			binaryReader.ReadInt32();
			for (int i = 0; i < 10; i++)
			{
				recentWorld[i] = binaryReader.ReadString();
				recentIP[i] = binaryReader.ReadString();
				recentPort[i] = binaryReader.ReadInt32();
			}
		}
		catch
		{
		}
	}

	public static void SaveRecent()
	{
		Utils.TryCreatingDirectory(SavePath);
		try
		{
			if (File.Exists(SavePath + Path.DirectorySeparatorChar + "servers.dat"))
			{
				File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
			}
		}
		catch
		{
		}
		try
		{
			using FileStream output = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Create);
			using BinaryWriter binaryWriter = new BinaryWriter(output);
			binaryWriter.Write(279);
			for (int i = 0; i < 10; i++)
			{
				binaryWriter.Write(recentWorld[i]);
				binaryWriter.Write(recentIP[i]);
				binaryWriter.Write(recentPort[i]);
			}
		}
		catch
		{
		}
	}

	public static bool SaveSettings()
	{
		Preferences configuration = Configuration;
		configuration.Clear();
		configuration.Put("ResetDefaultUIScale", false);
		configuration.Put("SmartCursorToggle", cSmartCursorModeIsToggleAndNotHold);
		configuration.Put("MapEnabled", mapEnabled);
		configuration.Put("InvasionBarMode", invasionProgressMode);
		configuration.Put("AutoSave", autoSave);
		configuration.Put("AutoPause", autoPause);
		configuration.Put("Language", Language.ActiveCulture.Name);
		configuration.Put("PlacementPreview", placementPreview);
		configuration.Put("GoreVisualsAllowed", ChildSafety.Disabled);
		configuration.Put("WorldRollbacksToKeep", WorldRollingBackupsCountToKeep);
		configuration.Put("TeamNameplateDistance", teamNamePlateDistance);
		configuration.Put("MultiplayerNPCSmoothingRange", multiplayerNPCSmoothingRange);
		configuration.Put("VolumeSound", soundVolume);
		configuration.Put("VolumeAmbient", ambientVolume);
		configuration.Put("VolumeMusic", musicVolume);
		configuration.Put("UnlockMusicSwap", TOWMusicUnlocked);
		configuration.Put("UseExperimentalFeatures", UseExperimentalFeatures);
		configuration.Put("KeyFavoriteModifier", cFavoriteKey);
		configuration.Put("Fullscreen", graphics.IsFullScreen);
		configuration.Put("WindowMaximized", screenMaximized);
		configuration.Put("WindowBorderless", screenBorderless);
		int num = graphics.PreferredBackBufferWidth;
		int num2 = graphics.PreferredBackBufferHeight;
		if (IsInTheMiddleOfLoadingSettings)
		{
			if (LastLoadedResolution.X != 0)
			{
				num = LastLoadedResolution.X;
			}
			if (LastLoadedResolution.Y != 0)
			{
				num2 = LastLoadedResolution.Y;
			}
		}
		configuration.Put("DisplayWidth", num);
		configuration.Put("DisplayHeight", num2);
		configuration.Put("GraphicsQuality", qaStyle);
		configuration.Put("BackgroundEnabled", BackgroundEnabled);
		configuration.Put("FrameSkipMode", FrameSkipMode);
		configuration.Put("LightingMode", Lighting.Mode);
		configuration.Put("BackgroundParallax", bgScroll);
		configuration.Put("ShowItemText", showItemText);
		configuration.Put("LastLaunchedVersion", 279);
		configuration.Put("ClientUUID", clientUUID);
		configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
		configuration.Put("UseSmartAxeAfterSmartPickaxe", Player.SmartCursorSettings.SmartAxeAfterPickaxe);
		configuration.Put("SmartCursorHoldCanReleaseMidUse", Player.SmartCursorSettings.SmartCursorHoldCanReleaseMidUse);
		configuration.Put("DisableLeftShiftTrashCan", ItemSlot.Options.DisableLeftShiftTrashCan);
		configuration.Put("DisableQuickTrash", ItemSlot.Options.DisableQuickTrash);
		configuration.Put("HighlightNewItems", ItemSlot.Options.HighlightNewItems);
		configuration.Put("HidePasswords", HidePassword);
		configuration.Put("ReverseUpDownForArmorSetBonuses", ReversedUpDownArmorSetBonuses);
		configuration.Put("MouseShowBuildingGrid", MouseShowBuildingGrid);
		configuration.Put("AllowUnfocusedInputOnGamepad", AllowUnfocusedInputOnGamepad);
		configuration.Put("LockOnPriority", LockOnHelper.UseMode);
		configuration.Put("InvisibleCursorForGamepad", InvisibleCursorForGamepad);
		configuration.Put("GamepadDisableInstructionsDisplay", GamepadDisableInstructionsDisplay);
		configuration.Put("SettingsUnlock_WorldEvil", SettingsUnlock_WorldEvil);
		configuration.Put("SettingsEnabled_MinersWobble", SettingsEnabled_MinersWobble);
		configuration.Put("SettingBlockGamepadsEntirely", SettingBlockGamepadsEntirely);
		configuration.Put("SettingsEnabled_OpaqueBoxBehindTooltips", SettingsEnabled_OpaqueBoxBehindTooltips);
		configuration.Put("SettingDontScaleMainMenuUp", SettingDontScaleMainMenuUp);
		configuration.Put("SettingsEnabled_TilesSwayInWind", SettingsEnabled_TilesSwayInWind);
		configuration.Put("SettingsEnabled_AutoReuseAllItems", SettingsEnabled_AutoReuseAllItems);
		configuration.Put("UseStormEffect", UseStormEffects);
		configuration.Put("UseHeatDistortion", UseHeatDistortion);
		configuration.Put("WaveQuality", WaveQuality);
		configuration.Put("Support4K", Support4K);
		configuration.Put("Support8K", Support8K);
		configuration.Put("MouseColor", new Dictionary<string, byte>
		{
			{
				"R",
				((Color)(ref mouseColor)).R
			},
			{
				"G",
				((Color)(ref mouseColor)).G
			},
			{
				"B",
				((Color)(ref mouseColor)).B
			}
		});
		configuration.Put("MouseBorderColor", new Dictionary<string, byte>
		{
			{
				"R",
				((Color)(ref MouseBorderColor)).R
			},
			{
				"G",
				((Color)(ref MouseBorderColor)).G
			},
			{
				"B",
				((Color)(ref MouseBorderColor)).B
			},
			{
				"A",
				((Color)(ref MouseBorderColor)).A
			}
		});
		configuration.Put("QuickLaunch", SkipAssemblyLoad);
		configuration.Put("Zoom", GameZoomTarget);
		configuration.Put("UIScale", _uiScaleWanted);
		configuration.Put("MapScale", MapScale);
		configuration.Put("FlashIconForEvents", Enum.GetName(typeof(GameNotificationType), _flashNotificationType));
		configuration.Put("Display", _windowMover.ScreenDeviceName);
		configuration.Put("DisplayScreen", _windowMover.ScreenDeviceName);
		configuration.Put("ThrottleWhenInactive", ((Game)instance).InactiveSleepTime != TimeSpan.Zero);
		configuration.Put("DoorAutoOpeningMode", DoorOpeningHelper.PreferenceSettings);
		configuration.Put("HoverControlMode", Player.Settings.HoverControl);
		configuration.Put("WaterfallDrawLimit", instance.waterfallManager.maxWaterfallCount);
		configuration.Put("DisableIntenseVisualEffects", DisableIntenseVisualEffects);
		Terraria.ModLoader.ModLoader.SaveConfiguration();
		if (Configuration.Save())
		{
			return PlayerInput.Save();
		}
		return false;
	}

	protected void CheckBunny()
	{
		try
		{
			if (OperatingSystem.IsWindows())
			{
				RegistryKey currentUser = Registry.CurrentUser;
				currentUser = currentUser.CreateSubKey("Software\\Terraria");
				if (currentUser != null && currentUser.GetValue("Bunny") != null && currentUser.GetValue("Bunny").ToString() == "1")
				{
					runningCollectorsEdition = true;
				}
			}
		}
		catch
		{
			runningCollectorsEdition = false;
		}
	}

	private static void TryPickingDefaultUIScale(float displayHeight)
	{
		if (shouldSetDefaultUIScale)
		{
			newDefaultUIScale = displayHeight / 1080f * 1.1f;
			shouldSetDefaultUIScale = false;
			Configuration.Put("UIScale", newDefaultUIScale);
			Configuration.Save();
		}
	}

	protected void LoadSettings()
	{
		//IL_0e58: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		if (File.Exists(SavePath + Path.DirectorySeparatorChar + "config.dat"))
		{
			OpenLegacySettings();
			if (SaveSettings())
			{
				File.Delete(SavePath + Path.DirectorySeparatorChar + "config.dat");
			}
			return;
		}
		IsInTheMiddleOfLoadingSettings = true;
		Preferences configuration = Configuration;
		configuration.Load();
		int currentValue = 0;
		configuration.Get("LastLaunchedVersion", ref currentValue);
		bool flag = false;
		if (currentValue < 219)
		{
			flag = true;
		}
		if (!flag)
		{
			configuration.Get("ResetDefaultUIScale", ref shouldSetDefaultUIScale);
			configuration.Get("Fullscreen", ref startFullscreen);
			configuration.Get("WindowMaximized", ref screenMaximized);
			configuration.Get("WindowBorderless", ref screenBorderless);
		}
		PendingBorderlessState = screenBorderless;
		screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
		int currentValue5 = graphics.PreferredBackBufferWidth;
		int currentValue6 = graphics.PreferredBackBufferHeight;
		configuration.Get("DisplayWidth", ref currentValue5);
		configuration.Get("DisplayHeight", ref currentValue6);
		SDL_DisplayMode sdlMode = default(SDL_DisplayMode);
		for (int i = 0; i < SDL.SDL_GetNumVideoDisplays(); i++)
		{
			int displayModeIndex = 0;
			while (SDL.SDL_GetDisplayMode(displayModeIndex++, i, ref sdlMode) == 0)
			{
				maxScreenW = Math.Max(sdlMode.w, maxScreenW);
				maxScreenH = Math.Max(sdlMode.h, maxScreenH);
			}
		}
		Logging.tML.Info((object)$"Maximum Resolution is {maxScreenW} x {maxScreenH}");
		_renderTargetMaxSize = maxScreenW + 400 * maxScreenW / 1920;
		LastLoadedResolution = new Point(currentValue5, currentValue6);
		if (!startFullscreen)
		{
			if (PendingBorderlessState)
			{
				screenBorderlessPendingResizes = 1;
			}
			SetDisplayMode(currentValue5, currentValue6, fullscreen: false);
		}
		else
		{
			FullscreenStartup();
		}
		TryPickingDefaultUIScale(graphics.GraphicsDevice.Adapter.CurrentDisplayMode.Height);
		configuration.Get("SmartCursorToggle", ref cSmartCursorModeIsToggleAndNotHold);
		configuration.Get("MapEnabled", ref mapEnabled);
		configuration.Get("InvasionBarMode", ref invasionProgressMode);
		configuration.Get("AutoSave", ref autoSave);
		configuration.Get("AutoPause", ref autoPause);
		_needsLanguageSelect = !configuration.Contains("Language");
		string text = configuration.Get("Language", "en-US");
		int result = 0;
		if (int.TryParse(text, out result))
		{
			LanguageManager.Instance.SetLanguage(result);
			SetTitle();
		}
		else
		{
			LanguageManager.Instance.SetLanguage(text);
			SetTitle();
		}
		configuration.Get("PlacementPreview", ref placementPreview);
		configuration.Get("GoreVisualsAllowed", ref ChildSafety.Disabled);
		configuration.Get("DisableIntenseVisualEffects", ref DisableIntenseVisualEffects);
		if (!flag)
		{
			configuration.Get("VolumeSound", ref soundVolume);
			configuration.Get("VolumeAmbient", ref ambientVolume);
			configuration.Get("VolumeMusic", ref musicVolume);
		}
		configuration.Get("KeyFavoriteModifier", ref cFavoriteKey);
		if (Enum.TryParse<Keys>(cFavoriteKey, out Keys result2))
		{
			FavoriteKey = result2;
		}
		if (!flag)
		{
			configuration.Get("GraphicsQuality", ref qaStyle);
			configuration.Get("BackgroundEnabled", ref BackgroundEnabled);
		}
		if (configuration.GetAllKeys().Contains("FrameSkip"))
		{
			bool currentValue7 = false;
			configuration.Get("FrameSkip", ref currentValue7);
			terrariasFixedTiming = !currentValue7;
			if (terrariasFixedTiming)
			{
				FrameSkipMode = FrameSkipMode.Subtle;
			}
			else
			{
				FrameSkipMode = FrameSkipMode.On;
			}
		}
		int currentValue8 = (int)FrameSkipMode;
		configuration.Get("FrameSkipMode", ref currentValue8);
		if (currentValue8 < 0)
		{
			currentValue8 = 0;
		}
		if (currentValue8 > 2)
		{
			currentValue8 = 2;
		}
		FrameSkipMode = (FrameSkipMode)currentValue8;
		int currentValue9 = (int)Lighting.Mode;
		if (!flag)
		{
			configuration.Get("LightingMode", ref currentValue9);
		}
		Lighting.Mode = (LightMode)currentValue9;
		configuration.Get("UnlockMusicSwap", ref TOWMusicUnlocked);
		configuration.Get("Parallax", ref caveParallax);
		bgScroll = (int)((1f - caveParallax) * 500f);
		configuration.Get("BackgroundParallax", ref bgScroll);
		caveParallax = 1f - (float)bgScroll / 500f;
		configuration.Get("ShowItemText", ref showItemText);
		configuration.Get("ClientUUID", ref clientUUID);
		configuration.Get("UseSmartCursorForCommonBlocks", ref Player.SmartCursorSettings.SmartBlocksEnabled);
		configuration.Get("UseSmartAxeAfterSmartPickaxe", ref Player.SmartCursorSettings.SmartAxeAfterPickaxe);
		configuration.Get("SmartCursorHoldCanReleaseMidUse", ref Player.SmartCursorSettings.SmartCursorHoldCanReleaseMidUse);
		if (!flag)
		{
			configuration.Get("DisableLeftShiftTrashCan", ref ItemSlot.Options.DisableLeftShiftTrashCan);
		}
		if (!flag)
		{
			configuration.Get("DisableQuickTrash", ref ItemSlot.Options.DisableQuickTrash);
		}
		configuration.Get("HidePasswords", ref HidePassword);
		configuration.Get("HighlightNewItems", ref ItemSlot.Options.HighlightNewItems);
		configuration.Get("ReverseUpDownForArmorSetBonuses", ref ReversedUpDownArmorSetBonuses);
		configuration.Get("MouseShowBuildingGrid", ref MouseShowBuildingGrid);
		configuration.Get("AllowUnfocusedInputOnGamepad", ref AllowUnfocusedInputOnGamepad);
		configuration.Get("GamepadDisableInstructionsDisplay", ref GamepadDisableInstructionsDisplay);
		configuration.Get("SettingDontScaleMainMenuUp", ref SettingDontScaleMainMenuUp);
		configuration.Get("WorldRollbacksToKeep", ref WorldRollingBackupsCountToKeep);
		configuration.Get("TeamNameplateDistance", ref teamNamePlateDistance);
		if (currentValue < 230)
		{
			configuration.Get("MultiplayerNPCSmoothingRange", ref multiplayerNPCSmoothingRange);
		}
		configuration.Get("UseStormEffect", ref UseStormEffects);
		configuration.Get("UseHeatDistortion", ref UseHeatDistortion);
		configuration.Get("WaveQuality", ref WaveQuality);
		if (WaveQuality > 3)
		{
			WaveQuality = 3;
		}
		if (WaveQuality < 0)
		{
			WaveQuality = 0;
		}
		Dictionary<string, byte> currentValue10 = new Dictionary<string, byte>();
		configuration.Get("MouseColor", ref currentValue10);
		if (currentValue10.TryGetValue("R", out var value))
		{
			((Color)(ref mouseColor)).R = value;
		}
		if (currentValue10.TryGetValue("G", out value))
		{
			((Color)(ref mouseColor)).G = value;
		}
		if (currentValue10.TryGetValue("B", out value))
		{
			((Color)(ref mouseColor)).B = value;
		}
		currentValue10.Clear();
		configuration.Get("MouseBorderColor", ref currentValue10);
		if (currentValue10.TryGetValue("R", out value))
		{
			((Color)(ref MouseBorderColor)).R = value;
		}
		if (currentValue10.TryGetValue("G", out value))
		{
			((Color)(ref MouseBorderColor)).G = value;
		}
		if (currentValue10.TryGetValue("B", out value))
		{
			((Color)(ref MouseBorderColor)).B = value;
		}
		if (currentValue10.TryGetValue("A", out value))
		{
			((Color)(ref MouseBorderColor)).A = value;
		}
		configuration.Get("QuickLaunch", ref SkipAssemblyLoad);
		if (!flag)
		{
			GameZoomTarget = configuration.Get("Zoom", 1f);
		}
		if (!flag)
		{
			UIScale = configuration.Get("UIScale", Platform.Get<IWindowService>().GetScaling());
		}
		if (newDefaultUIScale > 0f)
		{
			UIScale = newDefaultUIScale;
			newDefaultUIScale = 0f;
		}
		MapScale = MathHelper.Clamp(configuration.Get("MapScale", InitialMapScale), 0.5f, 1f);
		int currentValue11 = -1;
		configuration.Get("LockOnPriority", ref currentValue11);
		if (currentValue11 < 0)
		{
			currentValue11 = 0;
		}
		if (currentValue11 > 2)
		{
			currentValue11 = 2;
		}
		LockOnHelper.UseMode = (LockOnHelper.LockOnMode)currentValue11;
		if (LockOnHelper.UseMode == LockOnHelper.LockOnMode.FocusTarget)
		{
			LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
		}
		configuration.Get("InvisibleCursorForGamepad", ref InvisibleCursorForGamepad);
		if (Enum.TryParse<GameNotificationType>(configuration.Get("FlashIconForEvents", "All"), out var result3))
		{
			_flashNotificationType = result3;
		}
		if (!flag)
		{
			string screenDeviceName = configuration.Get("DisplayScreen", "");
			_windowMover.TryMovingToScreen(screenDeviceName);
			bool flag2 = configuration.Get("ThrottleWhenInactive", defaultValue: true);
			((Game)this).InactiveSleepTime = TimeSpan.FromMilliseconds(flag2 ? 20 : 0);
		}
		if (!flag)
		{
			configuration.Get("Support4K", ref Support4K);
		}
		configuration.Get("UseExperimentalFeatures", ref UseExperimentalFeatures);
		configuration.Get("SettingsUnlock_WorldEvil", ref SettingsUnlock_WorldEvil);
		configuration.Get("SettingsEnabled_MinersWobble", ref SettingsEnabled_MinersWobble);
		configuration.Get("SettingBlockGamepadsEntirely", ref SettingBlockGamepadsEntirely);
		configuration.Get("SettingsEnabled_OpaqueBoxBehindTooltips", ref SettingsEnabled_OpaqueBoxBehindTooltips);
		configuration.Get("SettingsEnabled_TilesSwayInWind", ref SettingsEnabled_TilesSwayInWind);
		configuration.Get("SettingsEnabled_AutoReuseAllItems", ref SettingsEnabled_AutoReuseAllItems);
		int currentValue12 = (int)DoorOpeningHelper.PreferenceSettings;
		configuration.Get("DoorAutoOpeningMode", ref currentValue12);
		DoorOpeningHelper.PreferenceSettings = (DoorOpeningHelper.DoorAutoOpeningPreference)currentValue12;
		int currentValue2 = (int)Player.Settings.HoverControl;
		configuration.Get("HoverControlMode", ref currentValue2);
		Player.Settings.HoverControl = (Player.Settings.HoverControlMode)currentValue2;
		if (currentValue <= 147)
		{
			terrariasFixedTiming = !terrariasFixedTiming;
		}
		if (currentValue <= 162)
		{
			bool currentValue3 = false;
			uint currentValue4 = 0u;
			configuration.Get("ThickMouseEdges", ref currentValue3);
			if (currentValue3)
			{
				configuration.Get("ThickMouseEdgesPackedColor", ref currentValue4);
				((Color)(ref MouseBorderColor)).PackedValue = currentValue4;
				((Color)(ref mouseColor)).R = configuration.Get("MouseColorR", ((Color)(ref mouseColor)).R);
				((Color)(ref mouseColor)).G = configuration.Get("MouseColorG", ((Color)(ref mouseColor)).G);
				((Color)(ref mouseColor)).B = configuration.Get("MouseColorB", ((Color)(ref mouseColor)).B);
			}
		}
		if (currentValue <= 162)
		{
			configuration.Get("KeyUp", ref cUp);
			configuration.Get("KeyDown", ref cDown);
			configuration.Get("KeyLeft", ref cLeft);
			configuration.Get("KeyRight", ref cRight);
			configuration.Get("KeyJump", ref cJump);
			configuration.Get("KeyThrowItem", ref cThrowItem);
			configuration.Get("KeyInventory", ref cInv);
			configuration.Get("KeyQuickHeal", ref cHeal);
			configuration.Get("KeyQuickMana", ref cMana);
			configuration.Get("KeyQuickBuff", ref cBuff);
			configuration.Get("KeyUseHook", ref cHook);
			configuration.Get("KeyAutoSelect", ref cTorch);
			configuration.Get("KeySmartCursor", ref cSmart);
			configuration.Get("KeyMount", ref cMount);
			configuration.Get("KeyMapStyle", ref cMapStyle);
			configuration.Get("KeyFullscreenMap", ref cMapFull);
			configuration.Get("KeyMapZoomIn", ref cMapZoomIn);
			configuration.Get("KeyMapZoomOut", ref cMapZoomOut);
			configuration.Get("KeyMapAlphaUp", ref cMapAlphaUp);
			configuration.Get("KeyMapAlphaDown", ref cMapAlphaDown);
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Up"] = new List<string> { cUp };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Down"] = new List<string> { cDown };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Left"] = new List<string> { cLeft };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Right"] = new List<string> { cRight };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Jump"] = new List<string> { cJump };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Throw"] = new List<string> { cThrowItem };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Inventory"] = new List<string> { cInv };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickHeal"] = new List<string> { cHeal };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickMana"] = new List<string> { cMana };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickBuff"] = new List<string> { cBuff };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Grapple"] = new List<string> { cHook };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["SmartSelect"] = new List<string> { cTorch };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["SmartCursor"] = new List<string> { cSmart };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickMount"] = new List<string> { cMount };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapStyle"] = new List<string> { cMapStyle };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapFull"] = new List<string> { cMapFull };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapZoomIn"] = new List<string> { cMapZoomIn };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapZoomOut"] = new List<string> { cMapZoomOut };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapAlphaUp"] = new List<string> { cMapAlphaUp };
			PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapAlphaDown"] = new List<string> { cMapAlphaDown };
		}
		Terraria.ModLoader.ModLoader.LoadConfiguration();
		PlayerInput.Load();
		if (currentValue < 165)
		{
			try
			{
				PlayerInput.ManageVersion_1_3();
			}
			catch (Exception)
			{
			}
		}
		mouseColorSlider.SetHSL(mouseColor);
		mouseBorderColorSlider.SetHSL(MouseBorderColor);
		mouseBorderColorSlider.Alpha = (float)(int)((Color)(ref MouseBorderColor)).A / 255f;
		_ = DateTime.UtcNow;
		if (BuildInfo.IsPreview && Terraria.ModLoader.ModLoader.LastPreviewFreezeNotificationSeen != BuildInfo.tMLVersion.MajorMinor())
		{
			Terraria.ModLoader.ModLoader.PreviewFreezeNotification = true;
		}
		if (currentValue != 279 || Terraria.ModLoader.ModLoader.LastLaunchedTModLoaderVersion != BuildInfo.tMLVersion || (BuildInfo.Purpose == BuildInfo.BuildPurpose.Dev && Terraria.ModLoader.ModLoader.LastLaunchedTModLoaderAlphaSha != BuildInfo.CommitSHA))
		{
			Terraria.ModLoader.ModLoader.MigrateSettings();
			SaveSettings();
		}
		IsInTheMiddleOfLoadingSettings = false;
	}

	protected void OpenLegacySettings()
	{
		try
		{
			if (!File.Exists(SavePath + Path.DirectorySeparatorChar + "config.dat"))
			{
				return;
			}
			using FileStream input = new FileStream(SavePath + Path.DirectorySeparatorChar + "config.dat", FileMode.Open);
			using BinaryReader binaryReader = new BinaryReader(input);
			int num = binaryReader.ReadInt32();
			if (num >= 68)
			{
				if (num >= 67)
				{
					clientUUID = binaryReader.ReadString();
				}
				bool flag = binaryReader.ReadBoolean();
				((Color)(ref mouseColor)).R = binaryReader.ReadByte();
				((Color)(ref mouseColor)).G = binaryReader.ReadByte();
				((Color)(ref mouseColor)).B = binaryReader.ReadByte();
				soundVolume = binaryReader.ReadSingle();
				if (num >= 90)
				{
					ambientVolume = binaryReader.ReadSingle();
				}
				musicVolume = binaryReader.ReadSingle();
				cUp = binaryReader.ReadString();
				cDown = binaryReader.ReadString();
				cLeft = binaryReader.ReadString();
				cRight = binaryReader.ReadString();
				cJump = binaryReader.ReadString();
				cThrowItem = binaryReader.ReadString();
				if (num >= 1)
				{
					cInv = binaryReader.ReadString();
				}
				if (num >= 12)
				{
					cHeal = binaryReader.ReadString();
					cMana = binaryReader.ReadString();
					cBuff = binaryReader.ReadString();
				}
				if (num >= 13)
				{
					cHook = binaryReader.ReadString();
				}
				caveParallax = binaryReader.ReadSingle();
				if (num >= 2)
				{
					terrariasFixedTiming = binaryReader.ReadBoolean();
				}
				if (num >= 91)
				{
					binaryReader.ReadBoolean();
				}
				if (num >= 4)
				{
					int width = binaryReader.ReadInt32();
					int height = binaryReader.ReadInt32();
					SetDisplayMode(width, height, flag);
				}
				if (num >= 8)
				{
					autoSave = binaryReader.ReadBoolean();
				}
				if (num >= 9)
				{
					autoPause = binaryReader.ReadBoolean();
				}
				if (num >= 19)
				{
					showItemText = binaryReader.ReadBoolean();
				}
				if (num >= 30)
				{
					cTorch = binaryReader.ReadString();
					Lighting.Mode = (LightMode)binaryReader.ReadByte();
					qaStyle = binaryReader.ReadByte();
				}
				if (num >= 37)
				{
					BackgroundEnabled = binaryReader.ReadBoolean();
				}
				if (num >= 39)
				{
					byte b = binaryReader.ReadByte();
					_needsLanguageSelect = b == 0;
					LanguageManager.Instance.SetLanguage(b);
				}
				if (num >= 46)
				{
					mapEnabled = binaryReader.ReadBoolean();
					cMapStyle = binaryReader.ReadString();
					cMapFull = binaryReader.ReadString();
					cMapZoomIn = binaryReader.ReadString();
					cMapZoomOut = binaryReader.ReadString();
					cMapAlphaUp = binaryReader.ReadString();
					cMapAlphaDown = binaryReader.ReadString();
				}
				if (num >= 89)
				{
					binaryReader.ReadInt32();
				}
				if (num >= 100)
				{
					cSmart = binaryReader.ReadString();
					cSmartCursorModeIsToggleAndNotHold = binaryReader.ReadBoolean();
				}
				if (num >= 107)
				{
					invasionProgressMode = binaryReader.ReadByte();
				}
				if (num >= 111)
				{
					placementPreview = binaryReader.ReadBoolean();
				}
				if (num >= 111)
				{
					placementPreview = binaryReader.ReadBoolean();
				}
				SetFullScreen(flag);
			}
			binaryReader.Close();
		}
		catch
		{
		}
	}

	private static void ErasePlayer(int i)
	{
		try
		{
			FileUtilities.Delete(PlayerList[i].Path, PlayerList[i].IsCloudSave);
			FileUtilities.Delete(PlayerList[i].Path + ".bak", PlayerList[i].IsCloudSave);
		}
		catch
		{
		}
		PlayerIO.ErasePlayer(PlayerList[i].Path, PlayerList[i].IsCloudSave);
		try
		{
			string text = PlayerList[i].Path.Substring(0, PlayerList[i].Path.Length - 4);
			if (text.Substring(text.Length - 1) != "." && text.Substring(text.Length - 1) != "\\" && Directory.Exists(text))
			{
				Directory.Delete(text, recursive: true);
			}
			LoadPlayers();
		}
		catch
		{
		}
	}

	private static void EraseWorld(int i)
	{
		try
		{
			if (!WorldList[i].IsCloudSave)
			{
				Platform.Get<IPathService>().MoveToRecycleBin(WorldList[i].Path);
				Platform.Get<IPathService>().MoveToRecycleBin(WorldList[i].Path + ".bak");
				for (int j = 2; j <= 9; j++)
				{
					Platform.Get<IPathService>().MoveToRecycleBin(WorldList[i].Path + ".bak" + j);
				}
			}
			else if (SocialAPI.Cloud != null)
			{
				SocialAPI.Cloud.Delete(WorldList[i].Path);
			}
			WorldIO.EraseWorld(WorldList[i].Path, WorldList[i].IsCloudSave);
			LoadWorlds();
		}
		catch
		{
		}
	}

	public static string GetPlayerPathFromName(string playerName, bool cloudSave)
	{
		string invalidFilePattern = "^(con|prn|aux|nul|com[1-9]|lpt[1-9])$";
		if (Regex.IsMatch(playerName, invalidFilePattern, RegexOptions.IgnoreCase))
		{
			playerName += "_";
		}
		char[] invalidFileNameChars = Path.GetInvalidFileNameChars();
		string text = "";
		playerName = playerName.Replace(".", "_");
		playerName = playerName.Replace("*", "_");
		string text3 = playerName;
		foreach (char c in text3)
		{
			text += ((!invalidFileNameChars.Contains(c)) ? ((c != ' ') ? c : '_') : '-');
		}
		string text2 = (cloudSave ? CloudPlayerPath : PlayerPath);
		if (FileUtilities.GetFullPath(text2 + Path.DirectorySeparatorChar + text + ".plr", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal))
		{
			text += "_";
		}
		if (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar + text + ".plr", cloudSave))
		{
			int num = 2;
			while (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar + text + num + ".plr", cloudSave))
			{
				num++;
			}
			text += num;
		}
		return text2 + Path.DirectorySeparatorChar + text + ".plr";
	}

	public static string GetWorldPathFromName(string worldName, bool cloudSave)
	{
		string invalidFilePattern = "^(con|prn|aux|nul|com[1-9]|lpt[1-9])$";
		if (Regex.IsMatch(worldName, invalidFilePattern, RegexOptions.IgnoreCase))
		{
			worldName += "_";
		}
		char[] invalidFileNameChars = Path.GetInvalidFileNameChars();
		string text = "";
		string text3 = worldName;
		foreach (char c in text3)
		{
			text += ((!invalidFileNameChars.Contains(c)) ? ((c != ' ') ? c : '_') : '-');
		}
		text = text.Replace(".", "_");
		text = text.Replace("*", "_");
		string text2 = (cloudSave ? CloudWorldPath : WorldPath);
		if (FileUtilities.GetFullPath(text2 + Path.DirectorySeparatorChar + text + ".wld", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal))
		{
			text += "_";
		}
		if (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar + text + ".wld", cloudSave))
		{
			int num = 2;
			while (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar + text + num + ".wld", cloudSave))
			{
				num++;
			}
			text += num;
		}
		return text2 + Path.DirectorySeparatorChar + text + ".wld";
	}

	public void setServerWorldRollbacks(string rollBacksToKeep)
	{
		WorldRollingBackupsCountToKeep = Convert.ToInt32(rollBacksToKeep);
	}

	public void autoCreate(string worldSize)
	{
		switch (worldSize)
		{
		case "0":
			autoGen = false;
			break;
		case "1":
			maxTilesX = 4200;
			maxTilesY = 1200;
			autoGen = true;
			break;
		case "2":
			maxTilesX = 6400;
			maxTilesY = 1800;
			autoGen = true;
			break;
		case "3":
			maxTilesX = 8400;
			maxTilesY = 2400;
			autoGen = true;
			break;
		}
	}

	public void NewMOTD(string newMOTD)
	{
		motd = newMOTD;
	}

	public static string ConvertToSafeArgument(string arg)
	{
		return Uri.EscapeDataString(arg);
	}

	public static string ConvertFromSafeArgument(string arg)
	{
		return Uri.UnescapeDataString(arg);
	}

	public void LoadDedConfig(string configPath)
	{
		if (!File.Exists(configPath))
		{
			return;
		}
		using StreamReader streamReader = new StreamReader(configPath);
		string text;
		while ((text = streamReader.ReadLine()) != null)
		{
			try
			{
				if (text.Length > 6 && text.Substring(0, 6).ToLower() == "world=")
				{
					string path = text.Substring(6);
					try
					{
						string text3 = Platform.Get<IPathService>().ExpandPathVariables(path);
						new FileInfo(text3);
						autoGenFileLocation = text3;
						ActiveWorldFileData = WorldFile.GetAllMetadata(text3, cloudSave: false);
						if (ActiveWorldFileData == null)
						{
							ActiveWorldFileData = new WorldFileData();
						}
					}
					catch
					{
						ActiveWorldFileData = new WorldFileData();
					}
				}
				if (text.Length > 5 && text.Substring(0, 5).ToLower() == "port=")
				{
					string value = text.Substring(5);
					try
					{
						Netplay.ListenPort = Convert.ToInt32(value);
					}
					catch
					{
					}
				}
				if (text.Length > 21 && text.Substring(0, 21).ToLower() == "worldrollbackstokeep=")
				{
					string value2 = text.Substring(21);
					try
					{
						WorldRollingBackupsCountToKeep = Convert.ToInt32(value2);
					}
					catch
					{
					}
				}
				if (text.Length > 11 && text.Substring(0, 11).ToLower() == "maxplayers=")
				{
					string value3 = text.Substring(11);
					try
					{
						int num = Convert.ToInt32(value3);
						if (num <= 255 && num >= 1)
						{
							SetNetPlayers(num);
						}
					}
					catch
					{
					}
				}
				if (text.Length > 11 && text.Substring(0, 9).ToLower() == "priority=" && !Program.LaunchParameters.ContainsKey("-forcepriority"))
				{
					string value4 = text.Substring(9);
					try
					{
						int num2 = Convert.ToInt32(value4);
						if (num2 >= 0 && num2 <= 5)
						{
							Process currentProcess = Process.GetCurrentProcess();
							switch (num2)
							{
							case 0:
								currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
								break;
							case 1:
								currentProcess.PriorityClass = ProcessPriorityClass.High;
								break;
							case 2:
								currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
								break;
							case 3:
								currentProcess.PriorityClass = ProcessPriorityClass.Normal;
								break;
							case 4:
								currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
								break;
							case 5:
								currentProcess.PriorityClass = ProcessPriorityClass.Idle;
								break;
							}
						}
					}
					catch
					{
					}
				}
				if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
				{
					Netplay.ServerPassword = ConvertFromSafeArgument(text.Substring(9));
				}
				if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
				{
					motd = text.Substring(5);
				}
				if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
				{
					string value5 = text.Substring(5);
					LanguageManager.Instance.SetLanguage(Convert.ToInt32(value5));
				}
				if (text.Length > 5 && text.Substring(0, 5).ToLower() == "language=")
				{
					string language = text.Substring(9);
					LanguageManager.Instance.SetLanguage(language);
				}
				if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
				{
					string path2 = text.Substring(10);
					WorldPath = Platform.Get<IPathService>().ExpandPathVariables(path2);
				}
				if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
				{
					worldName = text.Substring(10);
				}
				if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
				{
					ModOrganizer.modPath = text.Substring(8);
				}
				if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpack=")
				{
					ModOrganizer.commandLineModPack = text.Substring(8);
				}
				if (text.Length >= 5 && text.Substring(0, 5).ToLower() == "seed=")
				{
					AutogenSeedName = text.Substring(5);
				}
				if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
				{
					string path3 = text.Substring(8);
					Netplay.BanFilePath = Platform.Get<IPathService>().ExpandPathVariables(path3);
				}
				if (text.Length > 11 && text.Substring(0, 11).ToLower() == "difficulty=")
				{
					switch (text.Substring(11))
					{
					case "0":
						GameMode = 0;
						break;
					case "1":
						GameMode = 1;
						break;
					case "2":
						GameMode = 2;
						break;
					case "3":
						GameMode = 3;
						break;
					}
				}
				if (text.Length > 11 && text.Substring(0, 11).ToLower() == "autocreate=")
				{
					string worldSize = text.Substring(11);
					autoCreate(worldSize);
				}
				if (text.Length > 7 && text.Substring(0, 7).ToLower() == "secure=" && text.Substring(7) == "1")
				{
					Netplay.SpamCheck = true;
				}
				if (text.Length > 5 && text.Substring(0, 5).ToLower() == "upnp=" && text.Substring(5) != "1")
				{
					Netplay.UseUPNP = false;
				}
				string text2 = "slowliquids=";
				if (text.Length > text2.Length && text.Substring(0, text2.Length).ToLower() == text2 && text.Substring(text2.Length) == "1")
				{
					Setting_UseReducedMaxLiquids = true;
				}
				if (text.Length > 10 && text.Substring(0, 10).ToLower() == "npcstream=")
				{
					string value6 = text.Substring(10);
					try
					{
						npcStreamSpeed = Convert.ToInt32(value6);
					}
					catch
					{
					}
				}
				CreativePowerManager.TryListingPermissionsFrom(text);
			}
			catch
			{
			}
		}
	}

	public void SetNetPlayers(int mPlayers)
	{
		maxNetPlayers = mPlayers;
	}

	public void SetWorld(string world, bool cloud)
	{
		ActiveWorldFileData = WorldFile.GetAllMetadata(world, cloud);
		if (ActiveWorldFileData == null)
		{
			ActiveWorldFileData = new WorldFileData();
		}
	}

	public void SetWorldName(string world)
	{
		worldName = world;
	}

	public void EnableAutoShutdown()
	{
		autoShutdown = true;
	}

	[DllImport("user32.dll")]
	public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

	[DllImport("user32.dll")]
	private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

	public void AutoPass()
	{
		autoPass = true;
	}

	public void AutoJoin(string IP, string player = null)
	{
		defaultIP = IP;
		getIP = IP;
		Netplay.SetRemoteIP(defaultIP);
		Terraria.ModLoader.ModLoader.OnSuccessfulLoad = (Action)Delegate.Combine(Terraria.ModLoader.ModLoader.OnSuccessfulLoad, (Action)delegate
		{
			PlayerFileData playerFileData = null;
			if (player != null)
			{
				if (File.Exists(player))
				{
					playerFileData = Player.GetFileData(player, cloudSave: false);
				}
				else
				{
					LoadPlayers();
					playerFileData = PlayerList.FirstOrDefault((PlayerFileData p) => p.Name == player);
				}
			}
			if (playerFileData != null)
			{
				playerFileData.SetAsActive();
				menuMode = 10;
				Netplay.StartTcpClient();
			}
			else
			{
				OpenPlayerSelect(delegate(PlayerFileData fileData)
				{
					fileData.SetAsActive();
					menuMode = 10;
					Netplay.StartTcpClient();
				});
			}
		});
	}

	public void AutoHost()
	{
		Terraria.ModLoader.ModLoader.OnSuccessfulLoad = (Action)Delegate.Combine(Terraria.ModLoader.ModLoader.OnSuccessfulLoad, (Action)delegate
		{
			menuMultiplayer = true;
			menuServer = true;
			ClearPendingPlayerSelectCallbacks();
			menuMode = 1;
		});
	}

	public void loadLib(string path)
	{
		libPath = path;
		LoadLibrary(libPath);
	}

	public void NeverSleep()
	{
		if (Platform.IsWindows)
		{
			previousExecutionState = NativeMethods.SetThreadExecutionState(2147483649u);
		}
	}

	public void YouCanSleepNow()
	{
		if (Platform.IsWindows && previousExecutionState != 0)
		{
			NativeMethods.SetThreadExecutionState(previousExecutionState);
		}
	}

	public void DedServ()
	{
		NeverSleep();
		rand = new UnifiedRandom();
		if (autoShutdown && !showServerConsole)
		{
			string lpWindowName = (Console.Title = "terraria" + rand.Next(int.MaxValue));
			if (Platform.IsWindows)
			{
				IntPtr intPtr = FindWindow(null, lpWindowName);
				if (intPtr != IntPtr.Zero)
				{
					ShowWindow(intPtr, 0);
				}
			}
		}
		else
		{
			Console.Title = "Terraria Server " + versionNumber2 + " - " + Terraria.ModLoader.ModLoader.versionedName;
		}
		dedServ = true;
		showSplash = false;
		((Game)this).Initialize();
		bool reloadMods;
		do
		{
			Terraria.ModLoader.ModLoader.Reload();
			DedServ_PostModLoad(out reloadMods);
		}
		while (reloadMods);
	}

	private void DedServ_PostModLoad(out bool reloadMods)
	{
		//IL_0cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cce: Expected O, but got Unknown
		//IL_0dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd5: Expected O, but got Unknown
		reloadMods = false;
		while (worldPathName == null || worldPathName == "")
		{
			bool flag = true;
			while (flag)
			{
				LoadWorlds();
				Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
				Console.WriteLine("");
				for (int i = 0; i < WorldList.Count; i++)
				{
					Console.WriteLine(i + 1 + "\t\t" + WorldList[i].Name);
				}
				string textValue = Language.GetTextValue("CLI.NewWorld_Command");
				string textValue2 = Language.GetTextValue("CLI.DeleteWorld_Example");
				int num = (Math.Max(newWorldName.Length, textValue2.Length) + 1) / 8 + 1;
				textValue = textValue + new string('\t', num - textValue.Length / 8) + Language.GetTextValue("CLI.NewWorld_Description");
				textValue2 = textValue2 + new string('\t', num - textValue2.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
				Console.WriteLine(textValue);
				Console.WriteLine(textValue2);
				Console.WriteLine("m\t\tMods Menu");
				Console.WriteLine("");
				Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
				string text2 = ReadLineInput();
				if (text2 == null)
				{
					text2 = "";
				}
				try
				{
					Console.Clear();
				}
				catch
				{
				}
				if (text2.StartsWith(Language.GetTextValue("CLI.DeleteWorld_Command") + " "))
				{
					try
					{
						int length = Language.GetTextValue("CLI.DeleteWorld_Command").Length;
						int num2 = Convert.ToInt32(text2.Substring(length + 1)) - 1;
						if (num2 < WorldList.Count)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
							Console.WriteLine("");
							Console.WriteLine(Language.GetTextValue("CLI.DeleteConfirmation", WorldList[num2].Name));
							Console.Write("({0}/{1}): ", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo"));
							if (ReadLineInput().ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower())
							{
								EraseWorld(num2);
							}
						}
					}
					catch
					{
					}
					try
					{
						Console.Clear();
					}
					catch
					{
					}
					continue;
				}
				switch (text2)
				{
				case "n":
				case "N":
				{
					bool flag2 = true;
					while (flag2)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
						Console.WriteLine("");
						Console.WriteLine("1\t" + Language.GetTextValue("UI.WorldSizeSmall"));
						Console.WriteLine("2\t" + Language.GetTextValue("UI.WorldSizeMedium"));
						Console.WriteLine("3\t" + Language.GetTextValue("UI.WorldSizeLarge"));
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.ChooseSize"));
						string value3 = ReadLineInput();
						try
						{
							switch (Convert.ToInt32(value3))
							{
							case 1:
								maxTilesX = 4200;
								maxTilesY = 1200;
								flag2 = false;
								break;
							case 2:
								maxTilesX = 6400;
								maxTilesY = 1800;
								flag2 = false;
								break;
							case 3:
								maxTilesX = 8400;
								maxTilesY = 2400;
								flag2 = false;
								break;
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					flag2 = true;
					while (flag2)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
						Console.WriteLine("");
						Console.WriteLine("1\t" + Language.GetTextValue("UI.Normal"));
						Console.WriteLine("2\t" + Language.GetTextValue("UI.Expert"));
						Console.WriteLine("3\t" + Language.GetTextValue("UI.Master"));
						Console.WriteLine("4\t" + Language.GetTextValue("UI.Creative"));
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.ChooseDifficulty"));
						string value2 = ReadLineInput();
						try
						{
							switch (Convert.ToInt32(value2))
							{
							case 1:
								GameMode = 0;
								flag2 = false;
								break;
							case 2:
								GameMode = 1;
								flag2 = false;
								break;
							case 3:
								GameMode = 2;
								flag2 = false;
								break;
							case 4:
								GameMode = 3;
								flag2 = false;
								break;
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					flag2 = true;
					while (flag2)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
						Console.WriteLine("");
						Console.WriteLine("1\t" + Language.GetTextValue("CLI.Random"));
						Console.WriteLine("2\t" + Language.GetTextValue("CLI.Corrupt"));
						Console.WriteLine("3\t" + Language.GetTextValue("CLI.Crimson"));
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.ChooseEvil"));
						string value = ReadLineInput();
						try
						{
							switch (Convert.ToInt32(value))
							{
							case 1:
								WorldGen.WorldGenParam_Evil = -1;
								flag2 = false;
								break;
							case 2:
								WorldGen.WorldGenParam_Evil = 0;
								flag2 = false;
								break;
							case 3:
								WorldGen.WorldGenParam_Evil = 1;
								flag2 = false;
								break;
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					flag2 = true;
					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
					while (flag2)
					{
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.EnterWorldName"));
						newWorldName = ReadLineInput();
						if (newWorldName != null && newWorldName != "" && newWorldName != " ")
						{
							if (newWorldName.Length >= 27)
							{
								Console.WriteLine("");
								Console.WriteLine(Language.GetTextValue("CLI.WorldNameLengthTooLong", 26));
								continue;
							}
							flag2 = false;
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						else
						{
							try
							{
								Console.Clear();
							}
							catch
							{
							}
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
						}
					}
					string text3 = "";
					flag2 = true;
					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
					while (flag2)
					{
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.EnterSeed"));
						text3 = ReadLineInput();
						if (text3 != null)
						{
							if (text3.Length >= 40)
							{
								Console.WriteLine("");
								Console.WriteLine(Language.GetTextValue("CLI.SeedLengthTooLong", 39));
								continue;
							}
							flag2 = false;
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						else
						{
							text3 = "";
						}
					}
					worldName = newWorldName;
					ActiveWorldFileData = WorldFile.CreateMetadata(worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, GameMode);
					text3 = text3.Trim();
					if (text3.Length == 0)
					{
						ActiveWorldFileData.SetSeedToRandom();
					}
					else
					{
						ActiveWorldFileData.SetSeed(text3);
					}
					UIWorldCreation.ProcessSpecialWorldSeeds(text3);
					menuMode = 10;
					GenerationProgress generationProgress = new GenerationProgress();
					Task task = WorldGen.CreateNewWorld(generationProgress);
					flag2 = false;
					while (menuMode == 10)
					{
						if (oldStatusText != statusText && !WorldGen.drunkWorldGen)
						{
							oldStatusText = statusText;
							Console.WriteLine(statusText);
						}
					}
					try
					{
						Console.Clear();
					}
					catch
					{
					}
					while (!task.IsCompleted)
					{
						statusText = string.Format("{0:0.0%} - " + generationProgress.Message + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
						if (oldStatusText != statusText)
						{
							oldStatusText = statusText;
							string value4 = statusText;
							if (WorldGen.notTheBees && !WorldGen.getGoodWorldGen)
							{
								value4 = string.Format("{0:0.0%} - " + Language.GetTextValue("UI.WorldGenEasterEgg_GeneratingBees") + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
							}
							Console.WriteLine(value4);
						}
					}
					continue;
				}
				case "m":
				case "M":
					Interface.ServerModMenu(out reloadMods);
					if (reloadMods)
					{
						return;
					}
					continue;
				}
				try
				{
					int num3 = Convert.ToInt32(text2);
					num3--;
					if (num3 < 0 || num3 >= WorldList.Count)
					{
						continue;
					}
					bool flag3 = true;
					while (flag3)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.SetInitialMaxPlayers"));
						string text4 = ReadLineInput();
						try
						{
							if (text4 == "")
							{
								text4 = "16";
							}
							int num4 = Convert.ToInt32(text4);
							if (num4 <= 255 && num4 >= 1)
							{
								SetNetPlayers(num4);
								flag3 = false;
							}
							flag3 = false;
						}
						catch
						{
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					flag3 = true;
					while (flag3)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.SetInitialPort"));
						string text5 = ReadLineInput();
						try
						{
							if (text5 == "")
							{
								text5 = "7777";
							}
							int num5 = Convert.ToInt32(text5);
							if (num5 <= 65535)
							{
								Netplay.ListenPort = num5;
								flag3 = false;
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					flag3 = true;
					while (flag3)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.AutomaticPortForward", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo")));
						string text6 = ReadLineInput();
						try
						{
							if (text6 == "" || text6.ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower() || text6.ToLower() == Language.GetTextValue("CLI.Yes").ToLower())
							{
								Netplay.UseUPNP = true;
								flag3 = false;
							}
							else if (text6.ToLower() == Language.GetTextValue("CLI.ShortNo").ToLower() || text6.ToLower() == Language.GetTextValue("CLI.No").ToLower())
							{
								Netplay.UseUPNP = false;
								flag3 = false;
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + Terraria.ModLoader.ModLoader.versionedName);
					Console.WriteLine("");
					Console.Write(Language.GetTextValue("CLI.EnterServerPassword"));
					Netplay.ServerPassword = ReadLineInput();
					ActiveWorldFileData = WorldList[num3];
					flag = false;
					try
					{
						Console.Clear();
					}
					catch
					{
					}
				}
				catch
				{
				}
			}
		}
		try
		{
			Console.Clear();
		}
		catch
		{
		}
		Task task2 = WorldGen.serverLoadWorld();
		Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
		Console.WriteLine("");
		while (!task2.IsCompleted)
		{
			if (WorldFile.LastThrownLoadException == null)
			{
				if (AutogenProgress.TotalProgress != 0.0)
				{
					statusText = string.Format("{0:0.0%} - " + AutogenProgress.Message + " - {1:0.0%}", AutogenProgress.TotalProgress, AutogenProgress.Value);
				}
				if (oldStatusText != statusText)
				{
					oldStatusText = statusText;
					Console.WriteLine(statusText);
				}
			}
		}
		try
		{
			if (WorldFile.LastThrownLoadException == null)
			{
				Console.Clear();
			}
		}
		catch
		{
		}
		Logging.ServerConsoleLine("Running one update...");
		Logging.tML.Info((object)$"Server starting with AllowVanillaClients set to {ModNet.AllowVanillaClients}");
		((Game)this).Update(new GameTime());
		if (WorldGen.loadFailed || !WorldGen.loadSuccess)
		{
			WriteFancyWorldLoadErrorToConsole();
			if (!autoShutdown)
			{
				Console.ReadKey();
			}
			YouCanSleepNow();
			return;
		}
		Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
		Console.WriteLine("");
		Logging.ServerConsoleLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
		Console.WriteLine(Language.GetTextValue("CLI.HelpHint"));
		Console.WriteLine("");
		Console.Title = "Terraria Server: " + worldName;
		Stopwatch stopwatch = new Stopwatch();
		if (!autoShutdown || showServerConsole)
		{
			startDedInput();
		}
		stopwatch.Start();
		double delta = 16.666666666666668;
		double target = delta;
		Netplay.StartServer();
		AddSignalTraps();
		gameMenu = false;
		while (!Netplay.Disconnect)
		{
			ServerHangWatchdog.Checkin();
			if (oldStatusText != statusText)
			{
				oldStatusText = statusText;
				Console.WriteLine(statusText);
			}
			if (Netplay.HasClients)
			{
				((Game)this).Update(new GameTime());
			}
			else if (saveTime.IsRunning)
			{
				saveTime.Stop();
			}
			if (Main.OnTickForThirdPartySoftwareOnly != null)
			{
				Main.OnTickForThirdPartySoftwareOnly();
			}
			double now = stopwatch.ElapsedMilliseconds;
			double remaining = target - now;
			target += delta;
			if (target < now)
			{
				target = now + delta;
			}
			Thread.Sleep(Math.Max((int)remaining, 0));
		}
		if (Netplay.SaveOnServerExit)
		{
			Console.WriteLine(Language.GetTextValue("Net.ServerSavingOnExit"));
			WorldFile.SaveWorld();
		}
		SystemLoader.OnWorldUnload();
		YouCanSleepNow();
	}

	private static void WriteFancyWorldLoadErrorToConsole()
	{
		Console.WriteLine();
		Console.WriteLine(WorldFile.LastThrownLoadException.ToString());
	}

	public static void startDedInput()
	{
		Thread thread = new Thread(startDedInputCallBack);
		thread.IsBackground = true;
		thread.Name = "Server Input Thread";
		thread.Start();
	}

	public static void startDedInputCallBack()
	{
		while (!Netplay.Disconnect)
		{
			string text = Console.ReadLine();
			if (text == null)
			{
				Logging.tML.Warn((object)"Console input not connected, ignoring...");
				break;
			}
			ExecuteCommand(text, new ConsoleCommandCaller());
		}
	}

	public static void ExecuteCommand(string text, CommandCaller commandCaller)
	{
		//IL_0a27: Unknown result type (might be due to invalid IL or missing references)
		Console.Write(": ");
		string text2 = text;
		text = text.ToLower();
		try
		{
			if (text == Language.GetTextValue("CLI.Help_Command"))
			{
				Console.WriteLine(Language.GetTextValue("CLI.AvailableCommands"));
				Console.WriteLine("");
				List<string> list = new List<string>
				{
					"Help", "Playing", "Clear", "Exit", "ExitNoSave", "Save", "Kick", "Ban", "Password", "SetPassword",
					"Version", "Time", "Port", "MaxPlayers", "Say", "MOTD", "SetMOTD", "Dawn", "Noon", "Dusk",
					"Midnight", "Settle", "Seed"
				};
				int num = 0;
				for (int i = 0; i < list.Count; i++)
				{
					string text3 = (Language.Exists("CLI." + list[i] + "_Example") ? Language.GetTextValue("CLI." + list[i] + "_Example") : Language.GetTextValue("CLI." + list[i] + "_Command"));
					if (text3.Length > num)
					{
						num = text3.Length;
					}
				}
				List<Tuple<string, string>> modHelpList = CommandLoader.GetHelp(CommandType.Console);
				foreach (Tuple<string, string> entry2 in modHelpList)
				{
					if (entry2.Item1.Length > num)
					{
						num = entry2.Item1.Length;
					}
				}
				int num2 = (num + 1) / 8;
				for (int j = 0; j < list.Count; j++)
				{
					string text4 = (Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command"));
					Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
				}
				{
					foreach (Tuple<string, string> entry in modHelpList)
					{
						Console.WriteLine(entry.Item1 + new string('\t', num2 - entry.Item1.Length / 8) + entry.Item2);
					}
					return;
				}
			}
			if (CommandLoader.HandleCommand(text, commandCaller))
			{
				return;
			}
			if (text == Language.GetTextValue("CLI.Settle_Command"))
			{
				if (!Liquid.panicMode)
				{
					Liquid.StartPanic();
				}
				else
				{
					Console.WriteLine(Language.GetTextValue("CLI.WaterIsAlreadySettling"));
				}
				return;
			}
			if (text == Language.GetTextValue("CLI.Dawn_Command"))
			{
				dayTime = true;
				time = 0.0;
				NetMessage.SendData(7);
				return;
			}
			if (text == Language.GetTextValue("CLI.Dusk_Command"))
			{
				dayTime = false;
				time = 0.0;
				NetMessage.SendData(7);
				return;
			}
			if (text == Language.GetTextValue("CLI.Noon_Command"))
			{
				dayTime = true;
				time = 27000.0;
				NetMessage.SendData(7);
				return;
			}
			if (text == Language.GetTextValue("CLI.Midnight_Command"))
			{
				dayTime = false;
				time = 16200.0;
				NetMessage.SendData(7);
				return;
			}
			if (text == Language.GetTextValue("CLI.ExitNoSave_Command"))
			{
				Netplay.SaveOnServerExit = false;
				Netplay.Disconnect = true;
				return;
			}
			if (text == Language.GetTextValue("CLI.Exit_Command"))
			{
				Netplay.Disconnect = true;
				SocialAPI.Shutdown();
				return;
			}
			if (text == Language.GetTextValue("CLI.FPS_Command"))
			{
				if (!dedServFPS)
				{
					dedServFPS = true;
					fpsTimer.Reset();
				}
				else
				{
					dedServCount1 = 0;
					dedServCount2 = 0;
					dedServFPS = false;
				}
				return;
			}
			if (text == Language.GetTextValue("CLI.Save_Command"))
			{
				WorldFile.SaveWorld();
				return;
			}
			if (text == Language.GetTextValue("CLI.Time_Command"))
			{
				string textValue = Language.GetTextValue("GameUI.TimeAtMorning");
				double num3 = time;
				if (!dayTime)
				{
					num3 += 54000.0;
				}
				num3 = num3 / 86400.0 * 24.0;
				double num4 = 7.5;
				num3 = num3 - num4 - 12.0;
				if (num3 < 0.0)
				{
					num3 += 24.0;
				}
				if (num3 >= 12.0)
				{
					textValue = Language.GetTextValue("GameUI.TimePastMorning");
				}
				int num5 = (int)num3;
				double num7 = (int)((num3 - (double)num5) * 60.0);
				string text5 = string.Concat(num7);
				if (num7 < 10.0)
				{
					text5 = "0" + text5;
				}
				if (num5 > 12)
				{
					num5 -= 12;
				}
				if (num5 == 0)
				{
					num5 = 12;
				}
				Console.WriteLine(Language.GetTextValue("CLI.Time", num5 + ":" + text5 + " " + textValue));
				return;
			}
			if (text == Language.GetTextValue("CLI.MaxPlayers_Command"))
			{
				Console.WriteLine(Language.GetTextValue("CLI.PlayerLimit", maxNetPlayers));
				return;
			}
			if (text == Language.GetTextValue("CLI.Port_Command"))
			{
				Console.WriteLine(Language.GetTextValue("CLI.Port", Netplay.ListenPort));
				return;
			}
			if (text == Language.GetTextValue("CLI.Version_Command"))
			{
				Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber) + " - " + Terraria.ModLoader.ModLoader.versionedName);
				return;
			}
			if (text == Language.GetTextValue("CLI.Clear_Command"))
			{
				try
				{
					Console.Clear();
					Logging.ResetPastExceptions();
					return;
				}
				catch
				{
					return;
				}
			}
			if (text == Language.GetTextValue("CLI.Playing_Command"))
			{
				int num6 = 0;
				for (int k = 0; k < 255; k++)
				{
					if (player[k].active)
					{
						num6++;
						Console.WriteLine(string.Concat(player[k].name, " (", Netplay.Clients[k].Socket.GetRemoteAddress(), ")"));
					}
				}
				switch (num6)
				{
				case 0:
					Console.WriteLine(Language.GetTextValue("CLI.NoPlayers"));
					break;
				case 1:
					Console.WriteLine(Language.GetTextValue("CLI.OnePlayerConnected"));
					break;
				default:
					Console.WriteLine(Language.GetTextValue("CLI.PlayersConnected", num6));
					break;
				}
			}
			else
			{
				if (text == "")
				{
					return;
				}
				if (text == Language.GetTextValue("CLI.MOTD_Command"))
				{
					if (motd == "")
					{
						Console.WriteLine(Language.GetTextValue("CLI.NoMOTD", worldName));
					}
					else
					{
						Console.WriteLine(Language.GetTextValue("CLI.MOTD", motd));
					}
				}
				else if (text.StartsWith(Language.GetTextValue("CLI.SetMOTD_Command") + " "))
				{
					motd = text2.Substring(Language.GetTextValue("CLI.SetMOTD_Command").Length + 1);
				}
				else if (text == Language.GetTextValue("CLI.Password_Command"))
				{
					if (Netplay.ServerPassword == "")
					{
						Console.WriteLine(Language.GetTextValue("CLI.NoPassword"));
					}
					else
					{
						Console.WriteLine(Language.GetTextValue("CLI.Password", Netplay.ServerPassword));
					}
				}
				else if (text.StartsWith(Language.GetTextValue("CLI.SetPassword_Command") + " "))
				{
					string text6 = text2.Substring(Language.GetTextValue("CLI.SetPassword_Command").Length + 1);
					if (text6 == "")
					{
						Netplay.ServerPassword = "";
						Console.WriteLine(Language.GetTextValue("CLI.PasswordDisabled"));
					}
					else
					{
						Netplay.ServerPassword = text6;
						Console.WriteLine(Language.GetTextValue("CLI.PasswordSet", Netplay.ServerPassword));
					}
				}
				else if (text == Language.GetTextValue("CLI.Say_Command"))
				{
					Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
				}
				else if (text.StartsWith(Language.GetTextValue("CLI.Say_Command") + " "))
				{
					int length = Language.GetTextValue("CLI.Say_Command").Length;
					if (text.Length <= length + 1)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
						return;
					}
					string text7 = text2.Substring(length + 1);
					Console.WriteLine(Language.GetTextValue("CLI.ServerMessage", text7));
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("CLI.ServerMessage", text7), new Color(255, 240, 20));
				}
				else if (text == Language.GetTextValue("CLI.Kick_Command"))
				{
					Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
				}
				else if (text.StartsWith(Language.GetTextValue("CLI.Kick_Command") + " "))
				{
					int length2 = Language.GetTextValue("CLI.Kick_Command").Length;
					if (text.Length <= length2 + 1)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
						return;
					}
					string text8 = text.Substring(length2 + 1);
					text8 = text8.ToLower();
					for (int l = 0; l < 255; l++)
					{
						if (player[l].active && player[l].name.ToLower() == text8)
						{
							NetMessage.SendData(2, l, -1, NetworkText.FromKey("CLI.KickMessage"));
						}
					}
				}
				else if (text == Language.GetTextValue("CLI.Seed_Command"))
				{
					if (ActiveWorldFileData == null || !ActiveWorldFileData.HasValidSeed)
					{
						Console.WriteLine(Language.GetTextValue("CLI.NoValidSeed"));
					}
					else
					{
						Console.WriteLine(Language.GetTextValue("CLI.DisplaySeed", ActiveWorldFileData.GetFullSeedText()));
					}
				}
				else if (text == Language.GetTextValue("CLI.Ban_Command"))
				{
					Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
				}
				else if (text.StartsWith(Language.GetTextValue("CLI.Ban_Command") + " "))
				{
					int length3 = Language.GetTextValue("CLI.Ban_Command").Length;
					if (text.Length <= length3 + 1)
					{
						Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
						return;
					}
					string text9 = text.Substring(4);
					text9 = text9.ToLower();
					for (int m = 0; m < 255; m++)
					{
						if (player[m].active && player[m].name.ToLower() == text9)
						{
							Netplay.AddBan(m);
							NetMessage.SendData(2, m, -1, NetworkText.FromKey("CLI.BanMessage"));
						}
					}
				}
				else
				{
					Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
				}
			}
		}
		catch
		{
			Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
		}
	}

	private static string ReadLineInput()
	{
		string text = null;
		do
		{
			text = Console.ReadLine();
		}
		while (text == null);
		return text;
	}

	public static bool IsFastForwardingTime()
	{
		if (!fastForwardTimeToDawn)
		{
			return fastForwardTimeToDusk;
		}
		return true;
	}

	public static void Sundialing()
	{
		if (sundialCooldown == 0)
		{
			if (netMode == 1)
			{
				NetMessage.SendData(51, -1, -1, null, myPlayer, 3f);
				return;
			}
			fastForwardTimeToDawn = true;
			sundialCooldown = 8;
			NetMessage.SendData(7);
		}
	}

	public static void Moondialing()
	{
		if (moondialCooldown == 0)
		{
			if (netMode == 1)
			{
				NetMessage.SendData(51, -1, -1, null, myPlayer, 6f);
				return;
			}
			fastForwardTimeToDusk = true;
			moondialCooldown = 8;
			NetMessage.SendData(7);
		}
	}

	public static void UpdateTimeRate()
	{
		UpdateTimeRate_Inner();
		SystemLoader.ModifyTimeRate(ref dayRate, ref desiredWorldTilesUpdateRate, ref desiredWorldEventsUpdateRate);
		if (dayRate > 86400.0)
		{
			dayRate = 86400.0;
		}
	}

	public static void UpdateTimeRate_Inner()
	{
		if (IsFastForwardingTime())
		{
			dayRate = 60.0;
			desiredWorldTilesUpdateRate = 1.0;
			desiredWorldEventsUpdateRate = 60.0;
			return;
		}
		bool enabled = CreativePowerManager.Instance.GetPower<CreativePowers.FreezeTime>().Enabled;
		int targetTimeRate = CreativePowerManager.Instance.GetPower<CreativePowers.ModifyTimeRate>().TargetTimeRate;
		bool flag = CurrentFrameFlags.SleepingPlayersCount == CurrentFrameFlags.ActivePlayersCount && CurrentFrameFlags.SleepingPlayersCount > 0;
		int num = targetTimeRate;
		if (!gameMenu && flag)
		{
			num *= 5;
		}
		if (enabled)
		{
			num = 0;
		}
		dayRate = num;
		desiredWorldTilesUpdateRate = num;
		desiredWorldEventsUpdateRate = num;
		if (gameMenu)
		{
			dayRate = 1.0;
			desiredWorldTilesUpdateRate = 1.0;
			desiredWorldEventsUpdateRate = 1.0;
		}
	}

	public Main()
		: base(dedServ)
	{
		//IL_02b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Expected O, but got Unknown
		instance = this;
		UnpausedUpdateSeed = (ulong)Guid.NewGuid().GetHashCode();
		((Game)this).Exiting += Main_Exiting;
		if (!dedServ)
		{
			Map = new WorldMap(maxTilesX, maxTilesY);
			Configuration.Load();
			graphics = new GraphicsDeviceManager((Game)(object)((this is Game) ? this : null));
			graphics.GraphicsProfile = (GraphicsProfile)1;
			FNALogging.GraphicsInit(graphics);
		}
	}

	private static void SetDisplayMonitor()
	{
		Configuration.Get("Display", "");
		if (Program.IsXna)
		{
			graphics.PreparingDeviceSettings += SetMonitorOnce;
		}
	}

	private static void SetMonitorOnce(object sender, PreparingDeviceSettingsEventArgs e)
	{
		string displayName = Configuration.Get("Display", "");
		GraphicsAdapter graphicsAdapter = GraphicsAdapter.Adapters.Where((GraphicsAdapter adapter) => adapter.DeviceName == displayName).FirstOrDefault();
		if (graphicsAdapter != null)
		{
			e.GraphicsDeviceInformation.Adapter = graphicsAdapter;
		}
		graphics.PreparingDeviceSettings -= SetMonitorOnce;
	}

	protected void SetTitle()
	{
		if (!dedServ)
		{
			_cachedTitle = Lang.GetRandomGameTitle();
			Platform.Get<IWindowService>().SetUnicodeTitle(((Game)this).Window, _cachedTitle);
			Platform.Get<IWindowService>().SetIcon(((Game)this).Window);
		}
	}

	private static void SetTileValue()
	{
		tileOreFinderPriority[28] = 100;
		tileOreFinderPriority[407] = 150;
		tileOreFinderPriority[404] = 150;
		tileOreFinderPriority[7] = 200;
		tileOreFinderPriority[166] = 210;
		tileOreFinderPriority[6] = 220;
		tileOreFinderPriority[167] = 230;
		tileOreFinderPriority[9] = 240;
		tileOreFinderPriority[168] = 250;
		tileOreFinderPriority[8] = 260;
		tileOreFinderPriority[169] = 270;
		tileOreFinderPriority[22] = 300;
		tileOreFinderPriority[204] = 310;
		tileOreFinderPriority[37] = 400;
		tileOreFinderPriority[21] = 500;
		tileOreFinderPriority[467] = 500;
		tileOreFinderPriority[441] = 500;
		tileOreFinderPriority[468] = 500;
		tileOreFinderPriority[12] = 550;
		tileOreFinderPriority[665] = 550;
		tileOreFinderPriority[639] = 550;
		tileOreFinderPriority[107] = 600;
		tileOreFinderPriority[221] = 610;
		tileOreFinderPriority[108] = 620;
		tileOreFinderPriority[222] = 630;
		tileOreFinderPriority[111] = 640;
		tileOreFinderPriority[223] = 650;
		tileOreFinderPriority[129] = 675;
		tileOreFinderPriority[211] = 700;
		tileOreFinderPriority[227] = 750;
		tileOreFinderPriority[656] = 760;
		tileOreFinderPriority[236] = 810;
	}

	private static void ResetGameCounter()
	{
		_gameUpdateCount = 0u;
	}

	protected override void Initialize()
	{
		InitTMLContentManager();
		musicFade[50] = 1f;
		if (dedServ)
		{
			netMode = 2;
		}
		for (int i = 0; i < 10; i++)
		{
			recentWorld[i] = "";
			recentIP[i] = "";
			recentPort[i] = 0;
		}
		if (rand == null)
		{
			rand = new UnifiedRandom((int)DateTime.Now.Ticks);
		}
		SetTitle();
		lo = rand.Next(6);
		waterfallManager = new WaterfallManager();
		_windowMover = new WindowStateController();
		sittingManager = new AnchoredEntitiesCollection();
		sleepingManager = new AnchoredEntitiesCollection();
		gameTips = new GameTipsDisplay();
		if (player[myPlayer] == null)
		{
			player[myPlayer] = new Player();
		}
		ContentSamples.Initialize();
		PlayerInput.Initialize();
		player[myPlayer] = new Player();
		WorldGen.Hooks.OnWorldLoad += delegate
		{
			AmbienceServer = new AmbienceServer();
			LocalGolfState = new GolfState();
			if (!dedServ)
			{
				Lighting.Clear();
			}
		};
		WorldGen.AddGenPasses();
		DontStarveSeed.Initialize();
		ResourceSetsManager = new PlayerResourceSetsManager();
		MinimapFrameManagerInstance = new MinimapFrameManager();
		PlayerInput.OnActionableInput += delegate
		{
			if (LocalGolfState != null)
			{
				LocalGolfState.CancelBallTracking();
			}
		};
		SceneMetrics = new SceneMetrics();
		BindSettingsTo(Configuration);
		if (dedServ)
		{
			Initialize_AlmostEverything();
			Configuration.Load();
			Terraria.ModLoader.ModLoader.LoadConfiguration();
		}
		else
		{
			TimeLogger.Initialize();
			ClientInitialize();
			((Game)this).Initialize();
		}
	}

	private void BindSettingsTo(Preferences preferences)
	{
		waterfallManager.BindTo(preferences);
		MinimapFrameManagerInstance.BindTo(preferences);
		BigBossProgressBar.BindTo(preferences);
		ResourceSetsManager.BindTo(preferences);
		ChromaInitializer.BindTo(preferences);
		Terraria.Graphics.Effects.Filters.Scene.BindTo(preferences);
		if (SocialAPI.Cloud != null)
		{
			SocialAPI.Cloud.BindTo(preferences);
		}
		preferences.OnSave += SaveResourcePacks;
		preferences.OnLoad += LoadResourcePacks;
	}

	private void LoadResourcePacks(Preferences prefs)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Expected O, but got Unknown
		_lastLoadedPacks = prefs.Get<JArray>("ResourcePacks", new JArray());
	}

	private void SaveResourcePacks(Preferences prefs)
	{
		JArray value = _lastLoadedPacks;
		if (AssetSourceController != null)
		{
			value = AssetSourceController.ActiveResourcePackList.ToJson();
		}
		prefs.Put("ResourcePacks", value);
	}

	private void Initialize_AlmostEverything()
	{
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0328: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		TilePaintSystem = new TilePaintSystemV2();
		TilesRenderer = new TileDrawing(TilePaintSystem);
		WallsRenderer = new WallDrawing(TilePaintSystem);
		CreativePowerManager.Initialize();
		LocalFavoriteData.Load();
		CloudFavoritesData.Load();
		Initialize_Entities();
		FindAnnouncementBoxStatus();
		CustomCurrencyManager.Initialize();
		WingStatsInitializer.Load();
		TileObjectData.Initialize();
		Animation.Initialize();
		Chest.Initialize();
		Wiring.Initialize();
		Framing.Initialize();
		ItemRarity.Initialize();
		TileEntity.InitializeAll();
		Projectile.InitializeStaticThings();
		TorchID.Initialize();
		InitializeItemAnimations();
		BestiaryDatabase bestiaryDatabase = new BestiaryDatabase();
		BestiaryDatabaseNPCsPopulator bestiaryDatabaseNPCsPopulator = new BestiaryDatabaseNPCsPopulator();
		bestiaryDatabaseNPCsPopulator.Populate(bestiaryDatabase);
		BestiaryDB = bestiaryDatabase;
		ContentSamples.RebuildBestiarySortingIDsByBestiaryDatabaseContents(bestiaryDatabase);
		BestiaryTracker = new BestiaryUnlocksTracker();
		ItemDropDatabase itemDropDatabase = new ItemDropDatabase();
		itemDropDatabase.Populate();
		ItemDropsDB = itemDropDatabase;
		bestiaryDatabase.Merge(ItemDropsDB);
		bestiaryDatabaseNPCsPopulator.AddDropOverrides(bestiaryDatabase);
		PylonSystem = new TeleportPylonsSystem();
		ItemDropSolver = new ItemDropResolver(itemDropDatabase);
		ShopHelper = new ShopHelper();
		CreativeItemSacrificesCatalog.Instance.Initialize();
		if (!dedServ)
		{
			BestiaryUI = new UIBestiaryTest(BestiaryDB);
			ContentThatNeedsRenderTargets.Add(MapPlayerRenderer);
		}
		if (!dedServ)
		{
			Lighting.Initialize();
			MapHelper.Initialize();
		}
		else
		{
			Mount.Initialize();
			Minecart.Initialize();
		}
		WorldGen.RandomizeBackgrounds(rand);
		if (treeBGSet1[0] == 173)
		{
			WorldGen.RandomizeBackgrounds(rand);
		}
		if (treeBGSet1[0] == 173)
		{
			WorldGen.RandomizeBackgrounds(rand);
		}
		WorldGen.RandomizeCaveBackgrounds();
		WorldGen.Hooks.Initialize();
		WorldGen.Hooks.OnWorldLoad += ResetGameCounter;
		bgAlphaFrontLayer[0] = 1f;
		bgAlphaFarBackLayer[0] = 1f;
		invBottom = 258;
		Initialize_TileAndNPCData1();
		Initialize_TileAndNPCData2();
		Initialize_Items();
		for (int i = 1; i < ProjectileID.Count; i++)
		{
			Projectile obj = new Projectile();
			obj.SetDefaults(i);
			if (obj.hostile)
			{
				projHostile[i] = true;
			}
			if (obj.aiStyle == 7)
			{
				projHook[i] = true;
			}
		}
		for (int j = 0; j < Recipe.maxRecipes; j++)
		{
			recipe[j] = new Recipe();
			availableRecipeY[j] = 65 * j;
		}
		Recipe.SetupRecipes();
		ContentSamples.FixItemsAfterRecipesAreAdded();
		for (int k = 0; k < Liquid.maxLiquid; k++)
		{
			liquid[k] = new Liquid();
		}
		for (int l = 0; l < 50000; l++)
		{
			liquidBuffer[l] = new LiquidBuffer();
		}
		shop[0] = new Chest();
		shop[1] = new Chest();
		Chest.SetupTravelShop();
		teamColor[0] = Color.White;
		teamColor[1] = new Color(218, 59, 59);
		teamColor[2] = new Color(59, 218, 85);
		teamColor[3] = new Color(59, 149, 218);
		teamColor[4] = new Color(242, 221, 100);
		teamColor[5] = new Color(224, 100, 242);
		Netplay.Initialize();
		NetworkInitializer.Load();
		ChatInitializer.Load();
		LucyAxeMessage.Initialize();
		if (menuMode == 1)
		{
			LoadPlayers();
		}
		if (skipMenu)
		{
			WorldGen.clearWorld();
			gameMenu = false;
			LoadPlayers();
			PlayerList[0].SetAsActive();
			LoadWorlds();
			WorldGen.GenerateWorld(new UnifiedRandom().Next());
			WorldGen.EveryTileFrame();
			player[myPlayer].Spawn(PlayerSpawnContext.SpawningIntoWorld);
		}
		else if (Platform.IsWindows && !dedServ)
		{
			IntPtr systemMenu = GetSystemMenu(((Game)this).Window.Handle, bRevert: false);
			int menuItemCount = GetMenuItemCount(systemMenu);
			RemoveMenu(systemMenu, menuItemCount - 1, 1024);
		}
		if (!dedServ)
		{
			SoundID.FillAccessMap();
			Star.SpawnStars();
			ItemSorting.SetupWhiteLists();
		}
	}

	private void Initialize_Entities()
	{
		for (int i = 0; i < maxMenuItems; i++)
		{
			menuItemScale[i] = 0.8f;
		}
		for (int j = 0; j < 6001; j++)
		{
			dust[j] = new Dust();
			dust[j].dustIndex = j;
		}
		for (int k = 0; k < 401; k++)
		{
			item[k] = new Item();
			item[k].whoAmI = k;
		}
		for (int l = 0; l < 201; l++)
		{
			npc[l] = new NPC();
			npc[l].whoAmI = l;
		}
		for (int m = 0; m < 256; m++)
		{
			player[m] = new Player();
			player[m].whoAmI = m;
		}
		for (int n = 0; n < 1001; n++)
		{
			projectile[n] = new Projectile();
			projectile[n].whoAmI = n;
		}
		for (int num = 0; num < 601; num++)
		{
			gore[num] = new Gore();
		}
		for (int num2 = 0; num2 < maxRain + 1; num2++)
		{
			rain[num2] = new Rain();
		}
		for (int num3 = 0; num3 < 200; num3++)
		{
			cloud[num3] = new Cloud();
		}
		for (int num4 = 0; num4 < 100; num4++)
		{
			combatText[num4] = new CombatText();
		}
		for (int num5 = 0; num5 < 20; num5++)
		{
			popupText[num5] = new PopupText();
		}
	}

	private static void Initialize_Items()
	{
		for (int i = 0; i < ItemID.Count; i++)
		{
			Item item = new Item();
			item.SetDefaults(i);
			if (item.headSlot > 0)
			{
				Item.headType[item.headSlot] = item.type;
			}
			if (item.bodySlot > 0)
			{
				Item.bodyType[item.bodySlot] = item.type;
			}
			if (item.legSlot > 0)
			{
				Item.legType[item.legSlot] = item.type;
			}
			switch (item.type)
			{
			case 683:
			case 723:
			case 726:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 788:
			case 1296:
			case 1308:
			case 1326:
			case 1444:
			case 1445:
			case 1446:
			case 1801:
			case 1930:
			case 1931:
			case 2188:
			case 2750:
			case 3006:
			case 3051:
			case 3209:
			case 3210:
			case 3377:
			case 3476:
			case 3569:
			case 3571:
			case 3787:
			case 3852:
			case 3870:
			case 4062:
			case 5065:
				Item.staff[item.type] = true;
				break;
			case 1827:
				Item.claw[item.type] = true;
				break;
			}
		}
	}

	private static void Initialize_TileAndNPCData2()
	{
		critterCage = true;
		for (int i = 0; i < 3600; i++)
		{
			AnimateTiles_CritterCages();
		}
		critterCage = false;
		tileBlockLight[549] = true;
		tileBrick[477] = true;
		tileSolid[477] = true;
		tileBlockLight[477] = true;
		tileBrick[492] = true;
		tileSolid[492] = true;
		tileBlockLight[492] = true;
		tileSolidTop[275] = true;
		tileSolidTop[280] = true;
		tileSolidTop[276] = true;
		tileSolidTop[277] = true;
		tileSolidTop[278] = true;
		tileSolidTop[279] = true;
		tileSolidTop[281] = true;
		tileSolidTop[605] = true;
		tileSolidTop[604] = true;
		tileSolidTop[603] = true;
		tileSolidTop[602] = true;
		tileSolidTop[601] = true;
		tileSolidTop[599] = true;
		tileSolidTop[600] = true;
		tileSolidTop[612] = true;
		tileSolidTop[611] = true;
		tileSolidTop[610] = true;
		tileSolidTop[609] = true;
		tileSolidTop[608] = true;
		tileSolidTop[606] = true;
		tileSolidTop[607] = true;
		tileSolidTop[558] = true;
		tileSolidTop[554] = true;
		tileSolidTop[553] = true;
		tileSolidTop[551] = true;
		tileSolidTop[550] = true;
		tileSolidTop[542] = true;
		tileSolidTop[413] = true;
		tileSolidTop[309] = true;
		tileSolidTop[297] = true;
		tileSolidTop[296] = true;
		tileSolidTop[645] = true;
		tileSolidTop[643] = true;
		tileSolidTop[644] = true;
		tileSolidTop[632] = true;
		tileSolidTop[640] = true;
		tileSolidTop[559] = true;
		tileSolidTop[414] = true;
		tileSolidTop[359] = true;
		tileSolidTop[358] = true;
		tileSolidTop[285] = true;
		tileSolidTop[286] = true;
		tileSolidTop[582] = true;
		tileSolidTop[555] = true;
		tileSolidTop[538] = true;
		tileSolidTop[533] = true;
		tileSolidTop[532] = true;
		tileSolidTop[394] = true;
		tileSolidTop[393] = true;
		tileSolidTop[392] = true;
		tileSolidTop[391] = true;
		tileSolidTop[339] = true;
		tileSolidTop[310] = true;
		tileSolidTop[299] = true;
		tileSolidTop[298] = true;
		tileSolidTop[629] = true;
		tileSolidTop[619] = true;
		tileSolidTop[556] = true;
		tileSolidTop[544] = true;
		tileSolidTop[364] = true;
		tileSolidTop[363] = true;
		tileSolidTop[362] = true;
		tileSolidTop[361] = true;
		tileTable[280] = true;
		tileTable[275] = true;
		tileTable[276] = true;
		tileTable[277] = true;
		tileTable[278] = true;
		tileTable[279] = true;
		tileTable[281] = true;
		tileTable[605] = true;
		tileTable[604] = true;
		tileTable[603] = true;
		tileTable[602] = true;
		tileTable[601] = true;
		tileTable[599] = true;
		tileTable[600] = true;
		tileTable[612] = true;
		tileTable[611] = true;
		tileTable[610] = true;
		tileTable[609] = true;
		tileTable[608] = true;
		tileTable[606] = true;
		tileTable[607] = true;
		tileTable[558] = true;
		tileTable[554] = true;
		tileTable[553] = true;
		tileTable[551] = true;
		tileTable[550] = true;
		tileTable[542] = true;
		tileTable[413] = true;
		tileTable[309] = true;
		tileTable[297] = true;
		tileTable[296] = true;
		tileTable[645] = true;
		tileTable[643] = true;
		tileTable[644] = true;
		tileTable[632] = true;
		tileTable[640] = true;
		tileTable[559] = true;
		tileTable[414] = true;
		tileTable[359] = true;
		tileTable[358] = true;
		tileTable[285] = true;
		tileTable[286] = true;
		tileTable[582] = true;
		tileTable[555] = true;
		tileTable[538] = true;
		tileTable[533] = true;
		tileTable[532] = true;
		tileTable[394] = true;
		tileTable[393] = true;
		tileTable[392] = true;
		tileTable[391] = true;
		tileTable[339] = true;
		tileTable[310] = true;
		tileTable[299] = true;
		tileTable[298] = true;
		tileTable[629] = true;
		tileTable[619] = true;
		tileTable[556] = true;
		tileTable[544] = true;
		tileTable[364] = true;
		tileTable[363] = true;
		tileTable[362] = true;
		tileTable[361] = true;
		tileBrick[1] = true;
		tileBrick[54] = true;
		tileBrick[118] = true;
		tileBrick[119] = true;
		tileBrick[120] = true;
		tileBrick[121] = true;
		tileBrick[122] = true;
		tileBrick[140] = true;
		tileBrick[148] = true;
		tileBrick[150] = true;
		tileBrick[151] = true;
		tileBrick[152] = true;
		tileBrick[30] = true;
		tileBrick[38] = true;
		tileBrick[39] = true;
		tileBrick[41] = true;
		tileBrick[43] = true;
		tileBrick[44] = true;
		tileBrick[481] = true;
		tileBrick[482] = true;
		tileBrick[483] = true;
		tileBrick[45] = true;
		tileBrick[46] = true;
		tileBrick[47] = true;
		tileBrick[75] = true;
		tileBrick[76] = true;
		tileBrick[160] = true;
		tileBrick[2] = true;
		tileBrick[199] = true;
		tileBrick[23] = true;
		tileBrick[60] = true;
		tileBrick[70] = true;
		tileBrick[109] = true;
		tileBrick[53] = true;
		tileBrick[57] = true;
		tileBrick[116] = true;
		tileBrick[234] = true;
		tileBrick[112] = true;
		tileBrick[147] = true;
		tileBrick[153] = true;
		tileBrick[154] = true;
		tileBrick[155] = true;
		tileBrick[156] = true;
		tileBrick[157] = true;
		tileBrick[158] = true;
		tileBrick[159] = true;
		tileBrick[273] = true;
		tileBrick[274] = true;
		tileMergeDirt[202] = true;
		tileBrick[202] = true;
		tileSolid[202] = true;
		tileBlockLight[202] = true;
		tileMergeDirt[498] = true;
		tileBrick[161] = true;
		tileBlockLight[161] = true;
		tileBlockLight[163] = true;
		tileBlockLight[164] = true;
		tileSolid[188] = true;
		tileBlockLight[188] = true;
		tileBrick[188] = true;
		tileMergeDirt[188] = true;
		tileBrick[179] = true;
		tileSolid[179] = true;
		tileBlockLight[179] = true;
		tileMoss[179] = true;
		tileBrick[381] = true;
		tileSolid[381] = true;
		tileBlockLight[381] = true;
		tileMoss[381] = true;
		tileBrick[534] = true;
		tileSolid[534] = true;
		tileBlockLight[534] = true;
		tileMoss[534] = true;
		tileBrick[536] = true;
		tileSolid[536] = true;
		tileBlockLight[536] = true;
		tileMoss[536] = true;
		tileBrick[539] = true;
		tileSolid[539] = true;
		tileBlockLight[539] = true;
		tileMoss[539] = true;
		tileBrick[625] = true;
		tileSolid[625] = true;
		tileBlockLight[625] = true;
		tileMoss[625] = true;
		tileBrick[627] = true;
		tileSolid[627] = true;
		tileBlockLight[627] = true;
		tileMoss[627] = true;
		tileBrick[180] = true;
		tileSolid[180] = true;
		tileBlockLight[180] = true;
		tileMoss[180] = true;
		tileBrick[181] = true;
		tileSolid[181] = true;
		tileBlockLight[181] = true;
		tileMoss[181] = true;
		tileBrick[182] = true;
		tileSolid[182] = true;
		tileBlockLight[182] = true;
		tileMoss[182] = true;
		tileBrick[183] = true;
		tileSolid[183] = true;
		tileBlockLight[183] = true;
		tileMoss[183] = true;
		tileBrick[512] = true;
		tileSolid[512] = true;
		tileBlockLight[512] = true;
		tileBrick[513] = true;
		tileSolid[513] = true;
		tileBlockLight[513] = true;
		tileBrick[514] = true;
		tileSolid[514] = true;
		tileBlockLight[514] = true;
		tileBrick[515] = true;
		tileSolid[515] = true;
		tileBlockLight[515] = true;
		tileBrick[516] = true;
		tileSolid[516] = true;
		tileBlockLight[516] = true;
		tileBrick[517] = true;
		tileSolid[517] = true;
		tileBlockLight[517] = true;
		tileLighted[517] = true;
		tileBrick[687] = true;
		tileSolid[687] = true;
		tileBlockLight[687] = true;
		tileLighted[687] = true;
		tileBrick[535] = true;
		tileSolid[535] = true;
		tileBlockLight[535] = true;
		tileLighted[535] = true;
		tileBrick[689] = true;
		tileSolid[689] = true;
		tileBlockLight[689] = true;
		tileLighted[689] = true;
		tileBrick[537] = true;
		tileSolid[537] = true;
		tileBlockLight[537] = true;
		tileLighted[537] = true;
		tileBrick[690] = true;
		tileSolid[690] = true;
		tileBlockLight[690] = true;
		tileLighted[690] = true;
		tileBrick[540] = true;
		tileSolid[540] = true;
		tileBlockLight[540] = true;
		tileLighted[540] = true;
		tileBrick[688] = true;
		tileSolid[688] = true;
		tileBlockLight[688] = true;
		tileLighted[688] = true;
		tileBrick[626] = true;
		tileSolid[626] = true;
		tileBlockLight[626] = true;
		tileLighted[626] = true;
		tileBrick[691] = true;
		tileSolid[691] = true;
		tileBlockLight[691] = true;
		tileLighted[691] = true;
		tileBrick[628] = true;
		tileSolid[628] = true;
		tileBlockLight[628] = true;
		tileLighted[628] = true;
		tileBrick[692] = true;
		tileSolid[692] = true;
		tileBlockLight[692] = true;
		tileLighted[692] = true;
		tileLighted[592] = true;
		tileLighted[656] = true;
		tileLighted[356] = true;
		tileLighted[663] = true;
		tileMergeDirt[177] = true;
		tileMergeDirt[190] = true;
		tileSolid[196] = true;
		tileSolid[197] = true;
		tileMergeDirt[197] = true;
		tileBlockLight[197] = true;
		tileNoSunLight[197] = true;
		tileBrick[175] = true;
		tileSolid[175] = true;
		tileBlockLight[175] = true;
		tileBrick[176] = true;
		tileSolid[176] = true;
		tileBlockLight[176] = true;
		tileBrick[177] = true;
		tileSolid[177] = true;
		tileBlockLight[177] = true;
		tileBrick[225] = true;
		tileBrick[229] = true;
		tileShine[221] = 925;
		tileShine[222] = 875;
		tileShine[223] = 825;
		tileShine2[221] = true;
		tileShine2[222] = true;
		tileShine2[223] = true;
		tileMergeDirt[175] = true;
		tileMergeDirt[176] = true;
		tileMergeDirt[177] = true;
		tileMergeDirt[208] = true;
		tileBrick[162] = true;
		tileSolid[162] = true;
		tileBlockLight[162] = false;
		tileBrick[163] = true;
		tileSolid[163] = true;
		tileBrick[164] = true;
		tileSolid[164] = true;
		tileShine2[6] = true;
		tileShine2[7] = true;
		tileShine2[8] = true;
		tileShine2[9] = true;
		tileShine2[166] = true;
		tileShine2[167] = true;
		tileShine2[168] = true;
		tileShine2[169] = true;
		tileShine2[12] = true;
		tileShine2[21] = true;
		tileShine2[467] = true;
		tileShine2[441] = true;
		tileShine2[468] = true;
		tileShine2[22] = true;
		tileShine2[25] = true;
		tileShine2[45] = true;
		tileShine2[46] = true;
		tileShine2[47] = true;
		tileShine2[63] = true;
		tileShine2[64] = true;
		tileShine2[65] = true;
		tileShine2[66] = true;
		tileShine2[67] = true;
		tileShine2[68] = true;
		tileShine2[566] = true;
		tileShine2[107] = true;
		tileShine2[108] = true;
		tileShine2[111] = true;
		tileShine2[121] = true;
		tileShine2[122] = true;
		tileShine2[117] = true;
		tileShine2[211] = true;
		tileShine2[682] = true;
		tileShine2[681] = true;
		tileShine2[680] = true;
		tileShine2[685] = true;
		tileShine2[686] = true;
		tileShine[129] = 300;
		tileNoFail[81] = true;
		tileCracked[481] = true;
		tileCracked[482] = true;
		tileCracked[483] = true;
		tileNoFail[481] = true;
		tileNoFail[482] = true;
		tileNoFail[483] = true;
		tileNoFail[330] = true;
		tileNoFail[331] = true;
		tileNoFail[332] = true;
		tileNoFail[333] = true;
		tileNoFail[254] = true;
		tileNoFail[324] = true;
		tileNoFail[129] = true;
		tileNoFail[192] = true;
		tileHammer[26] = true;
		tileHammer[31] = true;
		tileAxe[5] = true;
		tileAxe[72] = true;
		tileAxe[80] = true;
		tileAxe[488] = true;
		tileAxe[323] = true;
		tileAxe[596] = true;
		tileAxe[616] = true;
		tileAxe[634] = true;
		tileAxe[589] = true;
		tileAxe[584] = true;
		tileAxe[588] = true;
		tileAxe[586] = true;
		tileAxe[587] = true;
		tileAxe[585] = true;
		tileAxe[583] = true;
		tileBrick[59] = true;
		tileBrick[234] = true;
		tileSolid[234] = true;
		tileMergeDirt[234] = true;
		tileSand[53] = true;
		tileSand[112] = true;
		tileSand[116] = true;
		tileSand[234] = true;
		tileFrameImportant[630] = true;
		tileLavaDeath[630] = true;
		tileNoSunLight[630] = true;
		tileFrameImportant[631] = true;
		tileLavaDeath[631] = true;
		tileNoSunLight[631] = true;
		tileFrameImportant[571] = true;
		tileLavaDeath[571] = true;
		tileFrameImportant[579] = true;
		tileLavaDeath[579] = true;
		tileFrameImportant[591] = true;
		tileLavaDeath[591] = true;
		tileFrameImportant[592] = true;
		tileLavaDeath[592] = false;
		tileFrameImportant[538] = true;
		tileLavaDeath[538] = true;
		tileFrameImportant[544] = true;
		tileLavaDeath[544] = true;
		tileFrameImportant[629] = true;
		tileLavaDeath[629] = true;
		tileFrameImportant[550] = true;
		tileLavaDeath[550] = true;
		tileFrameImportant[551] = true;
		tileLavaDeath[551] = true;
		tileFrameImportant[533] = true;
		tileLavaDeath[533] = true;
		tileFrameImportant[553] = true;
		tileLavaDeath[553] = true;
		tileFrameImportant[554] = true;
		tileLavaDeath[554] = true;
		tileFrameImportant[555] = true;
		tileLavaDeath[555] = true;
		tileFrameImportant[556] = true;
		tileLavaDeath[556] = true;
		tileFrameImportant[558] = true;
		tileLavaDeath[558] = true;
		tileFrameImportant[559] = true;
		tileLavaDeath[559] = true;
		tileFrameImportant[599] = true;
		tileLavaDeath[599] = true;
		tileFrameImportant[600] = true;
		tileLavaDeath[600] = true;
		tileFrameImportant[601] = true;
		tileLavaDeath[601] = true;
		tileFrameImportant[602] = true;
		tileLavaDeath[602] = true;
		tileFrameImportant[603] = true;
		tileLavaDeath[603] = true;
		tileFrameImportant[604] = true;
		tileLavaDeath[604] = true;
		tileFrameImportant[605] = true;
		tileLavaDeath[605] = true;
		tileFrameImportant[606] = true;
		tileLavaDeath[606] = true;
		tileFrameImportant[607] = true;
		tileLavaDeath[607] = true;
		tileFrameImportant[608] = true;
		tileLavaDeath[608] = true;
		tileFrameImportant[609] = true;
		tileLavaDeath[609] = true;
		tileFrameImportant[610] = true;
		tileLavaDeath[610] = true;
		tileFrameImportant[611] = true;
		tileLavaDeath[611] = true;
		tileFrameImportant[612] = true;
		tileLavaDeath[612] = true;
		tileFrameImportant[632] = true;
		tileLavaDeath[632] = true;
		tileFrameImportant[640] = true;
		tileLavaDeath[640] = true;
		tileFrameImportant[643] = true;
		tileLavaDeath[643] = true;
		tileFrameImportant[644] = true;
		tileLavaDeath[644] = true;
		tileFrameImportant[645] = true;
		tileLavaDeath[645] = true;
		tileFrameImportant[568] = true;
		tileNoAttach[568] = true;
		tileLavaDeath[568] = true;
		tileLighted[568] = true;
		tileFrameImportant[569] = true;
		tileNoAttach[569] = true;
		tileLavaDeath[569] = true;
		tileLighted[569] = true;
		tileFrameImportant[570] = true;
		tileNoAttach[570] = true;
		tileLavaDeath[570] = true;
		tileLighted[570] = true;
		tileFrameImportant[580] = true;
		tileNoAttach[580] = true;
		tileLavaDeath[580] = true;
		tileLighted[580] = true;
		tileFrameImportant[582] = true;
		tileLavaDeath[582] = true;
		tileLighted[582] = true;
		tileFrameImportant[619] = true;
		tileLavaDeath[619] = true;
		tileLighted[619] = true;
		tileFrameImportant[620] = true;
		tileNoAttach[620] = true;
		tileLavaDeath[620] = true;
		tileLighted[620] = true;
		tileFrameImportant[572] = true;
		tileNoAttach[572] = true;
		tileLavaDeath[572] = true;
		tileLighted[572] = true;
		tileFrameImportant[560] = true;
		tileLavaDeath[560] = true;
		tileFrameImportant[564] = true;
		tileNoAttach[564] = true;
		tileLavaDeath[564] = true;
		tileLighted[564] = true;
		tileFrameImportant[567] = true;
		tileLavaDeath[567] = true;
		tileFrameImportant[565] = true;
		tileNoAttach[565] = true;
		tileLavaDeath[565] = true;
		tileFrameImportant[593] = true;
		tileNoAttach[593] = true;
		tileLavaDeath[593] = false;
		tileLighted[593] = true;
		tileFrameImportant[594] = true;
		tileNoAttach[594] = true;
		tileLavaDeath[594] = false;
		tileLighted[594] = true;
		tileLighted[548] = true;
		tileLighted[613] = true;
		tileLighted[614] = true;
		tileFrameImportant[654] = true;
		tileCut[654] = true;
		tileNoFail[654] = true;
		tileLavaDeath[654] = true;
		tileFrameImportant[518] = true;
		tileCut[518] = true;
		tileNoFail[518] = true;
		tileFrameImportant[519] = true;
		tileCut[519] = true;
		tileNoFail[519] = true;
		tileLighted[519] = true;
		tileFrameImportant[549] = true;
		tileCut[549] = true;
		tileNoFail[549] = true;
		tileFrameImportant[529] = true;
		tileCut[529] = true;
		tileNoFail[529] = true;
		tileLavaDeath[529] = true;
		tileFrameImportant[637] = true;
		tileCut[637] = true;
		tileNoFail[637] = true;
		tileLavaDeath[637] = false;
		tileLighted[637] = true;
		tileFrameImportant[530] = true;
		tileNoFail[530] = true;
		tileLavaDeath[530] = true;
		tileFrameImportant[233] = true;
		tileFrameImportant[485] = true;
		tileLighted[215] = true;
		tileFrameImportant[227] = true;
		tileFrameImportant[228] = true;
		tileFrameImportant[231] = true;
		tileCut[231] = true;
		tileFrameImportant[216] = true;
		tileFrameImportant[217] = true;
		tileFrameImportant[218] = true;
		tileFrameImportant[219] = true;
		tileFrameImportant[642] = true;
		tileFrameImportant[220] = true;
		tileFrameImportant[338] = true;
		tileFrameImportant[453] = true;
		tileFrameImportant[456] = true;
		tileFrameImportant[165] = true;
		tileFrameImportant[209] = true;
		tileFrameImportant[215] = true;
		tileFrameImportant[210] = true;
		tileFrameImportant[212] = true;
		tileFrameImportant[207] = true;
		tileFrameImportant[178] = true;
		tileFrameImportant[184] = true;
		tileFrameImportant[185] = true;
		tileFrameImportant[186] = true;
		tileFrameImportant[187] = true;
		tileFrameImportant[173] = true;
		tileFrameImportant[174] = true;
		tileLighted[173] = true;
		tileLighted[174] = true;
		tileFrameImportant[139] = true;
		tileLighted[160] = true;
		tileLighted[149] = true;
		tileFrameImportant[149] = true;
		tileFrameImportant[142] = true;
		tileFrameImportant[143] = true;
		tileFrameImportant[144] = true;
		tileStone[131] = true;
		tileFrameImportant[136] = true;
		tileFrameImportant[137] = true;
		tileFrameImportant[138] = true;
		tileFrameImportant[664] = true;
		tileFrameImportant[665] = true;
		tileFrameImportant[484] = true;
		tileLavaDeath[484] = true;
		tileNoFail[484] = true;
		tileBlockLight[137] = true;
		tileSolid[137] = true;
		tileBlockLight[160] = true;
		tileSolid[160] = true;
		tileMergeDirt[160] = true;
		tileBlockLight[161] = true;
		tileSolid[161] = true;
		tileBlockLight[145] = true;
		tileSolid[145] = true;
		tileMergeDirt[145] = true;
		tileBlockLight[146] = true;
		tileSolid[146] = true;
		tileMergeDirt[146] = true;
		tileBlockLight[147] = true;
		tileSolid[147] = true;
		tileBlockLight[148] = true;
		tileSolid[148] = true;
		tileMergeDirt[148] = true;
		tileSolid[138] = true;
		tileSolid[664] = true;
		tileSolid[484] = true;
		tileCut[484] = true;
		tileBlockLight[140] = true;
		tileSolid[140] = true;
		tileBlockLight[151] = true;
		tileSolid[151] = true;
		tileMergeDirt[151] = true;
		tileBlockLight[152] = true;
		tileSolid[152] = true;
		tileMergeDirt[152] = true;
		tileBlockLight[153] = true;
		tileSolid[153] = true;
		tileMergeDirt[153] = true;
		tileBlockLight[154] = true;
		tileSolid[154] = true;
		tileMergeDirt[154] = true;
		tileBlockLight[155] = true;
		tileSolid[155] = true;
		tileMergeDirt[155] = true;
		tileBlockLight[156] = true;
		tileSolid[156] = true;
		tileMergeDirt[156] = true;
		tileMergeDirt[150] = true;
		tileBlockLight[157] = true;
		tileSolid[157] = true;
		tileMergeDirt[157] = true;
		tileBlockLight[158] = true;
		tileSolid[158] = true;
		tileMergeDirt[158] = true;
		tileBlockLight[159] = true;
		tileSolid[159] = true;
		tileMergeDirt[159] = true;
		tileFrameImportant[320] = true;
		tileFrameImportant[49] = true;
		tileShine[22] = 1150;
		tileShine[6] = 1150;
		tileShine[7] = 1100;
		tileShine[8] = 1000;
		tileShine[9] = 1050;
		tileShine[166] = 1125;
		tileShine[167] = 1075;
		tileShine[168] = 1025;
		tileShine[169] = 975;
		tileShine[617] = 400;
		tileShine[178] = 500;
		tileShine2[178] = true;
		tileShine[12] = 300;
		tileShine[21] = 1200;
		tileShine[467] = 1200;
		tileShine[441] = 1200;
		tileShine[468] = 1200;
		tileShine[63] = 900;
		tileShine[64] = 900;
		tileShine[65] = 900;
		tileShine[66] = 900;
		tileShine[67] = 900;
		tileShine[68] = 900;
		tileShine[566] = 900;
		tileShine[45] = 1900;
		tileShine[680] = 1900;
		tileShine[46] = 2000;
		tileShine[681] = 2000;
		tileShine[47] = 2100;
		tileShine[682] = 2100;
		tileShine[122] = 1800;
		tileShine[686] = 1800;
		tileShine[121] = 1850;
		tileShine[685] = 1850;
		tileShine[125] = 600;
		tileShine[109] = 9000;
		tileShine[110] = 9000;
		tileShine[116] = 9000;
		tileShine[117] = 9000;
		tileShine[118] = 8000;
		tileShine[107] = 950;
		tileShine[108] = 900;
		tileShine[111] = 850;
		tileShine[211] = 500;
		tileLighted[4] = true;
		tileLighted[17] = true;
		tileLighted[133] = true;
		tileLighted[31] = true;
		tileLighted[33] = true;
		tileLighted[34] = true;
		tileLighted[35] = true;
		tileLighted[37] = true;
		tileLighted[42] = true;
		tileLighted[49] = true;
		tileLighted[58] = true;
		tileLighted[61] = true;
		tileLighted[70] = true;
		tileLighted[71] = true;
		tileLighted[72] = true;
		tileLighted[76] = true;
		tileLighted[684] = true;
		tileLighted[77] = true;
		tileLighted[19] = true;
		tileLighted[22] = true;
		tileLighted[26] = true;
		tileLighted[83] = true;
		tileLighted[84] = true;
		tileLighted[92] = true;
		tileLighted[93] = true;
		tileLighted[95] = true;
		tileLighted[98] = true;
		tileLighted[100] = true;
		tileLighted[109] = true;
		tileLighted[125] = true;
		tileLighted[126] = true;
		tileLighted[129] = true;
		tileLighted[140] = true;
		tileLighted[270] = true;
		tileLighted[271] = true;
		tileLighted[581] = true;
		tileLighted[660] = true;
		tileLighted[578] = true;
		tileMergeDirt[1] = true;
		tileMergeDirt[6] = true;
		tileMergeDirt[7] = true;
		tileMergeDirt[8] = true;
		tileMergeDirt[9] = true;
		tileMergeDirt[166] = true;
		tileMergeDirt[167] = true;
		tileMergeDirt[168] = true;
		tileMergeDirt[169] = true;
		tileMergeDirt[22] = true;
		tileMergeDirt[25] = true;
		tileMergeDirt[30] = true;
		tileMergeDirt[37] = true;
		tileMergeDirt[38] = true;
		tileMergeDirt[40] = true;
		tileMergeDirt[53] = true;
		tileMergeDirt[56] = true;
		tileMergeDirt[107] = true;
		tileMergeDirt[108] = true;
		tileMergeDirt[111] = true;
		tileMergeDirt[112] = true;
		tileMergeDirt[116] = true;
		tileMergeDirt[117] = true;
		tileMergeDirt[123] = true;
		tileMergeDirt[140] = true;
		tileMergeDirt[39] = true;
		tileMergeDirt[122] = true;
		tileMergeDirt[121] = true;
		tileMergeDirt[120] = true;
		tileMergeDirt[119] = true;
		tileMergeDirt[118] = true;
		tileMergeDirt[47] = true;
		tileMergeDirt[46] = true;
		tileMergeDirt[45] = true;
		tileMergeDirt[41] = true;
		tileMergeDirt[43] = true;
		tileMergeDirt[44] = true;
		tileMergeDirt[481] = true;
		tileMergeDirt[482] = true;
		tileMergeDirt[483] = true;
		tileFrameImportant[380] = true;
		tileFrameImportant[201] = true;
		tileFrameImportant[3] = true;
		tileFrameImportant[4] = true;
		tileFrameImportant[5] = true;
		tileFrameImportant[10] = true;
		tileFrameImportant[11] = true;
		tileFrameImportant[12] = true;
		tileFrameImportant[13] = true;
		tileFrameImportant[14] = true;
		tileFrameImportant[469] = true;
		tileFrameImportant[486] = true;
		tileFrameImportant[488] = true;
		tileFrameImportant[487] = true;
		tileFrameImportant[489] = true;
		tileFrameImportant[490] = true;
		tileFrameImportant[15] = true;
		tileFrameImportant[497] = true;
		tileFrameImportant[16] = true;
		tileFrameImportant[17] = true;
		tileFrameImportant[18] = true;
		tileFrameImportant[19] = true;
		tileFrameImportant[20] = true;
		tileFrameImportant[21] = true;
		tileFrameImportant[467] = true;
		tileFrameImportant[441] = true;
		tileFrameImportant[468] = true;
		tileFrameImportant[24] = true;
		tileFrameImportant[26] = true;
		tileFrameImportant[27] = true;
		tileFrameImportant[28] = true;
		tileFrameImportant[29] = true;
		tileFrameImportant[31] = true;
		tileFrameImportant[33] = true;
		tileFrameImportant[34] = true;
		tileFrameImportant[35] = true;
		tileFrameImportant[42] = true;
		tileFrameImportant[50] = true;
		tileFrameImportant[55] = true;
		tileFrameImportant[61] = true;
		tileFrameImportant[71] = true;
		tileFrameImportant[72] = true;
		tileFrameImportant[73] = true;
		tileFrameImportant[74] = true;
		tileFrameImportant[77] = true;
		tileFrameImportant[78] = true;
		tileFrameImportant[79] = true;
		tileFrameImportant[81] = true;
		tileFrameImportant[82] = true;
		tileFrameImportant[83] = true;
		tileFrameImportant[84] = true;
		tileFrameImportant[85] = true;
		tileFrameImportant[86] = true;
		tileFrameImportant[87] = true;
		tileFrameImportant[88] = true;
		tileFrameImportant[89] = true;
		tileFrameImportant[90] = true;
		tileFrameImportant[91] = true;
		tileFrameImportant[92] = true;
		tileFrameImportant[93] = true;
		tileFrameImportant[94] = true;
		tileFrameImportant[95] = true;
		tileFrameImportant[96] = true;
		tileFrameImportant[97] = true;
		tileFrameImportant[98] = true;
		tileFrameImportant[99] = true;
		tileFrameImportant[101] = true;
		tileFrameImportant[102] = true;
		tileFrameImportant[103] = true;
		tileFrameImportant[104] = true;
		tileFrameImportant[105] = true;
		tileFrameImportant[100] = true;
		tileFrameImportant[106] = true;
		tileFrameImportant[110] = true;
		tileFrameImportant[113] = true;
		tileFrameImportant[114] = true;
		tileFrameImportant[125] = true;
		tileFrameImportant[287] = true;
		tileFrameImportant[126] = true;
		tileFrameImportant[128] = true;
		tileFrameImportant[129] = true;
		tileFrameImportant[132] = true;
		tileFrameImportant[133] = true;
		tileFrameImportant[134] = true;
		tileFrameImportant[135] = true;
		tileFrameImportant[172] = true;
		tileFrameImportant[319] = true;
		tileFrameImportant[323] = true;
		tileFrameImportant[335] = true;
		tileFrameImportant[337] = true;
		tileFrameImportant[349] = true;
		tileFrameImportant[376] = true;
		tileFrameImportant[378] = true;
		tileFrameImportant[425] = true;
		tileFrameImportant[465] = true;
		tileFrameImportant[506] = true;
		tileFrameImportant[510] = true;
		tileFrameImportant[511] = true;
		tileFrameImportant[531] = true;
		tileFrameImportant[545] = true;
		tileFrameImportant[547] = true;
		tileFrameImportant[548] = true;
		tileFrameImportant[552] = true;
		tileFrameImportant[573] = true;
		tileFrameImportant[613] = true;
		tileFrameImportant[614] = true;
		tileFrameImportant[621] = true;
		tileFrameImportant[622] = true;
		tileFrameImportant[623] = true;
		tileFrameImportant[624] = true;
		tileFrameImportant[656] = true;
		tileFrameImportant[141] = true;
		tileFrameImportant[270] = true;
		tileFrameImportant[271] = true;
		tileFrameImportant[581] = true;
		tileFrameImportant[660] = true;
		tileFrameImportant[314] = true;
		tileSolidTop[376] = true;
		tileTable[376] = true;
		tileTable[380] = true;
		tileFrameImportant[583] = true;
		tileFrameImportant[584] = true;
		tileFrameImportant[585] = true;
		tileFrameImportant[586] = true;
		tileFrameImportant[587] = true;
		tileFrameImportant[588] = true;
		tileFrameImportant[589] = true;
		tileFrameImportant[590] = true;
		tileNoAttach[590] = true;
		tileFrameImportant[595] = true;
		tileNoAttach[595] = true;
		tileFrameImportant[596] = true;
		tileFrameImportant[615] = true;
		tileNoAttach[615] = true;
		tileFrameImportant[616] = true;
		tileFrameImportant[634] = true;
		tileCut[201] = true;
		tileCut[3] = true;
		tileCut[24] = true;
		tileCut[28] = true;
		tileCut[32] = true;
		tileCut[51] = true;
		tileCut[52] = true;
		tileCut[61] = true;
		tileCut[62] = true;
		tileCut[69] = true;
		tileCut[655] = true;
		tileCut[71] = true;
		tileCut[73] = true;
		tileCut[74] = true;
		tileCut[82] = true;
		tileCut[83] = true;
		tileCut[84] = true;
		tileCut[110] = true;
		tileCut[113] = true;
		tileCut[115] = true;
		tileCut[184] = true;
		tileCut[205] = true;
		tileCut[352] = true;
		tileCut[382] = true;
		tileCut[528] = true;
		tileLighted[528] = true;
		tileCut[636] = true;
		tileCut[638] = true;
		tileCut[444] = true;
		tileCut[485] = true;
		tileAlch[82] = true;
		tileAlch[83] = true;
		tileAlch[84] = true;
		tileSolid[127] = true;
		tileSolid[130] = true;
		tileBlockLight[130] = true;
		tileBlockLight[131] = true;
		tileNoAttach[232] = true;
		tileSolid[107] = true;
		tileBlockLight[107] = true;
		tileSolid[108] = true;
		tileBlockLight[108] = true;
		tileSolid[111] = true;
		tileBlockLight[111] = true;
		tileSolid[109] = true;
		tileBlockLight[109] = true;
		tileSolid[110] = false;
		tileNoAttach[110] = true;
		tileNoFail[110] = true;
		tileSolid[112] = true;
		tileBlockLight[112] = true;
		tileSolid[116] = true;
		tileBlockLight[116] = true;
		tileBrick[117] = true;
		tileBrick[25] = true;
		tileBrick[203] = true;
		tileSolid[117] = true;
		tileBlockLight[117] = true;
		tileSolid[123] = true;
		tileBlockLight[123] = true;
		tileNoFail[165] = true;
		tileNoFail[184] = true;
		tileNoFail[185] = true;
		tileNoFail[186] = true;
		tileNoFail[187] = true;
		tileSolid[118] = true;
		tileBlockLight[118] = true;
		tileSolid[119] = true;
		tileBlockLight[119] = true;
		tileSolid[120] = true;
		tileBlockLight[120] = true;
		tileSolid[121] = true;
		tileBlockLight[121] = true;
		tileSolid[122] = true;
		tileBlockLight[122] = true;
		tileSolid[150] = true;
		tileBlockLight[150] = true;
		tileBlockLight[115] = true;
		tileSolid[199] = true;
		tileBlockLight[199] = true;
		tileNoFail[162] = true;
		tileSolid[0] = true;
		tileBlockLight[0] = true;
		tileSolid[1] = true;
		tileBlockLight[1] = true;
		tileSolid[2] = true;
		tileBlockLight[2] = true;
		tileSolid[3] = false;
		tileNoAttach[3] = true;
		tileNoFail[3] = true;
		tileNoFail[201] = true;
		tileSolid[4] = false;
		tileNoAttach[4] = true;
		tileNoFail[4] = true;
		tileNoFail[24] = true;
		tileSolid[5] = false;
		tileSolid[6] = true;
		tileBlockLight[6] = true;
		tileSolid[7] = true;
		tileBlockLight[7] = true;
		tileSolid[8] = true;
		tileBlockLight[8] = true;
		tileSolid[9] = true;
		tileBlockLight[9] = true;
		tileSolid[166] = true;
		tileBlockLight[166] = true;
		tileSolid[167] = true;
		tileBlockLight[167] = true;
		tileSolid[168] = true;
		tileBlockLight[168] = true;
		tileSolid[169] = true;
		tileBlockLight[169] = true;
		tileBlockLight[10] = true;
		tileSolid[10] = true;
		tileNoAttach[10] = true;
		tileBlockLight[10] = true;
		tileSolid[11] = false;
		tileSolidTop[19] = true;
		tileSolid[19] = true;
		tileSolid[22] = true;
		tileSolid[23] = true;
		tileSolid[25] = true;
		tileSolid[30] = true;
		tileNoFail[32] = true;
		tileBlockLight[32] = true;
		tileNoFail[352] = true;
		tileBlockLight[352] = true;
		tileSolid[37] = true;
		tileBlockLight[37] = true;
		tileSolid[38] = true;
		tileBlockLight[38] = true;
		tileSolid[39] = true;
		tileBlockLight[39] = true;
		tileSolid[40] = true;
		tileBlockLight[40] = true;
		tileSolid[41] = true;
		tileBlockLight[41] = true;
		tileSolid[43] = true;
		tileBlockLight[43] = true;
		tileSolid[44] = true;
		tileBlockLight[44] = true;
		tileSolid[481] = true;
		tileBlockLight[481] = true;
		tileSolid[482] = true;
		tileBlockLight[482] = true;
		tileSolid[483] = true;
		tileBlockLight[483] = true;
		tileSolid[634] = false;
		tileFrameImportant[634] = true;
		tileLavaDeath[634] = false;
		tileBlockLight[634] = false;
		tileLighted[634] = true;
		tileLighted[20] = true;
		tileSolid[45] = true;
		tileBlockLight[45] = true;
		tileSolid[46] = true;
		tileBlockLight[46] = true;
		tileSolid[47] = true;
		tileBlockLight[47] = true;
		tileSolid[48] = true;
		tileSolid[53] = true;
		tileBlockLight[53] = true;
		tileSolid[54] = true;
		tileBlockLight[52] = true;
		tileBlockLight[205] = true;
		tileSolid[56] = true;
		tileBlockLight[56] = true;
		tileSolid[57] = true;
		tileBlockLight[57] = true;
		tileSolid[58] = true;
		tileBlockLight[58] = true;
		tileBlockLight[382] = true;
		tileSolid[59] = true;
		tileBlockLight[59] = true;
		tileSolid[60] = true;
		tileBlockLight[60] = true;
		tileSolid[63] = true;
		tileBlockLight[63] = true;
		tileStone[63] = true;
		tileStone[130] = true;
		tileSolid[64] = true;
		tileBlockLight[64] = true;
		tileStone[64] = true;
		tileSolid[65] = true;
		tileBlockLight[65] = true;
		tileStone[65] = true;
		tileSolid[66] = true;
		tileBlockLight[66] = true;
		tileStone[66] = true;
		tileSolid[67] = true;
		tileBlockLight[67] = true;
		tileStone[67] = true;
		tileSolid[68] = true;
		tileBlockLight[68] = true;
		tileStone[68] = true;
		tileSolid[566] = true;
		tileBlockLight[566] = true;
		tileStone[566] = true;
		tileSolid[75] = true;
		tileBlockLight[75] = true;
		tileBrick[633] = true;
		tileSolid[633] = true;
		tileBlockLight[633] = true;
		tileLighted[633] = true;
		tileSolid[76] = true;
		tileBlockLight[76] = true;
		tileSolid[70] = true;
		tileBlockLight[70] = true;
		tileSolid[661] = true;
		tileBlockLight[661] = true;
		tileBrick[661] = true;
		tileSolid[662] = true;
		tileBlockLight[662] = true;
		tileBrick[662] = true;
		tileNoFail[50] = true;
		tileNoAttach[50] = true;
		tileDungeon[41] = true;
		tileDungeon[43] = true;
		tileDungeon[44] = true;
		tileBlockLight[30] = true;
		tileBlockLight[25] = true;
		tileBlockLight[23] = true;
		tileBlockLight[22] = true;
		tileBlockLight[62] = true;
		tileSolidTop[18] = true;
		tileSolidTop[14] = true;
		tileSolidTop[469] = true;
		tileSolidTop[16] = true;
		tileSolidTop[134] = true;
		tileSolidTop[114] = true;
		tileNoAttach[20] = true;
		tileNoAttach[19] = true;
		tileNoAttach[13] = true;
		tileNoAttach[14] = true;
		tileNoAttach[469] = true;
		tileNoAttach[486] = true;
		tileNoAttach[488] = true;
		tileNoAttach[487] = true;
		tileNoAttach[489] = true;
		tileNoAttach[490] = true;
		tileNoAttach[15] = true;
		tileNoAttach[497] = true;
		tileNoAttach[16] = true;
		tileNoAttach[134] = true;
		tileNoAttach[17] = true;
		tileNoAttach[18] = true;
		tileNoAttach[21] = true;
		tileNoAttach[467] = true;
		tileNoAttach[441] = true;
		tileNoAttach[468] = true;
		tileNoAttach[27] = true;
		tileNoAttach[114] = true;
		tileTable[14] = true;
		tileTable[469] = true;
		tileTable[18] = true;
		tileTable[19] = true;
		tileTable[114] = true;
		tileNoAttach[86] = true;
		tileNoAttach[87] = true;
		tileNoAttach[88] = true;
		tileNoAttach[89] = true;
		tileNoAttach[90] = true;
		tileTable[101] = true;
		tileNoAttach[101] = true;
		tileNoAttach[102] = true;
		tileNoAttach[94] = true;
		tileNoAttach[95] = true;
		tileNoAttach[96] = true;
		tileNoAttach[97] = true;
		tileNoAttach[98] = true;
		tileNoAttach[99] = true;
		tileTable[87] = true;
		tileTable[88] = true;
		tileSolidTop[87] = true;
		tileSolidTop[88] = true;
		tileSolidTop[101] = true;
		tileNoAttach[91] = true;
		tileNoAttach[92] = true;
		tileNoAttach[93] = true;
		tileLighted[190] = true;
		tileBlockLight[192] = true;
		tileWaterDeath[215] = true;
		tileWaterDeath[4] = true;
		tileWaterDeath[51] = true;
		tileWaterDeath[93] = true;
		tileWaterDeath[98] = true;
		tileWaterDeath[552] = true;
		tileLavaDeath[3] = true;
		tileLavaDeath[5] = true;
		tileLavaDeath[10] = true;
		tileLavaDeath[11] = true;
		tileLavaDeath[12] = true;
		tileLavaDeath[13] = true;
		tileLavaDeath[14] = true;
		tileLavaDeath[469] = true;
		tileLavaDeath[486] = true;
		tileLavaDeath[488] = true;
		tileLavaDeath[487] = true;
		tileLavaDeath[489] = true;
		tileLavaDeath[490] = true;
		tileLavaDeath[15] = true;
		tileLavaDeath[497] = true;
		tileLavaDeath[16] = true;
		tileLavaDeath[17] = true;
		tileLavaDeath[18] = true;
		tileLavaDeath[19] = true;
		tileLavaDeath[24] = true;
		tileLavaDeath[27] = true;
		tileLavaDeath[28] = true;
		tileLavaDeath[29] = true;
		tileLavaDeath[32] = true;
		tileLavaDeath[33] = true;
		tileLavaDeath[34] = true;
		tileLavaDeath[35] = true;
		tileLavaDeath[36] = true;
		tileLavaDeath[42] = true;
		tileLavaDeath[49] = true;
		tileLavaDeath[50] = true;
		tileLavaDeath[51] = true;
		tileLavaDeath[52] = true;
		tileLavaDeath[55] = true;
		tileLavaDeath[61] = true;
		tileLavaDeath[62] = true;
		tileLavaDeath[69] = true;
		tileLavaDeath[655] = true;
		tileLavaDeath[71] = true;
		tileLavaDeath[72] = true;
		tileLavaDeath[73] = true;
		tileLavaDeath[74] = true;
		tileLavaDeath[79] = true;
		tileLavaDeath[80] = true;
		tileLavaDeath[81] = true;
		tileLavaDeath[86] = true;
		tileLavaDeath[87] = true;
		tileLavaDeath[88] = true;
		tileLavaDeath[89] = true;
		tileLavaDeath[90] = true;
		tileLavaDeath[91] = true;
		tileLavaDeath[92] = true;
		tileLavaDeath[93] = true;
		tileLavaDeath[94] = true;
		tileLavaDeath[95] = true;
		tileLavaDeath[96] = true;
		tileLavaDeath[97] = true;
		tileLavaDeath[98] = true;
		tileLavaDeath[100] = true;
		tileLavaDeath[101] = true;
		tileLavaDeath[102] = true;
		tileLavaDeath[103] = true;
		tileLavaDeath[104] = true;
		tileLavaDeath[106] = true;
		tileLavaDeath[110] = true;
		tileLavaDeath[113] = true;
		tileLavaDeath[115] = true;
		tileLavaDeath[125] = true;
		tileLavaDeath[126] = true;
		tileLavaDeath[128] = true;
		tileLavaDeath[149] = true;
		tileLavaDeath[172] = true;
		tileLavaDeath[173] = true;
		tileLavaDeath[174] = true;
		tileLavaDeath[184] = true;
		tileLavaDeath[201] = true;
		tileLavaDeath[205] = true;
		tileLavaDeath[201] = true;
		tileLavaDeath[209] = true;
		tileLavaDeath[210] = true;
		tileLavaDeath[212] = true;
		tileLavaDeath[213] = true;
		tileLavaDeath[353] = true;
		tileLavaDeath[214] = false;
		tileLavaDeath[215] = true;
		tileLavaDeath[216] = true;
		tileLavaDeath[217] = true;
		tileLavaDeath[218] = true;
		tileLavaDeath[219] = true;
		tileLavaDeath[642] = true;
		tileLavaDeath[220] = true;
		tileLavaDeath[227] = true;
		tileLavaDeath[228] = true;
		tileLavaDeath[233] = true;
		tileLavaDeath[236] = true;
		tileLavaDeath[238] = true;
		tileLavaDeath[240] = true;
		tileLavaDeath[241] = true;
		tileLavaDeath[242] = true;
		tileLavaDeath[243] = true;
		tileLavaDeath[244] = true;
		tileLavaDeath[245] = true;
		tileLavaDeath[246] = true;
		tileLavaDeath[247] = true;
		tileLavaDeath[254] = true;
		tileLavaDeath[269] = true;
		tileLavaDeath[270] = true;
		tileLavaDeath[271] = true;
		tileLavaDeath[581] = true;
		tileLavaDeath[660] = true;
		tileLavaDeath[275] = true;
		tileLavaDeath[413] = true;
		tileLavaDeath[276] = true;
		tileLavaDeath[277] = true;
		tileLavaDeath[278] = true;
		tileLavaDeath[279] = true;
		tileLavaDeath[280] = true;
		tileLavaDeath[281] = true;
		tileLavaDeath[282] = true;
		tileLavaDeath[283] = true;
		tileLavaDeath[285] = true;
		tileLavaDeath[286] = true;
		tileLavaDeath[287] = true;
		tileLavaDeath[288] = true;
		tileLavaDeath[289] = true;
		tileLavaDeath[290] = true;
		tileLavaDeath[291] = true;
		tileLavaDeath[292] = true;
		tileLavaDeath[293] = true;
		tileLavaDeath[294] = true;
		tileLavaDeath[295] = true;
		tileLavaDeath[296] = true;
		tileLavaDeath[297] = true;
		tileLavaDeath[298] = true;
		tileLavaDeath[299] = true;
		tileLavaDeath[300] = true;
		tileLavaDeath[301] = true;
		tileLavaDeath[302] = true;
		tileLavaDeath[303] = true;
		tileLavaDeath[304] = true;
		tileLavaDeath[305] = true;
		tileLavaDeath[306] = true;
		tileLavaDeath[307] = true;
		tileLavaDeath[308] = true;
		tileLavaDeath[309] = true;
		tileLavaDeath[310] = true;
		tileLavaDeath[532] = true;
		tileLavaDeath[316] = true;
		tileLavaDeath[317] = true;
		tileLavaDeath[318] = true;
		tileLavaDeath[319] = true;
		tileLavaDeath[354] = true;
		tileLavaDeath[355] = true;
		tileLavaDeath[499] = true;
		tileLavaDeath[323] = true;
		tileLavaDeath[335] = true;
		tileLavaDeath[338] = true;
		tileLavaDeath[339] = true;
		tileLavaDeath[528] = true;
		tileLavaDeath[636] = true;
		tileLavaDeath[638] = false;
		tileLavaDeath[352] = true;
		tileLavaDeath[382] = true;
		tileLavaDeath[425] = true;
		tileLavaDeath[453] = true;
		tileLavaDeath[456] = true;
		tileLavaDeath[463] = true;
		tileLavaDeath[464] = true;
		tileLavaDeath[465] = true;
		tileLavaDeath[485] = true;
		tileLavaDeath[511] = true;
		tileLavaDeath[510] = true;
		tileLavaDeath[547] = true;
		tileLavaDeath[548] = true;
		tileLavaDeath[552] = true;
		tileLavaDeath[573] = true;
		tileLavaDeath[621] = true;
		tileLavaDeath[622] = true;
		tileLavaDeath[623] = true;
		tileLavaDeath[624] = true;
		tileLavaDeath[656] = true;
		tileLighted[316] = true;
		tileLighted[317] = true;
		tileLighted[318] = true;
		tileFrameImportant[493] = true;
		tileLavaDeath[493] = true;
		for (int j = 0; j < TileID.Count; j++)
		{
			if (tileLavaDeath[j])
			{
				tileObsidianKill[j] = true;
			}
		}
		tileObsidianKill[546] = true;
		tileObsidianKill[77] = true;
		tileObsidianKill[78] = true;
		tileObsidianKill[82] = true;
		tileObsidianKill[83] = true;
		tileObsidianKill[84] = true;
		tileObsidianKill[85] = true;
		tileObsidianKill[105] = true;
		tileObsidianKill[129] = true;
		tileObsidianKill[132] = true;
		tileObsidianKill[133] = true;
		tileObsidianKill[134] = true;
		tileObsidianKill[135] = true;
		tileObsidianKill[136] = true;
		tileObsidianKill[139] = true;
		tileObsidianKill[165] = true;
		tileObsidianKill[178] = true;
		tileObsidianKill[185] = true;
		tileObsidianKill[186] = true;
		tileObsidianKill[187] = true;
		tileObsidianKill[231] = true;
		tileObsidianKill[337] = true;
		tileObsidianKill[349] = true;
		tileObsidianKill[506] = true;
		tileObsidianKill[314] = true;
		tileSolid[384] = true;
		tileBlockLight[384] = true;
		tileNoFail[384] = true;
		tileFrameImportant[395] = true;
		tileLavaDeath[395] = true;
		tileFrameImportant[520] = true;
		tileLavaDeath[520] = true;
		tileLavaDeath[471] = true;
		tileFrameImportant[405] = true;
		tileLavaDeath[405] = true;
		tileSolidTop[405] = true;
		tileTable[405] = true;
		tileLighted[405] = true;
		tileWaterDeath[405] = true;
		tileFrameImportant[406] = true;
		tileLavaDeath[406] = true;
		tileFrameImportant[452] = true;
		tileLavaDeath[452] = true;
		tileFrameImportant[411] = true;
		tileLavaDeath[411] = false;
		tileFrameImportant[457] = true;
		tileLavaDeath[457] = true;
		tileFrameImportant[462] = true;
		tileFrameImportant[454] = true;
		tileLavaDeath[454] = true;
		tileCut[454] = true;
		tileFrameImportant[494] = true;
		tileLavaDeath[494] = true;
		tileFrameImportant[455] = true;
		tileFrameImportant[412] = true;
		for (int k = 0; k < WallID.Count; k++)
		{
			int num = WallID.Sets.BlendType[k];
			if (num >= 0 && num < WallID.Count)
			{
				wallBlend[k] = num;
			}
			else
			{
				wallBlend[k] = k;
			}
		}
		tileNoFail[24] = true;
		tileNoFail[3] = true;
		tileNoFail[52] = true;
		tileNoFail[62] = true;
		tileNoFail[32] = true;
		tileNoFail[61] = true;
		tileNoFail[69] = true;
		tileNoFail[655] = true;
		tileNoFail[73] = true;
		tileNoFail[74] = true;
		tileNoFail[82] = true;
		tileNoFail[83] = true;
		tileNoFail[84] = true;
		tileNoFail[110] = true;
		tileNoFail[113] = true;
		tileNoFail[115] = true;
		tileNoFail[165] = true;
		tileNoFail[184] = true;
		tileNoFail[201] = true;
		tileNoFail[205] = true;
		tileNoFail[227] = true;
		tileNoFail[233] = true;
		tileNoFail[624] = true;
		tileNoFail[352] = true;
		tileNoFail[382] = true;
		tileNoFail[528] = true;
		tileNoFail[485] = true;
		tileNoFail[636] = true;
		tileNoFail[638] = true;
		tileNoFail[656] = true;
		tileLighted[638] = true;
		tileFrameImportant[387] = true;
		tileSolid[387] = true;
		tileBlockLight[387] = true;
		tileNoAttach[387] = true;
		tileLavaDeath[387] = true;
		tileFrameImportant[386] = true;
		tileLavaDeath[386] = true;
		tileNoSunLight[386] = true;
		tileFrameImportant[388] = true;
		tileSolid[388] = true;
		tileBlockLight[388] = true;
		tileNoAttach[388] = true;
		tileLavaDeath[388] = true;
		tileFrameImportant[389] = true;
		tileLavaDeath[389] = true;
		tileNoSunLight[389] = true;
		for (int l = 0; l < TileID.Count; l++)
		{
			if (tileSolid[l])
			{
				tileNoSunLight[l] = true;
			}
			tileFrame[l] = 0;
			tileFrameCounter[l] = 0;
		}
		tileNoSunLight[546] = false;
		tileNoSunLight[379] = false;
		tileNoSunLight[54] = false;
		tileNoSunLight[328] = false;
		tileNoSunLight[459] = false;
		tileNoSunLight[19] = false;
		tileNoSunLight[11] = true;
		tileNoSunLight[189] = false;
		tileNoSunLight[196] = false;
		tileNoSunLight[48] = false;
		tileNoSunLight[232] = false;
		tileNoSunLight[460] = false;
		tileNoSunLight[541] = false;
		tileNoSunLight[388] = false;
		AddEchoFurnitureTile(647);
		AddEchoFurnitureTile(648);
		AddEchoFurnitureTile(650);
		AddEchoFurnitureTile(649);
		AddEchoFurnitureTile(652);
		AddEchoFurnitureTile(651);
		tileFrameImportant[653] = true;
	}

	private static void AddEchoFurnitureTile(int tileId)
	{
		tileFrameImportant[tileId] = true;
		tileNoFail[tileId] = true;
		tileObsidianKill[tileId] = true;
	}

	private static void Initialize_TileAndNPCData1()
	{
		for (int i = 0; i < TileID.Count; i++)
		{
			tileGlowMask[i] = -1;
		}
		for (int j = 0; j < ProjectileID.Count; j++)
		{
			projFrames[j] = 1;
		}
		projFrames[736] = 3;
		projFrames[737] = 3;
		projFrames[738] = 3;
		projFrames[779] = 4;
		projFrames[783] = 4;
		projFrames[862] = 4;
		projFrames[863] = 4;
		projFrames[820] = 4;
		projFrames[916] = 6;
		projFrames[34] = 6;
		projFrames[706] = 8;
		projFrames[712] = 8;
		projFrames[663] = 7;
		projFrames[665] = 9;
		projFrames[667] = 9;
		projFrames[677] = 6;
		projFrames[678] = 6;
		projFrames[679] = 6;
		projFrames[688] = 6;
		projFrames[689] = 6;
		projFrames[690] = 8;
		projFrames[691] = 4;
		projFrames[692] = 4;
		projFrames[693] = 4;
		projFrames[694] = 4;
		projFrames[695] = 4;
		projFrames[696] = 5;
		projFrames[700] = 4;
		projFrames[964] = 1;
		projFrames[965] = 1;
		projFrames[643] = 8;
		projFrames[566] = 4;
		projFrames[565] = 4;
		projFrames[525] = 5;
		projFrames[519] = 4;
		projFrames[509] = 2;
		projFrames[485] = 5;
		projFrames[492] = 8;
		projFrames[500] = 4;
		projFrames[499] = 12;
		projFrames[518] = 4;
		projFrames[585] = 4;
		projFrames[593] = 4;
		projFrames[595] = 28;
		projFrames[735] = 28;
		projFrames[596] = 4;
		projFrames[612] = 5;
		projFrames[978] = 5;
		projFrames[613] = 4;
		projFrames[614] = 4;
		projFrames[615] = 7;
		projFrames[623] = 19;
		projFrames[633] = 5;
		projFrames[645] = 7;
		projFrames[650] = 4;
		projFrames[652] = 6;
		projFrames[659] = 4;
		projFrames[714] = 7;
		projFrames[734] = 8;
		projFrames[755] = 5;
		projFrames[759] = 5;
		projFrames[765] = 10;
		projFrames[951] = 12;
		projFrames[953] = 5;
		projFrames[384] = 6;
		projFrames[385] = 3;
		projFrames[386] = 6;
		projFrames[390] = 11;
		projFrames[391] = 11;
		projFrames[392] = 11;
		projFrames[393] = 15;
		projFrames[394] = 15;
		projFrames[395] = 15;
		projFrames[398] = 10;
		projFrames[407] = 6;
		projFrames[408] = 2;
		projFrames[409] = 3;
		projFrames[387] = 3;
		projFrames[388] = 3;
		projFrames[334] = 11;
		projFrames[324] = 10;
		projFrames[351] = 2;
		projFrames[349] = 5;
		projFrames[423] = 4;
		projFrames[435] = 4;
		projFrames[682] = 4;
		projFrames[436] = 4;
		projFrames[439] = 6;
		projFrames[443] = 4;
		projFrames[447] = 4;
		projFrames[448] = 3;
		projFrames[450] = 5;
		projFrames[454] = 2;
		projFrames[456] = 4;
		projFrames[459] = 3;
		projFrames[462] = 5;
		projFrames[465] = 4;
		projFrames[467] = 4;
		projFrames[468] = 4;
		projFrames[533] = 21;
		projFrames[535] = 12;
		projFrames[539] = 4;
		projFrames[575] = 4;
		projFrames[574] = 2;
		projFrames[634] = 4;
		projFrames[635] = 4;
		projFrames[709] = 3;
		projFrames[353] = 14;
		projFrames[346] = 2;
		projFrames[347] = 2;
		projFrames[335] = 4;
		projFrames[344] = 3;
		projFrames[337] = 5;
		projFrames[317] = 8;
		projFrames[321] = 3;
		projFrames[308] = 10;
		projFrames[316] = 4;
		projFrames[275] = 2;
		projFrames[276] = 2;
		projFrames[254] = 5;
		projFrames[307] = 2;
		projFrames[72] = 4;
		projFrames[86] = 4;
		projFrames[87] = 4;
		projFrames[102] = 2;
		projFrames[111] = 8;
		projFrames[112] = 6;
		projFrames[127] = 16;
		projFrames[175] = 2;
		projFrames[181] = 4;
		projFrames[189] = 4;
		projFrames[191] = 18;
		projFrames[192] = 18;
		projFrames[193] = 18;
		projFrames[194] = 18;
		projFrames[190] = 4;
		projFrames[198] = 4;
		projFrames[199] = 8;
		projFrames[200] = 10;
		projFrames[206] = 5;
		projFrames[208] = 5;
		projFrames[209] = 12;
		projFrames[210] = 12;
		projFrames[211] = 10;
		projFrames[221] = 3;
		projFrames[237] = 4;
		projFrames[238] = 6;
		projFrames[221] = 3;
		projFrames[228] = 5;
		projFrames[229] = 4;
		projFrames[236] = 13;
		projFrames[243] = 4;
		projFrames[244] = 6;
		projFrames[249] = 5;
		projFrames[252] = 4;
		projFrames[266] = 6;
		projFrames[268] = 8;
		projFrames[269] = 7;
		projFrames[270] = 3;
		projFrames[313] = 12;
		projFrames[314] = 13;
		projFrames[319] = 11;
		projFrames[373] = 3;
		projFrames[375] = 8;
		projFrames[377] = 9;
		projFrames[379] = 4;
		projFrames[380] = 4;
		projFrames[601] = 2;
		projFrames[602] = 4;
		projFrames[703] = 8;
		projFrames[701] = 3;
		projFrames[702] = 4;
		projFrames[732] = 4;
		projFrames[731] = 4;
		projFrames[758] = 24;
		projFrames[766] = 4;
		projFrames[767] = 4;
		projFrames[768] = 4;
		projFrames[769] = 4;
		projFrames[770] = 4;
		projFrames[774] = 8;
		projFrames[773] = 4;
		projFrames[815] = 10;
		projFrames[816] = 17;
		projFrames[817] = 18;
		projFrames[821] = 23;
		projFrames[824] = 4;
		projFrames[825] = 26;
		projFrames[826] = 3;
		projFrames[828] = 2;
		projFrames[829] = 2;
		projFrames[831] = 6;
		projFrames[970] = 6;
		projFrames[833] = 10;
		projFrames[834] = 12;
		projFrames[835] = 12;
		projFrames[836] = 4;
		projFrames[837] = 3;
		projFrames[839] = 4;
		projFrames[840] = 4;
		projFrames[851] = 4;
		projFrames[853] = 4;
		projFrames[854] = 19;
		projFrames[855] = 4;
		projFrames[858] = 14;
		projFrames[859] = 24;
		projFrames[860] = 14;
		projFrames[861] = 4;
		projFrames[864] = 2;
		projFrames[866] = 4;
		projFrames[870] = 4;
		projFrames[875] = 11;
		projFrames[881] = 12;
		projFrames[882] = 20;
		projFrames[883] = 3;
		projFrames[884] = 14;
		projFrames[885] = 10;
		projFrames[886] = 8;
		projFrames[887] = 3;
		projFrames[888] = 36;
		projFrames[889] = 11;
		projFrames[890] = 12;
		projFrames[891] = 15;
		projFrames[892] = 6;
		projFrames[893] = 4;
		projFrames[894] = 8;
		projFrames[895] = 6;
		projFrames[896] = 16;
		projFrames[897] = 11;
		projFrames[898] = 16;
		projFrames[899] = 14;
		projFrames[900] = 14;
		projFrames[901] = 12;
		projFrames[908] = 12;
		projFrames[909] = 6;
		projFrames[920] = 3;
		projFrames[934] = 12;
		projFrames[880] = 8;
		projFrames[929] = 8;
		projFrames[956] = 11;
		projFrames[957] = 12;
		projFrames[958] = 17;
		projFrames[959] = 12;
		projFrames[960] = 20;
		projFrames[961] = 1;
		projFrames[962] = 3;
		projFrames[963] = 13;
		projFrames[966] = 3;
		projFrames[967] = 8;
		projFrames[968] = 24;
		projFrames[969] = 8;
		projFrames[994] = 16;
		projFrames[995] = 20;
		projFrames[998] = 10;
		projFrames[1003] = 16;
		projFrames[1004] = 15;
		projFrames[1014] = 11;
		projPet[492] = true;
		projPet[499] = true;
		projPet[653] = true;
		projPet[701] = true;
		projPet[703] = true;
		projPet[702] = true;
		projPet[764] = true;
		projPet[765] = true;
		projPet[319] = true;
		projPet[334] = true;
		projPet[324] = true;
		projPet[266] = true;
		projPet[313] = true;
		projPet[314] = true;
		projPet[317] = true;
		projPet[175] = true;
		projPet[111] = true;
		projPet[112] = true;
		projPet[127] = true;
		projPet[191] = true;
		projPet[192] = true;
		projPet[193] = true;
		projPet[194] = true;
		projPet[197] = true;
		projPet[198] = true;
		projPet[199] = true;
		projPet[200] = true;
		projPet[208] = true;
		projPet[209] = true;
		projPet[210] = true;
		projPet[211] = true;
		projPet[236] = true;
		projPet[268] = true;
		projPet[269] = true;
		projPet[353] = true;
		projPet[373] = true;
		projPet[375] = true;
		projPet[380] = true;
		projPet[387] = true;
		projPet[388] = true;
		projPet[390] = true;
		projPet[391] = true;
		projPet[392] = true;
		projPet[393] = true;
		projPet[394] = true;
		projPet[395] = true;
		projPet[398] = true;
		projPet[407] = true;
		projPet[423] = true;
		projPet[533] = true;
		projPet[613] = true;
		projPet[623] = true;
		projPet[625] = true;
		projPet[626] = true;
		projPet[627] = true;
		projPet[628] = true;
		projPet[755] = true;
		projPet[758] = true;
		projPet[759] = true;
		projPet[774] = true;
		projPet[815] = true;
		projPet[816] = true;
		projPet[817] = true;
		projPet[821] = true;
		projPet[825] = true;
		projPet[831] = true;
		projPet[833] = true;
		projPet[834] = true;
		projPet[835] = true;
		projPet[854] = true;
		projPet[858] = true;
		projPet[859] = true;
		projPet[860] = true;
		projPet[864] = true;
		projPet[875] = true;
		projPet[946] = true;
		projPet[951] = true;
		projPet[963] = true;
		projPet[970] = true;
		projPet[881] = true;
		projPet[882] = true;
		projPet[883] = true;
		projPet[884] = true;
		projPet[885] = true;
		projPet[886] = true;
		projPet[887] = true;
		projPet[888] = true;
		projPet[889] = true;
		projPet[890] = true;
		projPet[891] = true;
		projPet[892] = true;
		projPet[893] = true;
		projPet[894] = true;
		projPet[895] = true;
		projPet[896] = true;
		projPet[897] = true;
		projPet[898] = true;
		projPet[899] = true;
		projPet[900] = true;
		projPet[901] = true;
		projPet[934] = true;
		projPet[956] = true;
		projPet[957] = true;
		projPet[958] = true;
		projPet[959] = true;
		projPet[960] = true;
		projPet[994] = true;
		projPet[998] = true;
		projPet[1003] = true;
		projPet[1004] = true;
		projPet[1018] = true;
		tileLighted[237] = true;
		tileLighted[27] = true;
		tileLighted[381] = true;
		tileLighted[534] = true;
		tileLighted[536] = true;
		tileLighted[539] = true;
		tileLighted[625] = true;
		tileLighted[627] = true;
		tileLighted[184] = true;
		tileLighted[463] = true;
		tileLighted[491] = true;
		slimeRainNPC[1] = true;
		debuff[158] = true;
		debuff[160] = true;
		debuff[20] = true;
		debuff[21] = true;
		debuff[22] = true;
		debuff[23] = true;
		debuff[24] = true;
		debuff[25] = true;
		debuff[28] = true;
		debuff[30] = true;
		debuff[31] = true;
		debuff[32] = true;
		debuff[33] = true;
		debuff[34] = true;
		debuff[35] = true;
		debuff[36] = true;
		debuff[37] = true;
		debuff[38] = true;
		debuff[39] = true;
		debuff[44] = true;
		debuff[46] = true;
		debuff[47] = true;
		debuff[67] = true;
		debuff[68] = true;
		debuff[69] = true;
		debuff[70] = true;
		debuff[80] = true;
		debuff[86] = true;
		debuff[87] = true;
		debuff[88] = true;
		debuff[89] = true;
		debuff[94] = true;
		debuff[103] = true;
		debuff[119] = true;
		debuff[120] = true;
		debuff[137] = true;
		debuff[145] = true;
		debuff[146] = true;
		debuff[147] = true;
		debuff[148] = true;
		debuff[149] = true;
		debuff[156] = true;
		debuff[157] = true;
		debuff[350] = true;
		debuff[163] = true;
		debuff[164] = true;
		debuff[144] = true;
		debuff[194] = true;
		debuff[195] = true;
		debuff[196] = true;
		debuff[197] = true;
		debuff[199] = true;
		debuff[215] = true;
		debuff[320] = true;
		debuff[321] = true;
		debuff[332] = true;
		debuff[333] = true;
		debuff[334] = true;
		debuff[353] = true;
		pvpBuff[20] = true;
		pvpBuff[70] = true;
		pvpBuff[24] = true;
		pvpBuff[323] = true;
		pvpBuff[31] = true;
		pvpBuff[39] = true;
		pvpBuff[44] = true;
		pvpBuff[324] = true;
		pvpBuff[69] = true;
		pvpBuff[103] = true;
		pvpBuff[119] = true;
		pvpBuff[120] = true;
		pvpBuff[137] = true;
		pvpBuff[320] = true;
		meleeBuff[71] = true;
		meleeBuff[73] = true;
		meleeBuff[74] = true;
		meleeBuff[75] = true;
		meleeBuff[76] = true;
		meleeBuff[77] = true;
		meleeBuff[78] = true;
		meleeBuff[79] = true;
		buffNoSave[20] = true;
		buffNoSave[22] = true;
		buffNoSave[23] = true;
		buffNoSave[24] = true;
		buffNoSave[28] = true;
		buffNoSave[30] = true;
		buffNoSave[31] = true;
		buffNoSave[34] = true;
		buffNoSave[35] = true;
		buffNoSave[37] = true;
		buffNoSave[38] = true;
		buffNoSave[39] = true;
		buffNoSave[43] = true;
		buffNoSave[44] = true;
		buffNoSave[46] = true;
		buffNoSave[47] = true;
		buffNoSave[48] = true;
		buffNoSave[58] = true;
		buffNoSave[59] = true;
		buffNoSave[60] = true;
		buffNoSave[62] = true;
		buffNoSave[63] = true;
		buffNoSave[64] = true;
		buffNoSave[67] = true;
		buffNoSave[68] = true;
		buffNoSave[69] = true;
		buffNoSave[70] = true;
		buffNoSave[72] = true;
		buffNoSave[80] = true;
		buffNoSave[87] = true;
		buffNoSave[158] = true;
		buffNoSave[146] = true;
		buffNoSave[147] = true;
		buffNoSave[215] = true;
		buffNoSave[88] = true;
		buffNoSave[89] = true;
		buffNoSave[94] = true;
		buffNoSave[95] = true;
		buffNoSave[96] = true;
		buffNoSave[97] = true;
		buffNoSave[98] = true;
		buffNoSave[99] = true;
		buffNoSave[100] = true;
		buffNoSave[103] = true;
		buffNoSave[118] = true;
		buffNoSave[138] = true;
		buffNoSave[167] = true;
		buffNoSave[166] = true;
		buffNoSave[184] = true;
		buffNoSave[185] = true;
		buffNoSave[211] = true;
		buffNoSave[210] = true;
		buffNoSave[119] = true;
		buffNoSave[120] = true;
		buffNoSave[90] = true;
		buffNoSave[125] = true;
		buffNoSave[126] = true;
		buffNoSave[128] = true;
		buffNoSave[129] = true;
		buffNoSave[130] = true;
		buffNoSave[131] = true;
		buffNoSave[132] = true;
		buffNoSave[133] = true;
		buffNoSave[134] = true;
		buffNoSave[135] = true;
		buffNoSave[139] = true;
		buffNoSave[140] = true;
		buffNoSave[141] = true;
		buffNoSave[142] = true;
		buffNoSave[143] = true;
		buffNoSave[137] = true;
		buffNoSave[144] = true;
		buffNoSave[161] = true;
		buffNoSave[162] = true;
		buffNoSave[163] = true;
		buffNoSave[164] = true;
		buffNoSave[168] = true;
		buffNoSave[170] = true;
		buffNoSave[171] = true;
		buffNoSave[172] = true;
		buffNoSave[182] = true;
		buffNoSave[187] = true;
		buffNoSave[188] = true;
		buffNoSave[193] = true;
		buffNoSave[194] = true;
		buffNoSave[195] = true;
		buffNoSave[196] = true;
		buffNoSave[197] = true;
		buffNoSave[198] = true;
		buffNoSave[199] = true;
		buffNoSave[205] = true;
		buffNoSave[212] = true;
		buffNoSave[213] = true;
		buffNoSave[214] = true;
		buffNoSave[230] = true;
		buffNoSave[263] = true;
		buffNoSave[265] = true;
		buffNoSave[271] = true;
		buffNoSave[322] = true;
		buffNoSave[275] = true;
		buffNoSave[276] = true;
		buffNoSave[277] = true;
		buffNoSave[278] = true;
		buffNoSave[279] = true;
		buffNoSave[280] = true;
		buffNoSave[281] = true;
		buffNoSave[282] = true;
		buffNoSave[283] = true;
		buffNoSave[305] = true;
		buffNoSave[318] = true;
		buffNoSave[342] = true;
		buffNoSave[320] = true;
		buffNoSave[321] = true;
		buffNoSave[325] = true;
		buffNoSave[335] = true;
		buffNoSave[150] = true;
		buffNoSave[93] = true;
		buffNoSave[159] = true;
		buffNoSave[29] = true;
		buffNoSave[348] = true;
		buffNoSave[353] = true;
		for (int k = 173; k <= 181; k++)
		{
			buffNoSave[k] = true;
		}
		buffNoTimeDisplay[19] = true;
		buffNoTimeDisplay[27] = true;
		buffNoTimeDisplay[28] = true;
		buffNoTimeDisplay[34] = true;
		buffNoTimeDisplay[37] = true;
		buffNoTimeDisplay[38] = true;
		buffNoTimeDisplay[40] = true;
		buffNoTimeDisplay[41] = true;
		buffNoTimeDisplay[42] = true;
		buffNoTimeDisplay[43] = true;
		buffNoTimeDisplay[45] = true;
		buffNoTimeDisplay[49] = true;
		buffNoTimeDisplay[60] = true;
		buffNoTimeDisplay[62] = true;
		buffNoTimeDisplay[64] = true;
		buffNoTimeDisplay[68] = true;
		buffNoTimeDisplay[81] = true;
		buffNoTimeDisplay[82] = true;
		buffNoTimeDisplay[83] = true;
		buffNoTimeDisplay[90] = true;
		buffNoTimeDisplay[95] = true;
		buffNoTimeDisplay[96] = true;
		buffNoTimeDisplay[97] = true;
		buffNoTimeDisplay[98] = true;
		buffNoTimeDisplay[99] = true;
		buffNoTimeDisplay[100] = true;
		buffNoTimeDisplay[101] = true;
		buffNoTimeDisplay[102] = true;
		buffNoTimeDisplay[118] = true;
		buffNoTimeDisplay[138] = true;
		buffNoTimeDisplay[167] = true;
		buffNoTimeDisplay[166] = true;
		buffNoTimeDisplay[184] = true;
		buffNoTimeDisplay[185] = true;
		buffNoTimeDisplay[211] = true;
		buffNoTimeDisplay[210] = true;
		buffNoTimeDisplay[125] = true;
		buffNoTimeDisplay[126] = true;
		buffNoTimeDisplay[128] = true;
		buffNoTimeDisplay[129] = true;
		buffNoTimeDisplay[130] = true;
		buffNoTimeDisplay[131] = true;
		buffNoTimeDisplay[132] = true;
		buffNoTimeDisplay[133] = true;
		buffNoTimeDisplay[134] = true;
		buffNoTimeDisplay[135] = true;
		buffNoTimeDisplay[136] = true;
		buffNoTimeDisplay[139] = true;
		buffNoTimeDisplay[140] = true;
		buffNoTimeDisplay[141] = true;
		buffNoTimeDisplay[142] = true;
		buffNoTimeDisplay[143] = true;
		buffNoTimeDisplay[137] = true;
		buffNoTimeDisplay[200] = true;
		buffNoTimeDisplay[202] = true;
		buffNoTimeDisplay[201] = true;
		buffNoTimeDisplay[161] = true;
		buffNoTimeDisplay[162] = true;
		buffNoTimeDisplay[163] = true;
		buffNoTimeDisplay[168] = true;
		buffNoTimeDisplay[170] = true;
		buffNoTimeDisplay[171] = true;
		buffNoTimeDisplay[172] = true;
		buffNoTimeDisplay[182] = true;
		buffNoTimeDisplay[165] = true;
		buffNoTimeDisplay[186] = true;
		buffNoTimeDisplay[187] = true;
		buffNoTimeDisplay[188] = true;
		buffNoTimeDisplay[193] = true;
		buffNoTimeDisplay[199] = true;
		buffNoTimeDisplay[212] = true;
		buffNoTimeDisplay[213] = true;
		buffNoTimeDisplay[214] = true;
		buffNoTimeDisplay[216] = true;
		buffNoTimeDisplay[217] = true;
		buffNoTimeDisplay[219] = true;
		buffNoTimeDisplay[230] = true;
		buffNoTimeDisplay[258] = true;
		buffNoTimeDisplay[259] = true;
		buffNoTimeDisplay[260] = true;
		buffNoTimeDisplay[261] = true;
		buffNoTimeDisplay[262] = true;
		buffNoTimeDisplay[263] = true;
		buffNoTimeDisplay[264] = true;
		buffNoTimeDisplay[265] = true;
		buffNoTimeDisplay[266] = true;
		buffNoTimeDisplay[267] = true;
		buffNoTimeDisplay[268] = true;
		buffNoTimeDisplay[271] = true;
		buffNoTimeDisplay[322] = true;
		buffNoTimeDisplay[274] = true;
		buffNoTimeDisplay[275] = true;
		buffNoTimeDisplay[276] = true;
		buffNoTimeDisplay[277] = true;
		buffNoTimeDisplay[278] = true;
		buffNoTimeDisplay[279] = true;
		buffNoTimeDisplay[280] = true;
		buffNoTimeDisplay[281] = true;
		buffNoTimeDisplay[282] = true;
		buffNoTimeDisplay[283] = true;
		buffNoTimeDisplay[284] = true;
		buffNoTimeDisplay[285] = true;
		buffNoTimeDisplay[286] = true;
		buffNoTimeDisplay[287] = true;
		buffNoTimeDisplay[288] = true;
		buffNoTimeDisplay[289] = true;
		buffNoTimeDisplay[290] = true;
		buffNoTimeDisplay[291] = true;
		buffNoTimeDisplay[292] = true;
		buffNoTimeDisplay[293] = true;
		buffNoTimeDisplay[294] = true;
		buffNoTimeDisplay[295] = true;
		buffNoTimeDisplay[296] = true;
		buffNoTimeDisplay[297] = true;
		buffNoTimeDisplay[298] = true;
		buffNoTimeDisplay[299] = true;
		buffNoTimeDisplay[300] = true;
		buffNoTimeDisplay[301] = true;
		buffNoTimeDisplay[302] = true;
		buffNoTimeDisplay[303] = true;
		buffNoTimeDisplay[304] = true;
		buffNoTimeDisplay[305] = true;
		buffNoTimeDisplay[317] = true;
		buffNoTimeDisplay[318] = true;
		buffNoTimeDisplay[342] = true;
		buffNoTimeDisplay[320] = true;
		buffNoTimeDisplay[325] = true;
		buffNoTimeDisplay[335] = true;
		buffNoTimeDisplay[341] = true;
		buffNoTimeDisplay[327] = true;
		buffNoTimeDisplay[328] = true;
		buffNoTimeDisplay[329] = true;
		buffNoTimeDisplay[330] = true;
		buffNoTimeDisplay[331] = true;
		buffNoTimeDisplay[334] = true;
		buffNoTimeDisplay[345] = true;
		buffNoTimeDisplay[349] = true;
		buffNoTimeDisplay[351] = true;
		buffNoTimeDisplay[352] = true;
		buffNoTimeDisplay[354] = true;
		buffNoTimeDisplay[29] = true;
		buffNoTimeDisplay[159] = true;
		buffNoTimeDisplay[150] = true;
		buffNoTimeDisplay[93] = true;
		buffNoTimeDisplay[348] = true;
		buffNoTimeDisplay[353] = true;
		persistentBuff[71] = true;
		persistentBuff[73] = true;
		persistentBuff[74] = true;
		persistentBuff[75] = true;
		persistentBuff[76] = true;
		persistentBuff[77] = true;
		persistentBuff[78] = true;
		persistentBuff[79] = true;
		Initialize_BuffDataFromMountData();
		Initialize_TileAndNPCData1_Part2();
	}

	internal static void Initialize_BuffDataFromMountData()
	{
		for (int i = 0; i < BuffID.Sets.BasicMountData.Length; i++)
		{
			if (BuffID.Sets.BasicMountData[i] != null)
			{
				buffNoTimeDisplay[i] = true;
				buffNoSave[i] = true;
			}
		}
	}

	private static void Initialize_TileAndNPCData1_Part2()
	{
		vanityPet[40] = true;
		vanityPet[41] = true;
		vanityPet[42] = true;
		vanityPet[45] = true;
		vanityPet[50] = true;
		vanityPet[51] = true;
		vanityPet[52] = true;
		vanityPet[53] = true;
		vanityPet[54] = true;
		vanityPet[55] = true;
		vanityPet[56] = true;
		vanityPet[61] = true;
		vanityPet[154] = true;
		vanityPet[65] = true;
		vanityPet[66] = true;
		vanityPet[81] = true;
		vanityPet[82] = true;
		vanityPet[84] = true;
		vanityPet[85] = true;
		vanityPet[91] = true;
		vanityPet[92] = true;
		vanityPet[127] = true;
		vanityPet[136] = true;
		vanityPet[191] = true;
		vanityPet[202] = true;
		vanityPet[200] = true;
		vanityPet[218] = true;
		vanityPet[219] = true;
		vanityPet[217] = true;
		vanityPet[258] = true;
		vanityPet[259] = true;
		vanityPet[260] = true;
		vanityPet[261] = true;
		vanityPet[262] = true;
		vanityPet[264] = true;
		vanityPet[266] = true;
		vanityPet[267] = true;
		vanityPet[268] = true;
		vanityPet[274] = true;
		vanityPet[284] = true;
		vanityPet[285] = true;
		vanityPet[286] = true;
		vanityPet[287] = true;
		vanityPet[288] = true;
		vanityPet[289] = true;
		vanityPet[290] = true;
		vanityPet[291] = true;
		vanityPet[292] = true;
		vanityPet[293] = true;
		vanityPet[295] = true;
		vanityPet[296] = true;
		vanityPet[297] = true;
		vanityPet[300] = true;
		vanityPet[301] = true;
		vanityPet[302] = true;
		vanityPet[303] = true;
		vanityPet[304] = true;
		vanityPet[317] = true;
		vanityPet[341] = true;
		vanityPet[327] = true;
		vanityPet[328] = true;
		vanityPet[329] = true;
		vanityPet[330] = true;
		vanityPet[331] = true;
		vanityPet[345] = true;
		vanityPet[349] = true;
		vanityPet[351] = true;
		vanityPet[352] = true;
		vanityPet[354] = true;
		lightPet[19] = true;
		lightPet[155] = true;
		lightPet[27] = true;
		lightPet[101] = true;
		lightPet[102] = true;
		lightPet[57] = true;
		lightPet[190] = true;
		lightPet[152] = true;
		lightPet[201] = true;
		lightPet[294] = true;
		lightPet[298] = true;
		lightPet[299] = true;
		tileFlame[4] = true;
		tileFlame[33] = true;
		tileFlame[34] = true;
		tileFlame[35] = true;
		tileFlame[42] = true;
		tileFlame[49] = true;
		tileFlame[93] = true;
		tileFlame[98] = true;
		tileFlame[100] = true;
		tileFlame[173] = true;
		tileFlame[174] = true;
		tileFlame[372] = true;
		tileFlame[646] = true;
		tileRope[213] = true;
		tileRope[214] = true;
		tileRope[353] = true;
		tileRope[365] = true;
		tileRope[366] = true;
		tileRope[504] = true;
		tileRope[449] = true;
		tileRope[450] = true;
		tileRope[451] = true;
		tilePile[330] = true;
		tilePile[331] = true;
		tilePile[332] = true;
		tilePile[333] = true;
		for (int i = 0; i < NPCID.Count; i++)
		{
			npcCatchable[i] = false;
		}
		npcCatchable[46] = true;
		npcCatchable[55] = true;
		npcCatchable[74] = true;
		npcCatchable[148] = true;
		npcCatchable[149] = true;
		npcCatchable[297] = true;
		npcCatchable[298] = true;
		npcCatchable[299] = true;
		npcCatchable[300] = true;
		npcCatchable[355] = true;
		npcCatchable[356] = true;
		npcCatchable[357] = true;
		npcCatchable[358] = true;
		npcCatchable[359] = true;
		npcCatchable[360] = true;
		npcCatchable[361] = true;
		npcCatchable[362] = true;
		npcCatchable[363] = true;
		npcCatchable[364] = true;
		npcCatchable[365] = true;
		npcCatchable[366] = true;
		npcCatchable[367] = true;
		npcCatchable[374] = true;
		npcCatchable[377] = true;
		npcCatchable[539] = true;
		npcCatchable[538] = true;
		npcCatchable[671] = true;
		npcCatchable[672] = true;
		npcCatchable[673] = true;
		npcCatchable[674] = true;
		npcCatchable[675] = true;
		npcCatchable[484] = true;
		npcCatchable[485] = true;
		npcCatchable[486] = true;
		npcCatchable[487] = true;
		npcCatchable[583] = true;
		npcCatchable[584] = true;
		npcCatchable[585] = true;
		npcCatchable[592] = true;
		npcCatchable[593] = true;
		npcCatchable[595] = true;
		npcCatchable[596] = true;
		npcCatchable[597] = true;
		npcCatchable[598] = true;
		npcCatchable[599] = true;
		npcCatchable[600] = true;
		npcCatchable[601] = true;
		npcCatchable[604] = true;
		npcCatchable[605] = true;
		npcCatchable[602] = true;
		npcCatchable[603] = true;
		npcCatchable[606] = true;
		npcCatchable[607] = true;
		npcCatchable[608] = true;
		npcCatchable[609] = true;
		npcCatchable[610] = true;
		npcCatchable[611] = true;
		npcCatchable[612] = true;
		npcCatchable[613] = true;
		npcCatchable[614] = true;
		npcCatchable[616] = true;
		npcCatchable[617] = true;
		npcCatchable[626] = true;
		npcCatchable[627] = true;
		npcCatchable[639] = true;
		npcCatchable[640] = true;
		npcCatchable[641] = true;
		npcCatchable[642] = true;
		npcCatchable[643] = true;
		npcCatchable[644] = true;
		npcCatchable[645] = true;
		npcCatchable[646] = true;
		npcCatchable[647] = true;
		npcCatchable[648] = true;
		npcCatchable[649] = true;
		npcCatchable[650] = true;
		npcCatchable[651] = true;
		npcCatchable[652] = true;
		npcCatchable[653] = true;
		npcCatchable[654] = true;
		npcCatchable[655] = true;
		npcCatchable[661] = true;
		npcCatchable[669] = true;
		npcCatchable[677] = true;
		for (int j = 442; j <= 448; j++)
		{
			npcCatchable[j] = true;
		}
		SetTileValue();
		tileSpelunker[6] = true;
		tileSpelunker[7] = true;
		tileSpelunker[8] = true;
		tileSpelunker[9] = true;
		tileSpelunker[12] = true;
		tileSpelunker[21] = true;
		tileSpelunker[467] = true;
		tileSpelunker[441] = true;
		tileSpelunker[468] = true;
		tileSpelunker[28] = true;
		tileSpelunker[107] = true;
		tileSpelunker[108] = true;
		tileSpelunker[111] = true;
		tileSpelunker[63] = true;
		tileSpelunker[64] = true;
		tileSpelunker[65] = true;
		tileSpelunker[66] = true;
		tileSpelunker[67] = true;
		tileSpelunker[68] = true;
		tileSpelunker[566] = true;
		tileSpelunker[166] = true;
		tileSpelunker[167] = true;
		tileSpelunker[168] = true;
		tileSpelunker[169] = true;
		tileSpelunker[178] = true;
		tileSpelunker[211] = true;
		tileSpelunker[221] = true;
		tileSpelunker[222] = true;
		tileSpelunker[223] = true;
		tileSpelunker[236] = true;
		tileSpelunker[37] = true;
		tileSpelunker[407] = true;
		tileSpelunker[227] = true;
		tileSpelunker[84] = true;
		tileSpelunker[83] = true;
		tileSpelunker[404] = true;
		tileSpelunker[242] = true;
		tileSpelunker[240] = true;
		tileSpelunker[246] = true;
		tileSpelunker[245] = true;
		tileSpelunker[105] = true;
		tileSpelunker[349] = true;
		tileSpelunker[337] = true;
		tileSpelunker[531] = true;
		tileSpelunker[506] = true;
		tileSolid[379] = true;
		tileMergeDirt[249] = true;
		tileBrick[268] = true;
		tileBrick[262] = true;
		tileBrick[267] = true;
		tileBrick[265] = true;
		tileBrick[266] = true;
		tileBrick[264] = true;
		tileBrick[263] = true;
		tileBrick[261] = true;
		tileBrick[255] = true;
		tileBrick[260] = true;
		tileBrick[258] = true;
		tileBrick[259] = true;
		tileBrick[257] = true;
		tileBrick[256] = true;
		tileSolid[371] = true;
		tileMergeDirt[371] = true;
		tileBlockLight[371] = true;
		tileBouncy[371] = true;
		tileBouncy[448] = true;
		tileBouncy[446] = true;
		tileBouncy[447] = true;
		tileFrameImportant[377] = true;
		tileFrameImportant[373] = true;
		tileFrameImportant[375] = true;
		tileFrameImportant[374] = true;
		tileFrameImportant[461] = true;
		tileLighted[646] = true;
		tileFrameImportant[646] = true;
		tileWaterDeath[646] = true;
		tileLavaDeath[646] = true;
		tileLighted[372] = true;
		tileFrameImportant[372] = true;
		tileWaterDeath[372] = true;
		tileLavaDeath[372] = true;
		tileSolid[357] = true;
		tileBrick[357] = true;
		tileBrick[311] = true;
		tileSolid[408] = true;
		tileMergeDirt[408] = true;
		tileBrick[408] = true;
		tileBlockLight[408] = true;
		tileSolid[409] = true;
		tileBrick[409] = true;
		tileBlockLight[409] = true;
		tileSolid[669] = true;
		tileBrick[669] = true;
		tileBlockLight[669] = true;
		tileSolid[670] = true;
		tileBrick[670] = true;
		tileBlockLight[670] = true;
		tileSolid[671] = true;
		tileBrick[671] = true;
		tileBlockLight[671] = true;
		tileSolid[672] = true;
		tileBrick[672] = true;
		tileBlockLight[672] = true;
		tileSolid[673] = true;
		tileBrick[673] = true;
		tileBlockLight[673] = true;
		tileSolid[674] = true;
		tileBrick[674] = true;
		tileBlockLight[674] = true;
		tileSolid[675] = true;
		tileBrick[675] = true;
		tileBlockLight[675] = true;
		tileSolid[676] = true;
		tileBrick[676] = true;
		tileBlockLight[676] = true;
		tileSolid[677] = true;
		tileBrick[677] = true;
		tileBlockLight[677] = true;
		tileMergeDirt[677] = true;
		tileSolid[678] = true;
		tileBrick[678] = true;
		tileBlockLight[678] = true;
		tileMergeDirt[678] = true;
		tileSolid[679] = true;
		tileBrick[679] = true;
		tileBlockLight[679] = true;
		tileMergeDirt[679] = true;
		tileSolid[680] = true;
		tileBrick[680] = true;
		tileBlockLight[680] = true;
		tileMergeDirt[680] = true;
		tileSolid[681] = true;
		tileBrick[681] = true;
		tileBlockLight[681] = true;
		tileMergeDirt[681] = true;
		tileSolid[682] = true;
		tileBrick[682] = true;
		tileBlockLight[682] = true;
		tileMergeDirt[682] = true;
		tileSolid[683] = true;
		tileBrick[683] = true;
		tileBlockLight[683] = true;
		tileMergeDirt[683] = true;
		tileSolid[684] = true;
		tileBrick[684] = true;
		tileBlockLight[684] = true;
		tileMergeDirt[684] = true;
		tileSolid[685] = true;
		tileBrick[685] = true;
		tileBlockLight[685] = true;
		tileMergeDirt[685] = true;
		tileSolid[686] = true;
		tileBrick[686] = true;
		tileBlockLight[686] = true;
		tileMergeDirt[686] = true;
		tileSolid[666] = true;
		tileBlockLight[666] = true;
		tileBrick[666] = true;
		tileMergeDirt[666] = true;
		tileNoFail[666] = true;
		tileSolid[415] = true;
		tileBrick[415] = true;
		tileLighted[415] = true;
		tileBlockLight[415] = true;
		tileSolid[416] = true;
		tileBrick[416] = true;
		tileLighted[416] = true;
		tileBlockLight[416] = true;
		tileSolid[417] = true;
		tileBrick[417] = true;
		tileLighted[417] = true;
		tileBlockLight[417] = true;
		tileSolid[418] = true;
		tileBrick[418] = true;
		tileLighted[418] = true;
		tileBlockLight[418] = true;
		tileSolid[498] = true;
		tileBrick[498] = true;
		tileBlockLight[498] = true;
		tileBrick[37] = true;
		tileBrick[117] = true;
		tileBrick[25] = true;
		tileBrick[203] = true;
		tileSolid[232] = true;
		tileSolid[311] = true;
		tileBlockLight[311] = true;
		tileSolid[312] = true;
		tileBlockLight[313] = true;
		tileSolid[313] = true;
		tileBlockLight[312] = true;
		tileMergeDirt[311] = true;
		tileSolid[315] = true;
		tileBlockLight[315] = true;
		tileMergeDirt[315] = true;
		tileBrick[315] = true;
		tileSolid[641] = true;
		tileBlockLight[641] = true;
		tileMergeDirt[641] = true;
		tileBrick[641] = true;
		tileSolid[659] = true;
		tileBlockLight[659] = true;
		tileLighted[659] = true;
		tileBrick[659] = true;
		tileSolid[667] = true;
		tileBlockLight[667] = true;
		tileBrick[667] = true;
		tileLighted[667] = true;
		tileSolid[321] = true;
		tileSolid[322] = true;
		tileBlockLight[321] = true;
		tileBlockLight[322] = true;
		tileMergeDirt[321] = true;
		tileMergeDirt[322] = true;
		tileBrick[321] = true;
		tileBrick[322] = true;
		tileSolid[635] = true;
		tileBlockLight[635] = true;
		tileMergeDirt[635] = true;
		tileBrick[635] = true;
		tileFrameImportant[639] = true;
		tileLavaDeath[639] = true;
		tileSpelunker[639] = true;
		tileShine[639] = 300;
		tileShine2[639] = true;
		tileLavaDeath[668] = true;
		tileSolid[668] = true;
		tileBlockLight[668] = true;
		tileShine[239] = 1100;
		tileSolid[239] = true;
		tileSolidTop[239] = true;
		tileSolid[380] = true;
		tileSolidTop[380] = true;
		tileFrameImportant[358] = true;
		tileFrameImportant[359] = true;
		tileFrameImportant[360] = true;
		tileFrameImportant[361] = true;
		tileFrameImportant[362] = true;
		tileFrameImportant[363] = true;
		tileFrameImportant[364] = true;
		tileFrameImportant[391] = true;
		tileLighted[391] = true;
		tileFrameImportant[392] = true;
		tileFrameImportant[393] = true;
		tileFrameImportant[394] = true;
		tileFrameImportant[542] = true;
		tileFrameImportant[505] = true;
		tileFrameImportant[521] = true;
		tileFrameImportant[522] = true;
		tileFrameImportant[523] = true;
		tileFrameImportant[524] = true;
		tileFrameImportant[525] = true;
		tileFrameImportant[526] = true;
		tileFrameImportant[527] = true;
		tileFrameImportant[543] = true;
		tileFrameImportant[568] = true;
		tileFrameImportant[569] = true;
		tileFrameImportant[570] = true;
		tileFrameImportant[598] = true;
		tileFrameImportant[356] = true;
		tileFrameImportant[663] = true;
		tileFrameImportant[334] = true;
		tileFrameImportant[440] = true;
		tileFrameImportant[471] = true;
		tileFrameImportant[300] = true;
		tileFrameImportant[301] = true;
		tileFrameImportant[302] = true;
		tileFrameImportant[303] = true;
		tileFrameImportant[304] = true;
		tileFrameImportant[305] = true;
		tileFrameImportant[306] = true;
		tileFrameImportant[307] = true;
		tileFrameImportant[308] = true;
		tileFrameImportant[354] = true;
		tileLighted[354] = true;
		tileFrameImportant[499] = true;
		tileFrameImportant[355] = true;
		tileFrameImportant[324] = true;
		tileObsidianKill[324] = true;
		tileLavaDeath[324] = true;
		tileFrameImportant[463] = true;
		tileFrameImportant[491] = true;
		tileFrameImportant[464] = true;
		tileFrameImportant[466] = true;
		tileFrameImportant[419] = true;
		tileFrameImportant[442] = true;
		tileFrameImportant[443] = true;
		tileFrameImportant[444] = true;
		tileFrameImportant[420] = true;
		tileFrameImportant[423] = true;
		tileFrameImportant[424] = true;
		tileFrameImportant[428] = true;
		tileFrameImportant[520] = true;
		tileFrameImportant[429] = true;
		tileFrameImportant[445] = true;
		tileFrameImportant[476] = true;
		tileFrameImportant[283] = true;
		tileFrameImportant[288] = true;
		tileFrameImportant[289] = true;
		tileFrameImportant[290] = true;
		tileFrameImportant[291] = true;
		tileFrameImportant[292] = true;
		tileFrameImportant[293] = true;
		tileFrameImportant[294] = true;
		tileFrameImportant[295] = true;
		tileFrameImportant[296] = true;
		tileFrameImportant[297] = true;
		tileFrameImportant[316] = true;
		tileFrameImportant[317] = true;
		tileFrameImportant[318] = true;
		tileLargeFrames[284] = 1;
		wallHouse[224] = true;
		wallLargeFrames[224] = 2;
		wallHouse[323] = true;
		wallLargeFrames[323] = 2;
		wallHouse[324] = true;
		wallLargeFrames[324] = 2;
		wallHouse[325] = true;
		wallLargeFrames[325] = 2;
		wallHouse[326] = true;
		wallLargeFrames[326] = 2;
		wallHouse[327] = true;
		wallLargeFrames[327] = 2;
		wallHouse[328] = true;
		wallLargeFrames[328] = 2;
		wallHouse[329] = true;
		wallLargeFrames[329] = 2;
		wallHouse[330] = true;
		wallLargeFrames[330] = 2;
		wallHouse[331] = true;
		wallHouse[332] = true;
		wallHouse[333] = true;
		wallHouse[334] = true;
		wallHouse[335] = true;
		wallHouse[336] = true;
		wallHouse[337] = true;
		wallHouse[338] = true;
		wallHouse[339] = true;
		wallHouse[340] = true;
		wallHouse[341] = true;
		wallHouse[342] = true;
		wallHouse[343] = true;
		wallHouse[344] = true;
		wallHouse[345] = true;
		wallHouse[346] = true;
		wallHouse[60] = true;
		wallHouse[225] = true;
		wallHouse[226] = true;
		wallHouse[227] = true;
		wallHouse[231] = true;
		wallHouse[232] = true;
		wallHouse[233] = true;
		wallHouse[235] = true;
		wallHouse[234] = true;
		wallHouse[312] = true;
		wallHouse[313] = true;
		wallHouse[237] = true;
		wallHouse[238] = true;
		wallHouse[239] = true;
		wallHouse[240] = true;
		tileLargeFrames[409] = 2;
		tileLargeFrames[669] = 2;
		tileLargeFrames[670] = 2;
		tileLargeFrames[671] = 2;
		tileLargeFrames[672] = 2;
		tileLargeFrames[673] = 2;
		tileLargeFrames[674] = 2;
		tileLargeFrames[675] = 2;
		tileLargeFrames[676] = 2;
		tileFrameImportant[410] = true;
		tileFrameImportant[480] = true;
		tileFrameImportant[509] = true;
		tileFrameImportant[657] = true;
		tileFrameImportant[658] = true;
		tileLighted[658] = true;
		wallHouse[173] = true;
		wallHouse[183] = true;
		wallHouse[179] = true;
		wallLargeFrames[179] = 1;
		tileSolid[367] = true;
		tileBlockLight[367] = true;
		tileMergeDirt[367] = true;
		tileSolid[357] = true;
		tileBlockLight[357] = true;
		tileLargeFrames[357] = 1;
		tileBlendAll[357] = true;
		wallHouse[184] = true;
		wallHouse[181] = true;
		tileSolid[368] = true;
		tileBlockLight[368] = true;
		tileMergeDirt[368] = true;
		tileSolid[369] = true;
		tileBlockLight[369] = true;
		tileBrick[369] = true;
		tileMergeDirt[369] = true;
		wallHouse[186] = true;
		tileLargeFrames[325] = 1;
		tileSolid[325] = true;
		tileBlockLight[325] = true;
		wallLargeFrames[146] = 1;
		wallLargeFrames[147] = 1;
		wallLargeFrames[167] = 1;
		wallLargeFrames[185] = 2;
		wallLargeFrames[274] = 2;
		tileSolid[460] = true;
		tileSolid[326] = true;
		tileBlockLight[326] = true;
		tileBrick[326] = true;
		tileSolid[458] = true;
		tileBlockLight[458] = true;
		tileBrick[458] = true;
		tileSolid[459] = true;
		tileBrick[459] = true;
		tileSolid[327] = true;
		tileBlockLight[327] = true;
		tileBrick[327] = true;
		tileSolid[345] = true;
		tileBlockLight[345] = true;
		tileBrick[345] = true;
		tileLighted[327] = true;
		tileSolid[328] = true;
		tileBrick[328] = true;
		tileSolid[329] = true;
		tileBrick[329] = true;
		tileBlockLight[329] = true;
		tileSolid[507] = true;
		tileBlockLight[507] = true;
		tileBrick[507] = true;
		tileSolid[508] = true;
		tileBlockLight[508] = true;
		tileBrick[508] = true;
		tileLighted[336] = true;
		tileLighted[340] = true;
		tileLighted[341] = true;
		tileLighted[342] = true;
		tileLighted[343] = true;
		tileLighted[344] = true;
		tileLighted[349] = true;
		tileLighted[598] = true;
		tileSolid[421] = true;
		tileBlockLight[421] = true;
		tileSolid[422] = true;
		tileBlockLight[422] = true;
		tileSolid[426] = true;
		tileBlockLight[426] = true;
		tileSolid[430] = true;
		tileBlockLight[430] = true;
		tileSolid[431] = true;
		tileBlockLight[431] = true;
		tileSolid[432] = true;
		tileBlockLight[432] = true;
		tileSolid[433] = true;
		tileBlockLight[433] = true;
		tileSolid[434] = true;
		tileBlockLight[434] = true;
		tileSolid[446] = true;
		tileSolid[447] = true;
		tileSolid[448] = true;
		tileFrameImportant[427] = true;
		tileSolidTop[427] = true;
		tileSolid[427] = true;
		tileNoAttach[427] = true;
		tileTable[427] = true;
		tileLavaDeath[427] = true;
		tileNoSunLight[427] = false;
		tileSolid[476] = true;
		for (int num = 435; num <= 439; num++)
		{
			tileFrameImportant[num] = true;
			tileSolidTop[num] = true;
			tileSolid[num] = true;
			tileNoAttach[num] = true;
			tileTable[num] = true;
			tileLavaDeath[num] = true;
			tileNoSunLight[num] = false;
		}
		tileSolid[284] = true;
		tileBlockLight[284] = true;
		tileSolid[346] = true;
		tileBlockLight[346] = true;
		tileLighted[346] = true;
		tileShine[346] = 2000;
		tileShine2[346] = true;
		tileBrick[346] = true;
		tileMergeDirt[346] = true;
		tileSolid[347] = true;
		tileBlockLight[347] = true;
		tileLighted[347] = true;
		tileShine[347] = 1900;
		tileShine2[347] = true;
		tileBrick[347] = true;
		tileMergeDirt[347] = true;
		tileSolid[348] = true;
		tileBlockLight[348] = true;
		tileLighted[348] = true;
		tileShine[348] = 1800;
		tileShine2[348] = true;
		tileBrick[348] = true;
		tileMergeDirt[348] = true;
		tileSolid[350] = true;
		tileBlockLight[350] = true;
		tileLighted[350] = true;
		tileBrick[350] = true;
		tileMergeDirt[350] = true;
		tileGlowMask[350] = 94;
		tileGlowMask[390] = 130;
		tileGlowMask[381] = 126;
		tileGlowMask[517] = 258;
		tileGlowMask[687] = 336;
		tileGlowMask[534] = 259;
		tileGlowMask[535] = 260;
		tileGlowMask[689] = 338;
		tileGlowMask[536] = 261;
		tileGlowMask[537] = 262;
		tileGlowMask[690] = 339;
		tileGlowMask[539] = 263;
		tileGlowMask[540] = 264;
		tileGlowMask[688] = 337;
		tileGlowMask[625] = 311;
		tileGlowMask[626] = 312;
		tileGlowMask[691] = 340;
		tileGlowMask[627] = 313;
		tileGlowMask[628] = 314;
		tileGlowMask[692] = 341;
		tileGlowMask[370] = 111;
		tileGlowMask[429] = 214;
		tileGlowMask[209] = 215;
		tileGlowMask[445] = 214;
		tileGlowMask[129] = -2;
		tileGlowMask[633] = 326;
		tileGlowMask[659] = 348;
		tileGlowMask[667] = 349;
		tileLighted[429] = true;
		tileLighted[209] = true;
		tileGlowMask[410] = 201;
		tileGlowMask[509] = 265;
		tileGlowMask[658] = 333;
		tileSolid[370] = true;
		tileBlockLight[370] = true;
		tileLighted[370] = true;
		tileShine[370] = 1900;
		tileShine2[370] = true;
		tileBrick[370] = true;
		tileMergeDirt[370] = true;
		tileContainer[21] = true;
		tileContainer[467] = true;
		tileContainer[88] = true;
		tileContainer[470] = true;
		tileContainer[475] = true;
		tileSign[55] = true;
		tileSign[85] = true;
		tileSign[425] = true;
		tileSign[573] = true;
		tileSolid[383] = true;
		tileBrick[383] = true;
		tileBlockLight[383] = true;
		tileSolid[385] = true;
		tileBrick[385] = true;
		tileBlockLight[385] = true;
		tileSolid[472] = true;
		tileBrick[472] = true;
		tileMergeDirt[472] = true;
		tileBlockLight[472] = true;
		tileSolid[473] = true;
		tileBrick[473] = true;
		tileMergeDirt[473] = true;
		tileBlockLight[473] = true;
		tileSolid[500] = true;
		tileBrick[500] = true;
		tileLighted[500] = true;
		tileMergeDirt[500] = true;
		tileBlockLight[500] = true;
		tileSolid[501] = true;
		tileBrick[501] = true;
		tileLighted[501] = true;
		tileMergeDirt[501] = true;
		tileBlockLight[501] = true;
		tileSolid[502] = true;
		tileBrick[502] = true;
		tileLighted[502] = true;
		tileMergeDirt[502] = true;
		tileBlockLight[502] = true;
		tileSolid[503] = true;
		tileBrick[503] = true;
		tileLighted[503] = true;
		tileMergeDirt[503] = true;
		tileBlockLight[503] = true;
		tileSolid[541] = true;
		tileBlockLight[541] = false;
		tileSolid[546] = true;
		tileBlockLight[546] = false;
		tileSolid[557] = true;
		tileBlockLight[557] = true;
		tileSolid[474] = true;
		tileBrick[474] = true;
		tileMergeDirt[474] = true;
		tileBlockLight[474] = true;
		tileSolid[478] = true;
		tileBrick[478] = true;
		tileMergeDirt[478] = true;
		tileBlockLight[478] = true;
		tileSolid[479] = true;
		tileBrick[479] = true;
		tileMergeDirt[479] = true;
		tileBlockLight[479] = true;
		tileSolid[562] = true;
		tileBrick[562] = true;
		tileBlockLight[562] = true;
		tileMergeDirt[562] = true;
		tileSolid[563] = true;
		tileBrick[563] = true;
		tileBlockLight[563] = true;
		tileMergeDirt[563] = true;
		tileSolid[496] = true;
		tileBrick[496] = true;
		tileMergeDirt[496] = true;
		tileBlockLight[496] = true;
		tileSolid[495] = true;
		tileBrick[495] = true;
		tileMergeDirt[495] = true;
		tileBlockLight[495] = true;
		tileSolid[396] = true;
		tileBlockLight[396] = true;
		tileSolid[397] = true;
		tileBlockLight[397] = true;
		tileSolid[399] = true;
		tileBlockLight[399] = true;
		tileSolid[401] = true;
		tileBlockLight[401] = true;
		tileSolid[398] = true;
		tileBlockLight[398] = true;
		tileSolid[400] = true;
		tileBlockLight[400] = true;
		tileSolid[402] = true;
		tileBlockLight[402] = true;
		tileSolid[403] = true;
		tileBlockLight[403] = true;
		tileSolid[404] = true;
		tileBlockLight[404] = true;
		tileSolid[407] = true;
		tileBlockLight[407] = true;
		tileShine2[407] = true;
		tileShine[407] = 1000;
		tileFrameImportant[36] = true;
		tileFrameImportant[275] = true;
		tileFrameImportant[276] = true;
		tileFrameImportant[277] = true;
		tileFrameImportant[278] = true;
		tileFrameImportant[279] = true;
		tileFrameImportant[280] = true;
		tileFrameImportant[281] = true;
		tileFrameImportant[282] = true;
		tileFrameImportant[285] = true;
		tileFrameImportant[286] = true;
		tileFrameImportant[414] = true;
		tileFrameImportant[413] = true;
		tileFrameImportant[309] = true;
		tileFrameImportant[310] = true;
		tileFrameImportant[339] = true;
		tileFrameImportant[532] = true;
		tileLighted[286] = true;
		tileLighted[302] = true;
		tileFrameImportant[298] = true;
		tileFrameImportant[299] = true;
		tileSolid[170] = true;
		tileBlockLight[170] = true;
		tileFrameImportant[171] = true;
		tileLighted[171] = true;
		tileFrameImportant[247] = true;
		tileFrameImportant[245] = true;
		tileFrameImportant[246] = true;
		tileFrameImportant[239] = true;
		tileFrameImportant[240] = true;
		tileFrameImportant[241] = true;
		tileFrameImportant[242] = true;
		tileFrameImportant[243] = true;
		tileFrameImportant[244] = true;
		tileFrameImportant[254] = true;
		tileSolid[221] = true;
		tileBlockLight[221] = true;
		tileMergeDirt[221] = true;
		tileLighted[96] = true;
		tileMergeDirt[250] = true;
		tileSolid[272] = true;
		tileBlockLight[272] = true;
		tileSolid[229] = true;
		tileBlockLight[229] = true;
		tileMergeDirt[229] = true;
		tileSolid[230] = true;
		tileBlockLight[230] = true;
		tileMergeDirt[230] = true;
		tileSolid[222] = true;
		tileBlockLight[222] = true;
		tileMergeDirt[222] = true;
		tileSolid[223] = true;
		tileBlockLight[223] = true;
		tileMergeDirt[223] = true;
		tileSolid[224] = true;
		tileBlockLight[224] = true;
		tileFrameImportant[237] = true;
		tileFrameImportant[238] = true;
		tileSolid[225] = true;
		tileBlockLight[225] = true;
		tileBrick[225] = true;
		tileSolid[226] = true;
		tileBlockLight[226] = true;
		tileBrick[226] = true;
		tileSolid[235] = true;
		tileBlockLight[235] = true;
		tileFrameImportant[235] = true;
		tileLighted[238] = true;
		tileCut[254] = true;
		tileFrameImportant[236] = true;
		tileCut[236] = true;
		tileSolid[191] = true;
		tileBrick[191] = true;
		tileBlockLight[191] = true;
		tileSolid[211] = true;
		tileBlockLight[211] = true;
		tileSolid[208] = true;
		tileBrick[208] = true;
		tileBlockLight[208] = true;
		tileSolid[192] = true;
		tileBlockLight[192] = true;
		tileSolid[193] = true;
		tileBrick[193] = true;
		tileBlockLight[193] = true;
		tileMergeDirt[193] = true;
		tileSolid[194] = true;
		tileBrick[194] = true;
		tileBlockLight[194] = true;
		tileSolid[195] = true;
		tileBrick[195] = true;
		tileMergeDirt[195] = true;
		tileBlockLight[195] = true;
		tileBlockLight[200] = true;
		tileSolid[200] = true;
		tileBrick[200] = true;
		tileBlockLight[203] = true;
		tileSolid[203] = true;
		tileMergeDirt[203] = true;
		tileBlockLight[204] = true;
		tileSolid[204] = true;
		tileMergeDirt[204] = true;
		tileBlockLight[165] = true;
		tileShine2[147] = true;
		tileShine2[161] = true;
		tileShine2[163] = true;
		tileShine2[164] = true;
		tileSolid[189] = true;
		tileBlockLight[51] = true;
		tileLighted[204] = true;
		tileShine[204] = 1150;
		tileShine2[204] = true;
		tileSolid[190] = true;
		tileBlockLight[190] = true;
		tileBrick[190] = true;
		tileSolid[198] = true;
		tileMergeDirt[198] = true;
		tileBrick[198] = true;
		tileBlockLight[198] = true;
		tileSolid[206] = true;
		tileBlockLight[206] = true;
		tileMergeDirt[206] = true;
		tileBrick[206] = true;
		tileBlockLight[234] = true;
		tileSolid[248] = true;
		tileSolid[249] = true;
		tileSolid[250] = true;
		tileBrick[248] = true;
		tileBrick[249] = true;
		tileBrick[250] = true;
		tileSolid[251] = true;
		tileSolid[252] = true;
		tileBrick[252] = true;
		tileSolid[253] = true;
		tileBrick[253] = true;
		tileMergeDirt[251] = true;
		tileMergeDirt[252] = true;
		tileMergeDirt[253] = true;
		tileBlockLight[251] = true;
		tileBlockLight[252] = true;
		tileBlockLight[253] = true;
		tileBlockLight[248] = true;
		tileBlockLight[249] = true;
		tileBlockLight[250] = true;
		tileLargeFrames[273] = 1;
		tileSolid[273] = true;
		tileBlockLight[273] = true;
		tileLargeFrames[274] = 1;
		tileSolid[274] = true;
		tileBlockLight[274] = true;
		tileLargeFrames[618] = 1;
		tileSolid[618] = true;
		tileBlockLight[618] = true;
		for (int num2 = 255; num2 <= 268; num2++)
		{
			tileSolid[num2] = true;
			if (num2 > 261)
			{
				tileLighted[num2] = true;
				tileShine2[num2] = true;
			}
		}
		tileFrameImportant[269] = true;
		tileFrameImportant[470] = true;
		tileFrameImportant[475] = true;
		tileFrameImportant[390] = true;
		tileFrameImportant[597] = true;
		tileLighted[597] = true;
		tileNoAttach[390] = true;
		tileLavaDeath[390] = true;
		tileLighted[390] = true;
		tileFrameImportant[617] = true;
		wallHouse[168] = true;
		wallHouse[169] = true;
		wallHouse[142] = true;
		wallHouse[143] = true;
		wallHouse[144] = true;
		wallHouse[149] = true;
		wallHouse[151] = true;
		wallHouse[150] = true;
		wallHouse[152] = true;
		wallHouse[145] = true;
		wallHouse[148] = true;
		wallHouse[175] = true;
		wallHouse[176] = true;
		wallHouse[182] = true;
		for (int num3 = 153; num3 < 167; num3++)
		{
			wallHouse[num3] = true;
		}
		wallHouse[146] = true;
		wallHouse[147] = true;
		wallHouse[149] = true;
		wallHouse[167] = true;
		wallHouse[168] = true;
		wallHouse[133] = true;
		wallHouse[134] = true;
		wallHouse[135] = true;
		wallHouse[136] = true;
		wallHouse[137] = true;
		wallHouse[75] = true;
		wallHouse[76] = true;
		wallHouse[78] = true;
		wallHouse[82] = true;
		wallHouse[77] = true;
		wallHouse[1] = true;
		wallHouse[4] = true;
		wallHouse[5] = true;
		wallHouse[6] = true;
		wallHouse[10] = true;
		wallHouse[11] = true;
		wallHouse[12] = true;
		wallHouse[16] = true;
		wallHouse[17] = true;
		wallHouse[18] = true;
		wallHouse[19] = true;
		wallHouse[20] = true;
		wallHouse[21] = true;
		wallHouse[22] = true;
		wallHouse[23] = true;
		wallHouse[24] = true;
		wallHouse[25] = true;
		wallHouse[26] = true;
		wallHouse[27] = true;
		wallHouse[29] = true;
		wallHouse[30] = true;
		wallHouse[31] = true;
		wallHouse[32] = true;
		wallHouse[33] = true;
		wallHouse[34] = true;
		wallHouse[35] = true;
		wallHouse[36] = true;
		wallHouse[37] = true;
		wallHouse[38] = true;
		wallHouse[39] = true;
		wallHouse[41] = true;
		wallHouse[42] = true;
		wallHouse[43] = true;
		wallHouse[44] = true;
		wallHouse[45] = true;
		wallHouse[46] = true;
		wallHouse[47] = true;
		wallHouse[66] = true;
		wallHouse[67] = true;
		wallHouse[68] = true;
		wallHouse[72] = true;
		wallHouse[73] = true;
		wallHouse[107] = true;
		wallHouse[106] = true;
		wallHouse[245] = true;
		wallHouse[315] = true;
		wallHouse[316] = true;
		wallHouse[317] = true;
		wallHouse[109] = true;
		wallHouse[110] = true;
		wallHouse[111] = true;
		wallHouse[112] = true;
		wallHouse[113] = true;
		wallHouse[114] = true;
		wallHouse[115] = true;
		wallHouse[116] = true;
		wallHouse[117] = true;
		wallHouse[118] = true;
		wallHouse[119] = true;
		wallHouse[120] = true;
		wallHouse[121] = true;
		wallHouse[122] = true;
		wallHouse[123] = true;
		wallHouse[124] = true;
		wallHouse[125] = true;
		wallHouse[108] = true;
		wallHouse[100] = true;
		wallHouse[101] = true;
		wallHouse[102] = true;
		wallHouse[103] = true;
		wallHouse[104] = true;
		wallHouse[105] = true;
		wallHouse[84] = true;
		wallHouse[74] = true;
		wallHouse[241] = true;
		wallHouse[85] = true;
		wallHouse[88] = true;
		wallHouse[89] = true;
		wallHouse[90] = true;
		wallHouse[91] = true;
		wallHouse[92] = true;
		wallHouse[93] = true;
		wallHouse[126] = true;
		wallHouse[127] = true;
		wallHouse[128] = true;
		wallHouse[129] = true;
		wallHouse[130] = true;
		wallHouse[131] = true;
		wallHouse[132] = true;
		wallHouse[138] = true;
		wallHouse[139] = true;
		wallHouse[140] = true;
		wallHouse[141] = true;
		wallHouse[177] = true;
		wallHouse[172] = true;
		wallHouse[242] = true;
		wallHouse[243] = true;
		wallHouse[174] = true;
		wallHouse[223] = true;
		wallHouse[230] = true;
		wallHouse[228] = true;
		wallHouse[229] = true;
		wallHouse[236] = true;
		wallHouse[319] = true;
		wallHouse[318] = true;
		wallHouse[321] = true;
		wallHouse[322] = true;
		wallHouse[320] = true;
		wallHouse[246] = true;
		wallHouse[247] = true;
		wallHouse[248] = true;
		wallHouse[249] = true;
		wallHouse[250] = true;
		wallHouse[251] = true;
		wallHouse[252] = true;
		wallHouse[253] = true;
		wallHouse[254] = true;
		wallHouse[255] = true;
		wallHouse[314] = true;
		wallHouse[256] = true;
		wallHouse[257] = true;
		wallHouse[258] = true;
		wallHouse[259] = true;
		wallHouse[260] = true;
		wallHouse[261] = true;
		wallHouse[262] = true;
		wallHouse[263] = true;
		wallHouse[264] = true;
		wallHouse[265] = true;
		wallHouse[266] = true;
		wallHouse[267] = true;
		wallHouse[268] = true;
		wallHouse[269] = true;
		wallHouse[270] = true;
		wallHouse[271] = true;
		wallHouse[272] = true;
		wallHouse[273] = true;
		wallHouse[274] = true;
		wallHouse[275] = true;
		wallHouse[276] = true;
		wallHouse[277] = true;
		wallHouse[278] = true;
		wallHouse[279] = true;
		wallHouse[280] = true;
		wallHouse[281] = true;
		wallHouse[282] = true;
		wallHouse[283] = true;
		wallHouse[284] = true;
		wallHouse[285] = true;
		wallHouse[286] = true;
		wallHouse[287] = true;
		wallHouse[288] = true;
		wallHouse[289] = true;
		wallHouse[290] = true;
		wallHouse[291] = true;
		wallHouse[292] = true;
		wallHouse[293] = true;
		wallHouse[294] = true;
		wallHouse[295] = true;
		wallHouse[296] = true;
		wallHouse[297] = true;
		wallHouse[298] = true;
		wallHouse[299] = true;
		wallHouse[300] = true;
		wallHouse[301] = true;
		wallHouse[302] = true;
		wallHouse[303] = true;
		wallHouse[304] = true;
		wallHouse[305] = true;
		wallHouse[306] = true;
		wallHouse[307] = true;
		wallHouse[308] = true;
		wallHouse[309] = true;
		wallHouse[310] = true;
		wallHouse[311] = true;
		wallLight[0] = true;
		wallLight[21] = true;
		wallLight[318] = true;
		wallLight[106] = true;
		wallLight[317] = true;
		wallLight[107] = true;
		wallLight[138] = true;
		wallLight[140] = true;
		wallLight[141] = true;
		wallLight[139] = true;
		wallLight[145] = true;
		wallLight[150] = true;
		wallLight[152] = true;
		wallLight[245] = true;
		wallLight[315] = true;
		wallLight[168] = true;
		for (int num4 = 0; num4 < WallID.Count; num4++)
		{
			wallDungeon[num4] = false;
		}
		wallDungeon[7] = true;
		wallDungeon[8] = true;
		wallDungeon[9] = true;
		wallDungeon[94] = true;
		wallDungeon[95] = true;
		wallDungeon[96] = true;
		wallDungeon[97] = true;
		wallDungeon[98] = true;
		wallDungeon[99] = true;
		SetupTileMerge();
	}

	private void ClientInitialize()
	{
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		MessageBuffer.OnTileChangeReceived += OnTileChangeEvent;
		LanguageManager.Instance.OnLanguageChanged += delegate
		{
			ItemTooltip.InvalidateTooltips();
		};
		PlayerInput.OnBindingChange += ItemTooltip.InvalidateTooltips;
		clientUUID = Guid.NewGuid().ToString();
		_ = Terraria.Graphics.Effects.Filters.Scene;
		Platform.Current.InitializeClientServices(((Game)this).Window.Handle);
		Platform.Get<IImeService>().AddKeyListener(delegate(char keyStroke)
		{
			if (keyCount < 10)
			{
				keyInt[keyCount] = keyStroke;
				keyString[keyCount] = keyStroke.ToString() ?? "";
				keyCount++;
			}
		});
		((Game)this).Window.AllowUserResizing = true;
		LoadSettings();
		PreventUpdatingTargets = false;
		SetDisplayMonitor();
		PlayerInput.CacheOriginalScreenDimensions();
		if (screenWidth > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width)
		{
			screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
		}
		if (screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
		{
			screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
		}
		UpdateDisplaySettings();
		graphics.ApplyChanges();
		if (Main.OnResolutionChanged != null)
		{
			Main.OnResolutionChanged(new Vector2((float)screenWidth, (float)screenHeight));
		}
		CheckBunny();
		((Game)this).GraphicsDevice.DeviceLost += GraphicsDeviceLost;
		((Game)this).GraphicsDevice.DeviceReset += GraphicsDeviceLost;
		((Game)this).GraphicsDevice.DeviceResetting += GraphicsDeviceLost;
		if (_needsLanguageSelect)
		{
			menuMode = 1212;
		}
		_achievements = new AchievementManager();
		_achievementAdvisor = new AchievementAdvisor();
		OpenRecent();
		UILinksInitializer.Load();
		Chroma = new ChromaEngine();
		ChromaPainter = new ChromaHotkeyPainter();
		ChromaPainter.CollectBoundKeys();
		CacheSupportedDisplaySizes();
		if (autoJoin)
		{
			LoadPlayers();
			menuMode = 1;
			menuMultiplayer = true;
		}
		fpsTimer.Start();
	}

	private static void CacheSupportedDisplaySizes()
	{
		numDisplayModes = 0;
		foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
		{
			if (supportedDisplayMode.Width < minScreenW || supportedDisplayMode.Height < minScreenH || supportedDisplayMode.Width > maxScreenW || supportedDisplayMode.Height > maxScreenH)
			{
				continue;
			}
			bool flag = true;
			for (int i = 0; i < numDisplayModes; i++)
			{
				if (supportedDisplayMode.Width == displayWidth[i] && supportedDisplayMode.Height == displayHeight[i])
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				displayHeight[numDisplayModes] = supportedDisplayMode.Height;
				displayWidth[numDisplayModes] = supportedDisplayMode.Width;
				numDisplayModes++;
			}
		}
	}

	public static void LoadTestLog(string logname)
	{
	}

	internal static void OnceFailedLoadingAnAsset(string assetPath, Exception e)
	{
		Logging.Terraria.Error((object)("Failed to load asset: \"" + assetPath + "\""), e);
		FancyErrorPrinter.ShowFailedToLoadAssetError(e, assetPath);
	}

	protected override void LoadContent()
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Expected O, but got Unknown
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Expected O, but got Unknown
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Expected O, but got Unknown
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Expected O, but got Unknown
		Asset<Texture2D>.DefaultValue = new Texture2D(((Game)this).GraphicsDevice, 1, 1)
		{
			Name = "Asynchronously-loaded Asset Dummy Texture (do not dispose or modify!)"
		};
		Asset<Texture2D>.DefaultValue.SetData<Color>((Color[])(object)new Color[1] { Color.Transparent });
		SoundEngine.Initialize();
		if (((IServiceProvider)((Game)this).Services).Get<IAssetRepository>() == null)
		{
			AssetInitializer.CreateAssetServices(((Game)this).Services);
		}
		Assets = ((IServiceProvider)((Game)this).Services).Get<IAssetRepository>();
		Assets.AssetLoadFailHandler = OnceFailedLoadingAnAsset;
		mapSectionTexture = new RenderTarget2D(((Game)this).GraphicsDevice, 200, 150);
		ShaderContentManager = new ContentManager(((Game)this).Content.ServiceProvider, ((Game)this).Content.RootDirectory);
		PixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
		VertexPixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
		TileShaderRef.Value = ShaderContentManager.Load<Effect>("TileShader");
		ScreenShaderRef.Value = ShaderContentManager.Load<Effect>("ScreenShader");
		spriteBatch = new SpriteBatch(((Game)this).GraphicsDevice);
		tileBatch = new TileBatch(((Game)this).GraphicsDevice);
		DebugDrawer = new BasicDebugDrawer(((Game)this).GraphicsDevice);
		GameViewMatrix = new SpriteViewMatrix(((Game)this).GraphicsDevice);
		BackgroundViewMatrix = new SpriteViewMatrix(((Game)this).GraphicsDevice);
		if (SoundEngine.IsAudioSupported)
		{
			audioSystem = new LegacyAudioSystem();
		}
		else
		{
			audioSystem = new DisabledAudioSystem();
		}
		AssetSourceController = new AssetSourceController(Assets, new IContentSource[1]
		{
			new XnaDirectContentSource(((TMLContentManager)(object)((Game)this).Content).RootDirectories)
		});
		VanillaContentValidator.Instance = new VanillaContentValidator("Terraria.IO.Data.ResourcePacksDefaultInfo.tsv");
		if (SocialAPI.Workshop != null)
		{
			SocialAPI.Workshop.LoadEarlyContent();
		}
		CaptureManager.Instance = new CaptureManager();
		AssetSourceController.UseResourcePacks(AssetInitializer.CreateResourcePackList((IServiceProvider)((Game)this).Services));
		AssetInitializer.LoadSplashAssets(asyncLoadForSounds: true);
		ChromaInitializer.Load();
		_gameContentLoadProcess = LoadContent_Deferred();
		Terraria.ModLoader.ModLoader.PrepareAssets();
	}

	protected IEnumerator LoadContent_Deferred()
	{
		yield return null;
		IssueReporter = new GeneralIssueReporter();
		AssetInitializer.LoadAssetsWhileInInitialBlackScreen();
		yield return null;
		bool doneLoadingMusic = false;
		IEnumerator musicLoadProcedure = LoadMusic_InSteps();
		while (!doneLoadingMusic)
		{
			try
			{
				if (!musicLoadProcedure.MoveNext())
				{
					doneLoadingMusic = true;
				}
			}
			catch
			{
				doneLoadingMusic = true;
				musicVolume = 0f;
				soundVolume = 0f;
			}
			yield return null;
		}
		_musicLoaded = true;
		splashTimer.Start();
		yield return null;
		_begunMainAsyncLoad = true;
		AssetInitializer.Load(asyncLoad: true);
		_artLoaded = true;
		TownNPCHeadRenderer = new NPCHeadRenderer(TextureAssets.NpcHead);
		ContentThatNeedsRenderTargets.Add(TownNPCHeadRenderer);
		BossNPCHeadRenderer = new NPCHeadRenderer(TextureAssets.NpcHeadBoss);
		ContentThatNeedsRenderTargets.Add(BossNPCHeadRenderer);
	}

	private void TickLoadProcess()
	{
		_gameContentLoadProcess.MoveNext();
	}

	private static void PostContentLoadInitialize()
	{
		LiquidRenderer.LoadContent();
		AchievementInitializer.Load();
		AchievementAdvisor.Initialize();
		DyeInitializer.Load();
		ScreenEffectInitializer.Load();
		InGameNotificationsTracker.Initialize();
		LinkButtonsInitializer.Load();
		_stardewAnimation = new StardewValleyAnimation();
		moonType = rand.Next(9);
		windSpeedCurrent = (float)rand.Next(-800, 801) * 0.001f;
		windSpeedTarget = windSpeedCurrent;
		numClouds = rand.Next(200);
		Mount.Initialize();
		Minecart.Initialize();
		CacheSupportedDisplaySizes();
		ContentSamples.RebuildItemCreativeSortingIDsAfterRecipesAreSetUp();
		ContentSamples.CommonlyUsedContentSamples.PrepareAfterEverythingElseLoaded();
	}

	private IEnumerator LoadMusic_InSteps()
	{
		yield return null;
		IEnumerator sub1 = audioSystem.PrepareWaveBank();
		while (sub1.MoveNext())
		{
			yield return sub1.Current;
		}
		for (int i = 1; i < maxMusic; i++)
		{
			audioSystem.LoadCue(i, "Music_" + i);
			yield return null;
		}
		audioSystem.LoadFromSources();
	}

	protected override void UnloadContent()
	{
	}

	public static void CheckForMoonEventsStartingTemporarySeasons()
	{
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		if (netMode != 1)
		{
			bool num = forceHalloweenForToday;
			bool flag = forceXMasForToday;
			forceXMasForToday = false;
			forceHalloweenForToday = false;
			int waveNumber = NPC.waveNumber;
			_ = NPC.waveKills;
			if (pumpkinMoon && waveNumber >= 15)
			{
				forceHalloweenForToday = true;
			}
			if (snowMoon && waveNumber >= 15)
			{
				forceXMasForToday = true;
			}
			Color color = default(Color);
			((Color)(ref color))._002Ector(50, 255, 130);
			if (num != forceHalloweenForToday)
			{
				WorldGen.BroadcastText(NetworkText.FromKey(forceHalloweenForToday ? "Misc.StartedVictoryHalloween" : "Misc.EndedVictoryHalloween"), color);
			}
			if (flag != forceXMasForToday)
			{
				WorldGen.BroadcastText(NetworkText.FromKey(forceXMasForToday ? "Misc.StartedVictoryXmas" : "Misc.EndedVictoryXmas"), color);
			}
		}
	}

	public static void CheckForMoonEventsScoreDisplay()
	{
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		if (netMode != 1 && (pumpkinMoon || snowMoon))
		{
			Color color = default(Color);
			((Color)(ref color))._002Ector(175, 75, 255);
			string key = "Misc.PumpkinMoonScore";
			if (snowMoon)
			{
				key = "Misc.FrostMoonScore";
			}
			WorldGen.BroadcastText(NetworkText.FromKey(key, NPC.totalInvasionPoints), color);
		}
	}

	public static void stopMoonEvent()
	{
		_ = NPC.waveNumber;
		_ = NPC.waveKills;
		if (pumpkinMoon)
		{
			pumpkinMoon = false;
			if (netMode != 1)
			{
				NPC.totalInvasionPoints = 0f;
				NPC.waveKills = 0f;
				NPC.waveNumber = 0;
			}
		}
		if (snowMoon)
		{
			snowMoon = false;
			if (netMode != 1)
			{
				NPC.totalInvasionPoints = 0f;
				NPC.waveKills = 0f;
				NPC.waveNumber = 0;
			}
		}
	}

	public static void startPumpkinMoon()
	{
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		pumpkinMoon = true;
		snowMoon = false;
		bloodMoon = false;
		invasionProgress = -1;
		invasionProgressDisplayLeft = 0;
		invasionProgressAlpha = 0f;
		invasionProgressIcon = 0;
		if (netMode != 1)
		{
			NPC.totalInvasionPoints = 0f;
			NPC.waveKills = 0f;
			NPC.waveNumber = 1;
			NetworkText invasionWaveText = Lang.GetInvasionWaveText(1, 305);
			if (netMode == 0)
			{
				NewText(invasionWaveText.ToString(), 175, 75);
			}
			else if (netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(invasionWaveText, new Color(175, 75, 255));
			}
		}
	}

	public static void startSnowMoon()
	{
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		snowMoon = true;
		pumpkinMoon = false;
		bloodMoon = false;
		invasionProgress = -1;
		invasionProgressDisplayLeft = 0;
		invasionProgressAlpha = 0f;
		invasionProgressIcon = 0;
		if (netMode != 1)
		{
			NPC.totalInvasionPoints = 0f;
			NPC.waveKills = 0f;
			NPC.waveNumber = 1;
			NetworkText invasionWaveText = Lang.GetInvasionWaveText(1, 338, 342);
			if (netMode == 0)
			{
				NewText(invasionWaveText.ToString(), 175, 75);
			}
			else if (netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(invasionWaveText, new Color(175, 75, 255));
			}
		}
	}

	protected void UpdateAudio()
	{
		if (!SoundEngine.IsAudioSupported || !_musicLoaded)
		{
			return;
		}
		if (!dedServ && !showSplash)
		{
			SoundEngine.Update();
		}
		if (musicVolume == 0f)
		{
			curMusic = 0;
		}
		try
		{
			if (dedServ)
			{
				return;
			}
			bool flag = ((Game)this).IsActive;
			if (!flag)
			{
				audioSystem.PauseAll();
				SoundEngine.StopAmbientSounds();
			}
			else
			{
				audioSystem.ResumeAll();
			}
			if (drunkWorld)
			{
				TOWMusicUnlocked = true;
			}
			if (gameMenu)
			{
				swapMusic = false;
			}
			if (swapMusic)
			{
				if (drunkWorld && !remixWorld)
				{
					UpdateAudio_DecideOnNewMusic();
				}
				else
				{
					UpdateAudio_DecideOnTOWMusic();
				}
			}
			else if (!gameMenu && drunkWorld && !remixWorld)
			{
				UpdateAudio_DecideOnTOWMusic();
			}
			else
			{
				UpdateAudio_DecideOnNewMusic();
			}
			if (musicBox2 >= 0)
			{
				SceneMetrics.ActiveMusicBox = musicBox2;
			}
			if (SceneMetrics.ActiveMusicBox >= 0)
			{
				if (SceneMetrics.ActiveMusicBox == 0)
				{
					newMusic = 1;
				}
				if (SceneMetrics.ActiveMusicBox == 1)
				{
					newMusic = 2;
				}
				if (SceneMetrics.ActiveMusicBox == 2)
				{
					newMusic = 3;
				}
				if (SceneMetrics.ActiveMusicBox == 4)
				{
					newMusic = 4;
				}
				if (SceneMetrics.ActiveMusicBox == 5)
				{
					newMusic = 5;
				}
				if (SceneMetrics.ActiveMusicBox == 3)
				{
					newMusic = 6;
				}
				if (SceneMetrics.ActiveMusicBox == 6)
				{
					newMusic = 7;
				}
				if (SceneMetrics.ActiveMusicBox == 7)
				{
					newMusic = 8;
				}
				if (SceneMetrics.ActiveMusicBox == 9)
				{
					newMusic = 9;
				}
				if (SceneMetrics.ActiveMusicBox == 8)
				{
					newMusic = 10;
				}
				if (SceneMetrics.ActiveMusicBox == 11)
				{
					newMusic = 11;
				}
				if (SceneMetrics.ActiveMusicBox == 10)
				{
					newMusic = 12;
				}
				if (SceneMetrics.ActiveMusicBox == 12)
				{
					newMusic = 13;
				}
				if (SceneMetrics.ActiveMusicBox == 13)
				{
					newMusic = 14;
				}
				if (SceneMetrics.ActiveMusicBox == 14)
				{
					newMusic = 15;
				}
				if (SceneMetrics.ActiveMusicBox == 15)
				{
					newMusic = 16;
				}
				if (SceneMetrics.ActiveMusicBox == 16)
				{
					newMusic = 17;
				}
				if (SceneMetrics.ActiveMusicBox == 17)
				{
					newMusic = 18;
				}
				if (SceneMetrics.ActiveMusicBox == 18)
				{
					newMusic = 19;
				}
				if (SceneMetrics.ActiveMusicBox == 19)
				{
					newMusic = 20;
				}
				if (SceneMetrics.ActiveMusicBox == 20)
				{
					newMusic = 21;
				}
				if (SceneMetrics.ActiveMusicBox == 21)
				{
					newMusic = 22;
				}
				if (SceneMetrics.ActiveMusicBox == 22)
				{
					newMusic = 23;
				}
				if (SceneMetrics.ActiveMusicBox == 23)
				{
					newMusic = 24;
				}
				if (SceneMetrics.ActiveMusicBox == 24)
				{
					newMusic = 25;
				}
				if (SceneMetrics.ActiveMusicBox == 25)
				{
					newMusic = 26;
				}
				if (SceneMetrics.ActiveMusicBox == 26)
				{
					newMusic = 27;
				}
				if (SceneMetrics.ActiveMusicBox == 27)
				{
					newMusic = 29;
				}
				if (SceneMetrics.ActiveMusicBox == 28)
				{
					newMusic = 30;
				}
				if (SceneMetrics.ActiveMusicBox == 29)
				{
					newMusic = 31;
				}
				if (SceneMetrics.ActiveMusicBox == 30)
				{
					newMusic = 32;
				}
				if (SceneMetrics.ActiveMusicBox == 31)
				{
					newMusic = 33;
				}
				if (SceneMetrics.ActiveMusicBox == 32)
				{
					newMusic = 38;
				}
				if (SceneMetrics.ActiveMusicBox == 33)
				{
					newMusic = 37;
				}
				if (SceneMetrics.ActiveMusicBox == 34)
				{
					newMusic = 35;
				}
				if (SceneMetrics.ActiveMusicBox == 35)
				{
					newMusic = 36;
				}
				if (SceneMetrics.ActiveMusicBox == 36)
				{
					newMusic = 34;
				}
				if (SceneMetrics.ActiveMusicBox == 37)
				{
					newMusic = 39;
				}
				if (SceneMetrics.ActiveMusicBox == 38)
				{
					newMusic = 40;
				}
				if (SceneMetrics.ActiveMusicBox == 39)
				{
					newMusic = 41;
				}
				if (SceneMetrics.ActiveMusicBox == 40)
				{
					newMusic = 44;
				}
				if (SceneMetrics.ActiveMusicBox == 41)
				{
					newMusic = 48;
				}
				if (SceneMetrics.ActiveMusicBox == 42)
				{
					newMusic = 42;
				}
				if (SceneMetrics.ActiveMusicBox == 43)
				{
					newMusic = 43;
				}
				if (SceneMetrics.ActiveMusicBox == 44)
				{
					newMusic = 46;
				}
				if (SceneMetrics.ActiveMusicBox == 45)
				{
					newMusic = 47;
				}
				if (SceneMetrics.ActiveMusicBox == 46)
				{
					newMusic = 49;
				}
				if (SceneMetrics.ActiveMusicBox == 47)
				{
					newMusic = 51;
				}
				if (SceneMetrics.ActiveMusicBox == 48)
				{
					newMusic = 52;
				}
				if (SceneMetrics.ActiveMusicBox == 49)
				{
					newMusic = 53;
				}
				if (SceneMetrics.ActiveMusicBox == 50)
				{
					newMusic = 54;
				}
				if (SceneMetrics.ActiveMusicBox == 51)
				{
					newMusic = 55;
				}
				if (SceneMetrics.ActiveMusicBox == 52)
				{
					newMusic = 56;
				}
				if (SceneMetrics.ActiveMusicBox == 53)
				{
					newMusic = 57;
				}
				if (SceneMetrics.ActiveMusicBox == 54)
				{
					newMusic = 58;
				}
				if (SceneMetrics.ActiveMusicBox == 55)
				{
					newMusic = 59;
				}
				if (SceneMetrics.ActiveMusicBox == 56)
				{
					newMusic = 60;
				}
				if (SceneMetrics.ActiveMusicBox == 57)
				{
					newMusic = 61;
				}
				if (SceneMetrics.ActiveMusicBox == 58)
				{
					newMusic = 62;
				}
				if (SceneMetrics.ActiveMusicBox == 59)
				{
					newMusic = 63;
				}
				if (SceneMetrics.ActiveMusicBox == 60)
				{
					newMusic = 64;
				}
				if (SceneMetrics.ActiveMusicBox == 61)
				{
					newMusic = 65;
				}
				if (SceneMetrics.ActiveMusicBox == 62)
				{
					newMusic = 66;
				}
				if (SceneMetrics.ActiveMusicBox == 63)
				{
					newMusic = 67;
				}
				if (SceneMetrics.ActiveMusicBox == 64)
				{
					newMusic = 68;
				}
				if (SceneMetrics.ActiveMusicBox == 65)
				{
					newMusic = 69;
				}
				if (SceneMetrics.ActiveMusicBox == 66)
				{
					newMusic = 70;
				}
				if (SceneMetrics.ActiveMusicBox == 67)
				{
					newMusic = 71;
				}
				if (SceneMetrics.ActiveMusicBox == 68)
				{
					newMusic = 72;
				}
				if (SceneMetrics.ActiveMusicBox == 69)
				{
					newMusic = 73;
				}
				if (SceneMetrics.ActiveMusicBox == 70)
				{
					newMusic = 74;
				}
				if (SceneMetrics.ActiveMusicBox == 71)
				{
					newMusic = 75;
				}
				if (SceneMetrics.ActiveMusicBox == 72)
				{
					newMusic = 76;
				}
				if (SceneMetrics.ActiveMusicBox == 73)
				{
					newMusic = 77;
				}
				if (SceneMetrics.ActiveMusicBox == 74)
				{
					newMusic = 78;
				}
				if (SceneMetrics.ActiveMusicBox == 75)
				{
					newMusic = 79;
				}
				if (SceneMetrics.ActiveMusicBox == 76)
				{
					newMusic = 80;
				}
				if (SceneMetrics.ActiveMusicBox == 77)
				{
					newMusic = 81;
				}
				if (SceneMetrics.ActiveMusicBox == 78)
				{
					newMusic = 82;
				}
				if (SceneMetrics.ActiveMusicBox == 79)
				{
					newMusic = 83;
				}
				if (SceneMetrics.ActiveMusicBox == 80)
				{
					newMusic = 84;
				}
				if (SceneMetrics.ActiveMusicBox == 81)
				{
					newMusic = 85;
				}
				if (SceneMetrics.ActiveMusicBox == 82)
				{
					newMusic = 86;
				}
				if (SceneMetrics.ActiveMusicBox == 83)
				{
					newMusic = 87;
				}
				if (SceneMetrics.ActiveMusicBox == 84)
				{
					newMusic = 88;
				}
				if (SceneMetrics.ActiveMusicBox == 85)
				{
					newMusic = 89;
				}
				if (SceneMetrics.ActiveMusicBox == 86)
				{
					newMusic = 90;
				}
				if (SceneMetrics.ActiveMusicBox == 87)
				{
					newMusic = 91;
				}
				if (SceneMetrics.ActiveMusicBox >= maxMusic)
				{
					newMusic = SceneMetrics.ActiveMusicBox;
				}
			}
			if (gameMenu || musicVolume == 0f)
			{
				musicBox2 = -1;
				SceneMetrics.ActiveMusicBox = -1;
			}
			if (musicVolume == 0f)
			{
				newMusic = 0;
			}
			audioSystem.Update();
			audioSystem.UpdateMisc();
			curMusic = newMusic;
			float num = 1f;
			if (NPC.MoonLordCountdown > 0)
			{
				num = (float)NPC.MoonLordCountdown / (float)NPC.MaxMoonLordCountdown;
				num *= num;
				if ((float)NPC.MoonLordCountdown > (float)NPC.MaxMoonLordCountdown * 0.2f)
				{
					num = MathHelper.Lerp(0f, 1f, num);
				}
				else
				{
					num = 0f;
					curMusic = 0;
				}
				if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < musicFade.Length)
				{
					musicFade[curMusic] = 0f;
				}
			}
			bool isMainTrackAudible = musicFade[curMusic] > 0.25f;
			for (int i = 1; i < musicFade.Length; i++)
			{
				float num2 = musicFade[i] * musicVolume * num;
				if (i >= 62 && i <= 88)
				{
					num2 *= 0.9f;
				}
				else if (i == 52)
				{
					num2 *= 1.15f;
					if (num2 > 1f)
					{
						num2 = 1f;
					}
				}
				float num3 = shimmerAlpha;
				switch (i)
				{
				case 28:
				{
					float num7 = 0.5f;
					float num8 = cloudAlpha / 9f * 10f * num7 + (1f - num7);
					if (num3 > 0f)
					{
						num8 *= 1f - num3;
					}
					if (num8 > 1f)
					{
						num8 = 1f;
					}
					if (gameMenu)
					{
						num8 = 0f;
					}
					num8 *= (float)Math.Pow(atmo, 4.0);
					if (remixWorld)
					{
						if (cloudAlpha > 0f && (double)(player[myPlayer].position.Y / 16f) > rockLayer && player[myPlayer].position.Y / 16f < (float)(maxTilesY - 350) && !player[myPlayer].ZoneSnow && !player[myPlayer].ZoneDungeon)
						{
							float trackVolume5 = musicFade[i];
							audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume5, ambientVolume * num8);
							musicFade[i] = trackVolume5;
						}
						else
						{
							float trackVolume6 = musicFade[i];
							audioSystem.UpdateAmbientCueTowardStopping(i, 0.005f, ref trackVolume6, ambientVolume * num8);
							musicFade[i] = trackVolume6;
						}
					}
					else if (cloudAlpha > 0f && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2) && !player[myPlayer].ZoneSnow)
					{
						float trackVolume7 = musicFade[i];
						audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume7, ambientVolume * num8);
						musicFade[i] = trackVolume7;
					}
					else
					{
						float trackVolume8 = musicFade[i];
						audioSystem.UpdateAmbientCueTowardStopping(i, 0.005f, ref trackVolume8, ambientVolume * num8);
						musicFade[i] = trackVolume8;
					}
					break;
				}
				case 45:
				{
					float num4 = 0.7f;
					float num5 = Math.Abs(windSpeedCurrent) * num4 + (1f - num4);
					if (num3 > 0f)
					{
						num5 *= 1f - num3;
					}
					if (num5 > 1f)
					{
						num5 = 1f;
					}
					num5 *= 0.9f;
					float num6 = 20f;
					num5 *= (float)Math.Pow(atmo, 4.0);
					if (remixWorld)
					{
						if (!gameMenu && Math.Abs(windSpeedCurrent) >= num6 / 50f && (double)(player[myPlayer].position.Y / 16f) > rockLayer && player[myPlayer].position.Y / 16f < (float)(maxTilesY - 350) && !player[myPlayer].ZoneDungeon)
						{
							float trackVolume = musicFade[i];
							audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume, ambientVolume * num5);
							musicFade[i] = trackVolume;
						}
						else
						{
							float trackVolume2 = musicFade[i];
							audioSystem.UpdateAmbientCueTowardStopping(i, 0.005f, ref trackVolume2, ambientVolume * num5);
							musicFade[i] = trackVolume2;
						}
					}
					else if (!gameMenu && Math.Abs(windSpeedCurrent) >= num6 / 50f && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
					{
						float trackVolume3 = musicFade[i];
						audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume3, ambientVolume * num5);
						musicFade[i] = trackVolume3;
					}
					else
					{
						float trackVolume4 = musicFade[i];
						audioSystem.UpdateAmbientCueTowardStopping(i, 0.005f, ref trackVolume4, ambientVolume * num5);
						musicFade[i] = trackVolume4;
					}
					break;
				}
				default:
				{
					float tempFade = musicFade[i];
					if (i == curMusic)
					{
						audioSystem.UpdateCommonTrack(flag, i, num2, ref tempFade);
					}
					else
					{
						audioSystem.UpdateCommonTrackTowardStopping(i, num2, ref tempFade, isMainTrackAudible);
					}
					musicFade[i] = tempFade;
					break;
				}
				}
			}
			audioSystem.UpdateAudioEngine();
			if (musicError > 0)
			{
				musicError--;
			}
		}
		catch
		{
			musicError++;
			if (musicError >= 100)
			{
				musicError = 0;
				musicVolume = 0f;
			}
		}
	}

	private void UpdateAudio_DecideOnTOWMusic()
	{
		//IL_046c: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0906: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ef: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		bool flag10 = false;
		bool flag11 = false;
		bool flag12 = false;
		bool flag13 = false;
		bool flag14 = false;
		bool flag15 = false;
		bool flag16 = false;
		bool flag17 = false;
		bool flag2 = false;
		bool flag3 = false;
		bool flag4 = false;
		bool flag5 = false;
		bool flag6 = false;
		bool flag7 = false;
		bool flag8 = false;
		bool flag9 = false;
		int modMusic = -1;
		SceneEffectPriority modPriority = SceneEffectPriority.None;
		if (!gameMenu)
		{
			Rectangle rectangle = default(Rectangle);
			((Rectangle)(ref rectangle))._002Ector((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
			int num = 5000;
			Rectangle value = default(Rectangle);
			for (int i = 0; i < 200; i++)
			{
				if (!npc[i].active)
				{
					continue;
				}
				num = 5000;
				int num2 = 0;
				switch (npc[i].type)
				{
				case 13:
				case 14:
				case 15:
					num2 = 1;
					break;
				case 26:
				case 27:
				case 28:
				case 29:
				case 111:
				case 471:
					num2 = 11;
					break;
				case 113:
				case 114:
					num2 = 3;
					break;
				case 125:
				case 126:
					num2 = 2;
					break;
				case 127:
				case 134:
					num2 = 2;
					break;
				case 143:
				case 144:
				case 145:
					num2 = 11;
					break;
				case 266:
					num2 = 1;
					break;
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 491:
					num2 = 8;
					break;
				case 245:
					num2 = 2;
					break;
				case 222:
					num2 = 1;
					break;
				case 262:
				case 263:
				case 264:
					num2 = 6;
					break;
				case 381:
				case 382:
				case 383:
				case 385:
				case 386:
				case 388:
				case 389:
				case 390:
				case 391:
				case 395:
				case 520:
					num2 = 9;
					break;
				case 398:
					num2 = 7;
					break;
				case 422:
				case 493:
				case 507:
				case 517:
					num2 = 10;
					break;
				case 439:
					num2 = 2;
					break;
				case 438:
					if (npc[i].ai[1] == 1f)
					{
						num = 1600;
						num2 = 2;
					}
					break;
				case 657:
					num2 = 13;
					break;
				case 636:
					num2 = 14;
					break;
				case 370:
					num2 = 15;
					break;
				case 668:
					num2 = 16;
					break;
				}
				if (npc[i].type < NPCID.Sets.BelongsToInvasionOldOnesArmy.Length && NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[i].type])
				{
					num2 = 12;
				}
				if (remixWorld && getGoodWorld && (npc[i].type == 127 || npc[i].type == 134 || npc[i].type == 125 || npc[i].type == 126))
				{
					num2 = 17;
				}
				if (num2 == 0 && npc[i].boss)
				{
					num2 = 1;
				}
				if (num2 == 0 && (npc[i].ModNPC == null || npc[i].ModNPC.Music < 0))
				{
					continue;
				}
				((Rectangle)(ref value))._002Ector((int)(npc[i].position.X + (float)(npc[i].width / 2)) - num, (int)(npc[i].position.Y + (float)(npc[i].height / 2)) - num, num * 2, num * 2);
				if (((Rectangle)(ref rectangle)).Intersects(value))
				{
					if (npc[i].ModNPC != null && npc[i].ModNPC.Music >= 0 && (modMusic < 0 || npc[i].ModNPC.SceneEffectPriority > modPriority))
					{
						modMusic = npc[i].ModNPC.Music;
						modPriority = npc[i].ModNPC.SceneEffectPriority;
					}
					switch (num2)
					{
					case 1:
						flag = true;
						break;
					case 2:
						flag11 = true;
						break;
					case 3:
						flag12 = true;
						break;
					case 4:
						flag13 = true;
						break;
					case 5:
						flag14 = true;
						break;
					case 6:
						flag15 = true;
						break;
					case 7:
						flag16 = true;
						break;
					case 8:
						flag17 = true;
						break;
					case 9:
						flag2 = true;
						break;
					case 10:
						flag3 = true;
						break;
					case 11:
						flag4 = true;
						break;
					case 12:
						flag5 = true;
						break;
					case 13:
						flag6 = true;
						break;
					case 14:
						flag7 = true;
						break;
					case 15:
						flag8 = true;
						break;
					case 16:
						flag10 = true;
						break;
					case 17:
						flag9 = true;
						break;
					}
				}
			}
			LoaderManager.Get<SceneEffectLoader>().UpdateMusic(ref modMusic, ref modPriority);
		}
		_ = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
		if (musicVolume == 0f)
		{
			newMusic = 0;
			return;
		}
		float num3 = (float)maxTilesX / 4200f;
		num3 *= num3;
		float num4 = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num3)) / (worldSurface / 5.0));
		if (CreditsRollEvent.IsEventOngoing)
		{
			newMusic = 89;
		}
		else if (modPriority >= SceneEffectPriority.BossHigh)
		{
			newMusic = modMusic;
		}
		else if (player[myPlayer].happyFunTorchTime)
		{
			newMusic = 87;
		}
		else if (flag16)
		{
			newMusic = 84;
		}
		else if (modPriority >= SceneEffectPriority.BossMedium)
		{
			newMusic = modMusic;
		}
		else if (flag9)
		{
			newMusic = 81;
		}
		else if (flag2)
		{
			newMusic = 82;
		}
		else if (flag3)
		{
			newMusic = 83;
		}
		else if (flag15)
		{
			newMusic = 85;
		}
		else if (modPriority >= SceneEffectPriority.BossLow)
		{
			newMusic = modMusic;
		}
		else if (flag7)
		{
			newMusic = 80;
		}
		else if (flag8)
		{
			newMusic = 80;
		}
		else if (flag11)
		{
			newMusic = 80;
		}
		else if (flag)
		{
			newMusic = 81;
		}
		else if (flag12)
		{
			newMusic = 87;
		}
		else if (flag13)
		{
			newMusic = 81;
		}
		else if (flag14)
		{
			newMusic = 81;
		}
		else if (flag6)
		{
			newMusic = 80;
		}
		else if (flag10)
		{
			newMusic = 80;
		}
		else if (modPriority >= SceneEffectPriority.Event)
		{
			newMusic = modMusic;
		}
		else if (flag17)
		{
			newMusic = 82;
		}
		else if (flag4)
		{
			newMusic = 82;
		}
		else if (flag5)
		{
			newMusic = 82;
		}
		else if (modPriority >= SceneEffectPriority.Environment)
		{
			newMusic = modMusic;
		}
		else if (eclipse && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
		{
			newMusic = 79;
		}
		else if (eclipse && remixWorld)
		{
			newMusic = 79;
		}
		else if (remixWorld && bloodMoon && !player[myPlayer].ZoneCrimson && !player[myPlayer].ZoneCorrupt && (double)player[myPlayer].position.Y > rockLayer * 16.0 && player[myPlayer].position.Y <= (float)(UnderworldLayer * 16))
		{
			newMusic = 79;
		}
		else if (remixWorld && bloodMoon && player[myPlayer].position.Y > (float)(UnderworldLayer * 16) && (double)(player[myPlayer].Center.X / 16f) > (double)maxTilesX * 0.37 + 50.0 && (double)(player[myPlayer].Center.X / 16f) < (double)maxTilesX * 0.63)
		{
			newMusic = 79;
		}
		else if (player[myPlayer].ZoneShimmer)
		{
			newMusic = 72;
		}
		else if (player[myPlayer].ZoneSandstorm)
		{
			newMusic = 66;
		}
		else if (player[myPlayer].position.Y > (float)(UnderworldLayer * 16))
		{
			newMusic = 71;
		}
		else if (num4 < 1f)
		{
			newMusic = 70;
		}
		else if (modPriority >= SceneEffectPriority.BiomeHigh)
		{
			newMusic = modMusic;
		}
		else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
		{
			newMusic = 69;
		}
		else if (player[myPlayer].ZoneDungeon)
		{
			newMusic = 69;
		}
		else if ((bgStyle == 9 && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2)) || undergroundBackground == 2)
		{
			newMusic = 68;
		}
		else if (player[myPlayer].ZoneCorrupt)
		{
			if (player[myPlayer].ZoneCrimson && SceneMetrics.BloodTileCount > SceneMetrics.EvilTileCount)
			{
				if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 76;
				}
				else
				{
					newMusic = 75;
				}
			}
			else if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 74;
			}
			else
			{
				newMusic = 73;
			}
		}
		else if (player[myPlayer].ZoneCrimson)
		{
			if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 76;
			}
			else
			{
				newMusic = 75;
			}
		}
		else if (modPriority >= SceneEffectPriority.BiomeMedium)
		{
			newMusic = modMusic;
		}
		else if (player[myPlayer].ZoneMeteor)
		{
			newMusic = 79;
		}
		else if (player[myPlayer].ZoneGraveyard)
		{
			newMusic = 79;
		}
		else if (player[myPlayer].ZoneJungle)
		{
			if (remixWorld && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 70;
			}
			else
			{
				newMusic = 86;
			}
		}
		else if (player[myPlayer].ZoneSnow)
		{
			if (remixWorld)
			{
				if ((double)player[myPlayer].position.Y < rockLayer * 16.0 + (double)(screenHeight / 2))
				{
					if ((double)player[myPlayer].position.Y <= worldSurface * 16.0 + (double)(screenHeight / 2))
					{
						newMusic = 70;
					}
					else
					{
						newMusic = 77;
					}
				}
				else
				{
					newMusic = 72;
				}
			}
			else if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 77;
			}
			else
			{
				newMusic = 72;
			}
		}
		else if (modPriority >= SceneEffectPriority.BiomeLow)
		{
			newMusic = modMusic;
		}
		else if ((double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2) && !WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
		{
			if (remixWorld && (double)player[myPlayer].position.Y >= rockLayer * 16.0 + (double)(screenHeight / 2))
			{
				if (player[myPlayer].ZoneUndergroundDesert)
				{
					newMusic = 66;
				}
				else if (cloudAlpha > 0f)
				{
					newMusic = 62;
				}
				else if (player[myPlayer].ZoneHallow)
				{
					newMusic = 88;
				}
				else if (player[myPlayer].ZoneDesert)
				{
					newMusic = 66;
				}
				else
				{
					newMusic = 62;
				}
			}
			else if (player[myPlayer].ZoneHallow)
			{
				newMusic = 78;
			}
			else if (player[myPlayer].ZoneUndergroundDesert)
			{
				newMusic = 66;
			}
			else
			{
				newMusic = 65;
			}
		}
		else if (dayTime && player[myPlayer].ZoneHallow)
		{
			if (cloudAlpha > 0f && !gameMenu)
			{
				newMusic = 62;
			}
			else
			{
				newMusic = 88;
			}
		}
		else if (_shouldUseStormMusic)
		{
			if (bloodMoon)
			{
				newMusic = 79;
			}
			else
			{
				newMusic = 62;
			}
		}
		else if (WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
		{
			if (bloodMoon)
			{
				newMusic = 79;
			}
			else
			{
				newMusic = 67;
			}
		}
		else if (player[myPlayer].ZoneDesert)
		{
			newMusic = 66;
		}
		else if (remixWorld)
		{
			newMusic = 70;
		}
		else if (dayTime)
		{
			if (cloudAlpha > 0f && !gameMenu)
			{
				newMusic = 62;
			}
			else
			{
				newMusic = 63;
			}
		}
		else if (!dayTime)
		{
			if (bloodMoon)
			{
				newMusic = 79;
			}
			else if (cloudAlpha > 0f && !gameMenu)
			{
				newMusic = 64;
			}
			else
			{
				newMusic = 64;
			}
		}
		if (((double)(screenPosition.Y / 16f) < worldSurface + 10.0 || remixWorld) && pumpkinMoon)
		{
			newMusic = 82;
		}
		if (((double)(screenPosition.Y / 16f) < worldSurface + 10.0 || remixWorld) && snowMoon)
		{
			newMusic = 82;
		}
	}

	private void UpdateAudio_DecideOnNewMusic()
	{
		//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_152d: Unknown result type (might be due to invalid IL or missing references)
		//IL_154b: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		bool flag12 = false;
		bool flag13 = false;
		bool flag14 = false;
		bool flag15 = false;
		bool flag16 = false;
		bool flag17 = false;
		bool flag18 = false;
		bool flag19 = false;
		bool flag2 = false;
		bool flag3 = false;
		bool flag4 = false;
		bool flag5 = false;
		bool flag6 = false;
		bool flag7 = false;
		bool flag8 = false;
		bool flag9 = false;
		bool flag10 = LocalPlayer.townNPCs > 2f;
		bool flag11 = slimeRain;
		if (SceneMetrics.ShadowCandleCount > 0 || LocalPlayer.inventory[LocalPlayer.selectedItem].type == 5322)
		{
			flag10 = false;
		}
		float num = 0f;
		for (int i = 0; i < maxMusic; i++)
		{
			if (musicFade[i] > num)
			{
				num = musicFade[i];
				if (num == 1f)
				{
					lastMusicPlayed = i;
				}
			}
		}
		if (lastMusicPlayed == 50)
		{
			musicNoCrossFade[51] = true;
		}
		int modMusic = -1;
		SceneEffectPriority modPriority = SceneEffectPriority.None;
		if (!gameMenu)
		{
			Rectangle rectangle = default(Rectangle);
			((Rectangle)(ref rectangle))._002Ector((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
			int num2 = 5000;
			Rectangle value = default(Rectangle);
			for (int j = 0; j < 200; j++)
			{
				if (!npc[j].active)
				{
					continue;
				}
				num2 = 5000;
				int num3 = 0;
				int type = npc[j].type;
				if ((uint)(type - 13) <= 2u || (uint)(type - 127) <= 4u)
				{
					num3 = 1;
				}
				else if (!NPCID.Sets.BelongsToInvasionGoblinArmy[npc[j].type] || NPCID.Sets.InvasionSlotCount[npc[j].type] <= 0)
				{
					if ((uint)(type - 113) > 1u && (uint)(type - 125) > 1u)
					{
						if ((uint)(type - 134) <= 2u || (NPCID.Sets.BelongsToInvasionFrostLegion[npc[j].type] && NPCID.Sets.InvasionSlotCount[npc[j].type] > 0) || type == 266)
						{
							num3 = 3;
						}
						else if (!NPCID.Sets.BelongsToInvasionPirate[npc[j].type] || NPCID.Sets.InvasionSlotCount[npc[j].type] <= 0)
						{
							switch (type)
							{
							case 245:
								num3 = 4;
								break;
							case 222:
								num3 = 5;
								break;
							case 262:
							case 263:
							case 264:
								num3 = 6;
								break;
							default:
								if (!NPCID.Sets.BelongsToInvasionMartianMadness[npc[j].type] || NPCID.Sets.InvasionSlotCount[npc[j].type] <= 0)
								{
									switch (type)
									{
									case 398:
										num3 = 7;
										break;
									case 422:
									case 493:
									case 507:
									case 517:
										num3 = 10;
										break;
									case 439:
										num3 = 4;
										break;
									case 438:
										if (npc[j].ai[1] == 1f)
										{
											num2 = 1600;
											num3 = 4;
										}
										break;
									case 657:
										num3 = 13;
										break;
									case 636:
										num3 = 14;
										break;
									case 370:
										num3 = 15;
										break;
									case 668:
										num3 = 16;
										break;
									}
								}
								else
								{
									num3 = 9;
								}
								break;
							}
						}
						else
						{
							num3 = 8;
						}
					}
					else
					{
						num3 = 2;
					}
				}
				else
				{
					num3 = 11;
				}
				if (NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[j].type])
				{
					num3 = 12;
				}
				if (NPCID.Sets.NoInvasionMusic[npc[j].type] && NPC.GetNPCInvasionGroup(npc[j].type) != 0)
				{
					num3 = 0;
				}
				if (num3 == 0 && npc[j].boss)
				{
					num3 = 1;
				}
				if (remixWorld && getGoodWorld && (npc[j].type == 127 || npc[j].type == 134 || npc[j].type == 125 || npc[j].type == 126))
				{
					num3 = 17;
				}
				if (num3 == 0)
				{
					continue;
				}
				((Rectangle)(ref value))._002Ector((int)(npc[j].position.X + (float)(npc[j].width / 2)) - num2, (int)(npc[j].position.Y + (float)(npc[j].height / 2)) - num2, num2 * 2, num2 * 2);
				if (((Rectangle)(ref rectangle)).Intersects(value))
				{
					if (npc[j].ModNPC != null && npc[j].ModNPC.Music >= 0 && (modMusic < 0 || npc[j].ModNPC.SceneEffectPriority > modPriority))
					{
						modMusic = npc[j].ModNPC.Music;
						modPriority = npc[j].ModNPC.SceneEffectPriority;
					}
					switch (num3)
					{
					case 1:
						flag = true;
						break;
					case 2:
						flag13 = true;
						break;
					case 3:
						flag14 = true;
						break;
					case 4:
						flag15 = true;
						break;
					case 5:
						flag16 = true;
						break;
					case 6:
						flag17 = true;
						break;
					case 7:
						flag18 = true;
						break;
					case 8:
						flag19 = true;
						break;
					case 9:
						flag2 = true;
						break;
					case 10:
						flag3 = true;
						break;
					case 11:
						flag4 = true;
						break;
					case 12:
						flag5 = true;
						break;
					case 13:
						flag6 = true;
						break;
					case 14:
						flag7 = true;
						break;
					case 15:
						flag8 = true;
						break;
					case 16:
						flag12 = true;
						break;
					case 17:
						flag9 = true;
						break;
					}
				}
			}
			LoaderManager.Get<SceneEffectLoader>().UpdateMusic(ref modMusic, ref modPriority);
		}
		_ = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
		if (musicVolume == 0f)
		{
			newMusic = 0;
			return;
		}
		if (gameMenu)
		{
			if (netMode != 2)
			{
				if (WorldGen.drunkWorldGen)
				{
					if (WorldGen.remixWorldGen)
					{
						newMusic = 70;
					}
					else
					{
						newMusic = 60;
					}
				}
				else if (WorldGen.remixWorldGen)
				{
					newMusic = 8;
				}
				else if (menuMode == 3000)
				{
					newMusic = 89;
				}
				else if (WorldGen.tenthAnniversaryWorldGen)
				{
					newMusic = 11;
				}
				else
				{
					newMusic = MenuLoader.CurrentMenu.Music;
				}
				if (_isAsyncLoadComplete && newMusic == 50 && !audioSystem.IsTrackPlaying(50))
				{
					newMusic = 51;
					if (musicNoCrossFade[51])
					{
						musicFade[51] = 1f;
					}
				}
			}
			else
			{
				newMusic = 0;
			}
			return;
		}
		float num4 = (float)maxTilesX / 4200f;
		num4 *= num4;
		float num5 = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num4)) / (worldSurface / 5.0));
		if (CreditsRollEvent.IsEventOngoing)
		{
			newMusic = 89;
		}
		else if (modPriority >= SceneEffectPriority.BossHigh)
		{
			newMusic = modMusic;
		}
		else if (player[myPlayer].happyFunTorchTime)
		{
			newMusic = 13;
		}
		else if (flag18)
		{
			newMusic = 38;
		}
		else if (modPriority >= SceneEffectPriority.BossMedium)
		{
			newMusic = modMusic;
		}
		else if (flag9)
		{
			newMusic = 81;
		}
		else if (flag2)
		{
			newMusic = 37;
		}
		else if (flag3)
		{
			newMusic = 34;
		}
		else if (flag17)
		{
			newMusic = 24;
		}
		else if (modPriority >= SceneEffectPriority.BossLow)
		{
			newMusic = modMusic;
		}
		else if (flag7)
		{
			newMusic = 57;
		}
		else if (flag8)
		{
			newMusic = 58;
		}
		else if (flag13)
		{
			newMusic = 12;
		}
		else if (flag)
		{
			newMusic = 5;
		}
		else if (flag14)
		{
			newMusic = 13;
		}
		else if (flag15)
		{
			newMusic = 17;
		}
		else if (flag16)
		{
			newMusic = 25;
		}
		else if (flag6)
		{
			newMusic = 56;
		}
		else if (flag12)
		{
			newMusic = 90;
		}
		else if (modPriority >= SceneEffectPriority.Event)
		{
			newMusic = modMusic;
		}
		else if (flag19)
		{
			newMusic = 35;
		}
		else if (flag4)
		{
			newMusic = 39;
		}
		else if (flag5)
		{
			newMusic = 41;
		}
		else if (modPriority >= SceneEffectPriority.Environment)
		{
			newMusic = modMusic;
		}
		else if (eclipse && !remixWorld && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
		{
			newMusic = 27;
		}
		else if (eclipse && remixWorld && (double)player[myPlayer].position.Y > rockLayer * 16.0)
		{
			newMusic = 27;
		}
		else if (flag11 && !player[myPlayer].ZoneGraveyard && (!bloodMoon || dayTime) && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
		{
			newMusic = 48;
		}
		else if (remixWorld && bloodMoon && !player[myPlayer].ZoneCrimson && !player[myPlayer].ZoneCorrupt && (double)player[myPlayer].position.Y > rockLayer * 16.0 && player[myPlayer].position.Y <= (float)(UnderworldLayer * 16))
		{
			newMusic = 2;
		}
		else if (remixWorld && bloodMoon && player[myPlayer].position.Y > (float)(UnderworldLayer * 16) && (double)(player[myPlayer].Center.X / 16f) > (double)maxTilesX * 0.37 + 50.0 && (double)(player[myPlayer].Center.X / 16f) < (double)maxTilesX * 0.63)
		{
			newMusic = 2;
		}
		else if (player[myPlayer].ZoneShimmer)
		{
			newMusic = 91;
		}
		else if (flag10 && dayTime && ((cloudAlpha == 0f && !_shouldUseWindyDayMusic) || (double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2)) && !player[myPlayer].ZoneGraveyard)
		{
			newMusic = 46;
		}
		else if (flag10 && !dayTime && ((!bloodMoon && cloudAlpha == 0f) || (double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2)) && !player[myPlayer].ZoneGraveyard)
		{
			newMusic = 47;
		}
		else if (player[myPlayer].ZoneSandstorm)
		{
			newMusic = 40;
		}
		else if (player[myPlayer].position.Y > (float)(UnderworldLayer * 16))
		{
			newMusic = 36;
		}
		else if (num5 < 1f)
		{
			newMusic = (dayTime ? 42 : 15);
		}
		else if (modPriority >= SceneEffectPriority.BiomeHigh)
		{
			newMusic = modMusic;
		}
		else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
		{
			newMusic = 26;
		}
		else if (player[myPlayer].ZoneDungeon)
		{
			newMusic = 23;
		}
		else if ((bgStyle == 9 && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2)) || undergroundBackground == 2)
		{
			newMusic = 29;
		}
		else if (player[myPlayer].ZoneCorrupt)
		{
			if (player[myPlayer].ZoneCrimson && SceneMetrics.BloodTileCount > SceneMetrics.EvilTileCount)
			{
				if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 33;
				}
				else
				{
					newMusic = 16;
				}
			}
			else if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 10;
			}
			else
			{
				newMusic = 8;
			}
		}
		else if (player[myPlayer].ZoneCrimson)
		{
			if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 33;
			}
			else
			{
				newMusic = 16;
			}
		}
		else if (modPriority >= SceneEffectPriority.BiomeMedium)
		{
			newMusic = modMusic;
		}
		else if (player[myPlayer].ZoneMeteor)
		{
			newMusic = 2;
		}
		else if (player[myPlayer].ZoneGraveyard)
		{
			newMusic = 53;
		}
		else if (player[myPlayer].ZoneJungle)
		{
			if (remixWorld)
			{
				if ((double)player[myPlayer].position.Y > rockLayer * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 7;
				}
				else if (newMusic == 7 && (double)player[myPlayer].position.Y > (rockLayer - 50.0) * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 7;
				}
				else if ((double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = (dayTime ? 42 : 15);
				}
				else
				{
					newMusic = 54;
				}
			}
			else if ((double)player[myPlayer].position.Y > rockLayer * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 54;
			}
			else if (newMusic == 54 && (double)player[myPlayer].position.Y > (rockLayer - 50.0) * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 54;
			}
			else if (_shouldUseStormMusic && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 52;
			}
			else if (dayTime)
			{
				newMusic = 7;
			}
			else
			{
				newMusic = 55;
			}
		}
		else if (player[myPlayer].ZoneSnow)
		{
			if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				if (remixWorld && (double)player[myPlayer].position.Y > rockLayer * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 14;
				}
				else
				{
					newMusic = 20;
				}
			}
			else if (remixWorld)
			{
				newMusic = (dayTime ? 42 : 15);
			}
			else
			{
				newMusic = 14;
			}
		}
		else if (modPriority >= SceneEffectPriority.BiomeLow)
		{
			newMusic = modMusic;
		}
		else if ((double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2) && (remixWorld || !WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16)))
		{
			if (player[myPlayer].ZoneHallow)
			{
				if (remixWorld && (double)player[myPlayer].position.Y >= rockLayer * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 9;
				}
				else
				{
					newMusic = 11;
				}
			}
			else if (player[myPlayer].ZoneUndergroundDesert)
			{
				if ((double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 61;
				}
				else
				{
					newMusic = 21;
				}
			}
			else
			{
				if (ugMusic == 0)
				{
					ugMusic = 4;
				}
				if (!audioSystem.IsTrackPlaying(4) && !audioSystem.IsTrackPlaying(31))
				{
					if (musicFade[4] == 1f)
					{
						musicFade[31] = 1f;
					}
					if (musicFade[31] == 1f)
					{
						musicFade[4] = 1f;
					}
					switch (rand.Next(2))
					{
					case 0:
						ugMusic = 4;
						musicFade[31] = 0f;
						break;
					case 1:
						ugMusic = 31;
						musicFade[4] = 0f;
						break;
					}
				}
				newMusic = ugMusic;
				if (remixWorld && (double)(player[myPlayer].position.Y / 16f) > rockLayer && player[myPlayer].position.Y / 16f < (float)(maxTilesY - 350))
				{
					if (cloudAlpha > 0f)
					{
						newMusic = 19;
					}
					else if (player[myPlayer].ZoneDesert)
					{
						newMusic = 21;
					}
					else if (_shouldUseWindyDayMusic)
					{
						newMusic = 44;
					}
				}
			}
		}
		else if (dayTime && player[myPlayer].ZoneHallow)
		{
			if (_shouldUseStormMusic)
			{
				newMusic = 52;
			}
			else if (cloudAlpha > 0f && !gameMenu)
			{
				newMusic = 19;
			}
			else if (_shouldUseWindyDayMusic && !remixWorld)
			{
				newMusic = 44;
			}
			else
			{
				newMusic = 9;
			}
		}
		else if (_shouldUseStormMusic)
		{
			if (bloodMoon)
			{
				newMusic = 2;
			}
			else
			{
				newMusic = 52;
			}
		}
		else if (WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
		{
			if (bloodMoon)
			{
				newMusic = 2;
			}
			else if (flag10)
			{
				if (dayTime)
				{
					newMusic = 46;
				}
				else
				{
					newMusic = 47;
				}
			}
			else
			{
				newMusic = (dayTime ? 22 : 43);
			}
		}
		else if (player[myPlayer].ZoneDesert)
		{
			if ((double)player[myPlayer].position.Y >= worldSurface * 16.0)
			{
				int num6 = (int)(player[myPlayer].Center.X / 16f);
				int num7 = (int)(player[myPlayer].Center.Y / 16f);
				if (WorldGen.InWorld(num6, num7) && (WallID.Sets.Conversion.Sandstone[tile[num6, num7].wall] || WallID.Sets.Conversion.HardenedSand[tile[num6, num7].wall]))
				{
					newMusic = 61;
				}
				else
				{
					newMusic = 21;
				}
			}
			else
			{
				newMusic = 21;
			}
		}
		else if (remixWorld)
		{
			newMusic = (dayTime ? 42 : 15);
		}
		else if (dayTime)
		{
			if (cloudAlpha > 0f && !gameMenu)
			{
				if (time < 10800.0)
				{
					newMusic = 59;
				}
				else
				{
					newMusic = 19;
				}
			}
			else
			{
				if (dayMusic == 0)
				{
					dayMusic = 1;
				}
				if (!audioSystem.IsTrackPlaying(1) && !audioSystem.IsTrackPlaying(18))
				{
					if (rand.Next(2) == 0)
					{
						dayMusic = 1;
					}
					else
					{
						dayMusic = 18;
					}
				}
				newMusic = dayMusic;
				if (_shouldUseWindyDayMusic && !remixWorld)
				{
					newMusic = 44;
				}
			}
		}
		else if (!dayTime)
		{
			if (bloodMoon)
			{
				newMusic = 2;
			}
			else if (cloudAlpha > 0f && !gameMenu)
			{
				newMusic = 19;
			}
			else
			{
				newMusic = 3;
			}
		}
		if (((double)(screenPosition.Y / 16f) < worldSurface + 10.0 || remixWorld) && pumpkinMoon)
		{
			newMusic = 30;
		}
		if (((double)(screenPosition.Y / 16f) < worldSurface + 10.0 || remixWorld) && snowMoon)
		{
			newMusic = 32;
		}
	}

	private void UpdateWindyDayState()
	{
		if (cloudAlpha == 0f)
		{
			_shouldUseStormMusic = false;
			if (time < 10800.0 || time > 43200.0 || !dayTime)
			{
				_shouldUseWindyDayMusic = false;
				return;
			}
			if (Math.Abs(windSpeedTarget) < _minWind)
			{
				_shouldUseWindyDayMusic = false;
			}
			if (Math.Abs(windSpeedTarget) >= _maxWind)
			{
				_shouldUseWindyDayMusic = true;
			}
		}
		else
		{
			if (cloudAlpha < _minRain || Math.Abs(windSpeedTarget) < _minWind)
			{
				_shouldUseStormMusic = false;
			}
			else if (cloudAlpha >= _maxRain && Math.Abs(windSpeedTarget) >= _maxWind)
			{
				_shouldUseStormMusic = true;
			}
			if (remixWorld)
			{
				_shouldUseStormMusic = false;
			}
			else
			{
				_shouldUseWindyDayMusic = false;
			}
		}
	}

	public static void snowing()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_049b: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b6: Unknown result type (might be due to invalid IL or missing references)
		if (remixWorld)
		{
			return;
		}
		Vector2 scaledSize = Camera.ScaledSize;
		Vector2 scaledPosition = Camera.ScaledPosition;
		if (gamePaused || SceneMetrics.SnowTileCount <= 0 || (!((double)player[myPlayer].position.Y < worldSurface * 16.0) && (!remixWorld || !((double)player[myPlayer].position.Y > worldSurface * 16.0))))
		{
			return;
		}
		float num = (float)SceneMetrics.SnowTileCount / (float)SceneMetrics.SnowTileMax;
		num *= num;
		num *= num;
		float num2 = Camera.ScaledSize.X / (float)maxScreenW;
		int num3 = (int)(500f * num2);
		num3 = (int)((float)num3 * (1f + 2f * cloudAlpha));
		float num4 = 1f + 50f * cloudAlpha;
		bool flag = NPC.IsADeerclopsNearScreen();
		if (flag)
		{
			num /= 20f;
			num3 /= 3;
		}
		for (int i = 0; (float)i < num4; i++)
		{
			try
			{
				if (!((float)snowDust < (float)num3 * (gfxQuality / 2f + 0.5f) + (float)num3 * 0.1f))
				{
					break;
				}
				if (!(rand.NextFloat() < num))
				{
					continue;
				}
				int num5 = rand.Next((int)scaledSize.X + 1500) - 750;
				int num6 = (int)scaledPosition.Y - rand.Next(50);
				if (player[myPlayer].velocity.Y > 0f)
				{
					num6 -= (int)player[myPlayer].velocity.Y;
				}
				if (rand.Next(5) == 0)
				{
					num5 = rand.Next(500) - 500;
				}
				else if (rand.Next(5) == 0)
				{
					num5 = rand.Next(500) + (int)scaledSize.X;
				}
				if (num5 < 0 || (float)num5 > scaledSize.X)
				{
					num6 += rand.Next((int)((double)scaledSize.Y * 0.8)) + (int)((double)scaledSize.Y * 0.1);
				}
				num5 += (int)scaledPosition.X;
				int num7 = num5 / 16;
				int num8 = num6 / 16;
				if (WorldGen.InWorld(num7, num8) && tile[num7, num8] != null && !tile[num7, num8].nactive() && tile[num7, num8].wall == 0)
				{
					int num9 = Dust.NewDust(new Vector2((float)num5, (float)num6), 10, 10, 76);
					dust[num9].scale += cloudAlpha * 0.2f;
					dust[num9].velocity.Y = 3f + (float)rand.Next(30) * 0.1f;
					dust[num9].velocity.Y *= dust[num9].scale;
					if (!raining)
					{
						dust[num9].velocity.X = windSpeedCurrent + (float)rand.Next(-10, 10) * 0.1f;
						dust[num9].velocity.X += windSpeedCurrent * 15f;
					}
					else
					{
						dust[num9].velocity.X = (float)Math.Sqrt(Math.Abs(windSpeedCurrent)) * (float)Math.Sign(windSpeedCurrent) * (cloudAlpha + 0.5f) * 10f + rand.NextFloat() * 0.2f - 0.1f;
						dust[num9].velocity.Y *= 0.5f;
					}
					dust[num9].velocity.Y *= 1f + 0.3f * cloudAlpha;
					dust[num9].scale += cloudAlpha * 0.2f;
					if (flag)
					{
						dust[num9].scale -= 0.5f;
					}
					Dust obj = dust[num9];
					obj.velocity *= 1f + cloudAlpha * 0.5f;
				}
			}
			catch
			{
			}
		}
	}

	public static void checkXMas()
	{
		DateTime now = DateTime.Now;
		int day = now.Day;
		int month = now.Month;
		if (day >= 15 && month == 12)
		{
			xMas = true;
		}
		else
		{
			xMas = false;
		}
		if (forceXMasForToday)
		{
			xMas = true;
		}
	}

	public static void checkHalloween()
	{
		DateTime now = DateTime.Now;
		int day = now.Day;
		int month = now.Month;
		if (day >= 10 && month == 10)
		{
			halloween = true;
		}
		else if (day <= 1 && month == 11)
		{
			halloween = true;
		}
		else
		{
			halloween = false;
		}
		if (forceHalloweenForToday)
		{
			halloween = true;
		}
	}

	public void updateCloudLayer()
	{
		if (netMode == 1 || (netMode == 0 && gameMenu))
		{
			return;
		}
		int num = 86400;
		int num2 = num / 24;
		float num3 = Math.Max(1f, 1f + 4f * cloudAlpha);
		if (cloudBGActive > 0f)
		{
			if (cloudBGActive > 1f)
			{
				cloudBGActive -= (float)desiredWorldEventsUpdateRate / num3;
			}
			if (cloudBGActive < 1f)
			{
				cloudBGActive = 1f;
			}
			if (cloudBGActive == 1f && rand.NextDouble() <= desiredWorldEventsUpdateRate / (double)((float)(num2 * 2) * num3))
			{
				cloudBGActive = -rand.Next(num2 * 4, num * 4);
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			return;
		}
		if (cloudBGActive < 0f)
		{
			cloudBGActive += (float)desiredWorldEventsUpdateRate * num3;
			if (raining)
			{
				cloudBGActive += (float)(2.0 * desiredWorldEventsUpdateRate) * num3;
			}
		}
		if (cloudBGActive > 0f)
		{
			cloudBGActive = 0f;
		}
		if (cloudBGActive == 0f && rand.NextDouble() <= (double)num3 * desiredWorldEventsUpdateRate / (double)(num2 * 12))
		{
			cloudBGActive = rand.Next(num2 * 3, num * 2);
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
		}
		else if (IsItStorming)
		{
			cloudBGActive = rand.Next(num2, num2 * 4);
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
		}
	}

	public static void TeleportEffect(Rectangle effectRect, int Style, int extraInfo = 0, float dustCountMult = 1f, TeleportationSide side = TeleportationSide.Entry, Vector2 otherPosition = default(Vector2))
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0481: Unknown result type (might be due to invalid IL or missing references)
		//IL_0487: Unknown result type (might be due to invalid IL or missing references)
		//IL_0490: Unknown result type (might be due to invalid IL or missing references)
		//IL_0496: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0550: Unknown result type (might be due to invalid IL or missing references)
		//IL_0551: Unknown result type (might be due to invalid IL or missing references)
		//IL_0556: Unknown result type (might be due to invalid IL or missing references)
		//IL_0625: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_062b: Unknown result type (might be due to invalid IL or missing references)
		//IL_076b: Unknown result type (might be due to invalid IL or missing references)
		//IL_076d: Unknown result type (might be due to invalid IL or missing references)
		//IL_076e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0773: Unknown result type (might be due to invalid IL or missing references)
		//IL_0778: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0249: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0322: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0503: Unknown result type (might be due to invalid IL or missing references)
		//IL_0508: Unknown result type (might be due to invalid IL or missing references)
		//IL_056a: Unknown result type (might be due to invalid IL or missing references)
		//IL_056c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0572: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Unknown result type (might be due to invalid IL or missing references)
		//IL_0614: Unknown result type (might be due to invalid IL or missing references)
		//IL_0619: Unknown result type (might be due to invalid IL or missing references)
		//IL_063f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0647: Unknown result type (might be due to invalid IL or missing references)
		//IL_065f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0665: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_071b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0739: Unknown result type (might be due to invalid IL or missing references)
		//IL_0745: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07de: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_091f: Unknown result type (might be due to invalid IL or missing references)
		//IL_092b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0951: Unknown result type (might be due to invalid IL or missing references)
		//IL_0956: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a82: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0983: Unknown result type (might be due to invalid IL or missing references)
		//IL_0988: Unknown result type (might be due to invalid IL or missing references)
		//IL_098c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0991: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0998: Unknown result type (might be due to invalid IL or missing references)
		//IL_0999: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_038d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0397: Unknown result type (might be due to invalid IL or missing references)
		//IL_039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0861: Unknown result type (might be due to invalid IL or missing references)
		//IL_0866: Unknown result type (might be due to invalid IL or missing references)
		//IL_086d: Unknown result type (might be due to invalid IL or missing references)
		//IL_087c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0881: Unknown result type (might be due to invalid IL or missing references)
		//IL_0886: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03df: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ff: Unknown result type (might be due to invalid IL or missing references)
		switch (Style)
		{
		case 0:
		{
			SoundEngine.PlaySound(SoundID.Item6, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
			int num12 = effectRect.Width * effectRect.Height / 5;
			num12 = (int)((float)num12 * dustCountMult);
			for (int j = 0; j < num12; j++)
			{
				int num14 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 159);
				Main.dust[num14].scale = (float)rand.Next(20, 70) * 0.01f;
				if (j < 10)
				{
					Main.dust[num14].scale += 0.25f;
				}
				if (j < 5)
				{
					Main.dust[num14].scale += 0.25f;
				}
			}
			break;
		}
		case 1:
		{
			SoundEngine.PlaySound(SoundID.Item8, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
			int num2 = effectRect.Width * effectRect.Height / 5;
			num2 = (int)((float)num2 * dustCountMult);
			for (int num3 = 0; num3 < num2; num3++)
			{
				int num4 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 164);
				Main.dust[num4].scale = (float)rand.Next(20, 70) * 0.01f;
				if (num3 < 10)
				{
					Main.dust[num4].scale += 0.25f;
				}
				if (num3 < 5)
				{
					Main.dust[num4].scale += 0.25f;
				}
			}
			break;
		}
		case 2:
		{
			int num7 = (int)(50f * dustCountMult);
			for (int num8 = 0; num8 < num7; num8++)
			{
				Dust obj9 = Main.dust[Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 58, 0f, 0f, 150, Color.GhostWhite, 1.2f)];
				obj9.velocity *= 0.5f;
			}
			break;
		}
		case 3:
		{
			SoundEngine.PlaySound(SoundID.Item6, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
			int num16 = (int)(50f * dustCountMult);
			for (int l = 0; l < num16; l++)
			{
				int num17 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 180);
				Main.dust[num17].noGravity = true;
				for (int m = 0; m < 5; m++)
				{
					if (rand.Next(3) == 0)
					{
						Dust obj4 = Main.dust[num17];
						obj4.velocity *= 0.75f;
					}
				}
				if (rand.Next(3) == 0)
				{
					Dust obj5 = Main.dust[num17];
					obj5.velocity *= 2f;
					Main.dust[num17].scale *= 1.2f;
				}
				if (rand.Next(3) == 0)
				{
					Dust obj6 = Main.dust[num17];
					obj6.velocity *= 2f;
					Main.dust[num17].scale *= 1.2f;
				}
				if (rand.Next(2) == 0)
				{
					Main.dust[num17].fadeIn = (float)rand.Next(75, 100) * 0.01f;
					Main.dust[num17].scale = (float)rand.Next(25, 75) * 0.01f;
				}
				Main.dust[num17].scale *= 0.8f;
			}
			break;
		}
		case 4:
		{
			SoundEngine.PlaySound(SoundID.Item8, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
			int num9 = effectRect.Width * effectRect.Height / 5;
			num9 = (int)((float)num9 * dustCountMult);
			for (int num10 = 0; num10 < num9; num10++)
			{
				Dust obj10 = Main.dust[Dust.NewDust(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 263)];
				obj10.color = PortalHelper.GetPortalColor(extraInfo);
				obj10.noLight = true;
				obj10.noGravity = true;
				obj10.scale = 1.2f;
				obj10.fadeIn = 0.4f;
				((Color)(ref obj10.color)).A = byte.MaxValue;
			}
			break;
		}
		case 5:
		{
			Vector2 position = effectRect.TopLeft();
			int num19 = (int)(100f * dustCountMult);
			for (int num20 = 0; num20 < num19; num20++)
			{
				Dust obj8 = Dust.NewDustDirect(position, effectRect.Width, effectRect.Height + 24, Dust.dustWater());
				obj8.velocity.Y *= 0f;
				obj8.velocity.Y -= 3.5f;
				obj8.velocity.X *= 1.5f;
				obj8.scale = 0.8f;
				obj8.alpha = 130;
				obj8.noGravity = true;
				obj8.fadeIn = 1.2f;
			}
			SoundEngine.PlaySound(19, ((Rectangle)(ref effectRect)).Center.ToVector2(), 0);
			break;
		}
		case 7:
		{
			Vector2 position2 = effectRect.TopLeft();
			int num11 = (int)(50f * dustCountMult);
			for (int num13 = 0; num13 < num11; num13++)
			{
				Dust obj11 = Dust.NewDustDirect(position2, effectRect.Width, effectRect.Height + 24, 35);
				obj11.velocity.Y *= 0f;
				obj11.velocity.Y -= 3.5f;
				obj11.velocity.X *= 1.5f;
				obj11.scale = 0.8f;
				obj11.alpha = 130;
				obj11.noGravity = true;
				obj11.fadeIn = 1.2f;
			}
			SoundEngine.PlaySound(in SoundID.Item8, ((Rectangle)(ref effectRect)).Center.ToVector2());
			break;
		}
		case 9:
		{
			((Rectangle)(ref effectRect)).Inflate(15, 15);
			int num5 = (int)(100f * dustCountMult);
			for (int num6 = 0; num6 < num5; num6++)
			{
				TeleportPylonsSystem.SpawnInWorldDust(extraInfo, effectRect);
			}
			SoundEngine.PlaySound(SoundID.Item6, ((Rectangle)(ref effectRect)).Center.X, ((Rectangle)(ref effectRect)).Center.Y);
			break;
		}
		case 10:
		{
			((Rectangle)(ref effectRect)).Inflate(15, 15);
			int num18 = (int)(60f * dustCountMult);
			Vector2 vector = otherPosition - effectRect.TopLeft();
			for (int n = 0; n < num18; n++)
			{
				float fadeIn = 0.4f + rand.NextFloat();
				float scale = 0.4f + rand.NextFloat();
				Color newColor = hslToRgb(0.66f + rand.NextFloat() * 0.24f, 1f, 0.5f);
				Dust dust = Dust.NewDustDirect(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 267, 0f, 0f, 127, newColor);
				dust.scale = (float)rand.Next(20, 70) * 0.01f;
				if (n < 10)
				{
					dust.scale += 0.25f;
				}
				if (n < 5)
				{
					dust.scale += 0.25f;
				}
				if ((float)n < (float)num18 * 0.8f)
				{
					dust.velocity += vector * 0.1f * rand.NextFloat();
				}
				dust.noGravity = true;
				dust.noLight = true;
				dust.scale = scale;
				dust.fadeIn = fadeIn;
				if (dust.dustIndex != 6000)
				{
					Dust obj7 = Dust.CloneDust(dust);
					obj7.scale *= 0.65f;
					obj7.fadeIn *= 0.65f;
					obj7.color = new Color(255, 255, 255, 255);
				}
			}
			SoundEngine.PlaySound(SoundID.Item8, ((Rectangle)(ref effectRect)).Center.X, ((Rectangle)(ref effectRect)).Center.Y);
			break;
		}
		case 11:
		{
			for (int k = 0; k < 50; k++)
			{
				int num15 = rand.Next(4);
				Color color = Color.Green;
				switch (num15)
				{
				case 0:
				case 1:
					((Color)(ref color))._002Ector(100, 255, 100);
					break;
				case 2:
					color = Color.Yellow;
					break;
				case 3:
					color = Color.White;
					break;
				}
				Dust obj3 = Dust.NewDustPerfect(rand.NextVector2FromRectangle(effectRect), 267);
				obj3.noGravity = true;
				obj3.color = color;
				obj3.velocity *= 2f;
				obj3.scale = 0.8f + rand.NextFloat() * 0.6f;
				obj3.fadeIn = 0.5f;
			}
			break;
		}
		case 13:
		{
			SoundEngine.PlaySound(in SoundID.Item8, ((Rectangle)(ref effectRect)).Center.ToVector2());
			for (int i = 0; i < 21; i++)
			{
				int num = Dust.NewDust(rand.NextVector2FromRectangle(effectRect), 2, 2, 27, 0f, 0f, 100, default(Color), rand.Next(1, 3));
				Dust obj = Main.dust[num];
				obj.velocity *= 1.75f;
				if (i % 3 == 0)
				{
					Dust obj2 = Main.dust[num];
					obj2.velocity *= 1.5f;
				}
				Main.dust[num].noLightEmittence = true;
				Main.dust[num].noGravity = true;
			}
			break;
		}
		case 6:
		case 8:
		case 12:
			break;
		}
	}

	public static void Ambience()
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		ambientCounter++;
		if (ambientCounter >= 15)
		{
			ambientCounter = 0;
			LocalPlayer.Center.ToPoint();
			float usedWaterVolume = MathHelper.Clamp(ambientWaterfallStrength / 50f * (1f - shimmerAlpha), 0f, 1f);
			HandleAmbientSound(in SoundID.Waterfall, ref waterfallSoundSlot, usedWaterVolume, new Vector2(ambientWaterfallX, ambientWaterfallY));
			float num = Math.Abs(ambientLavaX - (screenPosition.X + (float)(screenWidth / 2))) + Math.Abs(ambientLavaY - (screenPosition.Y + (float)(screenHeight / 2)));
			float num5 = Math.Abs(ambientLavafallX - (screenPosition.X + (float)(screenWidth / 2))) + Math.Abs(ambientLavafallY - (screenPosition.Y + (float)(screenHeight / 2)));
			float num2 = ambientLavaX;
			float num3 = ambientLavaY;
			if (num5 < num)
			{
				num2 = ambientLavafallX;
				num3 = ambientLavafallY;
			}
			float num4 = ambientLavafallStrength + ambientLavaStrength;
			float usedLavaVolume = ((ambientLavaStrength > 0f) ? MathHelper.Clamp(num4 / 50f, 0f, 1f) : 0f);
			HandleAmbientSound(in SoundID.Lavafall, ref lavafallSoundSlot, usedLavaVolume, new Vector2(num2, num3));
		}
		static void HandleAmbientSound(in SoundStyle soundStyle, ref SlotId slot, float volume, Vector2 position)
		{
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			SoundEngine.TryGetActiveSound(slot, out ActiveSound activeSound);
			if (volume > 0f)
			{
				if (activeSound == null)
				{
					slot = SoundEngine.PlaySound(in soundStyle, position);
					if (!SoundEngine.TryGetActiveSound(slot, out activeSound))
					{
						return;
					}
				}
				activeSound.Volume = volume;
				activeSound.Position = position;
			}
			else if (activeSound != null)
			{
				activeSound.Stop();
				slot = SlotId.Invalid;
			}
		}
	}

	public static void AnimateTiles_CritterCages()
	{
		if (!critterCage)
		{
			return;
		}
		for (int i = 0; i < cageFrames; i++)
		{
			if (bunnyCageFrame[i] == 0)
			{
				bunnyCageFrameCounter[i]++;
				if (bunnyCageFrameCounter[i] <= rand.Next(30, 900))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					int num = rand.Next(7);
					if (num == 0)
					{
						bunnyCageFrame[i] = 4;
					}
					else if (num <= 2)
					{
						bunnyCageFrame[i] = 2;
					}
					else
					{
						bunnyCageFrame[i] = 1;
					}
				}
				bunnyCageFrameCounter[i] = 0;
			}
			else if (bunnyCageFrame[i] == 1)
			{
				bunnyCageFrameCounter[i]++;
				if (bunnyCageFrameCounter[i] >= 10)
				{
					bunnyCageFrameCounter[i] = 0;
					bunnyCageFrame[i] = 0;
				}
			}
			else if (bunnyCageFrame[i] >= 2 && bunnyCageFrame[i] <= 3)
			{
				bunnyCageFrameCounter[i]++;
				if (bunnyCageFrameCounter[i] >= 10)
				{
					bunnyCageFrameCounter[i] = 0;
					bunnyCageFrame[i]++;
				}
				if (bunnyCageFrame[i] > 3)
				{
					bunnyCageFrame[i] = 0;
				}
			}
			else if (bunnyCageFrame[i] >= 4 && bunnyCageFrame[i] <= 10)
			{
				bunnyCageFrameCounter[i]++;
				if (bunnyCageFrameCounter[i] >= 5)
				{
					bunnyCageFrameCounter[i] = 0;
					bunnyCageFrame[i]++;
				}
			}
			else if (bunnyCageFrame[i] == 11)
			{
				bunnyCageFrameCounter[i]++;
				if (bunnyCageFrameCounter[i] <= rand.Next(30, 900))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(7) == 0)
					{
						bunnyCageFrame[i] = 13;
					}
					else
					{
						bunnyCageFrame[i] = 12;
					}
				}
				bunnyCageFrameCounter[i] = 0;
			}
			else if (bunnyCageFrame[i] == 12)
			{
				bunnyCageFrameCounter[i]++;
				if (bunnyCageFrameCounter[i] >= 10)
				{
					bunnyCageFrameCounter[i] = 0;
					bunnyCageFrame[i] = 11;
				}
			}
			else if (bunnyCageFrame[i] >= 13)
			{
				bunnyCageFrameCounter[i]++;
				if (bunnyCageFrameCounter[i] >= 5)
				{
					bunnyCageFrameCounter[i] = 0;
					bunnyCageFrame[i]++;
				}
				if (bunnyCageFrame[i] > 21)
				{
					bunnyCageFrame[i] = 0;
				}
			}
		}
		for (int j = 0; j < cageFrames; j++)
		{
			if (squirrelCageFrame[j] == 0)
			{
				squirrelCageFrameCounter[j]++;
				if (squirrelCageFrameCounter[j] <= rand.Next(30, 900))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					int num4 = rand.Next(7);
					if (num4 == 0)
					{
						squirrelCageFrame[j] = 4;
					}
					else if (num4 <= 2)
					{
						squirrelCageFrame[j] = 2;
					}
					else
					{
						squirrelCageFrame[j] = 1;
					}
				}
				squirrelCageFrameCounter[j] = 0;
			}
			else if (squirrelCageFrame[j] == 1)
			{
				squirrelCageFrameCounter[j]++;
				if (squirrelCageFrameCounter[j] >= 10)
				{
					squirrelCageFrameCounter[j] = 0;
					squirrelCageFrame[j] = 0;
				}
			}
			else if (squirrelCageFrame[j] >= 2 && squirrelCageFrame[j] <= 3)
			{
				squirrelCageFrameCounter[j]++;
				if (squirrelCageFrameCounter[j] >= 5)
				{
					squirrelCageFrameCounter[j] = 0;
					squirrelCageFrame[j]++;
				}
				if (squirrelCageFrame[j] > 3)
				{
					if (rand.Next(5) == 0)
					{
						squirrelCageFrame[j] = 0;
					}
					else
					{
						squirrelCageFrame[j] = 2;
					}
				}
			}
			else if (squirrelCageFrame[j] >= 4 && squirrelCageFrame[j] <= 8)
			{
				squirrelCageFrameCounter[j]++;
				if (squirrelCageFrameCounter[j] >= 5)
				{
					squirrelCageFrameCounter[j] = 0;
					squirrelCageFrame[j]++;
				}
			}
			else if (squirrelCageFrame[j] == 9)
			{
				squirrelCageFrameCounter[j]++;
				if (squirrelCageFrameCounter[j] <= rand.Next(30, 900))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					int num5 = rand.Next(7);
					if (num5 == 0)
					{
						squirrelCageFrame[j] = 13;
					}
					else if (num5 <= 2)
					{
						squirrelCageFrame[j] = 11;
					}
					else
					{
						squirrelCageFrame[j] = 10;
					}
				}
				squirrelCageFrameCounter[j] = 0;
			}
			else if (squirrelCageFrame[j] == 10)
			{
				squirrelCageFrameCounter[j]++;
				if (squirrelCageFrameCounter[j] >= 10)
				{
					squirrelCageFrameCounter[j] = 0;
					squirrelCageFrame[j] = 9;
				}
			}
			else if (squirrelCageFrame[j] == 11 || squirrelCageFrame[j] == 12)
			{
				squirrelCageFrameCounter[j]++;
				if (squirrelCageFrameCounter[j] < 5)
				{
					continue;
				}
				squirrelCageFrame[j]++;
				if (squirrelCageFrame[j] > 12)
				{
					if (rand.Next(5) != 0)
					{
						squirrelCageFrame[j] = 11;
					}
					else
					{
						squirrelCageFrame[j] = 9;
					}
				}
				squirrelCageFrameCounter[j] = 0;
			}
			else if (squirrelCageFrame[j] >= 13)
			{
				squirrelCageFrameCounter[j]++;
				if (squirrelCageFrameCounter[j] >= 5)
				{
					squirrelCageFrameCounter[j] = 0;
					squirrelCageFrame[j]++;
				}
				if (squirrelCageFrame[j] > 17)
				{
					squirrelCageFrame[j] = 0;
				}
			}
		}
		for (int k = 0; k < cageFrames; k++)
		{
			if (squirrelCageFrameOrange[k] == 0)
			{
				squirrelCageFrameCounterOrange[k]++;
				if (squirrelCageFrameCounterOrange[k] <= rand.Next(30, 900))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					int num2 = rand.Next(7);
					if (num2 == 0)
					{
						squirrelCageFrameOrange[k] = 4;
					}
					else if (num2 <= 2)
					{
						squirrelCageFrameOrange[k] = 2;
					}
					else
					{
						squirrelCageFrameOrange[k] = 1;
					}
				}
				squirrelCageFrameCounterOrange[k] = 0;
			}
			else if (squirrelCageFrameOrange[k] == 1)
			{
				squirrelCageFrameCounterOrange[k]++;
				if (squirrelCageFrameCounterOrange[k] >= 10)
				{
					squirrelCageFrameCounterOrange[k] = 0;
					squirrelCageFrameOrange[k] = 0;
				}
			}
			else if (squirrelCageFrameOrange[k] >= 2 && squirrelCageFrameOrange[k] <= 3)
			{
				squirrelCageFrameCounterOrange[k]++;
				if (squirrelCageFrameCounterOrange[k] >= 5)
				{
					squirrelCageFrameCounterOrange[k] = 0;
					squirrelCageFrameOrange[k]++;
				}
				if (squirrelCageFrameOrange[k] > 3)
				{
					if (rand.Next(5) == 0)
					{
						squirrelCageFrameOrange[k] = 0;
					}
					else
					{
						squirrelCageFrameOrange[k] = 2;
					}
				}
			}
			else if (squirrelCageFrameOrange[k] >= 4 && squirrelCageFrameOrange[k] <= 8)
			{
				squirrelCageFrameCounterOrange[k]++;
				if (squirrelCageFrameCounterOrange[k] >= 5)
				{
					squirrelCageFrameCounterOrange[k] = 0;
					squirrelCageFrameOrange[k]++;
				}
			}
			else if (squirrelCageFrameOrange[k] == 9)
			{
				squirrelCageFrameCounterOrange[k]++;
				if (squirrelCageFrameCounterOrange[k] <= rand.Next(30, 900))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					int num3 = rand.Next(7);
					if (num3 == 0)
					{
						squirrelCageFrameOrange[k] = 13;
					}
					else if (num3 <= 2)
					{
						squirrelCageFrameOrange[k] = 11;
					}
					else
					{
						squirrelCageFrameOrange[k] = 10;
					}
				}
				squirrelCageFrameCounterOrange[k] = 0;
			}
			else if (squirrelCageFrameOrange[k] == 10)
			{
				squirrelCageFrameCounterOrange[k]++;
				if (squirrelCageFrameCounterOrange[k] >= 10)
				{
					squirrelCageFrameCounterOrange[k] = 0;
					squirrelCageFrameOrange[k] = 9;
				}
			}
			else if (squirrelCageFrameOrange[k] == 11 || squirrelCageFrameOrange[k] == 12)
			{
				squirrelCageFrameCounterOrange[k]++;
				if (squirrelCageFrameCounterOrange[k] < 5)
				{
					continue;
				}
				squirrelCageFrameOrange[k]++;
				if (squirrelCageFrameOrange[k] > 12)
				{
					if (rand.Next(5) != 0)
					{
						squirrelCageFrameOrange[k] = 11;
					}
					else
					{
						squirrelCageFrameOrange[k] = 9;
					}
				}
				squirrelCageFrameCounterOrange[k] = 0;
			}
			else if (squirrelCageFrameOrange[k] >= 13)
			{
				squirrelCageFrameCounterOrange[k]++;
				if (squirrelCageFrameCounterOrange[k] >= 5)
				{
					squirrelCageFrameCounterOrange[k] = 0;
					squirrelCageFrameOrange[k]++;
				}
				if (squirrelCageFrameOrange[k] > 17)
				{
					squirrelCageFrameOrange[k] = 0;
				}
			}
		}
		for (int l = 0; l < cageFrames; l++)
		{
			if (mallardCageFrame[l] == 0 || mallardCageFrame[l] == 4)
			{
				mallardCageFrameCounter[l]++;
				if (mallardCageFrameCounter[l] <= rand.Next(45, 2700))
				{
					continue;
				}
				if ((mallardCageFrame[l] == 0 && rand.Next(3) != 0) || (mallardCageFrame[l] == 4 && rand.Next(5) == 0))
				{
					if (rand.Next(6) == 0)
					{
						mallardCageFrame[l] = 5;
					}
					else if (rand.Next(3) == 0)
					{
						if (mallardCageFrame[l] == 4)
						{
							mallardCageFrame[l] = 0;
						}
						else
						{
							mallardCageFrame[l] = 4;
						}
					}
					else
					{
						mallardCageFrame[l] = 1;
					}
				}
				mallardCageFrameCounter[l] = 0;
			}
			else if (mallardCageFrame[l] >= 1 && mallardCageFrame[l] <= 3)
			{
				mallardCageFrameCounter[l]++;
				if (mallardCageFrameCounter[l] >= 5)
				{
					mallardCageFrameCounter[l] = 0;
					mallardCageFrame[l]++;
				}
				if (mallardCageFrame[l] > 3)
				{
					if (rand.Next(5) == 0)
					{
						mallardCageFrame[l] = 0;
					}
					else
					{
						mallardCageFrame[l] = 1;
					}
				}
			}
			else if (mallardCageFrame[l] >= 5 && mallardCageFrame[l] <= 11)
			{
				mallardCageFrameCounter[l]++;
				if (mallardCageFrameCounter[l] >= 5)
				{
					mallardCageFrameCounter[l] = 0;
					mallardCageFrame[l]++;
				}
			}
			else if (mallardCageFrame[l] == 12 || mallardCageFrame[l] == 16)
			{
				mallardCageFrameCounter[l]++;
				if (mallardCageFrameCounter[l] <= rand.Next(45, 2700))
				{
					continue;
				}
				if ((mallardCageFrame[l] == 12 && rand.Next(3) != 0) || (mallardCageFrame[l] == 16 && rand.Next(5) == 0))
				{
					if (rand.Next(6) == 0)
					{
						mallardCageFrame[l] = 17;
					}
					else if (rand.Next(3) == 0)
					{
						if (mallardCageFrame[l] == 16)
						{
							mallardCageFrame[l] = 12;
						}
						else
						{
							mallardCageFrame[l] = 16;
						}
					}
					else
					{
						mallardCageFrame[l] = 13;
					}
				}
				mallardCageFrameCounter[l] = 0;
			}
			else if (mallardCageFrame[l] >= 13 && mallardCageFrame[l] <= 15)
			{
				mallardCageFrameCounter[l]++;
				if (mallardCageFrameCounter[l] < 5)
				{
					continue;
				}
				mallardCageFrame[l]++;
				if (mallardCageFrame[l] > 15)
				{
					if (rand.Next(5) != 0)
					{
						mallardCageFrame[l] = 12;
					}
					else
					{
						mallardCageFrame[l] = 13;
					}
				}
				mallardCageFrameCounter[l] = 0;
			}
			else if (mallardCageFrame[l] >= 17)
			{
				mallardCageFrameCounter[l]++;
				if (mallardCageFrameCounter[l] >= 5)
				{
					mallardCageFrameCounter[l] = 0;
					mallardCageFrame[l]++;
				}
				if (mallardCageFrame[l] > 23)
				{
					mallardCageFrame[l] = 0;
				}
			}
		}
		for (int m = 0; m < cageFrames; m++)
		{
			if (duckCageFrame[m] == 0 || duckCageFrame[m] == 4)
			{
				duckCageFrameCounter[m]++;
				if (duckCageFrameCounter[m] <= rand.Next(45, 2700))
				{
					continue;
				}
				if ((duckCageFrame[m] == 0 && rand.Next(3) != 0) || (duckCageFrame[m] == 4 && rand.Next(5) == 0))
				{
					if (rand.Next(6) == 0)
					{
						duckCageFrame[m] = 5;
					}
					else if (rand.Next(3) == 0)
					{
						if (duckCageFrame[m] == 4)
						{
							duckCageFrame[m] = 0;
						}
						else
						{
							duckCageFrame[m] = 4;
						}
					}
					else
					{
						duckCageFrame[m] = 1;
					}
				}
				duckCageFrameCounter[m] = 0;
			}
			else if (duckCageFrame[m] >= 1 && duckCageFrame[m] <= 3)
			{
				duckCageFrameCounter[m]++;
				if (duckCageFrameCounter[m] >= 5)
				{
					duckCageFrameCounter[m] = 0;
					duckCageFrame[m]++;
				}
				if (duckCageFrame[m] > 3)
				{
					if (rand.Next(5) == 0)
					{
						duckCageFrame[m] = 0;
					}
					else
					{
						duckCageFrame[m] = 1;
					}
				}
			}
			else if (duckCageFrame[m] >= 5 && duckCageFrame[m] <= 11)
			{
				duckCageFrameCounter[m]++;
				if (duckCageFrameCounter[m] >= 5)
				{
					duckCageFrameCounter[m] = 0;
					duckCageFrame[m]++;
				}
			}
			else if (duckCageFrame[m] == 12 || duckCageFrame[m] == 16)
			{
				duckCageFrameCounter[m]++;
				if (duckCageFrameCounter[m] <= rand.Next(45, 2700))
				{
					continue;
				}
				if ((duckCageFrame[m] == 12 && rand.Next(3) != 0) || (duckCageFrame[m] == 16 && rand.Next(5) == 0))
				{
					if (rand.Next(6) == 0)
					{
						duckCageFrame[m] = 17;
					}
					else if (rand.Next(3) == 0)
					{
						if (duckCageFrame[m] == 16)
						{
							duckCageFrame[m] = 12;
						}
						else
						{
							duckCageFrame[m] = 16;
						}
					}
					else
					{
						duckCageFrame[m] = 13;
					}
				}
				duckCageFrameCounter[m] = 0;
			}
			else if (duckCageFrame[m] >= 13 && duckCageFrame[m] <= 15)
			{
				duckCageFrameCounter[m]++;
				if (duckCageFrameCounter[m] < 5)
				{
					continue;
				}
				duckCageFrame[m]++;
				if (duckCageFrame[m] > 15)
				{
					if (rand.Next(5) != 0)
					{
						duckCageFrame[m] = 12;
					}
					else
					{
						duckCageFrame[m] = 13;
					}
				}
				duckCageFrameCounter[m] = 0;
			}
			else if (duckCageFrame[m] >= 17)
			{
				duckCageFrameCounter[m]++;
				if (duckCageFrameCounter[m] >= 5)
				{
					duckCageFrameCounter[m] = 0;
					duckCageFrame[m]++;
				}
				if (duckCageFrame[m] > 23)
				{
					duckCageFrame[m] = 0;
				}
			}
		}
		for (int n = 0; n < cageFrames; n++)
		{
			grebeCageFrameCounter[n]++;
			bool flag = grebeCageFrame[n] == 0 || grebeCageFrame[n] == 7;
			bool num50 = grebeCageFrame[n] == 16 || grebeCageFrame[n] == 20;
			int num24 = 5;
			if (flag)
			{
				num24 = rand.Next(300, 400);
			}
			if (num50)
			{
				num24 = rand.Next(480, 600);
			}
			if (grebeCageFrameCounter[n] < num24)
			{
				continue;
			}
			grebeCageFrameCounter[n] = 0;
			if (grebeCageFrame[n] >= 25 && grebeCageFrame[n] <= 27)
			{
				grebeCageFrame[n]++;
				if (grebeCageFrame[n] > 27)
				{
					if (rand.Next(5) == 0)
					{
						grebeCageFrame[n] = 7;
					}
					else
					{
						grebeCageFrame[n] = 25;
					}
				}
			}
			else if (grebeCageFrame[n] >= 22 && grebeCageFrame[n] <= 24)
			{
				grebeCageFrame[n]++;
				if (grebeCageFrame[n] > 24)
				{
					if (rand.Next(5) == 0)
					{
						grebeCageFrame[n] = 0;
					}
					else
					{
						grebeCageFrame[n] = 22;
					}
				}
			}
			else if (grebeCageFrame[n] == 0 && rand.Next(3) == 0)
			{
				grebeCageFrame[n] = ((rand.Next(2) == 0) ? 22 : 14);
			}
			else if (grebeCageFrame[n] == 7 && rand.Next(3) == 0)
			{
				grebeCageFrame[n] = ((rand.Next(2) == 0) ? 25 : 18);
			}
			else if (grebeCageFrame[n] == 13 || grebeCageFrame[n] == 17)
			{
				grebeCageFrame[n] = 0;
			}
			else if (grebeCageFrame[n] == 21)
			{
				grebeCageFrame[n] = 7;
			}
			else
			{
				grebeCageFrame[n]++;
			}
		}
		for (int num33 = 0; num33 < cageFrames; num33++)
		{
			seagullCageFrameCounter[num33]++;
			bool flag2 = seagullCageFrame[num33] == 0 || seagullCageFrame[num33] == 14;
			bool flag3 = seagullCageFrame[num33] >= 15 && seagullCageFrame[num33] <= 18;
			bool num51 = seagullCageFrame[num33] >= 9 && seagullCageFrame[num33] <= 13;
			int num46 = 6;
			if (flag2)
			{
				num46 = rand.Next(180, 250);
			}
			if (flag3)
			{
				num46 = 66;
			}
			if (num51)
			{
				num46 = 78;
			}
			if (seagullCageFrameCounter[num33] >= num46)
			{
				seagullCageFrameCounter[num33] = 0;
				if (seagullCageFrame[num33] == 0 && rand.Next(3) == 0)
				{
					seagullCageFrame[num33] = 9;
					continue;
				}
				if (seagullCageFrame[num33] == 14)
				{
					if (rand.Next(2) == 0)
					{
						seagullCageFrame[num33] = 15;
					}
					else
					{
						seagullCageFrame[num33] = 19;
					}
					continue;
				}
				if (seagullCageFrame[num33] == 9)
				{
					seagullCageFrame[num33] = 0;
					continue;
				}
				if (seagullCageFrame[num33] == 8 || seagullCageFrame[num33] == 15)
				{
					seagullCageFrame[num33] = 14;
					continue;
				}
				seagullCageFrame[num33]++;
				if (seagullCageFrame[num33] > 26)
				{
					seagullCageFrame[num33] = 0;
				}
			}
			else if (seagullCageFrame[num33] >= 15 && seagullCageFrame[num33] <= 18)
			{
				int num47 = seagullCageFrameCounter[num33] % 66;
				if (num47 > 60)
				{
					seagullCageFrame[num33] = 15;
				}
				else if (num47 > 54)
				{
					seagullCageFrame[num33] = 16;
				}
				else if (num47 > 48)
				{
					seagullCageFrame[num33] = 17;
				}
				else if (num47 > 42)
				{
					seagullCageFrame[num33] = 18;
				}
				else if (num47 > 36)
				{
					seagullCageFrame[num33] = 17;
				}
				else if (num47 > 30)
				{
					seagullCageFrame[num33] = 16;
				}
				else if (num47 > 24)
				{
					seagullCageFrame[num33] = 17;
				}
				else if (num47 > 18)
				{
					seagullCageFrame[num33] = 18;
				}
				else if (num47 > 12)
				{
					seagullCageFrame[num33] = 17;
				}
				else if (num47 > 6)
				{
					seagullCageFrame[num33] = 16;
				}
				else
				{
					seagullCageFrame[num33] = 15;
				}
			}
			else if (seagullCageFrame[num33] >= 9 && seagullCageFrame[num33] <= 13)
			{
				int num48 = seagullCageFrameCounter[num33] % 78;
				if (num48 > 72)
				{
					seagullCageFrame[num33] = 9;
				}
				else if (num48 > 66)
				{
					seagullCageFrame[num33] = 10;
				}
				else if (num48 > 60)
				{
					seagullCageFrame[num33] = 11;
				}
				else if (num48 > 54)
				{
					seagullCageFrame[num33] = 12;
				}
				else if (num48 > 48)
				{
					seagullCageFrame[num33] = 13;
				}
				else if (num48 > 42)
				{
					seagullCageFrame[num33] = 12;
				}
				else if (num48 > 36)
				{
					seagullCageFrame[num33] = 11;
				}
				else if (num48 > 30)
				{
					seagullCageFrame[num33] = 12;
				}
				else if (num48 > 24)
				{
					seagullCageFrame[num33] = 13;
				}
				else if (num48 > 18)
				{
					seagullCageFrame[num33] = 12;
				}
				else if (num48 > 12)
				{
					seagullCageFrame[num33] = 11;
				}
				else if (num48 > 6)
				{
					seagullCageFrame[num33] = 10;
				}
				else
				{
					seagullCageFrame[num33] = 9;
				}
			}
		}
		for (int num49 = 0; num49 < cageFrames; num49++)
		{
			if (birdCageFrame[num49] == 0)
			{
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] <= rand.Next(30, 2700))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(3) != 0)
					{
						birdCageFrame[num49] = 2;
					}
					else
					{
						birdCageFrame[num49] = 1;
					}
				}
				birdCageFrameCounter[num49] = 0;
			}
			else if (birdCageFrame[num49] == 1)
			{
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] > rand.Next(900, 18000) && rand.Next(3) == 0)
				{
					birdCageFrameCounter[num49] = 0;
					birdCageFrame[num49] = 0;
				}
			}
			else if (birdCageFrame[num49] >= 2 && birdCageFrame[num49] <= 5)
			{
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] >= 5)
				{
					birdCageFrameCounter[num49] = 0;
					if (birdCageFrame[num49] == 3 && rand.Next(3) == 0)
					{
						birdCageFrame[num49] = 13;
					}
					else
					{
						birdCageFrame[num49]++;
					}
				}
			}
			else if (birdCageFrame[num49] == 6)
			{
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] <= rand.Next(45, 2700))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(6) == 0)
					{
						birdCageFrame[num49] = 7;
					}
					else if (rand.Next(6) == 0)
					{
						birdCageFrame[num49] = 11;
					}
				}
				birdCageFrameCounter[num49] = 0;
			}
			else if (birdCageFrame[num49] >= 7 && birdCageFrame[num49] <= 10)
			{
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] >= 5)
				{
					birdCageFrame[num49]++;
					if (birdCageFrame[num49] > 10)
					{
						birdCageFrame[num49] = 0;
					}
					birdCageFrameCounter[num49] = 0;
				}
			}
			else if (birdCageFrame[num49] >= 11 && birdCageFrame[num49] <= 13)
			{
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] >= 5)
				{
					birdCageFrame[num49]++;
					birdCageFrameCounter[num49] = 0;
				}
			}
			else if (birdCageFrame[num49] == 14)
			{
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] > rand.Next(5, 600))
				{
					if (rand.Next(20) == 0)
					{
						birdCageFrame[num49] = 16;
					}
					else if (rand.Next(20) == 0)
					{
						birdCageFrame[num49] = 4;
					}
					else
					{
						birdCageFrame[num49] = 15;
					}
					birdCageFrameCounter[num49] = 0;
				}
			}
			else if (birdCageFrame[num49] == 15)
			{
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] >= 10)
				{
					birdCageFrameCounter[num49] = 0;
					birdCageFrame[num49] = 14;
				}
			}
			else
			{
				if (birdCageFrame[num49] < 16 || birdCageFrame[num49] > 18)
				{
					continue;
				}
				birdCageFrameCounter[num49]++;
				if (birdCageFrameCounter[num49] >= 5)
				{
					birdCageFrame[num49]++;
					if (birdCageFrame[num49] > 18)
					{
						birdCageFrame[num49] = 0;
					}
					birdCageFrameCounter[num49] = 0;
				}
			}
		}
		for (int num6 = 0; num6 < cageFrames; num6++)
		{
			if (blueBirdCageFrame[num6] == 0)
			{
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] <= rand.Next(30, 2700))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(3) != 0)
					{
						blueBirdCageFrame[num6] = 2;
					}
					else
					{
						blueBirdCageFrame[num6] = 1;
					}
				}
				blueBirdCageFrameCounter[num6] = 0;
			}
			else if (blueBirdCageFrame[num6] == 1)
			{
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] > rand.Next(900, 18000) && rand.Next(3) == 0)
				{
					blueBirdCageFrameCounter[num6] = 0;
					blueBirdCageFrame[num6] = 0;
				}
			}
			else if (blueBirdCageFrame[num6] >= 2 && blueBirdCageFrame[num6] <= 5)
			{
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] >= 5)
				{
					blueBirdCageFrameCounter[num6] = 0;
					if (blueBirdCageFrame[num6] == 3 && rand.Next(3) == 0)
					{
						blueBirdCageFrame[num6] = 13;
					}
					else
					{
						blueBirdCageFrame[num6]++;
					}
				}
			}
			else if (blueBirdCageFrame[num6] == 6)
			{
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] <= rand.Next(45, 2700))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(6) == 0)
					{
						blueBirdCageFrame[num6] = 7;
					}
					else if (rand.Next(6) == 0)
					{
						blueBirdCageFrame[num6] = 11;
					}
				}
				blueBirdCageFrameCounter[num6] = 0;
			}
			else if (blueBirdCageFrame[num6] >= 7 && blueBirdCageFrame[num6] <= 10)
			{
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] >= 5)
				{
					blueBirdCageFrame[num6]++;
					if (blueBirdCageFrame[num6] > 10)
					{
						blueBirdCageFrame[num6] = 0;
					}
					blueBirdCageFrameCounter[num6] = 0;
				}
			}
			else if (blueBirdCageFrame[num6] >= 11 && blueBirdCageFrame[num6] <= 13)
			{
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] >= 5)
				{
					blueBirdCageFrame[num6]++;
					blueBirdCageFrameCounter[num6] = 0;
				}
			}
			else if (blueBirdCageFrame[num6] == 14)
			{
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] > rand.Next(5, 600))
				{
					if (rand.Next(20) == 0)
					{
						blueBirdCageFrame[num6] = 16;
					}
					else if (rand.Next(20) == 0)
					{
						blueBirdCageFrame[num6] = 4;
					}
					else
					{
						blueBirdCageFrame[num6] = 15;
					}
					blueBirdCageFrameCounter[num6] = 0;
				}
			}
			else if (blueBirdCageFrame[num6] == 15)
			{
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] >= 10)
				{
					blueBirdCageFrameCounter[num6] = 0;
					blueBirdCageFrame[num6] = 14;
				}
			}
			else
			{
				if (blueBirdCageFrame[num6] < 16 || blueBirdCageFrame[num6] > 18)
				{
					continue;
				}
				blueBirdCageFrameCounter[num6]++;
				if (blueBirdCageFrameCounter[num6] >= 5)
				{
					blueBirdCageFrame[num6]++;
					if (blueBirdCageFrame[num6] > 18)
					{
						blueBirdCageFrame[num6] = 0;
					}
					blueBirdCageFrameCounter[num6] = 0;
				}
			}
		}
		for (int num7 = 0; num7 < cageFrames; num7++)
		{
			if (redBirdCageFrame[num7] == 0)
			{
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] <= rand.Next(30, 2700))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(3) != 0)
					{
						redBirdCageFrame[num7] = 2;
					}
					else
					{
						redBirdCageFrame[num7] = 1;
					}
				}
				redBirdCageFrameCounter[num7] = 0;
			}
			else if (redBirdCageFrame[num7] == 1)
			{
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] > rand.Next(900, 18000) && rand.Next(3) == 0)
				{
					redBirdCageFrameCounter[num7] = 0;
					redBirdCageFrame[num7] = 0;
				}
			}
			else if (redBirdCageFrame[num7] >= 2 && redBirdCageFrame[num7] <= 5)
			{
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] >= 5)
				{
					redBirdCageFrameCounter[num7] = 0;
					if (redBirdCageFrame[num7] == 3 && rand.Next(3) == 0)
					{
						redBirdCageFrame[num7] = 13;
					}
					else
					{
						redBirdCageFrame[num7]++;
					}
				}
			}
			else if (redBirdCageFrame[num7] == 6)
			{
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] <= rand.Next(45, 2700))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(6) == 0)
					{
						redBirdCageFrame[num7] = 7;
					}
					else if (rand.Next(6) == 0)
					{
						redBirdCageFrame[num7] = 11;
					}
				}
				redBirdCageFrameCounter[num7] = 0;
			}
			else if (redBirdCageFrame[num7] >= 7 && redBirdCageFrame[num7] <= 10)
			{
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] >= 5)
				{
					redBirdCageFrame[num7]++;
					if (redBirdCageFrame[num7] > 10)
					{
						redBirdCageFrame[num7] = 0;
					}
					redBirdCageFrameCounter[num7] = 0;
				}
			}
			else if (redBirdCageFrame[num7] >= 11 && redBirdCageFrame[num7] <= 13)
			{
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] >= 5)
				{
					redBirdCageFrame[num7]++;
					redBirdCageFrameCounter[num7] = 0;
				}
			}
			else if (redBirdCageFrame[num7] == 14)
			{
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] > rand.Next(5, 600))
				{
					if (rand.Next(20) == 0)
					{
						redBirdCageFrame[num7] = 16;
					}
					else if (rand.Next(20) == 0)
					{
						redBirdCageFrame[num7] = 4;
					}
					else
					{
						redBirdCageFrame[num7] = 15;
					}
					redBirdCageFrameCounter[num7] = 0;
				}
			}
			else if (redBirdCageFrame[num7] == 15)
			{
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] >= 10)
				{
					redBirdCageFrameCounter[num7] = 0;
					redBirdCageFrame[num7] = 14;
				}
			}
			else
			{
				if (redBirdCageFrame[num7] < 16 || redBirdCageFrame[num7] > 18)
				{
					continue;
				}
				redBirdCageFrameCounter[num7]++;
				if (redBirdCageFrameCounter[num7] >= 5)
				{
					redBirdCageFrame[num7]++;
					if (redBirdCageFrame[num7] > 18)
					{
						redBirdCageFrame[num7] = 0;
					}
					redBirdCageFrameCounter[num7] = 0;
				}
			}
		}
		for (int num8 = 0; num8 < cageFrames; num8++)
		{
			if (macawCageFrame[num8] == 0)
			{
				macawCageFrameCounter[num8]++;
				if (macawCageFrameCounter[num8] <= rand.Next(300, 2700))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(3) != 0)
					{
						macawCageFrame[num8] = 16;
					}
					else
					{
						macawCageFrame[num8] = 1;
					}
				}
				macawCageFrameCounter[num8] = 0;
			}
			else if (macawCageFrame[num8] >= 1 && macawCageFrame[num8] <= 5)
			{
				macawCageFrameCounter[num8]++;
				if (macawCageFrameCounter[num8] > 5)
				{
					macawCageFrameCounter[num8] = 0;
					macawCageFrame[num8]++;
					if (macawCageFrame[num8] > 5)
					{
						macawCageFrame[num8] = 6;
					}
				}
			}
			else if (macawCageFrame[num8] >= 16 && macawCageFrame[num8] <= 19)
			{
				macawCageFrameCounter[num8]++;
				if (macawCageFrameCounter[num8] > 6)
				{
					macawCageFrameCounter[num8] = 0;
					macawCageFrame[num8]++;
					if (macawCageFrame[num8] > 19)
					{
						macawCageFrame[num8] = ((rand.Next(3) != 0) ? 16 : 0);
					}
				}
			}
			else if (macawCageFrame[num8] == 6)
			{
				macawCageFrameCounter[num8]++;
				if (macawCageFrameCounter[num8] <= rand.Next(300, 2700))
				{
					continue;
				}
				if (rand.Next(3) != 0)
				{
					if (rand.Next(3) != 0)
					{
						macawCageFrame[num8] = 7;
					}
					else
					{
						macawCageFrame[num8] = 11;
					}
				}
				macawCageFrameCounter[num8] = 0;
			}
			else if (macawCageFrame[num8] >= 11 && macawCageFrame[num8] <= 15)
			{
				macawCageFrameCounter[num8]++;
				if (macawCageFrameCounter[num8] > 5)
				{
					macawCageFrameCounter[num8] = 0;
					macawCageFrame[num8]++;
					if (macawCageFrame[num8] > 15)
					{
						macawCageFrame[num8] = 0;
					}
				}
			}
			else
			{
				if (macawCageFrame[num8] < 7 || macawCageFrame[num8] > 10)
				{
					continue;
				}
				macawCageFrameCounter[num8]++;
				if (macawCageFrameCounter[num8] > 6)
				{
					macawCageFrameCounter[num8] = 0;
					macawCageFrame[num8]++;
					if (macawCageFrame[num8] > 10)
					{
						macawCageFrame[num8] = ((rand.Next(3) == 0) ? 6 : 7);
					}
				}
			}
		}
		for (int num9 = 0; num9 < 2; num9++)
		{
			for (int num10 = 0; num10 < cageFrames; num10++)
			{
				if (scorpionCageFrame[num9, num10] == 0 || scorpionCageFrame[num9, num10] == 7)
				{
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] <= rand.Next(30, 3600))
					{
						continue;
					}
					if (scorpionCageFrame[num9, num10] == 7)
					{
						scorpionCageFrame[num9, num10] = 0;
					}
					else if (rand.Next(3) == 0)
					{
						if (rand.Next(7) == 0)
						{
							scorpionCageFrame[num9, num10] = 1;
						}
						else if (rand.Next(4) == 0)
						{
							scorpionCageFrame[num9, num10] = 8;
						}
						else if (rand.Next(3) == 0)
						{
							scorpionCageFrame[num9, num10] = 7;
						}
						else
						{
							scorpionCageFrame[num9, num10] = 14;
						}
					}
					scorpionCageFrameCounter[num9, num10] = 0;
				}
				else if (scorpionCageFrame[num9, num10] >= 1 && scorpionCageFrame[num9, num10] <= 2)
				{
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] >= 10)
					{
						scorpionCageFrameCounter[num9, num10] = 0;
						scorpionCageFrame[num9, num10]++;
					}
				}
				else if (scorpionCageFrame[num9, num10] >= 8 && scorpionCageFrame[num9, num10] <= 10)
				{
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] >= 10)
					{
						scorpionCageFrameCounter[num9, num10] = 0;
						scorpionCageFrame[num9, num10]++;
					}
				}
				else if (scorpionCageFrame[num9, num10] == 11)
				{
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] > rand.Next(45, 5400))
					{
						if (rand.Next(6) == 0)
						{
							scorpionCageFrame[num9, num10] = 12;
						}
						scorpionCageFrameCounter[num9, num10] = 0;
					}
				}
				else if (scorpionCageFrame[num9, num10] >= 12 && scorpionCageFrame[num9, num10] <= 13)
				{
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] >= 10)
					{
						scorpionCageFrameCounter[num9, num10] = 0;
						scorpionCageFrame[num9, num10]++;
						if (scorpionCageFrame[num9, num10] > 13)
						{
							scorpionCageFrame[num9, num10] = 0;
						}
					}
				}
				else if (scorpionCageFrame[num9, num10] >= 14 && scorpionCageFrame[num9, num10] <= 15)
				{
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] >= 5)
					{
						scorpionCageFrameCounter[num9, num10] = 0;
						scorpionCageFrame[num9, num10]++;
						if (scorpionCageFrame[num9, num10] > 15)
						{
							scorpionCageFrame[num9, num10] = 14;
						}
						if (rand.Next(5) == 0)
						{
							scorpionCageFrame[num9, num10] = 0;
						}
					}
				}
				else if (scorpionCageFrame[num9, num10] == 4 || scorpionCageFrame[num9, num10] == 3)
				{
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] <= rand.Next(30, 3600))
					{
						continue;
					}
					if (scorpionCageFrame[num9, num10] == 3)
					{
						scorpionCageFrame[num9, num10] = 4;
					}
					else if (rand.Next(3) == 0)
					{
						if (rand.Next(5) == 0)
						{
							scorpionCageFrame[num9, num10] = 5;
						}
						else if (rand.Next(3) == 0)
						{
							scorpionCageFrame[num9, num10] = 3;
						}
						else
						{
							scorpionCageFrame[num9, num10] = 16;
						}
					}
					scorpionCageFrameCounter[num9, num10] = 0;
				}
				else if (scorpionCageFrame[num9, num10] >= 5 && scorpionCageFrame[num9, num10] <= 6)
				{
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] >= 10)
					{
						scorpionCageFrameCounter[num9, num10] = 0;
						scorpionCageFrame[num9, num10]++;
						if (scorpionCageFrame[num9, num10] > 7)
						{
							scorpionCageFrame[num9, num10] = 0;
						}
					}
				}
				else
				{
					if (scorpionCageFrame[num9, num10] < 16 || scorpionCageFrame[num9, num10] > 17)
					{
						continue;
					}
					scorpionCageFrameCounter[num9, num10]++;
					if (scorpionCageFrameCounter[num9, num10] >= 5)
					{
						scorpionCageFrameCounter[num9, num10] = 0;
						scorpionCageFrame[num9, num10]++;
						if (scorpionCageFrame[num9, num10] > 17)
						{
							scorpionCageFrame[num9, num10] = 16;
						}
						if (rand.Next(5) == 0)
						{
							scorpionCageFrame[num9, num10] = 4;
						}
					}
				}
			}
		}
		for (int num11 = 0; num11 < cageFrames; num11++)
		{
			if (penguinCageFrame[num11] == 0)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] <= rand.Next(30, 1800))
				{
					continue;
				}
				if (rand.Next(2) == 0)
				{
					if (rand.Next(10) == 0)
					{
						penguinCageFrame[num11] = 4;
					}
					else if (rand.Next(7) == 0)
					{
						penguinCageFrame[num11] = 15;
					}
					else if (rand.Next(3) == 0)
					{
						penguinCageFrame[num11] = 2;
					}
					else
					{
						penguinCageFrame[num11] = 1;
					}
				}
				penguinCageFrameCounter[num11] = 0;
			}
			else if (penguinCageFrame[num11] == 1)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] >= 10)
				{
					penguinCageFrameCounter[num11] = 0;
					penguinCageFrame[num11] = 0;
				}
			}
			else if (penguinCageFrame[num11] >= 2 && penguinCageFrame[num11] <= 3)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] < 5)
				{
					continue;
				}
				penguinCageFrameCounter[num11] = 0;
				penguinCageFrame[num11]++;
				if (penguinCageFrame[num11] > 3)
				{
					if (rand.Next(3) == 0)
					{
						penguinCageFrame[num11] = 0;
					}
					else
					{
						penguinCageFrame[num11] = 2;
					}
				}
			}
			else if (penguinCageFrame[num11] >= 4 && penguinCageFrame[num11] <= 6)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] >= 10)
				{
					penguinCageFrameCounter[num11] = 0;
					penguinCageFrame[num11]++;
				}
			}
			else if (penguinCageFrame[num11] == 15)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] > rand.Next(10, 1800))
				{
					if (rand.Next(2) == 0)
					{
						penguinCageFrame[num11] = 0;
					}
					penguinCageFrameCounter[num11] = 0;
				}
			}
			else if (penguinCageFrame[num11] == 8)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] <= rand.Next(30, 3600))
				{
					continue;
				}
				if (rand.Next(2) == 0)
				{
					if (rand.Next(10) == 0)
					{
						penguinCageFrame[num11] = 12;
					}
					else if (rand.Next(7) == 0)
					{
						penguinCageFrame[num11] = 7;
					}
					else if (rand.Next(3) == 0)
					{
						penguinCageFrame[num11] = 10;
					}
					else
					{
						penguinCageFrame[num11] = 9;
					}
				}
				penguinCageFrameCounter[num11] = 0;
			}
			else if (penguinCageFrame[num11] == 9)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] >= 10)
				{
					penguinCageFrameCounter[num11] = 0;
					penguinCageFrame[num11] = 8;
				}
			}
			else if (penguinCageFrame[num11] >= 10 && penguinCageFrame[num11] <= 11)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] < 5)
				{
					continue;
				}
				penguinCageFrameCounter[num11] = 0;
				penguinCageFrame[num11]++;
				if (penguinCageFrame[num11] > 3)
				{
					if (rand.Next(3) == 0)
					{
						penguinCageFrame[num11] = 8;
					}
					else
					{
						penguinCageFrame[num11] = 10;
					}
				}
			}
			else if (penguinCageFrame[num11] >= 12 && penguinCageFrame[num11] <= 14)
			{
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] >= 10)
				{
					penguinCageFrameCounter[num11] = 0;
					penguinCageFrame[num11]++;
				}
			}
			else
			{
				if (penguinCageFrame[num11] != 7)
				{
					continue;
				}
				penguinCageFrameCounter[num11]++;
				if (penguinCageFrameCounter[num11] > rand.Next(10, 3600))
				{
					if (rand.Next(2) == 0)
					{
						penguinCageFrame[num11] = 8;
					}
					penguinCageFrameCounter[num11] = 0;
				}
			}
		}
		for (int num12 = 0; num12 < cageFrames; num12++)
		{
			turtleCageFrameCounter[num12]++;
			bool num52 = turtleCageFrame[num12] == 0 || turtleCageFrame[num12] == 15 || turtleCageFrame[num12] == 31;
			int num13 = 8;
			if (num52)
			{
				num13 = rand.Next(180, 250);
			}
			if (turtleCageFrameCounter[num12] < num13)
			{
				continue;
			}
			turtleCageFrameCounter[num12] = 0;
			if (turtleCageFrame[num12] == 29)
			{
				turtleCageFrame[num12] = 0;
				continue;
			}
			if (turtleCageFrame[num12] == 15 && rand.Next(3) == 0)
			{
				turtleCageFrame[num12] = 30;
				continue;
			}
			turtleCageFrame[num12]++;
			if (turtleCageFrame[num12] > 32)
			{
				turtleCageFrame[num12] = 15;
			}
		}
		for (int num14 = 0; num14 < cageFrames; num14++)
		{
			seahorseCageFrameCounter[num14]++;
			bool flag4 = seahorseCageFrame[num14] == 0 || seahorseCageFrame[num14] == 13;
			bool num53 = seahorseCageFrame[num14] == 4 || seahorseCageFrame[num14] == 9 || seahorseCageFrame[num14] == 17 || seahorseCageFrame[num14] == 22;
			bool flag5 = seahorseCageFrame[num14] >= 25;
			int num15 = 7;
			if (flag4)
			{
				num15 = rand.Next(220, 340);
			}
			if (num53)
			{
				num15 = 10;
			}
			if (flag5)
			{
				num15 = 6;
			}
			if (seahorseCageFrameCounter[num14] < num15)
			{
				continue;
			}
			seahorseCageFrameCounter[num14] = 0;
			if (seahorseCageFrame[num14] == 0 && rand.Next(2) == 0)
			{
				seahorseCageFrame[num14] = 25;
				continue;
			}
			if (seahorseCageFrame[num14] == 24)
			{
				seahorseCageFrame[num14] = 0;
				continue;
			}
			seahorseCageFrame[num14]++;
			if (seahorseCageFrame[num14] > 33)
			{
				seahorseCageFrame[num14] = 0;
			}
		}
		UpdateOwlCageFrames();
		for (int num16 = 0; num16 < cageFrames; num16++)
		{
			if (snailCageFrame[num16] >= 0 && snailCageFrame[num16] <= 13)
			{
				snailCageFrameCounter[num16]++;
				if (snailCageFrameCounter[num16] <= rand.Next(45, 3600))
				{
					continue;
				}
				if (snailCageFrame[num16] == 8 && rand.Next(2) == 0)
				{
					snailCageFrame[num16] = 14;
				}
				else if (snailCageFrame[num16] == 1 && rand.Next(3) == 0)
				{
					snailCageFrame[num16] = 19;
				}
				else if (snailCageFrame[num16] == 1 && rand.Next(3) == 0)
				{
					snailCageFrame[num16] = 20;
				}
				else
				{
					snailCageFrame[num16]++;
					if (snailCageFrame[num16] > 13)
					{
						snailCageFrame[num16] = 0;
					}
				}
				snailCageFrameCounter[num16] = 0;
			}
			else if (snailCageFrame[num16] >= 14 && snailCageFrame[num16] <= 18)
			{
				snailCageFrameCounter[num16]++;
				if (snailCageFrameCounter[num16] >= 5)
				{
					snailCageFrameCounter[num16] = 0;
					snailCageFrame[num16]++;
				}
				if (snailCageFrame[num16] > 18)
				{
					snailCageFrame[num16] = 20;
				}
			}
			else
			{
				if (snailCageFrame[num16] != 19 && snailCageFrame[num16] != 20)
				{
					continue;
				}
				snailCageFrameCounter[num16]++;
				if (snailCageFrameCounter[num16] <= rand.Next(60, 7200))
				{
					continue;
				}
				snailCageFrameCounter[num16] = 0;
				if (rand.Next(4) == 0)
				{
					if (rand.Next(3) == 0)
					{
						snailCageFrame[num16] = 2;
					}
					else if (snailCageFrame[num16] == 19)
					{
						snailCageFrame[num16] = 20;
					}
					else
					{
						snailCageFrame[num16] = 19;
					}
				}
			}
		}
		for (int num17 = 0; num17 < cageFrames; num17++)
		{
			if (snail2CageFrame[num17] >= 0 && snail2CageFrame[num17] <= 13)
			{
				snail2CageFrameCounter[num17]++;
				if (snail2CageFrameCounter[num17] <= rand.Next(30, 2700))
				{
					continue;
				}
				if (snail2CageFrame[num17] == 8 && rand.Next(2) == 0)
				{
					snail2CageFrame[num17] = 14;
				}
				else if (snail2CageFrame[num17] == 1 && rand.Next(3) == 0)
				{
					snail2CageFrame[num17] = 19;
				}
				else if (snail2CageFrame[num17] == 1 && rand.Next(3) == 0)
				{
					snail2CageFrame[num17] = 20;
				}
				else
				{
					snail2CageFrame[num17]++;
					if (snail2CageFrame[num17] > 13)
					{
						snail2CageFrame[num17] = 0;
					}
				}
				snail2CageFrameCounter[num17] = 0;
			}
			else if (snail2CageFrame[num17] >= 14 && snail2CageFrame[num17] <= 18)
			{
				snail2CageFrameCounter[num17]++;
				if (snail2CageFrameCounter[num17] >= 5)
				{
					snail2CageFrameCounter[num17] = 0;
					snail2CageFrame[num17]++;
				}
				if (snail2CageFrame[num17] > 18)
				{
					snail2CageFrame[num17] = 20;
				}
			}
			else
			{
				if (snail2CageFrame[num17] != 19 && snail2CageFrame[num17] != 20)
				{
					continue;
				}
				snail2CageFrameCounter[num17]++;
				if (snail2CageFrameCounter[num17] <= rand.Next(45, 5400))
				{
					continue;
				}
				snail2CageFrameCounter[num17] = 0;
				if (rand.Next(4) == 0)
				{
					if (rand.Next(3) == 0)
					{
						snail2CageFrame[num17] = 2;
					}
					else if (snail2CageFrame[num17] == 19)
					{
						snail2CageFrame[num17] = 20;
					}
					else
					{
						snail2CageFrame[num17] = 19;
					}
				}
			}
		}
		for (int num18 = 0; num18 < cageFrames; num18++)
		{
			if (frogCageFrame[num18] == 0)
			{
				frogCageFrameCounter[num18]++;
				if (frogCageFrameCounter[num18] > rand.Next(45, 3600))
				{
					if (rand.Next(10) == 0)
					{
						frogCageFrame[num18] = 1;
					}
					else
					{
						frogCageFrame[num18] = 12;
					}
					frogCageFrameCounter[num18] = 0;
				}
			}
			else if (frogCageFrame[num18] >= 1 && frogCageFrame[num18] <= 5)
			{
				frogCageFrameCounter[num18]++;
				if (frogCageFrameCounter[num18] >= 5)
				{
					frogCageFrame[num18]++;
					frogCageFrameCounter[num18] = 0;
				}
			}
			else if (frogCageFrame[num18] >= 12 && frogCageFrame[num18] <= 17)
			{
				frogCageFrameCounter[num18]++;
				if (frogCageFrameCounter[num18] >= 5)
				{
					frogCageFrameCounter[num18] = 0;
					frogCageFrame[num18]++;
				}
				if (frogCageFrame[num18] > 17)
				{
					if (rand.Next(3) == 0)
					{
						frogCageFrame[num18] = 0;
					}
					else
					{
						frogCageFrame[num18] = 12;
					}
				}
			}
			else if (frogCageFrame[num18] == 6)
			{
				frogCageFrameCounter[num18]++;
				if (frogCageFrameCounter[num18] > rand.Next(45, 3600))
				{
					if (rand.Next(10) == 0)
					{
						frogCageFrame[num18] = 7;
					}
					else
					{
						frogCageFrame[num18] = 18;
					}
					frogCageFrameCounter[num18] = 0;
				}
			}
			else if (frogCageFrame[num18] >= 7 && frogCageFrame[num18] <= 11)
			{
				frogCageFrameCounter[num18]++;
				if (frogCageFrameCounter[num18] >= 5)
				{
					frogCageFrame[num18]++;
					frogCageFrameCounter[num18] = 0;
					if (frogCageFrame[num18] > 11)
					{
						frogCageFrame[num18] = 0;
					}
				}
			}
			else
			{
				if (frogCageFrame[num18] < 18 || frogCageFrame[num18] > 23)
				{
					continue;
				}
				frogCageFrameCounter[num18]++;
				if (frogCageFrameCounter[num18] >= 5)
				{
					frogCageFrameCounter[num18] = 0;
					frogCageFrame[num18]++;
				}
				if (frogCageFrame[num18] > 17)
				{
					if (rand.Next(3) == 0)
					{
						frogCageFrame[num18] = 6;
					}
					else
					{
						frogCageFrame[num18] = 18;
					}
				}
			}
		}
		for (int num19 = 0; num19 < cageFrames; num19++)
		{
			if (mouseCageFrame[num19] >= 0 && mouseCageFrame[num19] <= 1)
			{
				mouseCageFrameCounter[num19]++;
				if (mouseCageFrameCounter[num19] >= 5)
				{
					mouseCageFrame[num19]++;
					if (mouseCageFrame[num19] > 1)
					{
						mouseCageFrame[num19] = 0;
					}
					mouseCageFrameCounter[num19] = 0;
					if (rand.Next(15) == 0)
					{
						mouseCageFrame[num19] = 4;
					}
				}
			}
			else if (mouseCageFrame[num19] >= 4 && mouseCageFrame[num19] <= 7)
			{
				mouseCageFrameCounter[num19]++;
				if (mouseCageFrameCounter[num19] >= 5)
				{
					mouseCageFrameCounter[num19] = 0;
					mouseCageFrame[num19]++;
				}
				if (mouseCageFrame[num19] > 7)
				{
					mouseCageFrame[num19] = 2;
				}
			}
			else if (mouseCageFrame[num19] >= 2 && mouseCageFrame[num19] <= 3)
			{
				mouseCageFrameCounter[num19]++;
				if (mouseCageFrameCounter[num19] >= 5)
				{
					mouseCageFrame[num19]++;
					if (mouseCageFrame[num19] > 3)
					{
						mouseCageFrame[num19] = 2;
					}
					mouseCageFrameCounter[num19] = 0;
					if (rand.Next(15) == 0)
					{
						mouseCageFrame[num19] = 8;
					}
					else if (rand.Next(15) == 0)
					{
						mouseCageFrame[num19] = 12;
					}
				}
			}
			else if (mouseCageFrame[num19] >= 8 && mouseCageFrame[num19] <= 11)
			{
				mouseCageFrameCounter[num19]++;
				if (mouseCageFrameCounter[num19] >= 5)
				{
					mouseCageFrameCounter[num19] = 0;
					mouseCageFrame[num19]++;
				}
				if (mouseCageFrame[num19] > 11)
				{
					mouseCageFrame[num19] = 0;
				}
			}
			else if (mouseCageFrame[num19] >= 12 && mouseCageFrame[num19] <= 13)
			{
				mouseCageFrameCounter[num19]++;
				if (mouseCageFrameCounter[num19] >= 5)
				{
					mouseCageFrameCounter[num19] = 0;
					mouseCageFrame[num19]++;
				}
			}
			else if (mouseCageFrame[num19] >= 14 && mouseCageFrame[num19] <= 17)
			{
				mouseCageFrameCounter[num19]++;
				if (mouseCageFrameCounter[num19] >= 5)
				{
					mouseCageFrameCounter[num19] = 0;
					mouseCageFrame[num19]++;
					if (mouseCageFrame[num19] > 17 && rand.Next(20) != 0)
					{
						mouseCageFrame[num19] = 14;
					}
				}
			}
			else
			{
				if (mouseCageFrame[num19] < 18 || mouseCageFrame[num19] > 19)
				{
					continue;
				}
				mouseCageFrameCounter[num19]++;
				if (mouseCageFrameCounter[num19] >= 5)
				{
					mouseCageFrameCounter[num19] = 0;
					mouseCageFrame[num19]++;
					if (mouseCageFrame[num19] > 19)
					{
						mouseCageFrame[num19] = 0;
					}
				}
			}
		}
		for (int num20 = 0; num20 < cageFrames; num20++)
		{
			wormCageFrameCounter[num20]++;
			if (wormCageFrameCounter[num20] < rand.Next(30, 91))
			{
				continue;
			}
			wormCageFrameCounter[num20] = 0;
			if (rand.Next(4) != 0)
			{
				continue;
			}
			wormCageFrame[num20]++;
			if (wormCageFrame[num20] == 9 && rand.Next(2) == 0)
			{
				wormCageFrame[num20] = 0;
			}
			if (wormCageFrame[num20] > 18)
			{
				if (rand.Next(2) == 0)
				{
					wormCageFrame[num20] = 9;
				}
				else
				{
					wormCageFrame[num20] = 0;
				}
			}
		}
		int num21 = 0;
		for (int num22 = 0; num22 < 3; num22++)
		{
			switch (num22)
			{
			case 0:
				num21 = 24;
				break;
			case 1:
				num21 = 31;
				break;
			case 2:
				num21 = 34;
				break;
			}
			for (int num23 = 0; num23 < cageFrames; num23++)
			{
				if (++slugCageFrameCounter[num22, num23] >= rand.Next(5, 15))
				{
					slugCageFrameCounter[num22, num23] = 0;
					if (++slugCageFrame[num22, num23] >= num21)
					{
						slugCageFrame[num22, num23] = 0;
					}
				}
			}
		}
		for (int num25 = 0; num25 < cageFrames; num25++)
		{
			if (grasshopperCageFrame[num25] >= 0 && grasshopperCageFrame[num25] <= 1)
			{
				grasshopperCageFrameCounter[num25]++;
				if (grasshopperCageFrameCounter[num25] >= 5)
				{
					grasshopperCageFrame[num25]++;
					if (grasshopperCageFrame[num25] > 1)
					{
						grasshopperCageFrame[num25] = 0;
					}
					grasshopperCageFrameCounter[num25] = 0;
					if (rand.Next(15) == 0)
					{
						grasshopperCageFrame[num25] = 2;
					}
				}
			}
			else if (grasshopperCageFrame[num25] >= 2 && grasshopperCageFrame[num25] <= 5)
			{
				grasshopperCageFrameCounter[num25]++;
				if (grasshopperCageFrameCounter[num25] >= 5)
				{
					grasshopperCageFrameCounter[num25] = 0;
					grasshopperCageFrame[num25]++;
				}
				if (grasshopperCageFrame[num25] > 5)
				{
					grasshopperCageFrame[num25] = 6;
				}
			}
			else if (grasshopperCageFrame[num25] >= 6 && grasshopperCageFrame[num25] <= 7)
			{
				grasshopperCageFrameCounter[num25]++;
				if (grasshopperCageFrameCounter[num25] >= 5)
				{
					grasshopperCageFrame[num25]++;
					if (grasshopperCageFrame[num25] > 7)
					{
						grasshopperCageFrame[num25] = 6;
					}
					grasshopperCageFrameCounter[num25] = 0;
					if (rand.Next(15) == 0)
					{
						grasshopperCageFrame[num25] = 8;
					}
				}
			}
			else if (grasshopperCageFrame[num25] >= 8 && grasshopperCageFrame[num25] <= 11)
			{
				grasshopperCageFrameCounter[num25]++;
				if (grasshopperCageFrameCounter[num25] >= 5)
				{
					grasshopperCageFrameCounter[num25] = 0;
					grasshopperCageFrame[num25]++;
				}
				if (grasshopperCageFrame[num25] > 11)
				{
					grasshopperCageFrame[num25] = 0;
				}
			}
		}
		for (int num26 = 0; num26 < cageFrames; num26++)
		{
			maggotCageFrameCounter[num26]++;
			bool num54 = maggotCageFrame[num26] == 0 || maggotCageFrame[num26] == 6 || maggotCageFrame[num26] == 18;
			int num27 = 8;
			if (num54)
			{
				num27 = rand.Next(100, 140);
			}
			if (maggotCageFrameCounter[num26] < num27)
			{
				continue;
			}
			maggotCageFrameCounter[num26] = 0;
			if (maggotCageFrame[num26] == 0)
			{
				if (rand.Next(3) == 0)
				{
					maggotCageFrame[num26] = 13;
				}
				else
				{
					maggotCageFrame[num26] = 1;
				}
				continue;
			}
			if (maggotCageFrame[num26] == 12)
			{
				maggotCageFrame[num26] = 0;
				continue;
			}
			maggotCageFrame[num26]++;
			if (maggotCageFrame[num26] > 23)
			{
				maggotCageFrame[num26] = 6;
			}
		}
		for (int num28 = 0; num28 < cageFrames; num28++)
		{
			ladybugCageFrameCounter[num28]++;
			bool flag6 = ladybugCageFrame[num28] == 3 || ladybugCageFrame[num28] == 7 || ladybugCageFrame[num28] >= 17;
			int num29 = rand.Next(10, 12);
			if (ladybugCageFrame[num28] == 18)
			{
				num29 = rand.Next(160, 241);
			}
			else if (flag6)
			{
				num29 = rand.Next(198, 206);
			}
			else if (ladybugCageFrame[num28] >= 8 && ladybugCageFrame[num28] <= 16)
			{
				num29 = 5;
			}
			if (ladybugCageFrameCounter[num28] < num29)
			{
				continue;
			}
			ladybugCageFrameCounter[num28] = 0;
			if (ladybugCageFrame[num28] < 18)
			{
				if ((ladybugCageFrame[num28] == 2 || ladybugCageFrame[num28] == 5) && rand.Next(3) == 0)
				{
					ladybugCageFrame[num28] = 17;
				}
				else if (ladybugCageFrame[num28] == 3 || ladybugCageFrame[num28] == 12)
				{
					switch (rand.Next(3))
					{
					case 0:
					case 1:
						ladybugCageFrame[num28] = 4;
						break;
					case 2:
						ladybugCageFrame[num28] = 13;
						break;
					}
				}
				else if (ladybugCageFrame[num28] == 7 || ladybugCageFrame[num28] == 16)
				{
					switch (rand.Next(3))
					{
					case 0:
					case 1:
						ladybugCageFrame[num28] = 0;
						break;
					case 2:
						ladybugCageFrame[num28] = 8;
						break;
					}
				}
				else
				{
					ladybugCageFrame[num28]++;
				}
			}
			else
			{
				ladybugCageFrame[num28] = ((rand.Next(2) == 0) ? 13 : 4);
			}
		}
		for (int num30 = 0; num30 < cageFrames; num30++)
		{
			ratCageFrameCounter[num30]++;
			bool flag7 = ratCageFrame[num30] == 0 || ratCageFrame[num30] == 4;
			bool num55 = ratCageFrame[num30] == 8 || ratCageFrame[num30] == 9 || ratCageFrame[num30] == 10 || ratCageFrame[num30] == 11;
			bool flag8 = ratCageFrame[num30] > 11;
			int num31 = 5;
			if (flag7)
			{
				num31 = rand.Next(40, 70);
			}
			if (num55)
			{
				num31 = rand.Next(70, 110);
			}
			if (flag8)
			{
				num31 = 180;
			}
			if (ratCageFrameCounter[num30] >= num31)
			{
				ratCageFrameCounter[num30] = 0;
				if (ratCageFrame[num30] == 0 && rand.Next(2) == 0)
				{
					if (rand.Next(3) != 0)
					{
						ratCageFrame[num30] = 12;
					}
					else
					{
						ratCageFrame[num30] = 8;
					}
					continue;
				}
				if (ratCageFrame[num30] == 4 && rand.Next(2) == 0)
				{
					ratCageFrame[num30] = 10;
					continue;
				}
				if (ratCageFrame[num30] == 7 || ratCageFrame[num30] == 9 || ratCageFrame[num30] == 12)
				{
					ratCageFrame[num30] = 0;
					continue;
				}
				if (ratCageFrame[num30] == 11)
				{
					ratCageFrame[num30] = 4;
					continue;
				}
				ratCageFrame[num30]++;
				if (ratCageFrame[num30] > 16)
				{
					ratCageFrame[num30] = 0;
				}
			}
			else if (ratCageFrame[num30] > 11)
			{
				int num32 = ratCageFrameCounter[num30] % 90;
				if (num32 > 80)
				{
					ratCageFrame[num30] = 12;
				}
				else if (num32 > 70)
				{
					ratCageFrame[num30] = 13;
				}
				else if (num32 > 60)
				{
					ratCageFrame[num30] = 14;
				}
				else if (num32 > 50)
				{
					ratCageFrame[num30] = 15;
				}
				else if (num32 > 40)
				{
					ratCageFrame[num30] = 16;
				}
				else if (num32 > 30)
				{
					ratCageFrame[num30] = 15;
				}
				else if (num32 > 20)
				{
					ratCageFrame[num30] = 14;
				}
				else if (num32 > 10)
				{
					ratCageFrame[num30] = 13;
				}
				else
				{
					ratCageFrame[num30] = 12;
				}
			}
			else if (ratCageFrameCounter[num30] % 10 == 0)
			{
				if (ratCageFrame[num30] == 8 || ratCageFrame[num30] == 10)
				{
					ratCageFrame[num30]++;
				}
				else if (ratCageFrame[num30] == 9 || ratCageFrame[num30] == 11)
				{
					ratCageFrame[num30]--;
				}
			}
		}
		for (int num34 = 0; num34 < cageFrames; num34++)
		{
			waterStriderCageFrameCounter[num34]++;
			bool flag9 = waterStriderCageFrame[num34] == 0 || waterStriderCageFrame[num34] == 8;
			bool num56 = waterStriderCageFrame[num34] == 17 || waterStriderCageFrame[num34] == 20;
			int num35 = 5;
			if (flag9)
			{
				num35 = rand.Next(110, 210);
			}
			if (num56)
			{
				num35 = rand.Next(150, 260);
			}
			if (waterStriderCageFrameCounter[num34] < num35)
			{
				continue;
			}
			waterStriderCageFrameCounter[num34] = 0;
			if (waterStriderCageFrame[num34] == 0 && rand.Next(2) == 0)
			{
				waterStriderCageFrame[num34] = 16;
				continue;
			}
			if (waterStriderCageFrame[num34] == 8 && rand.Next(2) == 0)
			{
				waterStriderCageFrame[num34] = 19;
				continue;
			}
			if (waterStriderCageFrame[num34] == 15 || waterStriderCageFrame[num34] == 18)
			{
				waterStriderCageFrame[num34] = 0;
				continue;
			}
			waterStriderCageFrame[num34]++;
			if (waterStriderCageFrame[num34] > 21)
			{
				waterStriderCageFrame[num34] = 8;
			}
		}
		fairyJarFrameCounter[0]++;
		if (fairyJarFrameCounter[0] > 5)
		{
			fairyJarFrameCounter[0] = 0;
			fairyJarFrame[0]++;
			if (fairyJarFrame[0] > 11)
			{
				fairyJarFrame[0] = 0;
			}
		}
		for (int num36 = 1; num36 < cageFrames; num36++)
		{
			int num37 = fairyJarFrame[0] + num36 % 12;
			if (num36 % 2 == 0)
			{
				num37++;
			}
			if (num36 % 5 == 0)
			{
				num37++;
			}
			if (num36 % 8 == 0)
			{
				num37++;
			}
			while (num37 >= 12)
			{
				num37 -= 12;
			}
			fairyJarFrame[num36] = num37;
		}
		for (int num38 = 0; num38 < cageFrames; num38++)
		{
			byte maxValue = 5;
			if (fishBowlFrameMode[num38] == 1)
			{
				if (rand.Next(900) == 0)
				{
					fishBowlFrameMode[num38] = (byte)rand.Next(maxValue);
				}
				fishBowlFrameCounter[num38]++;
				if (fishBowlFrameCounter[num38] < 5)
				{
					continue;
				}
				fishBowlFrameCounter[num38] = 0;
				if (fishBowlFrame[num38] == 10)
				{
					if (rand.Next(20) == 0)
					{
						fishBowlFrame[num38] = 11;
						fishBowlFrameMode[num38] = 0;
					}
					else
					{
						fishBowlFrame[num38] = 1;
					}
				}
				else
				{
					fishBowlFrame[num38]++;
				}
			}
			else if (fishBowlFrameMode[num38] == 2)
			{
				if (rand.Next(3600) == 0)
				{
					fishBowlFrameMode[num38] = (byte)rand.Next(maxValue);
				}
				fishBowlFrameCounter[num38]++;
				if (fishBowlFrameCounter[num38] < 20)
				{
					continue;
				}
				fishBowlFrameCounter[num38] = 0;
				if (fishBowlFrame[num38] == 10)
				{
					if (rand.Next(20) == 0)
					{
						fishBowlFrame[num38] = 11;
						fishBowlFrameMode[num38] = 0;
					}
					else
					{
						fishBowlFrame[num38] = 1;
					}
				}
				else
				{
					fishBowlFrame[num38]++;
				}
			}
			else if (fishBowlFrameMode[num38] == 3)
			{
				if (rand.Next(3600) == 0)
				{
					fishBowlFrameMode[num38] = (byte)rand.Next(maxValue);
				}
				fishBowlFrameCounter[num38]++;
				if (fishBowlFrameCounter[num38] < rand.Next(5, 3600))
				{
					continue;
				}
				fishBowlFrameCounter[num38] = 0;
				if (fishBowlFrame[num38] == 10)
				{
					if (rand.Next(20) == 0)
					{
						fishBowlFrame[num38] = 11;
						fishBowlFrameMode[num38] = 0;
					}
					else
					{
						fishBowlFrame[num38] = 1;
					}
				}
				else
				{
					fishBowlFrame[num38]++;
				}
			}
			else if (fishBowlFrame[num38] <= 10)
			{
				if (rand.Next(3600) == 0)
				{
					fishBowlFrameMode[num38] = (byte)rand.Next(maxValue);
				}
				fishBowlFrameCounter[num38]++;
				if (fishBowlFrameCounter[num38] < 10)
				{
					continue;
				}
				fishBowlFrameCounter[num38] = 0;
				if (fishBowlFrame[num38] == 10)
				{
					if (rand.Next(12) == 0)
					{
						fishBowlFrame[num38] = 11;
					}
					else
					{
						fishBowlFrame[num38] = 1;
					}
				}
				else
				{
					fishBowlFrame[num38]++;
				}
			}
			else if (fishBowlFrame[num38] == 12 || fishBowlFrame[num38] == 13)
			{
				fishBowlFrameCounter[num38]++;
				if (fishBowlFrameCounter[num38] < 10)
				{
					continue;
				}
				fishBowlFrameCounter[num38] = 0;
				fishBowlFrame[num38]++;
				if (fishBowlFrame[num38] > 13)
				{
					if (rand.Next(20) == 0)
					{
						fishBowlFrame[num38] = 14;
					}
					else
					{
						fishBowlFrame[num38] = 12;
					}
				}
			}
			else
			{
				if (fishBowlFrame[num38] < 11)
				{
					continue;
				}
				fishBowlFrameCounter[num38]++;
				if (fishBowlFrameCounter[num38] >= 10)
				{
					fishBowlFrameCounter[num38] = 0;
					fishBowlFrame[num38]++;
					if (fishBowlFrame[num38] > 16)
					{
						fishBowlFrame[num38] = 4;
					}
				}
			}
		}
		for (int num39 = 0; num39 < cageFrames; num39++)
		{
			lavaFishBowlFrameCounter[num39]++;
			if (lavaFishBowlFrameCounter[num39] > 4 + rand.Next(3))
			{
				lavaFishBowlFrameCounter[num39] = 0;
				lavaFishBowlFrame[num39]++;
				if (lavaFishBowlFrame[num39] > 26)
				{
					lavaFishBowlFrame[num39] = 0;
				}
			}
		}
		for (int num40 = 0; num40 < 9; num40++)
		{
			for (int num41 = 0; num41 < cageFrames; num41++)
			{
				butterflyCageFrameCounter[num40, num41]++;
				if (rand.Next(3600) == 0)
				{
					butterflyCageMode[num40, num41] = (byte)rand.Next(5);
					if (rand.Next(2) == 0)
					{
						butterflyCageMode[num40, num41] += 10;
					}
				}
				int num42 = rand.Next(3, 16);
				if (butterflyCageMode[num40, num41] == 1 || butterflyCageMode[num40, num41] == 11)
				{
					num42 = 3;
				}
				if (butterflyCageMode[num40, num41] == 2 || butterflyCageMode[num40, num41] == 12)
				{
					num42 = 5;
				}
				if (butterflyCageMode[num40, num41] == 3 || butterflyCageMode[num40, num41] == 13)
				{
					num42 = 10;
				}
				if (butterflyCageMode[num40, num41] == 4 || butterflyCageMode[num40, num41] == 14)
				{
					num42 = 15;
				}
				if (butterflyCageMode[num40, num41] >= 10)
				{
					if (butterflyCageFrame[num40, num41] <= 7)
					{
						if (butterflyCageFrameCounter[num40, num41] < num42)
						{
							continue;
						}
						butterflyCageFrameCounter[num40, num41] = 0;
						butterflyCageFrame[num40, num41]--;
						if (butterflyCageFrame[num40, num41] < 0)
						{
							butterflyCageFrame[num40, num41] = 7;
						}
						if (butterflyCageFrame[num40, num41] != 1 && butterflyCageFrame[num40, num41] != 4 && butterflyCageFrame[num40, num41] != 6)
						{
							continue;
						}
						if (rand.Next(20) == 0)
						{
							butterflyCageFrame[num40, num41] += 8;
						}
						else if (rand.Next(6) == 0)
						{
							if (butterflyCageMode[num40, num41] >= 10)
							{
								butterflyCageMode[num40, num41] -= 10;
							}
							else
							{
								butterflyCageMode[num40, num41] += 10;
							}
						}
					}
					else
					{
						if (butterflyCageFrameCounter[num40, num41] < num42)
						{
							continue;
						}
						butterflyCageFrameCounter[num40, num41] = 0;
						butterflyCageFrame[num40, num41]--;
						if (butterflyCageFrame[num40, num41] < 8)
						{
							butterflyCageFrame[num40, num41] = 14;
						}
						if (butterflyCageFrame[num40, num41] != 9 && butterflyCageFrame[num40, num41] != 12 && butterflyCageFrame[num40, num41] != 14)
						{
							continue;
						}
						if (rand.Next(20) == 0)
						{
							butterflyCageFrame[num40, num41] -= 8;
						}
						else if (rand.Next(6) == 0)
						{
							if (butterflyCageMode[num40, num41] >= 10)
							{
								butterflyCageMode[num40, num41] -= 10;
							}
							else
							{
								butterflyCageMode[num40, num41] += 10;
							}
						}
					}
				}
				else if (butterflyCageFrame[num40, num41] <= 7)
				{
					if (butterflyCageFrameCounter[num40, num41] >= num42)
					{
						butterflyCageFrameCounter[num40, num41] = 0;
						butterflyCageFrame[num40, num41]++;
						if (butterflyCageFrame[num40, num41] > 7)
						{
							butterflyCageFrame[num40, num41] = 0;
						}
						if ((butterflyCageFrame[num40, num41] == 1 || butterflyCageFrame[num40, num41] == 4 || butterflyCageFrame[num40, num41] == 6) && rand.Next(10) == 0)
						{
							butterflyCageFrame[num40, num41] += 8;
						}
					}
				}
				else if (butterflyCageFrameCounter[num40, num41] >= num42)
				{
					butterflyCageFrameCounter[num40, num41] = 0;
					butterflyCageFrame[num40, num41]++;
					if (butterflyCageFrame[num40, num41] > 15)
					{
						butterflyCageFrame[num40, num41] = 8;
					}
					if ((butterflyCageFrame[num40, num41] == 9 || butterflyCageFrame[num40, num41] == 12 || butterflyCageFrame[num40, num41] == 14) && rand.Next(10) == 0)
					{
						butterflyCageFrame[num40, num41] -= 8;
					}
				}
			}
		}
		UpdateDragonflyJarFrames();
		for (int num43 = 0; num43 < 3; num43++)
		{
			for (int num44 = 0; num44 < cageFrames; num44++)
			{
				jellyfishCageFrameCounter[num43, num44]++;
				if (jellyfishCageMode[num43, num44] == 0 && rand.Next(1800) == 0)
				{
					jellyfishCageMode[num43, num44] = 1;
				}
				if (jellyfishCageMode[num43, num44] == 2 && rand.Next(60) == 0)
				{
					jellyfishCageMode[num43, num44] = 3;
				}
				int num45 = 1;
				if (jellyfishCageMode[num43, num44] == 0)
				{
					num45 = rand.Next(10, 20);
				}
				if (jellyfishCageMode[num43, num44] == 1)
				{
					num45 = rand.Next(15, 25);
				}
				if (jellyfishCageMode[num43, num44] == 2)
				{
					num45 = rand.Next(4, 9);
				}
				if (jellyfishCageMode[num43, num44] == 3)
				{
					num45 = rand.Next(15, 25);
				}
				if (jellyfishCageMode[num43, num44] == 0 && jellyfishCageFrame[num43, num44] <= 3 && jellyfishCageFrameCounter[num43, num44] >= num45)
				{
					jellyfishCageFrameCounter[num43, num44] = 0;
					jellyfishCageFrame[num43, num44]++;
					if (jellyfishCageFrame[num43, num44] >= 4)
					{
						jellyfishCageFrame[num43, num44] = 0;
					}
				}
				if (jellyfishCageMode[num43, num44] == 1 && jellyfishCageFrame[num43, num44] <= 7 && jellyfishCageFrameCounter[num43, num44] >= num45)
				{
					jellyfishCageFrameCounter[num43, num44] = 0;
					jellyfishCageFrame[num43, num44]++;
					if (jellyfishCageFrame[num43, num44] >= 7)
					{
						jellyfishCageMode[num43, num44] = 2;
					}
				}
				if (jellyfishCageMode[num43, num44] == 2 && jellyfishCageFrame[num43, num44] <= 9 && jellyfishCageFrameCounter[num43, num44] >= num45)
				{
					jellyfishCageFrameCounter[num43, num44] = 0;
					jellyfishCageFrame[num43, num44]++;
					if (jellyfishCageFrame[num43, num44] >= 9)
					{
						jellyfishCageFrame[num43, num44] = 7;
					}
				}
				if (jellyfishCageMode[num43, num44] == 3 && jellyfishCageFrame[num43, num44] <= 10 && jellyfishCageFrameCounter[num43, num44] >= num45)
				{
					jellyfishCageFrameCounter[num43, num44] = 0;
					jellyfishCageFrame[num43, num44]++;
					if (jellyfishCageFrame[num43, num44] >= 10)
					{
						jellyfishCageFrame[num43, num44] = 3;
						jellyfishCageMode[num43, num44] = 0;
					}
				}
			}
		}
	}

	private static void UpdateOwlCageFrames()
	{
		for (int i = 0; i < cageFrames; i++)
		{
			UpdateOwlCageFrame(owlCageFrame, owlCageFrameCounter, i);
		}
	}

	private static void UpdateDragonflyJarFrames()
	{
		for (int i = 0; i < dragonflyJarFrameCounter.GetLength(0); i++)
		{
			for (int j = 0; j < cageFrames; j++)
			{
				UpdateDragonflyJarFrame(dragonflyJarFrame, dragonflyJarFrameCounter, i, j);
			}
		}
	}

	private static void UpdateOwlCageFrame(int[] frames, int[] frameCounters, int style)
	{
		if (frameCounters[style] % 40 != 0 || rand.Next(80) == 0)
		{
			frameCounters[style]++;
		}
		if ((frameCounters[style] + 1) % 40 == 39)
		{
			frameCounters[style] = 40 * rand.Next(4);
		}
		int num = frameCounters[style] % 40 / 10;
		int num2 = frameCounters[style] / 40;
		int num3 = 0;
		switch (num2)
		{
		case 0:
			if (num == 3)
			{
				num = 1;
			}
			num3 = num;
			break;
		case 1:
			if (num == 3)
			{
				num = 1;
			}
			num3 = 0;
			if (num != 0)
			{
				num3 = 8 - num;
			}
			break;
		case 2:
			num3 = 0;
			if (num != 0)
			{
				num3 = 7 + num;
			}
			break;
		case 3:
			num3 = 0;
			if (num != 0)
			{
				num3 = 11 + num;
			}
			break;
		}
		frames[style] = num3;
	}

	private static void UpdateDragonflyJarFrame(int[,] frames, int[,] frameCounters, int style, int variation)
	{
		frameCounters[style, variation]++;
		switch (frames[style, variation])
		{
		case 0:
			if (frameCounters[style, variation] >= 300 && rand.Next(60) == 0)
			{
				frameCounters[style, variation] = 0;
				frames[style, variation] = rand.NextFromList<int>(1, 5, 9);
			}
			break;
		case 1:
		case 5:
		case 9:
			if (frameCounters[style, variation] >= 100)
			{
				frameCounters[style, variation] = 0;
				if (frames[style, variation] == 1)
				{
					frames[style, variation] = rand.NextFromList<int>(0, 5, 5, 9, 9);
				}
				else
				{
					frames[style, variation] = 1;
				}
			}
			else if (frameCounters[style, variation] >= 6)
			{
				frameCounters[style, variation] = 0;
				frames[style, variation]++;
			}
			break;
		case 2:
		case 3:
		case 4:
		case 6:
		case 7:
		case 8:
		case 10:
		case 11:
		case 12:
		{
			int num = frames[style, variation] - 1;
			int num2 = num % 4;
			num2--;
			int num3 = frameCounters[style, variation] / 4 % 4;
			if (num3 > 2)
			{
				num3 = 4 - num3;
			}
			int num4 = num - num2 + 1 + num3;
			frames[style, variation] = num4;
			if (frameCounters[style, variation] >= 40 && rand.Next(30) == 0)
			{
				frameCounters[style, variation] = 100;
				frames[style, variation] = num - num2 + 1 - 1;
			}
			break;
		}
		}
	}

	public static void DoUpdate_AnimateItemIcons()
	{
		lock (itemAnimationsRegistered)
		{
			DoUpdate_AnimateItemIcons_Inner();
		}
	}

	private static void DoUpdate_AnimateItemIcons_Inner()
	{
		for (int i = 0; i < itemAnimationsRegistered.Count; i++)
		{
			int num = itemAnimationsRegistered[i];
			if (itemAnimations[num] != null)
			{
				itemAnimations[num].Update();
			}
		}
	}

	public static void QueueMainThreadAction(Action action)
	{
		_mainThreadActions.Enqueue(action);
	}

	private static void ConsumeAllMainThreadActions()
	{
		Action result;
		while (_mainThreadActions.TryDequeue(out result))
		{
			result();
		}
	}

	protected override void Update(GameTime gameTime)
	{
		if (!IsEnginePreloaded)
		{
			IsEnginePreloaded = true;
			if (Main.OnEnginePreload != null)
			{
				Main.OnEnginePreload();
			}
		}
		if (!_isDrawingOrUpdating)
		{
			_isDrawingOrUpdating = true;
			try
			{
				DoUpdate(ref gameTime);
			}
			catch (Exception e)
			{
				Logging.Terraria.Error((object)e);
			}
			CinematicManager.Instance.Update(gameTime);
			if (netMode == 2)
			{
				for (int i = 0; i < 256; i++)
				{
					if (Netplay.Clients[i].Socket != null)
					{
						Netplay.Clients[i].Socket.SendQueuedPackets();
					}
				}
			}
			else if (netMode == 1)
			{
				Netplay.Connection.Socket.SendQueuedPackets();
			}
			_isDrawingOrUpdating = false;
		}
		((Game)this).Update(gameTime);
		ConsumeAllMainThreadActions();
		if (GameAskedToQuit)
		{
			QuitGame();
		}
	}

	public void UpdateViewZoomKeys()
	{
		if (!inFancyUI)
		{
			float num = 0.02f;
			if (PlayerInput.Triggers.Current.ViewZoomIn)
			{
				GameZoomTarget = Utils.Clamp(GameZoomTarget + num, 1f, 2f);
			}
			if (PlayerInput.Triggers.Current.ViewZoomOut)
			{
				GameZoomTarget = Utils.Clamp(GameZoomTarget - num, 1f, 2f);
			}
		}
	}

	public static void NotifyOfEvent(GameNotificationType type)
	{
		if (!dedServ && !((Game)instance).IsActive && _flashNotificationType.HasFlag(type))
		{
			QueueMainThreadAction(delegate
			{
				Platform.Get<IWindowService>().StartFlashingIcon(((Game)instance).Window);
			});
		}
	}

	protected void DoUpdate(ref GameTime gameTime)
	{
		//IL_04d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Expected O, but got Unknown
		gameTimeCache = gameTime;
		if (showSplash)
		{
			UpdateAudio();
			GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
			ChromaInitializer.UpdateEvents();
			Chroma.Update(GlobalTimeWrappedHourly);
			return;
		}
		PartySky.MultipleSkyWorkaroundFix = true;
		LocalPlayer.cursorItemIconReversed = false;
		if (!GlobalTimerPaused)
		{
			GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
		}
		UpdateCreativeGameModeOverride();
		UpdateWorldPreparationState();
		if (Player.BlockInteractionWithProjectiles > 0 && !mouseRight && mouseRightRelease)
		{
			Player.BlockInteractionWithProjectiles--;
		}
		PlayerInput.SetZoom_UI();
		for (int num = DelayedProcesses.Count - 1; num >= 0; num--)
		{
			IEnumerator enumerator = DelayedProcesses[num];
			if (!enumerator.MoveNext())
			{
				DelayedProcesses.Remove(enumerator);
			}
		}
		if (!gameMenu || menuMode != 888)
		{
			MenuUI.SetState(null);
		}
		else
		{
			InGameUI.SetState(null);
		}
		CurrentInputTextTakerOverride = null;
		if (!dedServ)
		{
			AchievementAdvisor.Update();
		}
		PlayerInput.SetZoom_Unscaled();
		MouseOversTryToClear();
		PlayerInput.ResetInputsOnActiveStateChange();
		if (!dedServ && Main.OnTickForThirdPartySoftwareOnly != null)
		{
			Main.OnTickForThirdPartySoftwareOnly();
		}
		if (_hasPendingNetmodeChange)
		{
			netMode = _targetNetMode;
			_hasPendingNetmodeChange = false;
		}
		if (CaptureManager.Instance.IsCapturing)
		{
			return;
		}
		if (ActivePlayerFileData != null)
		{
			ActivePlayerFileData.UpdatePlayTimer();
		}
		Netplay.UpdateInMainThread();
		gameInactive = !((Game)this).IsActive;
		if (changeTheTitle)
		{
			changeTheTitle = false;
			SetTitle();
		}
		_worldUpdateTimeTester.Restart();
		if (!WorldGen.gen)
		{
			WorldGen.destroyObject = false;
		}
		if (gameMenu)
		{
			mapFullscreen = false;
		}
		UpdateSettingUnlocks();
		if (dedServ)
		{
			if (dedServFPS)
			{
				updatesCountedForFPS++;
				if (!fpsTimer.IsRunning)
				{
					fpsTimer.Restart();
				}
				if (fpsTimer.ElapsedMilliseconds >= 1000)
				{
					dedServCount1 += updatesCountedForFPS;
					dedServCount2++;
					float num2 = (float)dedServCount1 / (float)dedServCount2;
					Console.WriteLine(updatesCountedForFPS + "  (" + num2 + ")");
					updatesCountedForFPS = 0;
					fpsTimer.Restart();
				}
			}
			else
			{
				if (fpsTimer.IsRunning)
				{
					fpsTimer.Stop();
				}
				updatesCountedForFPS = 0;
			}
		}
		LocalizationLoader.Update();
		DoUpdate_AutoSave();
		if (!dedServ)
		{
			ChromaInitializer.UpdateEvents();
			Chroma.Update(GlobalTimeWrappedHourly);
			if (superFast)
			{
				((Game)this).IsFixedTimeStep = false;
				graphics.SynchronizeWithVerticalRetrace = false;
			}
			else
			{
				if (FrameSkipMode == FrameSkipMode.Off || FrameSkipMode == FrameSkipMode.Subtle)
				{
					if (((Game)this).IsActive)
					{
						((Game)this).IsFixedTimeStep = false;
					}
					else
					{
						((Game)this).IsFixedTimeStep = true;
					}
				}
				else
				{
					((Game)this).IsFixedTimeStep = true;
					graphics.SynchronizeWithVerticalRetrace = true;
				}
				graphics.SynchronizeWithVerticalRetrace = true;
			}
			if (showSplash)
			{
				return;
			}
			updatesCountedForFPS++;
			if (fpsTimer.ElapsedMilliseconds >= 1000)
			{
				if ((float)fpsCount >= 30f + 30f * gfxQuality)
				{
					gfxQuality += gfxRate;
					gfxRate += 0.005f;
				}
				else if ((float)fpsCount < 29f + 30f * gfxQuality)
				{
					gfxRate = 0.01f;
					gfxQuality -= 0.1f;
				}
				if (gfxQuality < 0f)
				{
					gfxQuality = 0f;
				}
				if (gfxQuality > 1f)
				{
					gfxQuality = 1f;
				}
				if (maxQ && ((Game)this).IsActive)
				{
					gfxQuality = 1f;
					maxQ = false;
				}
				updateRate = uCount;
				frameRate = fpsCount;
				fpsCount = 0;
				fpsTimer.Restart();
				updatesCountedForFPS = 0;
				drawsCountedForFPS = 0;
				uCount = 0;
				if (gfxQuality < 0.8f)
				{
					mapTimeMax = (int)((1f - gfxQuality) * 60f);
				}
				else
				{
					mapTimeMax = 0;
				}
			}
			if (FrameSkipMode == FrameSkipMode.Off || FrameSkipMode == FrameSkipMode.Subtle)
			{
				UpdateTimeAccumulator += gameTime.ElapsedGameTime.TotalSeconds;
				if (UpdateTimeAccumulator < 0.01666666753590107 && !superFast)
				{
					if (FrameSkipMode == FrameSkipMode.Subtle)
					{
						((Game)instance).SuppressDraw();
					}
					return;
				}
				gameTime = new GameTime(gameTime.TotalGameTime, new TimeSpan(166666L));
				UpdateTimeAccumulator -= 0.01666666753590107;
				UpdateTimeAccumulator = Math.Min(UpdateTimeAccumulator, 0.01666666753590107);
			}
			uCount++;
			drawSkip = false;
			PlayerInput.AllowExecutionOfGamepadInstructions = true;
			TryPlayingCreditsRoll();
			PlayerInput.SetZoom_UI();
			UpdateUIStates(gameTime);
			PlayerInput.SetZoom_Unscaled();
			Terraria.Graphics.Effects.Filters.Scene.Update(gameTime);
			Overlays.Scene.Update(gameTime);
			LiquidRenderer.Instance.Update(gameTime);
			UpdateAudio();
			InGameNotificationsTracker.Update();
			ItemSlot.UpdateInterface();
			if (teamCooldown > 0)
			{
				teamCooldown--;
			}
			DoUpdate_AnimateBackgrounds();
			Animation.UpdateAll();
			if (qaStyle == 1)
			{
				gfxQuality = 1f;
			}
			else if (qaStyle == 2)
			{
				gfxQuality = 0.5f;
			}
			else if (qaStyle == 3)
			{
				gfxQuality = 0f;
			}
			maxDustToDraw = (int)(6000f * (gfxQuality * 0.7f + 0.3f));
			if ((double)gfxQuality < 0.9)
			{
				maxDustToDraw = (int)((float)maxDustToDraw * gfxQuality);
			}
			if (maxDustToDraw < 1000)
			{
				maxDustToDraw = 1000;
			}
			Gore.goreTime = (int)(600f * gfxQuality);
			if (!WorldGen.gen)
			{
				Liquid.cycles = (int)(17f - 10f * gfxQuality);
				Liquid.curMaxLiquid = (int)((double)Liquid.maxLiquid * 0.25 + (double)Liquid.maxLiquid * 0.75 * (double)gfxQuality);
				if (Setting_UseReducedMaxLiquids)
				{
					Liquid.curMaxLiquid = (int)(2500f + 2500f * gfxQuality);
				}
			}
			if (superFast)
			{
				graphics.SynchronizeWithVerticalRetrace = false;
				drawSkip = false;
			}
			if ((double)gfxQuality < 0.2)
			{
				LegacyLighting.RenderPhases = 8;
			}
			else if ((double)gfxQuality < 0.4)
			{
				LegacyLighting.RenderPhases = 7;
			}
			else if ((double)gfxQuality < 0.6)
			{
				LegacyLighting.RenderPhases = 6;
			}
			else if ((double)gfxQuality < 0.8)
			{
				LegacyLighting.RenderPhases = 5;
			}
			else
			{
				LegacyLighting.RenderPhases = 4;
			}
			if (!WorldGen.gen && Liquid.quickSettle)
			{
				Liquid.curMaxLiquid = Liquid.maxLiquid;
				if (Setting_UseReducedMaxLiquids)
				{
					Liquid.curMaxLiquid = 5000;
				}
				Liquid.cycles = 1;
			}
			if (WorldGen.tenthAnniversaryWorldGen && !gameMenu)
			{
				WorldGen.tenthAnniversaryWorldGen = false;
			}
			if (WorldGen.drunkWorldGen || WorldGen.remixWorldGen)
			{
				if (!gameMenu)
				{
					WorldGen.drunkWorldGen = false;
					WorldGen.remixWorldGen = false;
					logoRotation = 0f;
					logoRotationSpeed = 0f;
					logoScale = 1f;
				}
			}
			else if (gameMenu && Math.Abs(logoRotationSpeed) > 1000f)
			{
				logoRotation = 0f;
				logoRotationSpeed = 0f;
				logoScale = 1f;
			}
			UpdateOldNPCShop();
			hasFocus = ((Game)this).IsActive;
			if (!hasFocus && netMode == 0)
			{
				if (!Platform.IsOSX)
				{
					((Game)this).IsMouseVisible = true;
				}
				if (netMode != 2 && myPlayer >= 0)
				{
					player[myPlayer].delayUseItem = true;
				}
				mouseLeftRelease = false;
				mouseRightRelease = false;
				mouseMiddleRelease = false;
				mouseXButton1Release = false;
				mouseXButton2Release = false;
				if (gameMenu)
				{
					UpdateMenu();
				}
				gamePaused = true;
				return;
			}
			if (!Platform.IsOSX)
			{
				((Game)this).IsMouseVisible = false;
			}
			SkyManager.Instance.Update(gameTime);
			if (!gamePaused)
			{
				EmoteBubble.UpdateAll();
			}
			ScreenObstruction.Update();
			ScreenDarkness.Update();
			MoonlordDeathDrama.Update();
			DoUpdate_AnimateCursorColors();
			DoUpdate_AnimateTileGlows();
			DoUpdate_AnimateDiscoRGB();
			DoUpdate_AnimateVisualPlayerAura();
			DoUpdate_AnimateWaterfalls();
			DoUpdate_AnimateWalls();
			AnimateTiles();
			DoUpdate_AnimateItemIcons();
			DoUpdate_F10_ToggleFPS();
			DoUpdate_F9_ToggleLighting();
			DoUpdate_F8_ToggleNetDiagnostics();
			DoUpdate_F7_ToggleGraphicsDiagnostics();
			DoUpdate_F11_ToggleUI();
			DoUpdate_AltEnter_ToggleFullscreen();
			DoUpdate_HandleInput();
			DoUpdate_HandleChat();
			DoUpdate_Enter_ToggleChat();
			if ((timeForVisualEffects += 1.0) >= 216000.0)
			{
				timeForVisualEffects = 0.0;
			}
			if (gameMenu)
			{
				UpdateMenu();
				if (netMode != 2)
				{
					return;
				}
				gamePaused = false;
			}
			if (!CanUpdateGameplay && netMode != 2)
			{
				return;
			}
			CheckInvasionProgressDisplay();
		}
		UpdateWindyDayState();
		if (netMode == 2)
		{
			cloudAlpha = maxRaining;
		}
		bool flag2 = ((Game)this).IsActive;
		if (netMode == 1)
		{
			TrySyncingMyPlayer();
		}
		if (CanPauseGame())
		{
			DoUpdate_WhilePaused();
			PlayerLoader.UpdateAutopause(player[myPlayer]);
			gamePaused = true;
			return;
		}
		gamePaused = false;
		if (Main.OnTickForInternalCodeOnly != null)
		{
			Main.OnTickForInternalCodeOnly();
		}
		if ((dedServ || (netMode != 1 && !gameMenu && !gamePaused)) && AmbienceServer != null)
		{
			AmbienceServer.Update();
		}
		WorldGen.BackgroundsCache.UpdateFlashValues();
		if (LocalGolfState != null)
		{
			LocalGolfState.Update();
		}
		if ((flag2 || netMode == 1) && cloudAlpha > 0f)
		{
			Rain.MakeRain();
		}
		if (netMode != 1)
		{
			updateCloudLayer();
		}
		if (!(desiredWorldEventsUpdateRate <= 0.0))
		{
			_partialWorldEventUpdates += desiredWorldEventsUpdateRate;
			worldEventUpdates = (int)_partialWorldEventUpdates;
			_partialWorldEventUpdates -= worldEventUpdates;
			for (int i = 0; i < worldEventUpdates; i++)
			{
				UpdateWeather(gameTime, i);
			}
		}
		UnpausedUpdateSeed = Utils.RandomNextSeed(UnpausedUpdateSeed);
		Ambience();
		if (netMode != 2)
		{
			try
			{
				snowing();
			}
			catch
			{
				if (!ignoreErrors)
				{
					throw;
				}
			}
			Sandstorm.EmitDust();
		}
		SystemLoader.PreUpdateEntities();
		if (netMode != 2)
		{
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				Star.UpdateStars();
				Cloud.UpdateClouds();
			}
			else if (shimmerAlpha > 0f)
			{
				Star.UpdateStars();
				int num3 = rand.Next(numStars);
				if (rand.Next(90) == 0)
				{
					if (star[num3] != null && !star[num3].hidden && !star[num3].falling)
					{
						star[num3].Fall();
					}
					for (int j = 0; j < numStars; j++)
					{
						if (star[j].hidden)
						{
							Star.SpawnStars(j);
						}
					}
				}
			}
		}
		PortalHelper.UpdatePortalPoints();
		LucyAxeMessage.UpdateMessageCooldowns();
		if (ShouldUpdateEntities())
		{
			DoUpdateInWorld(_worldUpdateTimeTester);
		}
		if (netMode != 2)
		{
			ChromaPainter.Update();
		}
	}

	internal static void UpdateCreativeGameModeOverride()
	{
		_overrideForExpertMode = null;
		_overrideForMasterMode = null;
		if (gameMenu || !_currentGameModeInfo.IsJourneyMode)
		{
			return;
		}
		CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
		if (power.GetIsUnlocked())
		{
			float num = power.StrengthMultiplierToGiveNPCs;
			if (getGoodWorld)
			{
				num += 1f;
			}
			if (num >= 2f)
			{
				_overrideForExpertMode = true;
			}
			if (num >= 3f)
			{
				_overrideForMasterMode = true;
			}
		}
	}

	private static void TryPlayingCreditsRoll()
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		if (!gameMenu && CanPlayCreditsRoll() && !SkyManager.Instance["CreditsRoll"].IsActive())
		{
			SkyManager.Instance.Activate("CreditsRoll", Vector2.Zero);
		}
	}

	private static bool CanPauseGame()
	{
		bool flag = false;
		if (netMode == 0)
		{
			flag |= ingameOptionsWindow;
			flag |= InGameUI.IsVisible && (InGameUI.CurrentState == ManageControlsMenu || InGameUI.CurrentState == AchievementsMenu);
			flag |= InGameUI.IsVisible && (InGameUI.CurrentState == Interface.modConfigList || InGameUI.CurrentState == Interface.modConfig);
			if (autoPause)
			{
				flag |= playerInventory;
				flag |= LocalPlayer.sign >= 0;
				flag |= InGameUI.IsVisible;
			}
		}
		return flag;
	}

	private static void DoUpdate_WhilePaused()
	{
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		if (!drawingPlayerChat && !editSign && !editChest && !blockInput)
		{
			Main.player[myPlayer].controlInv = PlayerInput.Triggers.Current.Inventory;
			Main.player[myPlayer].controlCreativeMenu = PlayerInput.Triggers.Current.OpenCreativePowersMenu;
			Player player = Main.player[myPlayer];
			if (player.controlCreativeMenu)
			{
				if (player.releaseCreativeMenu)
				{
					player.ToggleCreativeMenu();
				}
				player.releaseCreativeMenu = false;
			}
			else
			{
				player.releaseCreativeMenu = true;
			}
			if (player.controlInv)
			{
				if (player.releaseInventory)
				{
					player.ToggleInv();
				}
				player.releaseInventory = false;
			}
			else
			{
				player.releaseInventory = true;
			}
		}
		if (playerInventory)
		{
			Main.player[myPlayer].RefreshInfoAccs();
			Recipe.GetThroughDelayedFindRecipes();
			if (PlayerInput.MouseInModdedUI.Count == 0)
			{
				int num = PlayerInput.ScrollWheelDelta / 120;
				bool flag = true;
				if (recBigList)
				{
					int num2 = 42;
					int num3 = 340;
					int num4 = 310;
					PlayerInput.SetZoom_UI();
					int num5 = (screenWidth - num4 - 280) / num2;
					int num6 = (screenHeight - num3 - 20) / num2;
					Rectangle val = new Rectangle(num4, num3, num5 * num2, num6 * num2);
					if (((Rectangle)(ref val)).Contains(MouseScreen.ToPoint()))
					{
						int num7 = Math.Sign(num);
						while (num != 0)
						{
							if (num < 0)
							{
								recStart -= num5;
								if (recStart < 0)
								{
									recStart = 0;
								}
							}
							else
							{
								recStart += num5;
								SoundEngine.PlaySound(12);
								if (recStart > numAvailableRecipes - num5)
								{
									recStart = numAvailableRecipes - num5;
								}
							}
							num -= num7;
						}
					}
					PlayerInput.SetZoom_World();
				}
				if (flag)
				{
					focusRecipe += num;
					if (focusRecipe > numAvailableRecipes - 1)
					{
						focusRecipe = numAvailableRecipes - 1;
					}
					if (focusRecipe < 0)
					{
						focusRecipe = 0;
					}
				}
			}
			PlayerInput.MouseInModdedUI.Clear();
			Main.player[myPlayer].dropItemCheck();
		}
		Main.player[myPlayer].head = Main.player[myPlayer].armor[0].headSlot;
		Main.player[myPlayer].body = Main.player[myPlayer].armor[1].bodySlot;
		Main.player[myPlayer].legs = Main.player[myPlayer].armor[2].legSlot;
		if (!Main.player[myPlayer].hostile)
		{
			if (Main.player[myPlayer].armor[10].headSlot >= 0)
			{
				Main.player[myPlayer].head = Main.player[myPlayer].armor[10].headSlot;
			}
			if (Main.player[myPlayer].armor[11].bodySlot >= 0)
			{
				Main.player[myPlayer].body = Main.player[myPlayer].armor[11].bodySlot;
			}
			if (Main.player[myPlayer].armor[12].legSlot >= 0)
			{
				Main.player[myPlayer].legs = Main.player[myPlayer].armor[12].legSlot;
			}
		}
		if (editSign)
		{
			if (Main.player[myPlayer].sign == -1)
			{
				editSign = false;
			}
			else
			{
				InputTextSign();
			}
		}
		else if (editChest && Main.player[myPlayer].chest == -1)
		{
			editChest = false;
		}
		Player.tileTargetX = (int)(((float)mouseX + screenPosition.X) / 16f);
		Player.tileTargetY = (int)(((float)mouseY + screenPosition.Y) / 16f);
		Main.player[myPlayer].LookForTileInteractions();
		Main.player[myPlayer].lastChest = Main.player[myPlayer].chest;
		if (playerInventory)
		{
			Main.player[myPlayer].AdjTiles();
		}
	}

	private static void UpdateUIStates(GameTime gameTime)
	{
		if (MenuUI != null)
		{
			MenuUI.Update(gameTime);
		}
		if (InGameUI != null)
		{
			InGameUI.Update(gameTime);
		}
		CreativeMenu.Update(gameTime);
		SystemLoader.UpdateUI(gameTime);
		PlayerInput.ScrollWheelDeltaForUI = 0;
		BossBarLoader.HandleStyle();
		if (!gameMenu)
		{
			BigBossProgressBar.Update();
		}
	}

	private void DoDebugFunctions()
	{
	}

	private void PreUpdateAllProjectiles()
	{
		SpelunkerProjectileHelper.OnPreUpdateAllProjectiles();
		ChumBucketProjectileHelper.OnPreUpdateAllProjectiles();
	}

	private void PostUpdateAllProjectiles()
	{
	}

	private static void TrySyncingMyPlayer()
	{
		//IL_0811: Unknown result type (might be due to invalid IL or missing references)
		//IL_0817: Unknown result type (might be due to invalid IL or missing references)
		Player player = clientPlayer;
		bool syncedAnyInventoryContents = false;
		for (int i = 0; i < 59; i++)
		{
			if (Main.player[myPlayer].inventory[i].IsNetStateDifferent(player.inventory[i]))
			{
				syncedAnyInventoryContents = true;
				NetMessage.SendData(5, -1, -1, null, myPlayer, PlayerItemSlotID.Inventory0 + i, Main.player[myPlayer].inventory[i].prefix);
			}
		}
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].armor, player.armor, PlayerItemSlotID.Armor0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].dye, player.dye, PlayerItemSlotID.Dye0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].miscEquips, player.miscEquips, PlayerItemSlotID.Misc0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].miscDyes, player.miscDyes, PlayerItemSlotID.MiscDye0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].bank.item, player.bank.item, PlayerItemSlotID.Bank1_0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].bank2.item, player.bank2.item, PlayerItemSlotID.Bank2_0);
		if (Main.player[myPlayer].trashItem.IsNetStateDifferent(player.trashItem))
		{
			syncedAnyInventoryContents = true;
			NetMessage.SendData(5, -1, -1, null, myPlayer, PlayerItemSlotID.TrashItem, Main.player[myPlayer].trashItem.prefix);
		}
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].bank3.item, player.bank3.item, PlayerItemSlotID.Bank3_0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].bank4.item, player.bank4.item, PlayerItemSlotID.Bank4_0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].Loadouts[0].Armor, player.Loadouts[0].Armor, PlayerItemSlotID.Loadout1_Armor_0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].Loadouts[0].Dye, player.Loadouts[0].Dye, PlayerItemSlotID.Loadout1_Dye_0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].Loadouts[1].Armor, player.Loadouts[1].Armor, PlayerItemSlotID.Loadout2_Armor_0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].Loadouts[1].Dye, player.Loadouts[1].Dye, PlayerItemSlotID.Loadout2_Dye_0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].Loadouts[2].Armor, player.Loadouts[2].Armor, PlayerItemSlotID.Loadout3_Armor_0);
		TrySyncingItemArray(ref syncedAnyInventoryContents, Main.player[myPlayer].Loadouts[2].Dye, player.Loadouts[2].Dye, PlayerItemSlotID.Loadout3_Dye_0);
		if (Main.player[myPlayer].chest != player.chest && Main.player[myPlayer].chest < 0 && player.chest >= 0)
		{
			if (Main.player[myPlayer].editedChestName)
			{
				if (chest[player.chest] != null)
				{
					NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(chest[player.chest].name), Main.player[myPlayer].chest, 1f);
				}
				else
				{
					NetMessage.SendData(33, -1, -1, null, Main.player[myPlayer].chest);
				}
				Main.player[myPlayer].editedChestName = false;
			}
			else
			{
				NetMessage.SendData(33, -1, -1, null, Main.player[myPlayer].chest);
			}
		}
		if (Main.player[myPlayer].talkNPC != player.talkNPC)
		{
			NetMessage.SendData(40, -1, -1, null, myPlayer);
		}
		if ((Main.player[myPlayer].voidLensChest != player.voidLensChest) | (Main.player[myPlayer].piggyBankProjTracker != player.piggyBankProjTracker))
		{
			NetMessage.SendData(142, -1, -1, null, myPlayer);
		}
		if (LocalPlayer.tileEntityAnchor.interactEntityID != player.tileEntityAnchor.interactEntityID && LocalPlayer.tileEntityAnchor.interactEntityID < 0)
		{
			NetMessage.SendData(122, -1, -1, null, -1, myPlayer);
		}
		bool flag = false;
		if ((byte)Main.player[myPlayer].zone1 != (byte)player.zone1)
		{
			flag = true;
		}
		if ((byte)Main.player[myPlayer].zone2 != (byte)player.zone2)
		{
			flag = true;
		}
		if ((byte)Main.player[myPlayer].zone3 != (byte)player.zone3)
		{
			flag = true;
		}
		if ((byte)Main.player[myPlayer].zone4 != (byte)player.zone4)
		{
			flag = true;
		}
		if ((byte)Main.player[myPlayer].zone5 != (byte)player.zone5)
		{
			flag = true;
		}
		if (!BiomeLoader.CustomBiomesMatch(Main.player[myPlayer], player))
		{
			flag = true;
		}
		if (flag)
		{
			NetMessage.SendData(36, -1, -1, null, myPlayer);
		}
		if (Main.player[myPlayer].statLife != player.statLife || Main.player[myPlayer].statLifeMax != player.statLifeMax)
		{
			Main.player[myPlayer].netLife = true;
		}
		if (Main.player[myPlayer].netLifeTime > 0)
		{
			Main.player[myPlayer].netLifeTime--;
		}
		else if (Main.player[myPlayer].netLife)
		{
			Main.player[myPlayer].netLife = false;
			Main.player[myPlayer].netLifeTime = 60;
			NetMessage.SendData(16, -1, -1, null, myPlayer);
		}
		if (Main.player[myPlayer].statMana != player.statMana || Main.player[myPlayer].statManaMax != player.statManaMax)
		{
			Main.player[myPlayer].netMana = true;
		}
		if (Main.player[myPlayer].netManaTime > 0)
		{
			Main.player[myPlayer].netManaTime--;
		}
		else if (Main.player[myPlayer].netMana)
		{
			Main.player[myPlayer].netMana = false;
			Main.player[myPlayer].netManaTime = 60;
			NetMessage.SendData(42, -1, -1, null, myPlayer);
		}
		bool flag2 = false;
		for (int j = 0; j < Player.maxBuffs; j++)
		{
			if (Main.player[myPlayer].buffType[j] != player.buffType[j])
			{
				flag2 = true;
				break;
			}
		}
		if (flag2)
		{
			NetMessage.SendData(50, -1, -1, null, myPlayer);
			NetMessage.SendData(13, -1, -1, null, myPlayer);
		}
		bool flag3 = false;
		if (Main.player[myPlayer].MinionRestTargetPoint != player.MinionRestTargetPoint)
		{
			flag3 = true;
		}
		if (flag3)
		{
			NetMessage.SendData(99, -1, -1, null, myPlayer);
		}
		bool flag4 = false;
		if (Main.player[myPlayer].MinionAttackTargetNPC != player.MinionAttackTargetNPC)
		{
			flag4 = true;
		}
		if (flag4)
		{
			NetMessage.SendData(115, -1, -1, null, myPlayer);
		}
		if (player.shieldRaised != Main.player[myPlayer].shieldRaised)
		{
			NetMessage.SendData(13, -1, -1, null, myPlayer);
		}
		if (syncedAnyInventoryContents)
		{
			NetMessage.SendData(138);
		}
		PlayerLoader.SendClientChanges(Main.player[myPlayer], clientPlayer);
		clientPlayer = Main.player[myPlayer].clientClone();
	}

	private static void TrySyncingItemArray(ref bool syncedAnyInventoryContents, Item[] my, Item[] other, int slotOffset)
	{
		for (int i = 0; i < my.Length; i++)
		{
			if (my[i].IsNetStateDifferent(other[i]))
			{
				syncedAnyInventoryContents = true;
				NetMessage.SendData(5, -1, -1, null, myPlayer, slotOffset + i, my[i].prefix);
			}
		}
	}

	public bool ShouldUpdateEntities()
	{
		return _worldPreparationState == WorldPreparationState.Ready;
	}

	private void DoUpdateInWorld(Stopwatch sw)
	{
		UpdateParticleSystems();
		tileSolid[379] = false;
		NPCShopDatabase.Test();
		SystemLoader.PreUpdatePlayers();
		int num = 0;
		int num2 = 0;
		sittingManager.ClearPlayerAnchors();
		sleepingManager.ClearPlayerAnchors();
		for (int i = 0; i < 255; i++)
		{
			if (!player[i].active)
			{
				continue;
			}
			try
			{
				player[i].Update(i);
				if (player[i].active)
				{
					num++;
					if (player[i].sleeping.FullyFallenAsleep)
					{
						num2++;
					}
				}
			}
			catch
			{
				if (!ignoreErrors)
				{
					throw;
				}
			}
		}
		CurrentFrameFlags.ActivePlayersCount = num;
		CurrentFrameFlags.SleepingPlayersCount = num2;
		if (netMode != 2)
		{
			int num3 = myPlayer;
			if (player[num3].creativeGodMode)
			{
				player[num3].statLife = player[num3].statLifeMax2;
				player[num3].statMana = player[num3].statManaMax2;
				player[num3].breath = player[num3].breathMax;
			}
		}
		SystemLoader.PostUpdatePlayers();
		_gameUpdateCount++;
		SystemLoader.PreUpdateNPCs();
		NPC.RevengeManager.Update();
		if (netMode != 1)
		{
			if (remixWorld)
			{
				NPC.SetRemixHax();
			}
			try
			{
				NPC.SpawnNPC();
			}
			catch
			{
			}
			if (remixWorld)
			{
				NPC.ResetRemixHax();
			}
		}
		if (netMode != 1)
		{
			PressurePlateHelper.Update();
		}
		for (int j = 0; j < 255; j++)
		{
			player[j].nearbyActiveNPCs = 0f;
			player[j].townNPCs = 0f;
		}
		CheckBossIndexes();
		sittingManager.ClearNPCAnchors();
		sleepingManager.ClearNPCAnchors();
		NPC.taxCollector = false;
		NPC.ClearFoundActiveNPCs();
		NPC.UpdateFoundActiveNPCs();
		FixExploitManEaters.Update();
		if (netMode != 1)
		{
			BestiaryTracker.Sights.ScanWorldForFinds();
		}
		bool anyActiveBossNPC = false;
		if (NPC.offSetDelayTime > 0)
		{
			NPC.offSetDelayTime--;
		}
		if (remixWorld && NPC.empressRageMode && !NPC.AnyNPCs(636))
		{
			NPC.empressRageMode = false;
		}
		if (netMode != 1 && afterPartyOfDoom && !BirthdayParty.PartyIsUp)
		{
			for (int k = 0; k < 200; k++)
			{
				NPC nPC = npc[k];
				if (nPC.active && nPC.townNPC && nPC.type != 37 && nPC.type != 453 && nPC.type != 368)
				{
					nPC.StrikeNPCNoInteraction(9999, 10f, -nPC.direction);
					if (netMode == 2)
					{
						NetMessage.SendData(28, -1, -1, null, k, 9999f, 10f, -nPC.direction);
					}
				}
			}
			NPC.unlockedPartyGirlSpawn = false;
			NPC.unlockedPrincessSpawn = false;
			NPC.unlockedSlimeRainbowSpawn = false;
			NPC.unlockedSlimeGreenSpawn = false;
			afterPartyOfDoom = false;
		}
		if (NPC.brainOfGravity >= 0 && NPC.brainOfGravity < 200 && (!npc[NPC.brainOfGravity].active || npc[NPC.brainOfGravity].type != 266))
		{
			NPC.brainOfGravity = -1;
		}
		for (int l = 0; l < 200; l++)
		{
			if (ignoreErrors)
			{
				try
				{
					npc[l].UpdateNPC(l);
					if (npc[l].active && (npc[l].boss || NPCID.Sets.DangerThatPreventsOtherDangers[npc[l].type]))
					{
						anyActiveBossNPC = true;
					}
				}
				catch (Exception)
				{
					npc[l] = new NPC();
				}
			}
			else
			{
				npc[l].UpdateNPC(l);
			}
		}
		CurrentFrameFlags.AnyActiveBossNPC = anyActiveBossNPC;
		SystemLoader.PostUpdateNPCs();
		SystemLoader.PreUpdateGores();
		for (int m = 0; m < 600; m++)
		{
			if (ignoreErrors)
			{
				try
				{
					gore[m].Update();
				}
				catch
				{
					gore[m] = new Gore();
				}
			}
			else
			{
				gore[m].Update();
			}
		}
		SystemLoader.PostUpdateGores();
		SystemLoader.PreUpdateProjectiles();
		LockOnHelper.SetUP();
		CurrentFrameFlags.HadAnActiveInteractibleProjectile = false;
		PreUpdateAllProjectiles();
		for (int n = 0; n < 1000; n++)
		{
			ProjectileUpdateLoopIndex = n;
			if (ignoreErrors)
			{
				try
				{
					projectile[n].Update(n);
				}
				catch
				{
					projectile[n] = new Projectile();
				}
			}
			else
			{
				projectile[n].Update(n);
			}
		}
		ProjectileUpdateLoopIndex = -1;
		PostUpdateAllProjectiles();
		LockOnHelper.SetDOWN();
		SystemLoader.PostUpdateProjectiles();
		SystemLoader.PreUpdateItems();
		Item.numberOfNewItems = 0;
		for (int num4 = 0; num4 < 400; num4++)
		{
			if (ignoreErrors)
			{
				try
				{
					item[num4].UpdateItem(num4);
				}
				catch
				{
					item[num4] = new Item();
				}
			}
			else
			{
				item[num4].UpdateItem(num4);
			}
		}
		SystemLoader.PostUpdateItems();
		SystemLoader.PreUpdateDusts();
		if (ignoreErrors)
		{
			try
			{
				Dust.UpdateDust();
			}
			catch
			{
				for (int num5 = 0; num5 < 6000; num5++)
				{
					dust[num5] = new Dust();
					dust[num5].dustIndex = num5;
				}
			}
		}
		else
		{
			Dust.UpdateDust();
		}
		SystemLoader.PostUpdateDusts();
		if (netMode != 2)
		{
			CombatText.UpdateCombatText();
			PopupText.UpdateItemText();
		}
		SystemLoader.PreUpdateTime();
		if (ignoreErrors)
		{
			try
			{
				UpdateTime();
			}
			catch
			{
				checkForSpawns = 0;
			}
		}
		else
		{
			UpdateTime();
		}
		SystemLoader.PostUpdateTime();
		tileSolid[379] = true;
		if (gameMenu && netMode != 2)
		{
			return;
		}
		if (netMode != 1)
		{
			if (ignoreErrors)
			{
				try
				{
					WorldGen.UpdateWorld();
					UpdateInvasion();
				}
				catch
				{
				}
			}
			else
			{
				WorldGen.UpdateWorld();
				UpdateInvasion();
			}
		}
		if (ignoreErrors)
		{
			try
			{
				if (netMode == 2)
				{
					UpdateServer();
				}
				if (netMode == 1)
				{
					UpdateClient();
				}
			}
			catch
			{
				_ = netMode;
			}
		}
		else
		{
			if (netMode == 2)
			{
				UpdateServer();
			}
			if (netMode == 1)
			{
				UpdateClient();
			}
		}
		SystemLoader.PostUpdateEverything();
		chatMonitor.Update();
		upTimer = (float)sw.Elapsed.TotalMilliseconds;
		if (upTimerMaxDelay > 0f)
		{
			upTimerMaxDelay -= 1f;
		}
		else
		{
			upTimerMax = 0f;
		}
		if (upTimer > upTimerMax)
		{
			upTimerMax = upTimer;
			upTimerMaxDelay = 400f;
		}
		Chest.UpdateChestFrames();
		_ambientWindSys.Update();
		TilesRenderer.Update();
		WallsRenderer.Update();
		if (cameraLerp > 0f)
		{
			cameraLerpTimer++;
			if (cameraLerpTimer >= cameraLerpTimeToggle)
			{
				cameraLerp += (float)((cameraLerpTimer - cameraLerpTimeToggle) / 3 + 1) * 0.001f;
			}
			if (cameraLerp > 1f)
			{
				cameraLerp = 1f;
			}
		}
	}

	private static void CheckBossIndexes()
	{
		if (!IsNPCActiveAndOneOfTypes(wofNPCIndex, 113))
		{
			wofNPCIndex = -1;
		}
		if (!IsNPCActiveAndOneOfTypes(NPC.golemBoss, 245))
		{
			NPC.golemBoss = -1;
		}
		if (!IsNPCActiveAndOneOfTypes(NPC.deerclopsBoss, 668))
		{
			NPC.deerclopsBoss = -1;
		}
		if (!IsNPCActiveAndOneOfTypes(NPC.plantBoss, 262))
		{
			NPC.plantBoss = -1;
		}
		if (!IsNPCActiveAndOneOfTypes(NPC.crimsonBoss, 266))
		{
			NPC.crimsonBoss = -1;
		}
	}

	public static bool IsNPCActiveAndOneOfTypes(int npcIndex, params int[] types)
	{
		if (npcIndex < 0)
		{
			return false;
		}
		NPC nPC = npc[npcIndex];
		if (!nPC.active)
		{
			return false;
		}
		for (int i = 0; i < types.Length; i++)
		{
			if (nPC.type == types[i])
			{
				return true;
			}
		}
		return false;
	}

	private static void UpdateOldNPCShop()
	{
		if (npcShop != oldNPCShop)
		{
			oldNPCShop = npcShop;
			shopSellbackHelper.Clear();
		}
	}

	private static void DoUpdate_AnimateCursorColors()
	{
		CursorColor();
		mouseTextColor += (byte)mouseTextColorChange;
		if (mouseTextColor >= byte.MaxValue)
		{
			mouseTextColorChange = -1;
		}
		if (mouseTextColor <= 190)
		{
			mouseTextColorChange = 1;
		}
		masterColor += (float)masterColorDir * 0.05f;
		if (masterColor > 1f)
		{
			masterColor = 1f;
			masterColorDir = -1;
		}
		if (masterColor < 0f)
		{
			masterColor = 0f;
			masterColorDir = 1;
		}
	}

	private static void DoUpdate_AnimateTileGlows()
	{
		demonTorch += (float)demonTorchDir * 0.01f;
		if (demonTorch > 1f)
		{
			demonTorch = 1f;
			demonTorchDir = -1;
		}
		if (demonTorch < 0f)
		{
			demonTorch = 0f;
			demonTorchDir = 1;
		}
		martianLight += (float)martianLightDir * 0.015f;
		if (martianLight > 1f)
		{
			martianLight = 1f;
			martianLightDir = -1;
		}
		if (martianLight < 0f)
		{
			martianLight = 0f;
			martianLightDir = 1;
		}
	}

	private static void DoUpdate_Enter_ToggleChat()
	{
		if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)13) && !((KeyboardState)(ref keyState)).IsKeyDown((Keys)164) && !((KeyboardState)(ref keyState)).IsKeyDown((Keys)165) && hasFocus)
		{
			if (!InGameUI.IsVisible && !ingameOptionsWindow && chatRelease && !drawingPlayerChat && !editSign && !editChest && !gameMenu && !((KeyboardState)(ref keyState)).IsKeyDown((Keys)27))
			{
				SoundEngine.PlaySound(10);
				OpenPlayerChat();
				chatText = "";
			}
			chatRelease = false;
		}
		else
		{
			chatRelease = true;
		}
	}

	public static void OpenPlayerChat()
	{
		if (CurrentInputTextTakerOverride == null)
		{
			drawingPlayerChat = true;
			clrInput();
		}
	}

	public static void ClosePlayerChat()
	{
		drawingPlayerChat = false;
		PlayerInput.WritingText = false;
		player[myPlayer].releaseHook = false;
		player[myPlayer].releaseThrow = false;
	}

	private static void DoUpdate_HandleChat()
	{
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		if (CurrentInputTextTakerOverride != null)
		{
			drawingPlayerChat = false;
			return;
		}
		if (editSign)
		{
			drawingPlayerChat = false;
		}
		if (PlayerInput.UsingGamepad)
		{
			drawingPlayerChat = false;
		}
		if (!drawingPlayerChat)
		{
			chatMonitor.ResetOffset();
			return;
		}
		int linesOffset = 0;
		if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)38))
		{
			linesOffset = 1;
		}
		else if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)40))
		{
			linesOffset = -1;
		}
		chatMonitor.Offset(linesOffset);
		if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)27))
		{
			drawingPlayerChat = false;
		}
		string text = chatText;
		chatText = GetInputText(chatText);
		int num = 470;
		num = (int)((float)screenWidth * (1f / UIScale)) - 330;
		if (text != chatText)
		{
			for (float x = ChatManager.GetStringSize(FontAssets.MouseText.Value, chatText, Vector2.One).X; x > (float)num; x = ChatManager.GetStringSize(FontAssets.MouseText.Value, chatText, Vector2.One).X)
			{
				int num2 = Math.Max(0, (int)(x - (float)num) / 100);
				chatText = chatText.Substring(0, chatText.Length - 1 - num2);
			}
		}
		if (text != chatText)
		{
			SoundEngine.PlaySound(12);
		}
		if (!inputTextEnter || !chatRelease)
		{
			return;
		}
		bool handled = chatText.Length > 0 && chatText[0] == '/' && CommandLoader.HandleCommand(chatText, new ChatCommandCaller());
		if (chatText != "" && !handled)
		{
			ChatMessage message = ChatManager.Commands.CreateOutgoingMessage(chatText);
			if (netMode == 1)
			{
				ChatHelper.SendChatMessageFromClient(message);
			}
			else if (netMode == 0)
			{
				ChatManager.Commands.ProcessIncomingMessage(message, myPlayer);
			}
		}
		chatText = "";
		ClosePlayerChat();
		chatRelease = false;
		SoundEngine.PlaySound(11);
	}

	private void DoUpdate_HandleInput()
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		PlayerInput.UpdateInput();
		SystemLoader.PostUpdateInput();
		UpdateViewZoomKeys();
		PlayerInput.SetZoom_Unscaled();
		UILinkPointNavigator.Update();
		PlayerInput.CacheMousePositionForZoom();
		PlayerInput.SetZoom_MouseInWorld();
		oldKeyState = keyState;
		keyState = Keyboard.GetState();
	}

	private static void DoUpdate_AltEnter_ToggleFullscreen()
	{
		if ((((KeyboardState)(ref keyState)).IsKeyDown((Keys)164) || ((KeyboardState)(ref keyState)).IsKeyDown((Keys)165)) && ((KeyboardState)(ref keyState)).IsKeyDown((Keys)13) && hasFocus)
		{
			if (toggleFullscreen)
			{
				ToggleFullScreen();
				chatRelease = false;
			}
			toggleFullscreen = false;
		}
		else
		{
			toggleFullscreen = true;
		}
	}

	private static void DoUpdate_F11_ToggleUI()
	{
		if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)122))
		{
			if (releaseUI)
			{
				if (hideUI)
				{
					hideUI = false;
				}
				else
				{
					hideUI = true;
				}
				SoundEngine.PlaySound(12);
			}
			releaseUI = false;
		}
		else
		{
			releaseUI = true;
		}
	}

	private static void DoUpdate_F7_ToggleGraphicsDiagnostics()
	{
		if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)118) && !drawingPlayerChat && !editSign && !editChest)
		{
			if (drawRelease)
			{
				SoundEngine.PlaySound(12);
				if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)164) || ((KeyboardState)(ref keyState)).IsKeyDown((Keys)165))
				{
					TimeLogger.Start();
				}
				else if (drawDiag)
				{
					drawDiag = false;
				}
				else
				{
					drawDiag = true;
				}
			}
			drawRelease = false;
		}
		else
		{
			drawRelease = true;
		}
	}

	private static void DoUpdate_F8_ToggleNetDiagnostics()
	{
		if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)119) && !drawingPlayerChat && !editSign && !editChest)
		{
			if (netRelease)
			{
				SoundEngine.PlaySound(12);
				if (!shouldDrawNetDiagnosticsUI && !ModNet.ShouldDrawModNetDiagnosticsUI)
				{
					shouldDrawNetDiagnosticsUI = true;
				}
				else if (shouldDrawNetDiagnosticsUI && !ModNet.ShouldDrawModNetDiagnosticsUI)
				{
					shouldDrawNetDiagnosticsUI = false;
					ModNet.ShouldDrawModNetDiagnosticsUI = true;
				}
				else if (ModNet.ShouldDrawModNetDiagnosticsUI)
				{
					ModNet.ShouldDrawModNetDiagnosticsUI = false;
				}
			}
			netRelease = false;
		}
		else
		{
			netRelease = true;
		}
	}

	private static void DoUpdate_F9_ToggleLighting()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		if (keyState.PressingShift() && ((KeyboardState)(ref keyState)).IsKeyDown((Keys)120) && !drawingPlayerChat && !editSign && !editChest)
		{
			if (RGBRelease)
			{
				SoundEngine.PlaySound(12);
				Lighting.NextLightMode();
			}
			RGBRelease = false;
		}
		else
		{
			RGBRelease = true;
		}
	}

	private static void DoUpdate_F10_ToggleFPS()
	{
		if (((KeyboardState)(ref keyState)).IsKeyDown((Keys)121) && !drawingPlayerChat && !editSign && !editChest)
		{
			if (frameRelease)
			{
				SoundEngine.PlaySound(12);
				if (showFrameRate)
				{
					showFrameRate = false;
				}
				else
				{
					showFrameRate = true;
				}
			}
			frameRelease = false;
		}
		else
		{
			frameRelease = true;
		}
	}

	private static void AnimateTiles()
	{
		tileFrameCounter[12]++;
		if (tileFrameCounter[12] > 5)
		{
			tileFrameCounter[12] = 0;
			tileFrame[12]++;
			if (tileFrame[12] >= 10)
			{
				tileFrame[12] = 0;
			}
		}
		tileFrameCounter[665] = tileFrameCounter[12];
		tileFrame[665] = tileFrame[12];
		tileFrameCounter[639]++;
		if (tileFrameCounter[639] > 5)
		{
			tileFrameCounter[639] = 0;
			tileFrame[639]++;
			if (tileFrame[639] >= 10)
			{
				tileFrame[639] = 0;
			}
		}
		tileFrameCounter[17]++;
		if (tileFrameCounter[17] > 5)
		{
			tileFrameCounter[17] = 0;
			tileFrame[17]++;
			if (tileFrame[17] >= 12)
			{
				tileFrame[17] = 0;
			}
		}
		if (++tileFrameCounter[133] >= 4)
		{
			tileFrameCounter[133] = 0;
			if (++tileFrame[133] >= 6)
			{
				tileFrame[133] = 0;
			}
		}
		tileFrameCounter[31]++;
		if (tileFrameCounter[31] > 10)
		{
			tileFrameCounter[31] = 0;
			tileFrame[31]++;
			if (tileFrame[31] > 1)
			{
				tileFrame[31] = 0;
			}
		}
		tileFrameCounter[77]++;
		if (tileFrameCounter[77] > 5)
		{
			tileFrameCounter[77] = 0;
			tileFrame[77]++;
			if (tileFrame[77] >= 12)
			{
				tileFrame[77] = 0;
			}
		}
		tileFrameCounter[106]++;
		if (tileFrameCounter[106] > 4)
		{
			tileFrameCounter[106] = 0;
			tileFrame[106]++;
			if (tileFrame[106] >= 2)
			{
				tileFrame[106] = 0;
			}
		}
		tileFrameCounter[207]++;
		if (tileFrameCounter[207] > 4)
		{
			tileFrameCounter[207] = 0;
			tileFrame[207]++;
			if (tileFrame[207] >= 6)
			{
				tileFrame[207] = 0;
			}
		}
		tileFrameCounter[215]++;
		if (tileFrameCounter[215] >= 4)
		{
			tileFrameCounter[215] = 0;
			tileFrame[215]++;
			if (tileFrame[215] >= 8)
			{
				tileFrame[215] = 0;
			}
		}
		tileFrameCounter[592]++;
		if (tileFrameCounter[592] >= 5)
		{
			tileFrameCounter[592] = 0;
			tileFrame[592]++;
			if (tileFrame[592] >= 8)
			{
				tileFrame[592] = 0;
			}
		}
		tileFrameCounter[217]++;
		if (tileFrameCounter[217] > 4)
		{
			tileFrameCounter[217] = 0;
			tileFrame[217]++;
			if (tileFrame[217] >= 5)
			{
				tileFrame[217] = 0;
			}
		}
		tileFrameCounter[218]++;
		if (tileFrameCounter[218] > 4)
		{
			tileFrameCounter[218] = 0;
			tileFrame[218]++;
			if (tileFrame[218] >= 2)
			{
				tileFrame[218] = 0;
			}
		}
		tileFrameCounter[219]++;
		if (tileFrameCounter[219] > 4)
		{
			tileFrameCounter[219] = 0;
			tileFrame[219]++;
			if (tileFrame[219] >= 10)
			{
				tileFrame[219] = 0;
			}
		}
		tileFrameCounter[642]++;
		if (tileFrameCounter[642] > 4)
		{
			tileFrameCounter[642] = 0;
			tileFrame[642]++;
			if (tileFrame[642] >= 6)
			{
				tileFrame[642] = 0;
			}
		}
		tileFrameCounter[220]++;
		if (tileFrameCounter[220] > 4)
		{
			tileFrameCounter[220] = 0;
			tileFrame[220]++;
			if (tileFrame[220] >= 4)
			{
				tileFrame[220] = 0;
			}
		}
		tileFrameCounter[231]++;
		if (tileFrameCounter[231] > 16)
		{
			tileFrameCounter[231] = 0;
			tileFrame[231]++;
			if (tileFrame[231] >= 7)
			{
				tileFrame[231] = 0;
			}
		}
		tileFrameCounter[235]++;
		if (tileFrameCounter[235] > 20)
		{
			tileFrameCounter[235] = 0;
			tileFrame[235]++;
			if (tileFrame[235] >= 4)
			{
				tileFrame[235] = 0;
			}
		}
		tileFrameCounter[238]++;
		if (tileFrameCounter[238] > 20)
		{
			tileFrameCounter[238] = 0;
			tileFrame[238]++;
			if (tileFrame[238] >= 4)
			{
				tileFrame[238] = 0;
			}
		}
		tileFrameCounter[243]++;
		if (tileFrameCounter[243] > 4)
		{
			tileFrameCounter[243] = 0;
			tileFrame[243]++;
			if (tileFrame[243] >= 6)
			{
				tileFrame[243] = 0;
			}
		}
		tileFrameCounter[244]++;
		if (tileFrameCounter[244] > 4)
		{
			tileFrameCounter[244] = 0;
			tileFrame[244]++;
			if (tileFrame[244] >= 6)
			{
				tileFrame[244] = 0;
			}
		}
		tileFrameCounter[247]++;
		if (tileFrameCounter[247] > 4)
		{
			tileFrameCounter[247] = 0;
			tileFrame[247]++;
			if (tileFrame[247] > 7)
			{
				tileFrame[247] = 0;
			}
		}
		tileFrameCounter[96]++;
		if (tileFrameCounter[96] > 4)
		{
			tileFrameCounter[96] = 0;
			tileFrame[96]++;
			if (tileFrame[96] > 3)
			{
				tileFrame[96] = 0;
			}
		}
		tileFrameCounter[171]++;
		if (tileFrameCounter[171] > 16)
		{
			tileFrameCounter[171] = 0;
			tileFrame[171]++;
			if (tileFrame[171] > 3)
			{
				tileFrame[171] = 0;
			}
		}
		tileFrameCounter[270]++;
		if (tileFrameCounter[270] > 8)
		{
			tileFrameCounter[270] = 0;
			tileFrame[270]++;
			if (tileFrame[270] > 5)
			{
				tileFrame[270] = 0;
			}
		}
		int num = tileFrame[270];
		tileFrame[271] = num;
		tileFrame[581] = num;
		tileFrameCounter[660]++;
		if (tileFrameCounter[660] > 8)
		{
			tileFrameCounter[660] = 0;
			tileFrame[660]++;
			if (tileFrame[660] > 4)
			{
				tileFrame[660] = 0;
			}
		}
		tileFrameCounter[272]++;
		if (tileFrameCounter[272] >= 10)
		{
			tileFrameCounter[272] = 0;
			tileFrame[272]++;
			if (tileFrame[272] > 1)
			{
				tileFrame[272] = 0;
			}
		}
		tileFrameCounter[300]++;
		if (tileFrameCounter[300] >= 5)
		{
			tileFrameCounter[300] = 0;
			tileFrame[300]++;
			if (tileFrame[300] > 6)
			{
				tileFrame[300] = 0;
			}
		}
		tileFrameCounter[301]++;
		if (tileFrameCounter[301] >= 5)
		{
			tileFrameCounter[301] = 0;
			tileFrame[301]++;
			if (tileFrame[301] > 7)
			{
				tileFrame[301] = 0;
			}
		}
		tileFrameCounter[302]++;
		if (tileFrameCounter[302] >= 5)
		{
			tileFrameCounter[302] = 0;
			tileFrame[302]++;
			if (tileFrame[302] > 3)
			{
				tileFrame[302] = 0;
			}
		}
		tileFrameCounter[303]++;
		if (tileFrameCounter[303] >= 5)
		{
			tileFrameCounter[303] = 0;
			tileFrame[303]++;
			if (tileFrame[303] > 4)
			{
				tileFrame[303] = 0;
			}
		}
		tileFrameCounter[305]++;
		if (tileFrameCounter[305] >= 5)
		{
			tileFrameCounter[305] = 0;
			tileFrame[305]++;
			if (tileFrame[305] > 11)
			{
				tileFrame[305] = 0;
			}
		}
		tileFrameCounter[306]++;
		if (tileFrameCounter[306] >= 5)
		{
			tileFrameCounter[306] = 0;
			tileFrame[306]++;
			if (tileFrame[306] > 11)
			{
				tileFrame[306] = 0;
			}
		}
		tileFrameCounter[307]++;
		if (tileFrameCounter[307] >= 5)
		{
			tileFrameCounter[307] = 0;
			tileFrame[307]++;
			if (tileFrame[307] > 1)
			{
				tileFrame[307] = 0;
			}
		}
		tileFrameCounter[308]++;
		if (tileFrameCounter[308] >= 5)
		{
			tileFrameCounter[308] = 0;
			tileFrame[308]++;
			if (tileFrame[308] > 7)
			{
				tileFrame[308] = 0;
			}
		}
		tileFrameCounter[314]++;
		if (tileFrameCounter[314] >= 10)
		{
			tileFrameCounter[314] = 0;
			tileFrame[314]++;
			if (tileFrame[314] > 4)
			{
				tileFrame[314] = 0;
			}
		}
		tileFrameCounter[326]++;
		if (tileFrameCounter[326] >= 5)
		{
			tileFrameCounter[326] = 0;
			tileFrame[326]++;
			if (tileFrame[326] > 7)
			{
				tileFrame[326] = 0;
			}
		}
		tileFrameCounter[327]++;
		if (tileFrameCounter[327] >= 10)
		{
			tileFrameCounter[327] = 0;
			tileFrame[327]++;
			if (tileFrame[327] > 7)
			{
				tileFrame[327] = 0;
			}
		}
		tileFrameCounter[345]++;
		if (tileFrameCounter[345] >= 10)
		{
			tileFrameCounter[345] = 0;
			tileFrame[345]++;
			if (tileFrame[345] > 7)
			{
				tileFrame[345] = 0;
			}
		}
		tileFrameCounter[458]++;
		if (tileFrameCounter[458] >= 10)
		{
			tileFrameCounter[458] = 0;
			tileFrame[458]++;
			if (tileFrame[458] > 7)
			{
				tileFrame[458] = 0;
			}
		}
		tileFrameCounter[459]++;
		if (tileFrameCounter[459] >= 10)
		{
			tileFrameCounter[459] = 0;
			tileFrame[459]++;
			if (tileFrame[459] > 7)
			{
				tileFrame[459] = 0;
			}
		}
		tileFrameCounter[336]++;
		if (tileFrameCounter[336] >= 5)
		{
			tileFrameCounter[336] = 0;
			tileFrame[336]++;
			if (tileFrame[336] > 3)
			{
				tileFrame[336] = 0;
			}
		}
		tileFrameCounter[328]++;
		if (tileFrameCounter[328] >= 5)
		{
			tileFrameCounter[328] = 0;
			tileFrame[328]++;
			if (tileFrame[328] > 7)
			{
				tileFrame[328] = 0;
			}
		}
		tileFrameCounter[329]++;
		if (tileFrameCounter[329] >= 5)
		{
			tileFrameCounter[329] = 0;
			tileFrame[329]++;
			if (tileFrame[329] > 7)
			{
				tileFrame[329] = 0;
			}
		}
		int num2 = 20;
		if (++tileFrameCounter[507] >= num2 * 8)
		{
			tileFrameCounter[507] = 0;
		}
		if (++tileFrameCounter[508] >= num2 * 8)
		{
			tileFrameCounter[508] = 0;
		}
		for (int i = 340; i <= 344; i++)
		{
			tileFrameCounter[i]++;
			if (tileFrameCounter[i] >= 5)
			{
				tileFrameCounter[i] = 0;
				tileFrame[i]++;
				if (tileFrame[i] > 3)
				{
					tileFrame[i] = 0;
				}
			}
		}
		tileFrameCounter[351]++;
		if (tileFrameCounter[351] >= 5)
		{
			tileFrameCounter[351] = 0;
			tileFrame[351]++;
			if (tileFrame[351] > 2)
			{
				tileFrame[351] = 0;
			}
		}
		tileFrameCounter[354]++;
		if (tileFrameCounter[354] >= 5)
		{
			tileFrameCounter[354] = 0;
			tileFrame[354]++;
			if (tileFrame[354] >= 8)
			{
				tileFrame[354] = 0;
			}
		}
		tileFrame[355] = tileFrame[354];
		tileFrameCounter[377]++;
		if (tileFrameCounter[377] >= 5)
		{
			tileFrameCounter[377] = 0;
			tileFrame[377]++;
			if (tileFrame[377] >= 4)
			{
				tileFrame[377] = 0;
			}
		}
		tileFrameCounter[379]++;
		if (tileFrameCounter[379] >= 10)
		{
			tileFrameCounter[379] = 0;
			tileFrame[379]++;
			if (tileFrame[379] >= 4)
			{
				tileFrame[379] = 0;
			}
		}
		if (++tileFrameCounter[390] >= 8)
		{
			tileFrameCounter[390] = 0;
			if (++tileFrame[390] >= 7)
			{
				tileFrame[390] = 0;
			}
		}
		if (++tileFrameCounter[228] >= 5)
		{
			tileFrameCounter[228] = 0;
			if (++tileFrame[228] >= 3)
			{
				tileFrame[228] = 0;
			}
		}
		if (++tileFrameCounter[405] >= 5)
		{
			tileFrameCounter[405] = 0;
			if (++tileFrame[405] >= 8)
			{
				tileFrame[405] = 0;
			}
		}
		if (++tileFrameCounter[406] >= 8)
		{
			tileFrameCounter[406] = 0;
			if (++tileFrame[406] >= 6)
			{
				tileFrame[406] = 0;
			}
		}
		if (++tileFrameCounter[452] >= 5)
		{
			tileFrameCounter[452] = 0;
			if (++tileFrame[452] >= 15)
			{
				tileFrame[452] = 0;
			}
		}
		if (++tileFrameCounter[455] >= 5)
		{
			tileFrameCounter[455] = 0;
			if (++tileFrame[455] >= 6)
			{
				tileFrame[455] = 0;
			}
		}
		if (++tileFrameCounter[499] >= 5)
		{
			tileFrameCounter[499] = 0;
			if (++tileFrame[499] >= 8)
			{
				tileFrame[499] = 0;
			}
		}
		if (++tileFrameCounter[129] >= 8)
		{
			tileFrameCounter[129] = 0;
			if (++tileFrame[129] >= 6)
			{
				tileFrame[129] = 0;
			}
		}
		tileFrameCounter[453] += ((!WorldGen.gen) ? rand.Next(3) : 0);
		if (++tileFrameCounter[453] >= 60)
		{
			tileFrameCounter[453] = 0;
		}
		if (++tileFrame[412] >= 240)
		{
			tileFrame[412] = 0;
		}
		tileFrameCounter[456] += ((!WorldGen.gen) ? rand.Next(3) : 0);
		if (++tileFrameCounter[456] >= 80)
		{
			tileFrameCounter[456] = 0;
		}
		if (++tileFrame[456] >= 240)
		{
			tileFrame[456] = 0;
		}
		if (++tileFrameCounter[410] >= 8)
		{
			tileFrameCounter[410] = 0;
			if (++tileFrame[410] >= 8)
			{
				tileFrame[410] = 0;
			}
		}
		if (++tileFrameCounter[480] >= 8)
		{
			tileFrameCounter[480] = 0;
			if (++tileFrame[480] >= 8)
			{
				tileFrame[480] = 0;
			}
		}
		if (++tileFrameCounter[509] >= 8)
		{
			tileFrameCounter[509] = 0;
			if (++tileFrame[509] >= 8)
			{
				tileFrame[509] = 0;
			}
		}
		if (++tileFrameCounter[657] >= 8)
		{
			tileFrameCounter[657] = 0;
			if (++tileFrame[657] >= 8)
			{
				tileFrame[657] = 0;
			}
		}
		if (++tileFrameCounter[658] >= 4)
		{
			tileFrameCounter[658] = 0;
			if (++tileFrame[658] >= 10)
			{
				tileFrame[658] = 0;
			}
		}
		if (++tileFrameCounter[421] >= 4)
		{
			tileFrameCounter[421] = 0;
			if (++tileFrame[421] >= 4)
			{
				tileFrame[421] = 0;
			}
		}
		if (++tileFrameCounter[422] >= 4)
		{
			tileFrameCounter[422] = 0;
			if (--tileFrame[422] < 0)
			{
				tileFrame[422] = 3;
			}
		}
		if (++tileFrameCounter[463] >= 10)
		{
			tileFrameCounter[463] = 0;
			if (++tileFrame[463] >= 6)
			{
				tileFrame[463] = 0;
			}
		}
		if (++tileFrameCounter[464] >= 5)
		{
			tileFrameCounter[464] = 0;
			if (++tileFrame[464] >= 23)
			{
				tileFrame[464] = 0;
			}
		}
		if (++tileFrameCounter[485] >= 20)
		{
			tileFrameCounter[485] = 0;
		}
		if (++tileFrameCounter[491] >= 40)
		{
			tileFrameCounter[491] = 0;
		}
		if (++tileFrameCounter[564] >= 5)
		{
			tileFrameCounter[564] = 0;
			tileFrame[564]++;
			if (tileFrame[564] >= 36)
			{
				tileFrame[564] = 0;
			}
		}
		if (++tileFrameCounter[593] >= 5)
		{
			tileFrameCounter[593] = 0;
			tileFrame[593]++;
			if (tileFrame[593] >= 9)
			{
				tileFrame[593] = 5;
			}
		}
		if (++tileFrameCounter[594] >= 5)
		{
			tileFrameCounter[594] = 0;
			tileFrame[594]++;
			if (tileFrame[594] >= 9)
			{
				tileFrame[594] = 5;
			}
		}
		if (++tileFrameCounter[614] >= 5)
		{
			tileFrameCounter[614] = 0;
			tileFrame[614]++;
			if (tileFrame[614] >= 6)
			{
				tileFrame[614] = 0;
			}
		}
		if (++tileFrameCounter[565] >= 4)
		{
			tileFrameCounter[565] = 0;
			tileFrame[565]++;
			if (tileFrame[565] >= 5)
			{
				tileFrame[565] = 0;
			}
		}
		if (++tileFrameCounter[572] >= 6)
		{
			tileFrameCounter[572] = 0;
			if (++tileFrame[572] >= 4)
			{
				tileFrame[572] = 0;
			}
		}
		if (++tileFrameCounter[597] >= 64)
		{
			tileFrameCounter[597] = 0;
		}
		int num3 = (int)MathHelper.Clamp((float)Math.Floor(Math.Abs(WindForVisuals) * 10f) * (float)Math.Sign(WindForVisuals), -5f, 5f);
		tileFrameCounter[489] += num3;
		tileFrameCounter[489] %= 320;
		if (tileFrameCounter[489] < 0)
		{
			tileFrameCounter[489] += 320;
		}
		AnimateTiles_WeatherVane();
		int num4 = (int)MathHelper.Clamp((float)Math.Floor(Math.Abs(WindForVisuals) * 10f) * (float)Math.Sign(WindForVisuals), -5f, 5f);
		tileFrameCounter[493] += num4;
		tileFrameCounter[493] %= 120;
		if (tileFrameCounter[493] < 0)
		{
			tileFrameCounter[493] += 120;
		}
		TileLoader.AnimateTiles();
		AnimateTiles_CritterCages();
	}

	private static void AnimateTiles_WeatherVane()
	{
		int num = Math.Sign(WindForVisuals);
		int num2 = (int)MathHelper.Clamp((float)Math.Floor(Math.Abs(WindForVisuals) * 10f), -5f, 5f);
		int num3 = 6;
		tileFrameCounter[490] += num2;
		if (tileFrameCounter[490] < num3)
		{
			return;
		}
		tileFrameCounter[490] -= num3 * tileFrameCounter[490];
		if ((tileFrame[490] != 0 || num != -1) && (tileFrame[490] != 6 || num != 1))
		{
			if (++tileFrame[490] >= 12)
			{
				tileFrame[490] = 0;
				weatherVaneBobframe = 0;
			}
		}
		else if (rand.NextFloat() < Math.Abs(WindForVisuals) * 0.5f && ++weatherVaneBobframe == 8)
		{
			weatherVaneBobframe = 0;
		}
	}

	private static void DoUpdate_AnimateWalls()
	{
		wallFrameCounter[136]++;
		if (wallFrameCounter[136] >= 5)
		{
			wallFrameCounter[136] = 0;
			wallFrame[136]++;
			if (wallFrame[136] > 7)
			{
				wallFrame[136] = 0;
			}
		}
		wallFrameCounter[137]++;
		if (wallFrameCounter[137] >= 10)
		{
			wallFrameCounter[137] = 0;
			wallFrame[137]++;
			if (wallFrame[137] > 7)
			{
				wallFrame[137] = 0;
			}
		}
		int num = 226;
		wallFrameCounter[num]++;
		if (wallFrameCounter[num] >= 10)
		{
			wallFrameCounter[num] = 0;
			wallFrame[num]++;
			if (wallFrame[num] > 7)
			{
				wallFrame[num] = 0;
			}
		}
		num = 227;
		wallFrameCounter[num]++;
		if (wallFrameCounter[num] >= 5)
		{
			wallFrameCounter[num] = 0;
			wallFrame[num]++;
			if (wallFrame[num] > 7)
			{
				wallFrame[num] = 0;
			}
		}
		num = 225;
		wallFrameCounter[num]++;
		if (wallFrameCounter[num] >= 5)
		{
			wallFrameCounter[num] = 0;
			wallFrame[num]++;
			if (wallFrame[num] > 1)
			{
				wallFrame[num] = 0;
			}
		}
		wallFrameCounter[172]++;
		if (wallFrameCounter[172] >= 10)
		{
			wallFrameCounter[172] = 0;
			wallFrame[172]++;
			if (wallFrame[172] > 7)
			{
				wallFrame[172] = 0;
			}
		}
		wallFrameCounter[168]++;
		if (wallFrameCounter[168] >= 5)
		{
			wallFrameCounter[168] = 0;
			wallFrame[168]++;
			if (wallFrame[168] > 7)
			{
				wallFrame[168] = 0;
			}
		}
		wallFrameCounter[169]++;
		if (wallFrameCounter[169] >= 5)
		{
			wallFrameCounter[169] = 0;
			wallFrame[169]++;
			if (wallFrame[169] > 7)
			{
				wallFrame[169] = 0;
			}
		}
		int num2 = 20;
		if (++wallFrameCounter[242] >= num2 * 8)
		{
			wallFrameCounter[242] = 0;
		}
		if (++wallFrameCounter[243] >= num2 * 8)
		{
			wallFrameCounter[243] = 0;
		}
		WallLoader.AnimateWalls();
		wallFrameCounter[144]++;
		int num3 = 5;
		int num4 = 10;
		if (wallFrameCounter[144] < num3)
		{
			wallFrame[144] = 0;
			return;
		}
		if (wallFrameCounter[144] < num3)
		{
			wallFrame[144] = 1;
			return;
		}
		if (wallFrameCounter[144] < num3 * 2)
		{
			wallFrame[144] = 2;
			return;
		}
		if (wallFrameCounter[144] < num3 * 3)
		{
			wallFrame[144] = 3;
			return;
		}
		if (wallFrameCounter[144] < num3 * 4)
		{
			wallFrame[144] = 4;
			return;
		}
		if (wallFrameCounter[144] < num3 * 5)
		{
			wallFrame[144] = 5;
			return;
		}
		if (wallFrameCounter[144] < num3 * 6)
		{
			wallFrame[144] = 6;
			return;
		}
		if (wallFrameCounter[144] < num3 * 7)
		{
			wallFrame[144] = 7;
			return;
		}
		if (wallFrameCounter[144] < num3 * (8 + num4))
		{
			wallFrame[144] = 8;
			return;
		}
		if (wallFrameCounter[144] < num3 * (9 + num4))
		{
			wallFrame[144] = 7;
			return;
		}
		if (wallFrameCounter[144] < num3 * (10 + num4))
		{
			wallFrame[144] = 6;
			return;
		}
		if (wallFrameCounter[144] < num3 * (11 + num4))
		{
			wallFrame[144] = 5;
			return;
		}
		if (wallFrameCounter[144] < num3 * (12 + num4))
		{
			wallFrame[144] = 4;
			return;
		}
		if (wallFrameCounter[144] < num3 * (13 + num4))
		{
			wallFrame[144] = 3;
			return;
		}
		if (wallFrameCounter[144] < num3 * (14 + num4))
		{
			wallFrame[144] = 2;
			return;
		}
		if (wallFrameCounter[144] < num3 * (15 + num4))
		{
			wallFrame[144] = 1;
			return;
		}
		wallFrame[144] = 0;
		if (wallFrameCounter[144] > num3 * (16 + num4 * 2))
		{
			wallFrameCounter[144] = 0;
		}
	}

	private void DoUpdate_AnimateWaterfalls()
	{
		wFrCounter += windSpeedCurrent * 2f;
		if (wFrCounter > 4f)
		{
			wFrCounter = 0f;
			wFrame += 1f;
		}
		if (wFrCounter < 0f)
		{
			wFrCounter = 4f;
			wFrame -= 1f;
		}
		if (wFrame > 16f)
		{
			wFrame = 1f;
		}
		if (wFrame < 1f)
		{
			wFrame = 16f;
		}
		waterfallManager.UpdateFrame();
	}

	private static void DoUpdate_AnimateVisualPlayerAura()
	{
		if (gFadeDir == 1)
		{
			gFader += 0.1f;
			gFade = (byte)gFader;
			if (gFade > 150)
			{
				gFadeDir = 0;
			}
		}
		else
		{
			gFader -= 0.1f;
			gFade = (byte)gFader;
			if (gFade < 100)
			{
				gFadeDir = 1;
			}
		}
	}

	private void DoUpdate_AnimateDiscoRGB()
	{
		int num = 7;
		if (DiscoStyle == 0)
		{
			DiscoG += num;
			if (DiscoG >= 255)
			{
				DiscoG = 255;
				DiscoStyle++;
			}
		}
		if (DiscoStyle == 1)
		{
			DiscoR -= num;
			if (DiscoR <= 0)
			{
				DiscoR = 0;
				DiscoStyle++;
			}
		}
		if (DiscoStyle == 2)
		{
			DiscoB += num;
			if (DiscoB >= 255)
			{
				DiscoB = 255;
				DiscoStyle++;
			}
		}
		if (DiscoStyle == 3)
		{
			DiscoG -= num;
			if (DiscoG <= 0)
			{
				DiscoG = 0;
				DiscoStyle++;
			}
		}
		if (DiscoStyle == 4)
		{
			DiscoR += num;
			if (DiscoR >= 255)
			{
				DiscoR = 255;
				DiscoStyle++;
			}
		}
		if (DiscoStyle == 5)
		{
			DiscoB -= num;
			if (DiscoB <= 0)
			{
				DiscoB = 0;
				DiscoStyle = 0;
			}
		}
	}

	private static void DoUpdate_AnimateBackgrounds()
	{
		DoUpdate_AnimateBackgrounds_UpdateForest(0, treeMntBGSet1);
		DoUpdate_AnimateBackgrounds_UpdateForest(10, treeMntBGSet2);
		DoUpdate_AnimateBackgrounds_UpdateForest(11, treeMntBGSet3);
		DoUpdate_AnimateBackgrounds_UpdateForest(12, treeMntBGSet4);
	}

	private static void DoUpdate_AnimateBackgrounds_UpdateForest(int bgIndex, int[] bgSet)
	{
		if (bgSet[1] == 94 || (bgSet[1] >= 114 && bgSet[1] <= 116))
		{
			bgFrameCounter[bgIndex]++;
			if (bgFrameCounter[bgIndex] >= 6)
			{
				bgFrameCounter[bgIndex] = 0;
				bgFrame[bgIndex]++;
				if (bgFrame[bgIndex] >= 4)
				{
					bgFrame[bgIndex] = 0;
				}
			}
			if (bgFrame[bgIndex] == 0)
			{
				bgSet[1] = 94;
			}
			else if (bgFrame[bgIndex] == 1)
			{
				bgSet[1] = 114;
			}
			else if (bgFrame[bgIndex] == 2)
			{
				bgSet[1] = 115;
			}
			else
			{
				bgSet[1] = 116;
			}
			if (bgFrame[bgIndex] == 0)
			{
				bgSet[0] = 93;
			}
			else if (bgFrame[bgIndex] == 1)
			{
				bgSet[0] = 168;
			}
			else if (bgFrame[bgIndex] == 2)
			{
				bgSet[0] = 169;
			}
			else
			{
				bgSet[0] = 170;
			}
		}
		if (bgSet[1] < 180 || bgSet[1] > 183)
		{
			return;
		}
		bgFrameCounter[bgIndex]++;
		if (bgFrameCounter[bgIndex] >= 6)
		{
			bgFrameCounter[bgIndex] = 0;
			bgFrame[bgIndex]++;
			if (bgFrame[bgIndex] >= 4)
			{
				bgFrame[bgIndex] = 0;
			}
		}
		if (bgFrame[bgIndex] == 0)
		{
			bgSet[1] = 180;
		}
		else if (bgFrame[bgIndex] == 1)
		{
			bgSet[1] = 181;
		}
		else if (bgFrame[bgIndex] == 2)
		{
			bgSet[1] = 182;
		}
		else
		{
			bgSet[1] = 183;
		}
	}

	private static void DoUpdate_AutoSave()
	{
		if (!gameMenu && netMode == 1)
		{
			if (!saveTime.IsRunning)
			{
				saveTime.Start();
			}
			if (saveTime.ElapsedMilliseconds > 300000)
			{
				saveTime.Reset();
				WorldGen.saveToonWhilePlaying();
			}
		}
		else if (!gameMenu && (autoSave || netMode == 2))
		{
			if (!saveTime.IsRunning)
			{
				saveTime.Start();
			}
			if (saveTime.ElapsedMilliseconds > 600000)
			{
				saveTime.Reset();
				if (netMode != 2)
				{
					WorldGen.saveToonWhilePlaying();
				}
				WorldGen.saveAndPlay();
			}
		}
		else if (saveTime.IsRunning)
		{
			saveTime.Stop();
		}
	}

	private static void UpdateSettingUnlocks()
	{
		if (netMode != 2 && !dedServ && hardMode && !SettingsUnlock_WorldEvil)
		{
			SettingsUnlock_WorldEvil = true;
			SaveSettings();
		}
	}

	public static void InputTextSign()
	{
		if (!IngameFancyUI.CanShowVirtualKeyboard(1) || UIVirtualKeyboard.KeyboardContext != 1)
		{
			PlayerInput.WritingText = true;
			instance.HandleIME();
			npcChatText = GetInputText(npcChatText, allowMultiLine: true);
			if (inputTextEnter)
			{
				byte[] bytes = new byte[1] { 10 };
				npcChatText += Encoding.ASCII.GetString(bytes);
			}
			else if (inputTextEscape)
			{
				InputTextSignCancel();
			}
		}
	}

	public static void InputTextChest()
	{
		if (!IngameFancyUI.CanShowVirtualKeyboard(2) || UIVirtualKeyboard.KeyboardContext != 2)
		{
			npcChatText = GetInputText(npcChatText);
			if (inputTextEnter)
			{
				ChestUI.RenameChestSubmit(player[myPlayer]);
			}
			else if (inputTextEscape)
			{
				ChestUI.RenameChestCancel();
			}
		}
	}

	public static void InputTextSignCancel()
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		SoundEngine.PlaySound(12);
		editSign = false;
		Keys val = (Keys)27;
		blockKey = ((object)(Keys)(ref val)).ToString();
		UIVirtualKeyboard.CacheCanceledInput(1);
		if (player[myPlayer].sign >= 0)
		{
			npcChatText = sign[player[myPlayer].sign].text;
		}
	}

	private static void UpdateMenu()
	{
		if (WorldGen.drunkWorldGen)
		{
			if (WorldGen.remixWorldGen)
			{
				screenPosition.X -= 20f;
			}
			if (WorldGen.drunkWorldGenText)
			{
				numClouds = rand.Next(100, 200);
				statusText = string.Concat(rand.Next(999999999));
				for (int i = 0; i < 3; i++)
				{
					if (rand.Next(2) == 0)
					{
						statusText += rand.Next(999999999);
					}
				}
			}
		}
		gamePaused = false;
		thunderDelay = 0;
		lightning = 0f;
		lightningSpeed = 0f;
		GraveyardVisualIntensity = 0f;
		InGameNotificationsTracker.Clear();
		playerInventory = false;
		exitScale = 0.8f;
		if (netMode == 0)
		{
			if (((Game)instance).IsActive && hasFocus && (!dayTime || WorldGen.remixWorldGen) && (rand.Next(12) == 0 || (WorldGen.drunkWorldGen && !remixWorld)))
			{
				int num = rand.Next(numStars);
				if (star[num] != null && !star[num].hidden && !star[num].falling)
				{
					star[num].Fall();
				}
			}
			if (gameMenu)
			{
				if (WorldGen.gen)
				{
					lockMenuBGChange = true;
				}
				else if (menuMode == 0)
				{
					lockMenuBGChange = false;
				}
				if (!lockMenuBGChange)
				{
					if (dayTime)
					{
						menuBGChangedDay = false;
					}
					else if (!menuBGChangedDay && time >= 16200.0)
					{
						menuBGChangedDay = true;
						int style = WorldGen.corruptBG;
						WorldGen.RandomizeBackgrounds(rand);
						if (treeBGSet1[0] == 173)
						{
							WorldGen.RandomizeBackgrounds(rand);
						}
						if (treeBGSet1[0] == 173)
						{
							WorldGen.RandomizeBackgrounds(rand);
						}
						WorldGen.setBG(1, style);
					}
					if (!dayTime)
					{
						menuBGChangedNight = false;
					}
					else if (!menuBGChangedNight && time >= 27000.0)
					{
						moonType = rand.Next(9);
						menuBGChangedNight = true;
						int treeBG = WorldGen.treeBG1;
						WorldGen.RandomizeBackgrounds(rand);
						WorldGen.setBG(0, treeBG);
					}
				}
				else
				{
					menuBGChangedDay = true;
					menuBGChangedNight = true;
				}
			}
			if (alreadyGrabbingSunOrMoon)
			{
				return;
			}
			if (WorldGen.drunkWorldGen && !WorldGen.remixWorldGen)
			{
				time -= 6.0;
				if (dayTime)
				{
					time -= 1000.0;
				}
				if (time < 0.0)
				{
					time = 32400.0;
					dayTime = false;
				}
			}
			else if (dayTime)
			{
				time += 33.88235294117647;
			}
			else
			{
				time += 30.857142857142858;
			}
			if (!dayTime)
			{
				if (time > 32400.0)
				{
					bloodMoon = false;
					time = 0.0;
					dayTime = true;
					if (starGame)
					{
						dayTime = false;
					}
					moonPhase++;
					if (moonPhase >= 7)
					{
						moonPhase = 0;
					}
				}
			}
			else if (time > 54000.0)
			{
				time = 0.0;
				dayTime = false;
			}
		}
		else if (netMode == 1)
		{
			UpdateTime();
		}
	}

	public static void clrInput()
	{
		keyCount = 0;
		inputTextEscape = false;
	}

	[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
	public static extern short GetKeyState(int keyCode);

	public static string GetInputText(string oldString, bool allowMultiLine = false)
	{
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		if (dedServ)
		{
			return "";
		}
		if (!hasFocus)
		{
			return oldString;
		}
		inputTextEnter = false;
		inputTextEscape = false;
		string text = oldString;
		string text2 = "";
		if (text == null)
		{
			text = "";
		}
		bool flag = false;
		if (((KeyboardState)(ref inputText)).IsKeyDown((Keys)162) || ((KeyboardState)(ref inputText)).IsKeyDown((Keys)163))
		{
			if (((KeyboardState)(ref inputText)).IsKeyDown((Keys)90) && !((KeyboardState)(ref oldInputText)).IsKeyDown((Keys)90))
			{
				text = "";
			}
			else if (((KeyboardState)(ref inputText)).IsKeyDown((Keys)88) && !((KeyboardState)(ref oldInputText)).IsKeyDown((Keys)88))
			{
				Platform.Get<IClipboard>().Value = oldString;
				text = "";
			}
			else if ((((KeyboardState)(ref inputText)).IsKeyDown((Keys)67) && !((KeyboardState)(ref oldInputText)).IsKeyDown((Keys)67)) || (((KeyboardState)(ref inputText)).IsKeyDown((Keys)45) && !((KeyboardState)(ref oldInputText)).IsKeyDown((Keys)45)))
			{
				Platform.Get<IClipboard>().Value = oldString;
			}
			else if (((KeyboardState)(ref inputText)).IsKeyDown((Keys)86) && !((KeyboardState)(ref oldInputText)).IsKeyDown((Keys)86))
			{
				text2 = PasteTextIn(allowMultiLine, text2);
			}
		}
		else
		{
			if (inputText.PressingShift())
			{
				if (((KeyboardState)(ref inputText)).IsKeyDown((Keys)46) && !((KeyboardState)(ref oldInputText)).IsKeyDown((Keys)46))
				{
					Platform.Get<IClipboard>().Value = oldString;
					text = "";
				}
				if (((KeyboardState)(ref inputText)).IsKeyDown((Keys)45) && !((KeyboardState)(ref oldInputText)).IsKeyDown((Keys)45))
				{
					text2 = PasteTextIn(allowMultiLine, text2);
				}
			}
			for (int i = 0; i < keyCount; i++)
			{
				int num = keyInt[i];
				string text3 = keyString[i];
				if (num == 13)
				{
					inputTextEnter = true;
				}
				else if (num == 27)
				{
					inputTextEscape = true;
				}
				else if (num >= 32 && num != 127)
				{
					text2 += text3;
				}
			}
		}
		keyCount = 0;
		text += text2;
		oldInputText = inputText;
		inputText = Keyboard.GetState();
		Keys[] pressedKeys = ((KeyboardState)(ref inputText)).GetPressedKeys();
		Keys[] pressedKeys2 = ((KeyboardState)(ref oldInputText)).GetPressedKeys();
		if (((KeyboardState)(ref inputText)).IsKeyDown((Keys)8) && ((KeyboardState)(ref oldInputText)).IsKeyDown((Keys)8))
		{
			backSpaceRate -= 0.05f;
			if (backSpaceRate < 0f)
			{
				backSpaceRate = 0f;
			}
			if (backSpaceCount <= 0)
			{
				backSpaceCount = (int)Math.Round(backSpaceRate);
				flag = true;
			}
			backSpaceCount--;
		}
		else
		{
			backSpaceRate = 7f;
			backSpaceCount = 15;
		}
		for (int j = 0; j < pressedKeys.Length; j++)
		{
			bool flag2 = true;
			for (int k = 0; k < pressedKeys2.Length; k++)
			{
				if ((int)pressedKeys[j] == (int)pressedKeys2[k])
				{
					flag2 = false;
				}
			}
			if (string.Concat(pressedKeys[j]) == "Back" && (flag2 || flag) && text.Length > 0)
			{
				TextSnippet[] array = ChatManager.ParseMessage(text, Color.White).ToArray();
				text = ((!array[^1].DeleteWhole) ? text.Substring(0, text.Length - 1) : text.Substring(0, text.Length - array[^1].TextOriginal.Length));
			}
		}
		return text;
	}

	private static string PasteTextIn(bool allowMultiLine, string newKeys)
	{
		newKeys = ((!allowMultiLine) ? (newKeys + Platform.Get<IClipboard>().Value) : (newKeys + Platform.Get<IClipboard>().MultiLineValue));
		return newKeys;
	}

	public void MouseTextHackZoom(string text, string buffTooltip = null)
	{
		MouseTextHackZoom(text, 0, 0, buffTooltip);
	}

	public void MouseTextHackZoom(string text, int itemRarity, byte diff = 0, string buffTooltip = null)
	{
		MouseText(text, buffTooltip, itemRarity, diff);
	}

	public void MouseTextNoOverride(string cursorText, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0)
	{
		MouseText(cursorText, null, rare, diff, hackedMouseX, hackedMouseY, hackedScreenWidth, hackedScreenHeight, pushWidthX, noOverride: true);
	}

	public void MouseText(string cursorText, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0)
	{
		MouseText(cursorText, null, rare, diff, hackedMouseX, hackedMouseY, hackedScreenWidth, hackedScreenHeight, pushWidthX);
	}

	public void MouseText(string cursorText, string buffTooltip, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0, bool noOverride = false)
	{
		if (!_mouseTextCache.noOverride)
		{
			_mouseTextCache = new MouseTextCache
			{
				noOverride = noOverride,
				isValid = true,
				cursorText = cursorText,
				rare = rare,
				diff = diff,
				X = hackedMouseX,
				Y = hackedMouseY,
				hackedScreenWidth = hackedScreenWidth,
				hackedScreenHeight = hackedScreenHeight,
				buffTooltip = buffTooltip
			};
		}
	}

	private void MouseTextInner(MouseTextCache info)
	{
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_045d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0464: Unknown result type (might be due to invalid IL or missing references)
		//IL_0469: Unknown result type (might be due to invalid IL or missing references)
		//IL_056c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0571: Unknown result type (might be due to invalid IL or missing references)
		//IL_0578: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_058c: Unknown result type (might be due to invalid IL or missing references)
		string cursorText = info.cursorText;
		int num = info.rare;
		byte diff = info.diff;
		int x = info.X;
		int y = info.Y;
		int hackedScreenWidth = info.hackedScreenWidth;
		int hackedScreenHeight = info.hackedScreenHeight;
		if (mouseNPCType > -1 || cursorText == null)
		{
			return;
		}
		int X = mouseX + 14;
		int Y = mouseY + 14;
		if (x != -1 && y != -1)
		{
			X = x + 10;
			Y = y + 10;
		}
		if (ThickMouse)
		{
			X += 6;
			Y += 6;
		}
		if (!mouseItem.IsAir)
		{
			X += 34;
		}
		new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor);
		Vector2 vector = FontAssets.MouseText.Value.MeasureString(cursorText);
		if (HoverItem.type > 0)
		{
			MouseText_DrawItemTooltip(info, num, diff, X, Y);
			return;
		}
		if (info.buffTooltip != null && info.buffTooltip != "")
		{
			MouseText_DrawBuffTooltip(info.buffTooltip, ref X, ref Y, (int)vector.Y);
		}
		if (hackedScreenHeight != -1 && hackedScreenWidth != -1)
		{
			if ((float)X + vector.X + 4f > (float)hackedScreenWidth)
			{
				X = (int)((float)hackedScreenWidth - vector.X - 4f);
			}
			if ((float)Y + vector.Y + 4f > (float)hackedScreenHeight)
			{
				Y = (int)((float)hackedScreenHeight - vector.Y - 4f);
			}
		}
		else
		{
			if ((float)X + vector.X + 4f > (float)screenWidth)
			{
				X = (int)((float)screenWidth - vector.X - 4f);
			}
			if ((float)Y + vector.Y + 4f > (float)screenHeight)
			{
				Y = (int)((float)screenHeight - vector.Y - 4f);
			}
		}
		float num2 = (float)(int)mouseTextColor / 255f;
		Color baseColor = default(Color);
		((Color)(ref baseColor))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor);
		if (num == -11)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(255f * num2), (int)(byte)(175f * num2), (int)(byte)(0f * num2), (int)mouseTextColor);
		}
		if (num == -10)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(65f * num2), (int)(byte)(255f * num2), (int)(byte)(110f * num2), (int)mouseTextColor);
		}
		if (num == -1)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(130f * num2), (int)(byte)(130f * num2), (int)(byte)(130f * num2), (int)mouseTextColor);
		}
		if (num == 1)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(150f * num2), (int)(byte)(150f * num2), (int)(byte)(255f * num2), (int)mouseTextColor);
		}
		if (num == 2)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(150f * num2), (int)(byte)(255f * num2), (int)(byte)(150f * num2), (int)mouseTextColor);
		}
		if (num == 3)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(255f * num2), (int)(byte)(200f * num2), (int)(byte)(150f * num2), (int)mouseTextColor);
		}
		if (num == 4)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(255f * num2), (int)(byte)(150f * num2), (int)(byte)(150f * num2), (int)mouseTextColor);
		}
		if (num == 5)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(255f * num2), (int)(byte)(150f * num2), (int)(byte)(255f * num2), (int)mouseTextColor);
		}
		if (num == 6)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(210f * num2), (int)(byte)(160f * num2), (int)(byte)(255f * num2), (int)mouseTextColor);
		}
		if (num == 7)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(150f * num2), (int)(byte)(255f * num2), (int)(byte)(10f * num2), (int)mouseTextColor);
		}
		if (num == 8)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(255f * num2), (int)(byte)(255f * num2), (int)(byte)(10f * num2), (int)mouseTextColor);
		}
		if (num == 9)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(5f * num2), (int)(byte)(200f * num2), (int)(byte)(255f * num2), (int)mouseTextColor);
		}
		if (num == 10)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(255f * num2), (int)(byte)(40f * num2), (int)(byte)(100f * num2), (int)mouseTextColor);
		}
		if (num == 11)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(180f * num2), (int)(byte)(40f * num2), (int)(byte)(255f * num2), (int)mouseTextColor);
		}
		if (num > 11)
		{
			baseColor = RarityLoader.GetRarity(num).RarityColor * num2;
		}
		if (HoverItem.expert || num == -12)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)((float)DiscoR * num2), (int)(byte)((float)DiscoG * num2), (int)(byte)((float)DiscoB * num2), (int)mouseTextColor);
		}
		if (HoverItem.master || num == -13)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)(255f * num2), (int)(byte)(masterColor * 200f * num2), 0, (int)mouseTextColor);
		}
		if (diff == 1)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)((float)(int)((Color)(ref mcColor)).R * num2), (int)(byte)((float)(int)((Color)(ref mcColor)).G * num2), (int)(byte)((float)(int)((Color)(ref mcColor)).B * num2), (int)mouseTextColor);
		}
		if (diff == 2)
		{
			((Color)(ref baseColor))._002Ector((int)(byte)((float)(int)((Color)(ref hcColor)).R * num2), (int)(byte)((float)(int)((Color)(ref hcColor)).G * num2), (int)(byte)((float)(int)((Color)(ref hcColor)).B * num2), (int)mouseTextColor);
		}
		ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, cursorText, new Vector2((float)X, (float)Y), baseColor, 0f, Vector2.Zero, Vector2.One);
	}

	private void MouseText_DrawItemTooltip(MouseTextCache info, int rare, byte diff, int X, int Y)
	{
		//IL_055b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0560: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05da: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0662: Unknown result type (might be due to invalid IL or missing references)
		//IL_0688: Unknown result type (might be due to invalid IL or missing references)
		//IL_0676: Unknown result type (might be due to invalid IL or missing references)
		//IL_069c: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0706: Unknown result type (might be due to invalid IL or missing references)
		//IL_0716: Unknown result type (might be due to invalid IL or missing references)
		//IL_0720: Unknown result type (might be due to invalid IL or missing references)
		//IL_0937: Unknown result type (might be due to invalid IL or missing references)
		//IL_093c: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07be: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e23: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_089a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0891: Unknown result type (might be due to invalid IL or missing references)
		//IL_089f: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baa: Unknown result type (might be due to invalid IL or missing references)
		bool settingsEnabled_OpaqueBoxBehindTooltips = SettingsEnabled_OpaqueBoxBehindTooltips;
		Color color = default(Color);
		((Color)(ref color))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor);
		Item hoverItem = HoverItem;
		int yoyoLogo = -1;
		int researchLine = -1;
		rare = hoverItem.rare;
		float knockBack = hoverItem.knockBack;
		float num = 1f;
		if (hoverItem.melee && player[myPlayer].kbGlove)
		{
			num += 1f;
		}
		if (player[myPlayer].kbBuff)
		{
			num += 0.5f;
		}
		if (num != 1f)
		{
			hoverItem.knockBack *= num;
		}
		if (hoverItem.ranged && player[myPlayer].shroomiteStealth)
		{
			hoverItem.knockBack *= 1f + (1f - player[myPlayer].stealth) * 0.5f;
		}
		int num12 = 30;
		int numLines = 1;
		string[] array = new string[num12];
		bool[] array2 = new bool[num12];
		bool[] array3 = new bool[num12];
		for (int j = 0; j < num12; j++)
		{
			array2[j] = false;
			array3[j] = false;
		}
		string[] tooltipNames = new string[num12];
		MouseText_DrawItemTooltip_GetLinesInfo(hoverItem, ref yoyoLogo, ref researchLine, knockBack, ref numLines, array, array2, array3, tooltipNames, out var prefixlineIndex);
		float num16 = (float)(int)mouseTextColor / 255f;
		float num17 = num16;
		int a = mouseTextColor;
		if (npcShop > 0 && hoverItem.value >= 0 && (hoverItem.type < 71 || hoverItem.type > 74))
		{
			LocalPlayer.GetItemExpectedPrice(hoverItem, out var calcForSelling, out var calcForBuying);
			long num18 = ((hoverItem.isAShopItem || hoverItem.buyOnce) ? calcForBuying : calcForSelling);
			if (hoverItem.shopSpecialCurrency != -1)
			{
				tooltipNames[numLines] = "SpecialPrice";
				CustomCurrencyManager.GetPriceText(hoverItem.shopSpecialCurrency, array, ref numLines, num18);
				((Color)(ref color))._002Ector((int)(byte)(255f * num17), (int)(byte)(255f * num17), (int)(byte)(255f * num17), a);
			}
			else if (num18 > 0)
			{
				string text = "";
				long num19 = 0L;
				long num20 = 0L;
				long num21 = 0L;
				long num22 = 0L;
				long num2 = num18 * hoverItem.stack;
				if (!hoverItem.buy)
				{
					num2 = num18 / 5;
					if (num2 < 1)
					{
						num2 = 1L;
					}
					long num3 = num2;
					num2 *= hoverItem.stack;
					int amount = shopSellbackHelper.GetAmount(hoverItem);
					if (amount > 0)
					{
						num2 += (-num3 + calcForBuying) * Math.Min(amount, hoverItem.stack);
					}
				}
				if (num2 < 1)
				{
					num2 = 1L;
				}
				if (num2 >= 1000000)
				{
					num19 = num2 / 1000000;
					num2 -= num19 * 1000000;
				}
				if (num2 >= 10000)
				{
					num20 = num2 / 10000;
					num2 -= num20 * 10000;
				}
				if (num2 >= 100)
				{
					num21 = num2 / 100;
					num2 -= num21 * 100;
				}
				if (num2 >= 1)
				{
					num22 = num2;
				}
				if (num19 > 0)
				{
					text = text + num19 + " " + Lang.inter[15].Value + " ";
				}
				if (num20 > 0)
				{
					text = text + num20 + " " + Lang.inter[16].Value + " ";
				}
				if (num21 > 0)
				{
					text = text + num21 + " " + Lang.inter[17].Value + " ";
				}
				if (num22 > 0)
				{
					text = text + num22 + " " + Lang.inter[18].Value + " ";
				}
				if (!hoverItem.buy)
				{
					array[numLines] = Lang.tip[49].Value + " " + text;
				}
				else
				{
					array[numLines] = Lang.tip[50].Value + " " + text;
				}
				tooltipNames[numLines] = "Price";
				numLines++;
				if (num19 > 0)
				{
					((Color)(ref color))._002Ector((int)(byte)(220f * num17), (int)(byte)(220f * num17), (int)(byte)(198f * num17), a);
				}
				else if (num20 > 0)
				{
					((Color)(ref color))._002Ector((int)(byte)(224f * num17), (int)(byte)(201f * num17), (int)(byte)(92f * num17), a);
				}
				else if (num21 > 0)
				{
					((Color)(ref color))._002Ector((int)(byte)(181f * num17), (int)(byte)(192f * num17), (int)(byte)(193f * num17), a);
				}
				else if (num22 > 0)
				{
					((Color)(ref color))._002Ector((int)(byte)(246f * num17), (int)(byte)(138f * num17), (int)(byte)(96f * num17), a);
				}
			}
			else if (hoverItem.type != 3817)
			{
				array[numLines] = Lang.tip[51].Value;
				tooltipNames[numLines] = "Price";
				numLines++;
				((Color)(ref color))._002Ector((int)(byte)(120f * num17), (int)(byte)(120f * num17), (int)(byte)(120f * num17), a);
			}
		}
		Vector2 zero = Vector2.Zero;
		Color?[] overrideColor;
		List<TooltipLine> lines = ItemLoader.ModifyTooltips(HoverItem, ref numLines, tooltipNames, ref array, ref array2, ref array3, ref yoyoLogo, out overrideColor, prefixlineIndex);
		List<DrawableTooltipLine> drawableLines = lines.Select((TooltipLine x, int i) => new DrawableTooltipLine(x, i, 0, 0, Color.White)).ToList();
		int num4 = 0;
		for (int k = 0; k < numLines; k++)
		{
			Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, array[k], Vector2.One);
			if (stringSize.X > zero.X)
			{
				zero.X = stringSize.X;
			}
			zero.Y += stringSize.Y + (float)num4;
		}
		if (yoyoLogo != -1)
		{
			zero.Y += 24f;
		}
		X += toolTipDistance;
		Y += toolTipDistance;
		int num5 = 4;
		if (settingsEnabled_OpaqueBoxBehindTooltips)
		{
			X += 8;
			Y += 2;
			num5 = 18;
		}
		int num6 = screenWidth;
		int num7 = screenHeight;
		if ((float)X + zero.X + (float)num5 > (float)num6)
		{
			X = (int)((float)num6 - zero.X - (float)num5);
		}
		if ((float)Y + zero.Y + (float)num5 > (float)num7)
		{
			Y = (int)((float)num7 - zero.Y - (float)num5);
		}
		int num8 = 0;
		num16 = (float)(int)mouseTextColor / 255f;
		if (settingsEnabled_OpaqueBoxBehindTooltips)
		{
			num16 = MathHelper.Lerp(num16, 1f, 1f);
			int num9 = 14;
			int num10 = 9;
			Utils.DrawInvBG(spriteBatch, new Rectangle(X - num9, Y - num10, (int)zero.X + num9 * 2, (int)zero.Y + num10 + num10 / 2), new Color(23, 25, 81, 255) * 0.925f);
		}
		bool globalCanDraw = ItemLoader.PreDrawTooltip(HoverItem, lines.AsReadOnly(), ref X, ref Y);
		for (int l = 0; l < numLines; l++)
		{
			drawableLines[l].OriginalX = X;
			drawableLines[l].OriginalY = Y + num8;
			if (drawableLines[l].Mod == "Terraria" && drawableLines[l].Name == "OneDropLogo")
			{
				float num11 = 1f;
				int num13 = (int)((float)(int)mouseTextColor * num11);
				Color color2 = Color.Black;
				drawableLines[l].Color = new Color(num13, num13, num13, num13);
				if (ItemLoader.PreDrawTooltipLine(HoverItem, drawableLines[l], ref num4) && globalCanDraw)
				{
					for (int m = 0; m < 5; m++)
					{
						int num14 = drawableLines[l].X;
						int num15 = drawableLines[l].Y;
						if (m == 4)
						{
							((Color)(ref color2))._002Ector(num13, num13, num13, num13);
						}
						switch (m)
						{
						case 0:
							num14--;
							break;
						case 1:
							num14++;
							break;
						case 2:
							num15--;
							break;
						case 3:
							num15++;
							break;
						}
						Color drawColor2 = (Color)(((_003F?)drawableLines[l].OverrideColor) ?? drawableLines[l].Color);
						spriteBatch.Draw(TextureAssets.OneDropLogo.Value, new Vector2((float)num14, (float)num15), (Rectangle?)null, (m != 4) ? color2 : drawColor2, drawableLines[l].Rotation, drawableLines[l].Origin, (drawableLines[l].BaseScale.X + drawableLines[l].BaseScale.Y) / 2f, (SpriteEffects)0, 0f);
					}
				}
			}
			else
			{
				Color black = Color.Black;
				((Color)(ref black))._002Ector(num17, num17, num17, num17);
				if (drawableLines[l].Mod == "Terraria" && drawableLines[l].Name == "ItemName")
				{
					if (rare == -11)
					{
						((Color)(ref black))._002Ector((int)(byte)(255f * num17), (int)(byte)(175f * num17), (int)(byte)(0f * num17), a);
					}
					if (rare == -1)
					{
						((Color)(ref black))._002Ector((int)(byte)(130f * num17), (int)(byte)(130f * num17), (int)(byte)(130f * num17), a);
					}
					if (rare == 1)
					{
						((Color)(ref black))._002Ector((int)(byte)(150f * num17), (int)(byte)(150f * num17), (int)(byte)(255f * num17), a);
					}
					if (rare == 2)
					{
						((Color)(ref black))._002Ector((int)(byte)(150f * num17), (int)(byte)(255f * num17), (int)(byte)(150f * num17), a);
					}
					if (rare == 3)
					{
						((Color)(ref black))._002Ector((int)(byte)(255f * num17), (int)(byte)(200f * num17), (int)(byte)(150f * num17), a);
					}
					if (rare == 4)
					{
						((Color)(ref black))._002Ector((int)(byte)(255f * num17), (int)(byte)(150f * num17), (int)(byte)(150f * num17), a);
					}
					if (rare == 5)
					{
						((Color)(ref black))._002Ector((int)(byte)(255f * num17), (int)(byte)(150f * num17), (int)(byte)(255f * num17), a);
					}
					if (rare == 6)
					{
						((Color)(ref black))._002Ector((int)(byte)(210f * num17), (int)(byte)(160f * num17), (int)(byte)(255f * num17), a);
					}
					if (rare == 7)
					{
						((Color)(ref black))._002Ector((int)(byte)(150f * num17), (int)(byte)(255f * num17), (int)(byte)(10f * num17), a);
					}
					if (rare == 8)
					{
						((Color)(ref black))._002Ector((int)(byte)(255f * num17), (int)(byte)(255f * num17), (int)(byte)(10f * num17), a);
					}
					if (rare == 9)
					{
						((Color)(ref black))._002Ector((int)(byte)(5f * num17), (int)(byte)(200f * num17), (int)(byte)(255f * num17), a);
					}
					if (rare == 10)
					{
						((Color)(ref black))._002Ector((int)(byte)(255f * num17), (int)(byte)(40f * num17), (int)(byte)(100f * num17), a);
					}
					if (rare == 11)
					{
						((Color)(ref black))._002Ector((int)(byte)(180f * num17), (int)(byte)(40f * num17), (int)(byte)(255f * num17), a);
					}
					if (rare > 11)
					{
						black = RarityLoader.GetRarity(rare).RarityColor * num17;
					}
					if (diff == 1)
					{
						((Color)(ref black))._002Ector((int)(byte)((float)(int)((Color)(ref mcColor)).R * num17), (int)(byte)((float)(int)((Color)(ref mcColor)).G * num17), (int)(byte)((float)(int)((Color)(ref mcColor)).B * num17), a);
					}
					if (diff == 2)
					{
						((Color)(ref black))._002Ector((int)(byte)((float)(int)((Color)(ref hcColor)).R * num17), (int)(byte)((float)(int)((Color)(ref hcColor)).G * num17), (int)(byte)((float)(int)((Color)(ref hcColor)).B * num17), a);
					}
					if (hoverItem.expert || rare == -12)
					{
						((Color)(ref black))._002Ector((int)(byte)((float)DiscoR * num17), (int)(byte)((float)DiscoG * num17), (int)(byte)((float)DiscoB * num17), a);
					}
					if (hoverItem.master || rare == -13)
					{
						((Color)(ref black))._002Ector((int)(byte)(255f * num17), (int)(byte)(masterColor * 200f * num17), 0, a);
					}
				}
				else if (array2[l])
				{
					black = ((!array3[l]) ? new Color((int)(byte)(120f * num17), (int)(byte)(190f * num17), (int)(byte)(120f * num17), a) : new Color((int)(byte)(190f * num17), (int)(byte)(120f * num17), (int)(byte)(120f * num17), a));
				}
				else if (drawableLines[l].Mod == "Terraria" && drawableLines[l].Name == "Price")
				{
					black = color;
				}
				if (drawableLines[l].Mod == "Terraria" && drawableLines[l].Name == "JourneyResearch")
				{
					black = Colors.JourneyMode;
				}
				drawableLines[l].Color = black;
				Color realLineColor = black;
				if (overrideColor[l].HasValue)
				{
					realLineColor = overrideColor[l].Value * num17;
					drawableLines[l].OverrideColor = realLineColor;
				}
				if (ItemLoader.PreDrawTooltipLine(HoverItem, drawableLines[l], ref num4) && globalCanDraw)
				{
					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, drawableLines[l].Font, drawableLines[l].Text, new Vector2((float)drawableLines[l].X, (float)drawableLines[l].Y), realLineColor, drawableLines[l].Rotation, drawableLines[l].Origin, drawableLines[l].BaseScale, drawableLines[l].MaxWidth, drawableLines[l].Spread);
				}
			}
			ItemLoader.PostDrawTooltipLine(HoverItem, drawableLines[l]);
			num8 += (int)(FontAssets.MouseText.Value.MeasureString(drawableLines[l].Text).Y + (float)num4);
		}
		ItemLoader.PostDrawTooltip(HoverItem, drawableLines.AsReadOnly());
	}

	public static void MouseText_DrawItemTooltip_GetLinesInfo(Item item, ref int yoyoLogo, ref int researchLine, float oldKB, ref int numLines, string[] toolTipLine, bool[] preFixLine, bool[] badPreFixLine, string[] toolTipNames, out int prefixlineIndex)
	{
		//IL_1aaf: Unknown result type (might be due to invalid IL or missing references)
		prefixlineIndex = -1;
		toolTipLine[0] = item.HoverName;
		toolTipNames[0] = "ItemName";
		if (item.favorited)
		{
			toolTipLine[numLines++] = Lang.tip[56].Value;
			toolTipNames[numLines - 1] = "Favorite";
			toolTipLine[numLines++] = Lang.tip[57].Value;
			toolTipNames[numLines - 1] = "FavoriteDesc";
			if (LocalPlayer.chest != -1)
			{
				ChestUI.GetContainerUsageInfo(out var _, out var chestinv);
				if (ChestUI.IsBlockedFromTransferIntoChest(item, chestinv))
				{
					toolTipLine[numLines++] = Language.GetTextValue("UI.ItemCannotBePlacedInsideItself");
					toolTipNames[numLines - 1] = "NoTransfer";
				}
			}
		}
		if (item.social)
		{
			toolTipLine[numLines] = Lang.tip[0].Value;
			toolTipNames[numLines] = "Social";
			numLines++;
			toolTipLine[numLines] = Lang.tip[1].Value;
			toolTipNames[numLines] = "SocialDesc";
			numLines++;
		}
		else
		{
			if (item.damage > 0 && (!item.notAmmo || item.useStyle != 0) && (item.type < 71 || item.type > 74 || player[myPlayer].HasItem(905)) && item.DamageType.ShowStatTooltipLine(player[myPlayer], "Damage"))
			{
				LocalizedText tip;
				if (item.DamageType != null)
				{
					bool addLeadingSpace = !(item.DamageType is VanillaDamageClass);
					tip = new LocalizedText("", (addLeadingSpace ? " " : "") + item.DamageType.DisplayName);
				}
				else
				{
					tip = Lang.tip[55];
				}
				int damage = player[myPlayer].GetWeaponDamage(item, forTooltip: true);
				toolTipLine[numLines] = damage + tip.Value;
				toolTipNames[numLines] = "Damage";
				numLines++;
				if (item.DamageType.UseStandardCritCalcs && item.DamageType.ShowStatTooltipLine(player[myPlayer], "CritChance"))
				{
					int crit = player[myPlayer].GetWeaponCrit(item);
					toolTipLine[numLines] = crit + Lang.tip[5].Value;
					toolTipNames[numLines] = "CritChance";
					numLines++;
				}
				if (item.useStyle != 0 && item.DamageType.ShowStatTooltipLine(player[myPlayer], "Speed"))
				{
					if (item.useAnimation <= 8)
					{
						toolTipLine[numLines] = Lang.tip[6].Value;
					}
					else if (item.useAnimation <= 20)
					{
						toolTipLine[numLines] = Lang.tip[7].Value;
					}
					else if (item.useAnimation <= 25)
					{
						toolTipLine[numLines] = Lang.tip[8].Value;
					}
					else if (item.useAnimation <= 30)
					{
						toolTipLine[numLines] = Lang.tip[9].Value;
					}
					else if (item.useAnimation <= 35)
					{
						toolTipLine[numLines] = Lang.tip[10].Value;
					}
					else if (item.useAnimation <= 45)
					{
						toolTipLine[numLines] = Lang.tip[11].Value;
					}
					else if (item.useAnimation <= 55)
					{
						toolTipLine[numLines] = Lang.tip[12].Value;
					}
					else
					{
						toolTipLine[numLines] = Lang.tip[13].Value;
					}
					toolTipNames[numLines] = "Speed";
					numLines++;
					if (item.DamageType == DamageClass.MeleeNoSpeed || ItemID.Sets.BonusAttackSpeedMultiplier[item.type] == 0f)
					{
						if (Terraria.ModLoader.ModLoader.attackSpeedScalingTooltipVisibility == 0)
						{
							toolTipLine[numLines] = Language.GetTextValue("tModLoader.NoAttackSpeedScaling");
							toolTipNames[numLines] = "NoSpeedScaling";
							numLines++;
						}
					}
					else if (ItemID.Sets.BonusAttackSpeedMultiplier[item.type] != 1f && Terraria.ModLoader.ModLoader.attackSpeedScalingTooltipVisibility <= 1)
					{
						int attackSpeedScaling = (int)(ItemID.Sets.BonusAttackSpeedMultiplier[item.type] * 100f);
						toolTipLine[numLines] = Language.GetTextValue("tModLoader.SpecialAttackSpeedScaling", attackSpeedScaling);
						toolTipNames[numLines] = "SpecialSpeedScaling";
						numLines++;
					}
				}
				if (item.DamageType.ShowStatTooltipLine(player[myPlayer], "Knockback"))
				{
					float num15 = player[myPlayer].GetWeaponKnockback(item, item.knockBack);
					if (num15 == 0f)
					{
						toolTipLine[numLines] = Lang.tip[14].Value;
					}
					else if ((double)num15 <= 1.5)
					{
						toolTipLine[numLines] = Lang.tip[15].Value;
					}
					else if (num15 <= 3f)
					{
						toolTipLine[numLines] = Lang.tip[16].Value;
					}
					else if (num15 <= 4f)
					{
						toolTipLine[numLines] = Lang.tip[17].Value;
					}
					else if (num15 <= 6f)
					{
						toolTipLine[numLines] = Lang.tip[18].Value;
					}
					else if (num15 <= 7f)
					{
						toolTipLine[numLines] = Lang.tip[19].Value;
					}
					else if (num15 <= 9f)
					{
						toolTipLine[numLines] = Lang.tip[20].Value;
					}
					else if (num15 <= 11f)
					{
						toolTipLine[numLines] = Lang.tip[21].Value;
					}
					else
					{
						toolTipLine[numLines] = Lang.tip[22].Value;
					}
					toolTipNames[numLines] = "Knockback";
					numLines++;
				}
			}
			if (item.fishingPole > 0)
			{
				toolTipLine[numLines] = Language.GetTextValue("GameUI.PrecentFishingPower", item.fishingPole);
				toolTipNames[numLines] = "FishingPower";
				numLines++;
				toolTipLine[numLines] = Language.GetTextValue("GameUI.BaitRequired");
				toolTipNames[numLines] = "NeedsBait";
				numLines++;
			}
			if (item.bait > 0)
			{
				toolTipLine[numLines] = Language.GetTextValue("GameUI.BaitPower", item.bait);
				toolTipNames[numLines] = "BaitPower";
				numLines++;
			}
			if (item.headSlot > 0 || item.bodySlot > 0 || item.legSlot > 0 || item.accessory || projHook[item.shoot] || item.mountType != -1 || (item.buffType > 0 && (lightPet[item.buffType] || vanityPet[item.buffType])))
			{
				if ((item.type == 854 || item.type == 3035) && npcShop > 0)
				{
					toolTipLine[numLines] = Lang.tip[60].Value;
				}
				else
				{
					toolTipLine[numLines] = Lang.tip[23].Value;
				}
				toolTipNames[numLines] = "Equipable";
				numLines++;
			}
			if (item.tileWand > 0)
			{
				toolTipLine[numLines] = Lang.tip[52].Value + Lang.GetItemNameValue(item.tileWand);
				toolTipNames[numLines] = "WandConsumes";
				numLines++;
			}
			if (item.questItem)
			{
				toolTipLine[numLines] = Lang.inter[65].Value;
				toolTipNames[numLines] = "Quest";
				numLines++;
			}
			if (item.vanity)
			{
				toolTipLine[numLines] = Lang.tip[24].Value;
				toolTipNames[numLines] = "Vanity";
				numLines++;
			}
			if (item.defense > 0)
			{
				toolTipLine[numLines] = item.defense + Lang.tip[25].Value;
				toolTipNames[numLines] = "Defense";
				numLines++;
			}
			if (item.pick > 0)
			{
				toolTipLine[numLines] = item.pick + Lang.tip[26].Value;
				toolTipNames[numLines] = "PickPower";
				numLines++;
			}
			if (item.axe > 0)
			{
				toolTipLine[numLines] = item.axe * 5 + Lang.tip[27].Value;
				toolTipNames[numLines] = "AxePower";
				numLines++;
			}
			if (item.hammer > 0)
			{
				toolTipLine[numLines] = item.hammer + Lang.tip[28].Value;
				toolTipNames[numLines] = "HammerPower";
				numLines++;
			}
			if (item.tileBoost != 0)
			{
				int tileBoost = item.tileBoost;
				if (tileBoost > 0)
				{
					toolTipLine[numLines] = "+" + tileBoost + Lang.tip[54].Value;
				}
				else
				{
					toolTipLine[numLines] = tileBoost + Lang.tip[54].Value;
				}
				toolTipNames[numLines] = "TileBoost";
				numLines++;
			}
			if (item.healLife > 0)
			{
				if (item.type == 3001)
				{
					int healLife = item.healLife;
					int num16 = 120;
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresLifeRange", healLife, num16);
				}
				else
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresLife", item.healLife);
				}
				toolTipNames[numLines] = "HealLife";
				numLines++;
			}
			if (item.healMana > 0)
			{
				toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresMana", item.healMana);
				toolTipNames[numLines] = "HealMana";
				numLines++;
			}
			if (item.mana > 0)
			{
				toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.UsesMana", player[myPlayer].GetManaCost(item));
				toolTipNames[numLines] = "UseMana";
				numLines++;
			}
			if (item.createWall > 0 || item.createTile > -1)
			{
				if (item.type != 213 && item.type != 5295 && item.tileWand < 1)
				{
					toolTipLine[numLines] = Lang.tip[33].Value;
					toolTipNames[numLines] = "Placeable";
					numLines++;
				}
			}
			else if (item.ammo > 0 && !item.notAmmo)
			{
				toolTipLine[numLines] = Lang.tip[34].Value;
				toolTipNames[numLines] = "Ammo";
				numLines++;
			}
			else if (item.consumable && !item.chlorophyteExtractinatorConsumable)
			{
				toolTipLine[numLines] = Lang.tip[35].Value;
				toolTipNames[numLines] = "Consumable";
				numLines++;
			}
			if (item.material)
			{
				toolTipLine[numLines] = Lang.tip[36].Value;
				toolTipNames[numLines] = "Material";
				numLines++;
			}
			if (item.ToolTip != null)
			{
				for (int i = 0; i < item.ToolTip.Lines; i++)
				{
					if (i == 0 && ItemID.Sets.UsesCursedByPlanteraTooltip[item.type] && !NPC.downedPlantBoss)
					{
						toolTipLine[numLines] = Lang.tip[59].Value;
						toolTipNames[numLines] = "Tooltip" + i;
						numLines++;
					}
					else
					{
						toolTipLine[numLines] = item.ToolTip.GetLine(i);
						toolTipNames[numLines] = "Tooltip" + i;
						numLines++;
					}
				}
			}
			if (tenthAnniversaryWorld && item.type == 238)
			{
				toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.WizardHatDuringAnniversary");
				numLines++;
			}
			if (getGoodWorld && remixWorld)
			{
				if (item.type == 556 || item.type == 557 || item.type == 544)
				{
					numLines--;
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.MechSummonDuringEverything");
					numLines++;
				}
			}
			else if (item.type == 5334)
			{
				numLines--;
				toolTipLine[numLines] = "";
				numLines--;
				toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.MechdusaSummonNotDuringEverything");
				numLines++;
			}
			if ((item.type == 3818 || item.type == 3819 || item.type == 3820 || item.type == 3824 || item.type == 3825 || item.type == 3826 || item.type == 3829 || item.type == 3830 || item.type == 3831 || item.type == 3832 || item.type == 3833 || item.type == 3834) && !player[myPlayer].downedDD2EventAnyDifficulty)
			{
				toolTipLine[numLines] = Lang.misc[104].Value;
				toolTipNames[numLines] = "EtherianManaWarning";
				numLines++;
			}
			if (item.buffType > 0 && BuffID.Sets.IsWellFed[item.buffType] && expertMode)
			{
				toolTipLine[numLines] = Lang.misc[40].Value;
				toolTipNames[numLines] = "WellFedExpert";
				numLines++;
			}
			if (item.buffTime > 0)
			{
				string text = ((item.buffTime / 60 < 60) ? Language.GetTextValue("CommonItemTooltip.SecondDuration", Math.Round((double)item.buffTime / 60.0)) : Language.GetTextValue("CommonItemTooltip.MinuteDuration", Math.Round((double)(item.buffTime / 60) / 60.0)));
				toolTipNames[numLines] = "BuffTime";
				toolTipLine[numLines] = text;
				numLines++;
			}
			if (item.type == 3262 || item.type == 3282 || item.type == 3283 || item.type == 3284 || item.type == 3285 || item.type == 3286 || item.type == 3316 || item.type == 3315 || item.type == 3317 || item.type == 3291 || item.type == 3389)
			{
				toolTipLine[numLines] = " ";
				yoyoLogo = numLines;
				toolTipNames[numLines] = "OneDropLogo";
				numLines++;
			}
			if (item.prefix > 0)
			{
				Item item2 = tooltipPrefixComparisonItem;
				if (item2 == null || item2.netID != item.netID)
				{
					item2 = new Item();
					item2.netDefaults(item.netID);
				}
				if (item2.damage != item.damage)
				{
					double num17 = (float)item.damage - (float)item2.damage;
					num17 = num17 / (double)item2.damage * 100.0;
					num17 = Math.Round(num17);
					if (num17 > 0.0)
					{
						toolTipLine[numLines] = "+" + num17 + Lang.tip[39].Value;
					}
					else
					{
						toolTipLine[numLines] = num17 + Lang.tip[39].Value;
					}
					if (num17 < 0.0)
					{
						badPreFixLine[numLines] = true;
					}
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixDamage";
					numLines++;
				}
				if (item2.useAnimation != item.useAnimation)
				{
					double num18 = (float)item.useAnimation - (float)item2.useAnimation;
					num18 = num18 / (double)item2.useAnimation * 100.0;
					num18 = Math.Round(num18);
					num18 *= -1.0;
					if (num18 > 0.0)
					{
						toolTipLine[numLines] = "+" + num18 + Lang.tip[40].Value;
					}
					else
					{
						toolTipLine[numLines] = num18 + Lang.tip[40].Value;
					}
					if (num18 < 0.0)
					{
						badPreFixLine[numLines] = true;
					}
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixSpeed";
					numLines++;
				}
				if (item2.crit != item.crit)
				{
					double num10 = (float)item.crit - (float)item2.crit;
					if (num10 > 0.0)
					{
						toolTipLine[numLines] = "+" + num10 + Lang.tip[41].Value;
					}
					else
					{
						toolTipLine[numLines] = num10 + Lang.tip[41].Value;
					}
					if (num10 < 0.0)
					{
						badPreFixLine[numLines] = true;
					}
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixCritChance";
					numLines++;
				}
				if (item2.mana != item.mana)
				{
					double num11 = (float)item.mana - (float)item2.mana;
					num11 = num11 / (double)item2.mana * 100.0;
					num11 = Math.Round(num11);
					if (num11 > 0.0)
					{
						toolTipLine[numLines] = "+" + num11 + Lang.tip[42].Value;
					}
					else
					{
						toolTipLine[numLines] = num11 + Lang.tip[42].Value;
					}
					if (num11 > 0.0)
					{
						badPreFixLine[numLines] = true;
					}
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixUseMana";
					numLines++;
				}
				if (item2.scale != item.scale)
				{
					double num12 = item.scale - item2.scale;
					num12 = num12 / (double)item2.scale * 100.0;
					num12 = Math.Round(num12);
					if (num12 > 0.0)
					{
						toolTipLine[numLines] = "+" + num12 + Lang.tip[43].Value;
					}
					else
					{
						toolTipLine[numLines] = num12 + Lang.tip[43].Value;
					}
					if (num12 < 0.0)
					{
						badPreFixLine[numLines] = true;
					}
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixSize";
					numLines++;
				}
				if (item2.shootSpeed != item.shootSpeed)
				{
					double num13 = item.shootSpeed - item2.shootSpeed;
					num13 = num13 / (double)item2.shootSpeed * 100.0;
					num13 = Math.Round(num13);
					if (num13 > 0.0)
					{
						toolTipLine[numLines] = "+" + num13 + Lang.tip[44].Value;
					}
					else
					{
						toolTipLine[numLines] = num13 + Lang.tip[44].Value;
					}
					if (num13 < 0.0)
					{
						badPreFixLine[numLines] = true;
					}
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixShootSpeed";
					numLines++;
				}
				if (item2.knockBack != oldKB)
				{
					double num14 = oldKB - item2.knockBack;
					num14 = num14 / (double)item2.knockBack * 100.0;
					num14 = Math.Round(num14);
					if (num14 > 0.0)
					{
						toolTipLine[numLines] = "+" + num14 + Lang.tip[45].Value;
					}
					else
					{
						toolTipLine[numLines] = num14 + Lang.tip[45].Value;
					}
					if (num14 < 0.0)
					{
						badPreFixLine[numLines] = true;
					}
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixKnockback";
					numLines++;
				}
				if (item.prefix == 62)
				{
					toolTipLine[numLines] = "+1" + Lang.tip[25].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccDefense";
					numLines++;
				}
				if (item.prefix == 63)
				{
					toolTipLine[numLines] = "+2" + Lang.tip[25].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccDefense";
					numLines++;
				}
				if (item.prefix == 64)
				{
					toolTipLine[numLines] = "+3" + Lang.tip[25].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccDefense";
					numLines++;
				}
				if (item.prefix == 65)
				{
					toolTipLine[numLines] = "+4" + Lang.tip[25].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccDefense";
					numLines++;
				}
				if (item.prefix == 66)
				{
					toolTipLine[numLines] = "+20 " + Lang.tip[31].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMaxMana";
					numLines++;
				}
				if (item.prefix == 67)
				{
					toolTipLine[numLines] = "+2" + Lang.tip[5].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccCritChance";
					numLines++;
				}
				if (item.prefix == 68)
				{
					toolTipLine[numLines] = "+4" + Lang.tip[5].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccCritChance";
					numLines++;
				}
				if (item.prefix == 69)
				{
					toolTipLine[numLines] = "+1" + Lang.tip[39].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccDamage";
					numLines++;
				}
				if (item.prefix == 70)
				{
					toolTipLine[numLines] = "+2" + Lang.tip[39].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccDamage";
					numLines++;
				}
				if (item.prefix == 71)
				{
					toolTipLine[numLines] = "+3" + Lang.tip[39].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccDamage";
					numLines++;
				}
				if (item.prefix == 72)
				{
					toolTipLine[numLines] = "+4" + Lang.tip[39].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccDamage";
					numLines++;
				}
				if (item.prefix == 73)
				{
					toolTipLine[numLines] = "+1" + Lang.tip[46].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMoveSpeed";
					numLines++;
				}
				if (item.prefix == 74)
				{
					toolTipLine[numLines] = "+2" + Lang.tip[46].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMoveSpeed";
					numLines++;
				}
				if (item.prefix == 75)
				{
					toolTipLine[numLines] = "+3" + Lang.tip[46].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMoveSpeed";
					numLines++;
				}
				if (item.prefix == 76)
				{
					toolTipLine[numLines] = "+4" + Lang.tip[46].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMoveSpeed";
					numLines++;
				}
				if (item.prefix == 77)
				{
					toolTipLine[numLines] = "+1" + Lang.tip[47].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMeleeSpeed";
					numLines++;
				}
				if (item.prefix == 78)
				{
					toolTipLine[numLines] = "+2" + Lang.tip[47].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMeleeSpeed";
					numLines++;
				}
				if (item.prefix == 79)
				{
					toolTipLine[numLines] = "+3" + Lang.tip[47].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMeleeSpeed";
					numLines++;
				}
				if (item.prefix == 80)
				{
					toolTipLine[numLines] = "+4" + Lang.tip[47].Value;
					preFixLine[numLines] = true;
					toolTipNames[numLines] = "PrefixAccMeleeSpeed";
					numLines++;
				}
				prefixlineIndex = numLines;
			}
			if (item.wornArmor && player[myPlayer].setBonus != "")
			{
				toolTipLine[numLines] = Lang.tip[48].Value + " " + player[myPlayer].setBonus;
				toolTipNames[numLines] = "SetBonus";
				numLines++;
			}
		}
		if (item.expert)
		{
			toolTipLine[numLines] = Language.GetTextValue("GameUI.Expert");
			toolTipNames[numLines] = "Expert";
			numLines++;
		}
		if (item.master)
		{
			toolTipLine[numLines] = Language.GetTextValue("GameUI.Master");
			toolTipNames[numLines] = "Master";
			numLines++;
		}
		if ((item.tooltipContext == 0 || item.tooltipContext == 2 || item.tooltipContext == 1 || item.tooltipContext == 3 || item.tooltipContext == 4 || item.tooltipContext == 32 || item.tooltipContext == 15 || item.tooltipContext == 6 || item.tooltipContext == 22 || item.tooltipContext == 7 || item.tooltipContext == 5) && LocalPlayer.difficulty == 3 && CreativeItemSacrificesCatalog.Instance.TryGetSacrificeCountCapToUnlockInfiniteItems(item.type, out var amountNeeded))
		{
			int sacrificeCount = LocalPlayerCreativeTracker.ItemSacrifices.GetSacrificeCount(item.type);
			if (amountNeeded - sacrificeCount > 0)
			{
				toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.CreativeSacrificeNeeded", amountNeeded - sacrificeCount);
				researchLine = numLines;
				toolTipNames[numLines] = "JourneyResearch";
				numLines++;
			}
		}
		if (item.StatsModifiedBy.Count > 0)
		{
			if (keyState.PressingShift())
			{
				string modNames = string.Join(", ", item.StatsModifiedBy.Select((Mod m) => m.DisplayName));
				toolTipLine[numLines] = Language.GetTextValue("tModLoader.ModifiedByMods") + modNames;
			}
			else
			{
				toolTipLine[numLines] = Language.GetTextValue("tModLoader.ModifiedByModsHoldSHIFT");
			}
			toolTipNames[numLines] = "ModifiedByMods";
			numLines++;
		}
		string bestiaryNotes = item.BestiaryNotes;
		if (!string.IsNullOrWhiteSpace(bestiaryNotes))
		{
			string[] array = bestiaryNotes.Split('\n');
			foreach (string text2 in array)
			{
				toolTipLine[numLines++] = text2;
				toolTipNames[numLines - 1] = "BestiaryNotes";
			}
		}
	}

	private void MouseText_DrawBuffTooltip(string buffString, ref int X, ref int Y, int buffNameHeight)
	{
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_042b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0340: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e0: Unknown result type (might be due to invalid IL or missing references)
		Point p = default(Point);
		((Point)(ref p))._002Ector(X, Y);
		int num = 220;
		int num8 = 72;
		int num9 = -1;
		float num10 = 1f;
		List<Vector2> list = new List<Vector2>();
		Vector2 vector = ChatManager.GetStringSize(FontAssets.MouseText.Value, buffString, Vector2.One);
		list.Add(vector);
		int num11 = (int)((float)(screenHeight - Y - 24 - num8) * num10) / 20;
		if (num11 < 1)
		{
			num11 = 1;
		}
		if (bannerMouseOver)
		{
			int num12 = 0;
			for (int i = 0; i < NPCLoader.NPCCount; i++)
			{
				if (Item.BannerToNPC(i) != 0 && player[myPlayer].HasNPCBannerBuff(i))
				{
					num12++;
					string nPCNameValue = Lang.GetNPCNameValue(Item.BannerToNPC(i));
					Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(nPCNameValue);
					int num13 = X;
					int num14 = Y + (int)vector2.Y + num12 * 20 + 10;
					int num15 = 0;
					int num2 = num12 / num11;
					for (int j = 0; j < num2; j++)
					{
						num15++;
						num13 += num;
						num14 -= num11 * 20;
					}
					if ((float)(num13 - 24 - num) > (float)screenWidth * num10)
					{
						num9 = num12;
						break;
					}
					list.Add(new Vector2((float)num13, (float)num14) + vector2 - p.ToVector2());
				}
			}
		}
		BuffLoader.CustomBuffTipSize(buffString, list);
		Vector2 zero = Vector2.Zero;
		foreach (Vector2 item in list)
		{
			if (zero.X < item.X)
			{
				zero.X = item.X;
			}
			if (zero.Y < item.Y)
			{
				zero.Y = item.Y;
			}
		}
		if ((float)X + zero.X + 24f > (float)screenWidth * num10)
		{
			X = (int)((float)screenWidth * num10 - zero.X - 24f);
		}
		if ((float)Y + zero.Y + 4f > (float)screenHeight * num10)
		{
			Y = (int)((float)screenHeight * num10 - zero.Y - 4f);
		}
		Color color = default(Color);
		((Color)(ref color))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, 255);
		ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, buffString, new Vector2((float)X, (float)(Y + buffNameHeight)), color, 0f, Vector2.Zero, Vector2.One);
		if (!bannerMouseOver)
		{
			return;
		}
		int num3 = 0;
		for (int k = 0; k < NPCLoader.NPCCount; k++)
		{
			if (Item.BannerToNPC(k) == 0 || !player[myPlayer].HasNPCBannerBuff(k))
			{
				continue;
			}
			num3++;
			bool flag = false;
			for (int l = 0; l < 5; l++)
			{
				int num4 = X;
				int num5 = Y + (int)vector.Y + num3 * 20 + 10;
				int num6 = (num3 - 1) / num11;
				num4 += num * num6;
				num5 -= num11 * 20 * num6;
				string text = Lang.GetNPCNameValue(Item.BannerToNPC(k));
				if (num9 == num3)
				{
					text = Language.GetTextValue("UI.Ellipsis");
					flag = true;
				}
				Color color2 = Color.Black;
				switch (l)
				{
				case 0:
					num4 -= 2;
					break;
				case 1:
					num4 += 2;
					break;
				case 2:
					num5 -= 2;
					break;
				case 3:
					num5 += 2;
					break;
				default:
				{
					float num7 = (float)(int)mouseTextColor / 255f;
					((Color)(ref color2))._002Ector((int)(byte)(80f * num7), (int)(byte)(255f * num7), (int)(byte)(120f * num7), (int)mouseTextColor);
					break;
				}
				}
				spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2((float)num4, (float)num5), color2, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (flag)
			{
				break;
			}
		}
		BuffLoader.DrawCustomBuffTip(buffString, spriteBatch, X, Y + (int)FontAssets.MouseText.Value.MeasureString(buffString).Y);
	}

	protected void DrawFPS()
	{
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		if (showFrameRate)
		{
			string text2 = string.Concat(string.Concat(string.Concat(string.Concat(frameRate), " (", (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer).ToString(), ")"), " (", ((int)(gfxQuality * 100f)).ToString(), "%)"), " ", debugWords);
			int num = 4;
			if (!gameMenu)
			{
				num = screenHeight - 24;
			}
			Vector2 position = default(Vector2);
			((Vector2)(ref position))._002Ector(4f, (float)num);
			Vector2 origin = default(Vector2);
			((Vector2)(ref origin))._002Ector(0f, 0f);
			Vector2 vector = FontAssets.MouseText.Value.MeasureString(text2);
			if (PlayerInput.SettingsForUI.ShowGamepadHints && !gameMenu)
			{
				position.X = (float)(screenWidth - 4) - vector.X;
			}
			spriteBatch.DrawString(FontAssets.MouseText.Value, text2, position, new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, origin, 1f, (SpriteEffects)0, 0f);
		}
	}

	public static void DrawGamepadInstructions()
	{
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		if (drawingPlayerChat || !PlayerInput.SettingsForUI.ShowGamepadHints)
		{
			return;
		}
		string text = PlayerInput.ComposeInstructionsForGamepad();
		PlayerInput.AllowExecutionOfGamepadInstructions = false;
		if (!GamepadDisableInstructionsDisplay && text.Length > 0 && (!player[myPlayer].dead || gameMenu))
		{
			float num = 35f;
			float num2 = 1f;
			Vector2 baseScale = default(Vector2);
			((Vector2)(ref baseScale))._002Ector(num2);
			if (gameMenu)
			{
				num = 90f;
			}
			if (menuMode == 0)
			{
				num += 55f;
			}
			Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, text, new Vector2(1f));
			float t = num2;
			Utils.Swap(ref GlyphTagHandler.GlyphsScale, ref t);
			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(12f, (float)screenHeight - num) - stringSize * new Vector2(0f, 0f), Color.White, 0f, Vector2.Zero, baseScale, -1f, num2 * 2f);
			Utils.Swap(ref GlyphTagHandler.GlyphsScale, ref t);
		}
	}

	public static Color shine(Color newColor, int type)
	{
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		int num = ((Color)(ref newColor)).R;
		int num2 = ((Color)(ref newColor)).G;
		int num3 = ((Color)(ref newColor)).B;
		float num4 = 0.6f;
		switch (type)
		{
		case 25:
			num = (int)((float)(int)((Color)(ref newColor)).R * 0.95f);
			num2 = (int)((float)(int)((Color)(ref newColor)).G * 0.85f);
			num3 = (int)((double)(int)((Color)(ref newColor)).B * 1.1);
			break;
		case 117:
			num = (int)((float)(int)((Color)(ref newColor)).R * 1.1f);
			num2 = (int)((float)(int)((Color)(ref newColor)).G * 1f);
			num3 = (int)((double)(int)((Color)(ref newColor)).B * 1.2);
			break;
		case 204:
			num4 = 0.3f + (float)(int)mouseTextColor / 300f;
			num = (int)((float)(int)((Color)(ref newColor)).R * (1.3f * num4));
			if (num > 255)
			{
				num = 255;
			}
			return new Color(num, num2, num3, 255);
		case 211:
			num4 = 0.3f + (float)(int)mouseTextColor / 300f;
			num2 = (int)((float)(int)((Color)(ref newColor)).G * (1.5f * num4));
			num3 = (int)((float)(int)((Color)(ref newColor)).B * (1.1f * num4));
			break;
		case 147:
		case 161:
			num = (int)((float)(int)((Color)(ref newColor)).R * 1.1f);
			num2 = (int)((float)(int)((Color)(ref newColor)).G * 1.12f);
			num3 = (int)((double)(int)((Color)(ref newColor)).B * 1.15);
			break;
		case 163:
			num = (int)((float)(int)((Color)(ref newColor)).R * 1.05f);
			num2 = (int)((float)(int)((Color)(ref newColor)).G * 1.1f);
			num3 = (int)((double)(int)((Color)(ref newColor)).B * 1.15);
			break;
		case 164:
			num = (int)((float)(int)((Color)(ref newColor)).R * 1.1f);
			num2 = (int)((float)(int)((Color)(ref newColor)).G * 1.1f);
			num3 = (int)((double)(int)((Color)(ref newColor)).B * 1.2);
			break;
		case 178:
			num4 = 0.5f;
			num = (int)((float)(int)((Color)(ref newColor)).R * (1f + num4));
			num2 = (int)((float)(int)((Color)(ref newColor)).G * (1f + num4));
			num3 = (int)((float)(int)((Color)(ref newColor)).B * (1f + num4));
			break;
		case 185:
		case 186:
			num4 = 0.3f;
			num = (int)((float)(int)((Color)(ref newColor)).R * (1f + num4));
			num2 = (int)((float)(int)((Color)(ref newColor)).G * (1f + num4));
			num3 = (int)((float)(int)((Color)(ref newColor)).B * (1f + num4));
			break;
		case 262:
		case 263:
		case 264:
		case 265:
		case 266:
		case 267:
		case 268:
			num3 += 100;
			num += 100;
			num2 += 100;
			break;
		default:
			if (tileShine2[type])
			{
				num = (int)((float)(int)((Color)(ref newColor)).R * (1f + num4));
				num2 = (int)((float)(int)((Color)(ref newColor)).G * (1f + num4));
				num3 = (int)((float)(int)((Color)(ref newColor)).B * (1f + num4));
			}
			break;
		}
		float num5 = shimmerAlpha;
		if (num5 > 0f)
		{
			num = (int)((float)num * (1f - num5) + (float)num * shimmerShine.X * num5);
			num2 = (int)((float)num2 * (1f - num5) + (float)num2 * shimmerShine.Y * num5);
			num3 = (int)((float)num3 * (1f - num5) + (float)num3 * shimmerShine.Z * num5);
		}
		if (num > 255)
		{
			num = 255;
		}
		if (num2 > 255)
		{
			num2 = 255;
		}
		if (num3 > 255)
		{
			num3 = 255;
		}
		((Color)(ref newColor)).R = (byte)num;
		((Color)(ref newColor)).G = (byte)num2;
		((Color)(ref newColor)).B = (byte)num3;
		return new Color((int)(byte)num, (int)(byte)num2, (int)(byte)num3, (int)((Color)(ref newColor)).A);
	}

	public static void shine(ref Vector3 newColor, int type)
	{
		float num = 0.6f;
		switch (type)
		{
		case 25:
			newColor.X *= 0.95f;
			newColor.Y *= 0.85f;
			newColor.Z *= 1.1f;
			break;
		case 117:
			newColor.X *= 1.1f;
			newColor.Z *= 1.2f;
			break;
		case 204:
			num = 0.3f + (float)(int)mouseTextColor / 300f;
			newColor.X *= 1.3f * num;
			break;
		case 211:
			num = 0.3f + (float)(int)mouseTextColor / 300f;
			newColor.Y *= 1.5f * num;
			newColor.Z *= 1.1f * num;
			break;
		case 147:
		case 161:
			newColor.X *= 1.1f;
			newColor.Y *= 1.12f;
			newColor.Z *= 1.15f;
			break;
		case 163:
			newColor.X *= 1.05f;
			newColor.Y *= 1.1f;
			newColor.Z *= 1.15f;
			break;
		case 164:
			newColor.X *= 1.1f;
			newColor.Y *= 1.1f;
			newColor.Z *= 1.2f;
			break;
		case 178:
			num = 0.5f;
			newColor.X *= 1f + num;
			newColor.Y *= 1f + num;
			newColor.Z *= 1f + num;
			break;
		case 185:
		case 186:
			num = 0.3f;
			newColor.X *= 1f + num;
			newColor.Y *= 1f + num;
			newColor.Z *= 1f + num;
			break;
		case 262:
		case 263:
		case 264:
		case 265:
		case 266:
		case 267:
		case 268:
			newColor.X += 0.39f;
			newColor.Y += 0.39f;
			newColor.Z += 0.39f;
			break;
		default:
			if (tileShine2[type])
			{
				newColor.X *= 1f + num;
				newColor.Y *= 1f + num;
				newColor.Z *= 1f + num;
			}
			break;
		}
		float num2 = shimmerAlpha;
		if (num2 > 0f)
		{
			shimmerShine.X = 1.2f;
			shimmerShine.Y = 1f;
			shimmerShine.Z = 1.6f;
			newColor.X = newColor.X * (1f - num2) + newColor.X * shimmerShine.X * num2;
			newColor.Y = newColor.Y * (1f - num2) + newColor.Y * shimmerShine.Y * num2;
			newColor.Z = newColor.Z * (1f - num2) + newColor.Z * shimmerShine.Z * num2;
			if (newColor.X > 1f)
			{
				newColor.X = 1f;
			}
			if (newColor.Y > 1f)
			{
				newColor.Y = 1f;
			}
			if (newColor.Z > 1f)
			{
				newColor.Z = 1f;
			}
		}
	}

	private void DrawTileEntities(bool solidLayer, bool overRenderTargets, bool intoRenderTargets)
	{
		TilesRenderer.PostDrawTiles(solidLayer, overRenderTargets, intoRenderTargets);
	}

	public void ClearCachedTileDraws()
	{
		TilesRenderer.ClearCachedTileDraws(solidLayer: false);
		TilesRenderer.ClearCachedTileDraws(solidLayer: true);
	}

	public void ResetAllContentBasedRenderTargets()
	{
		TilePaintSystem.Reset();
		for (int i = 0; i < ContentThatNeedsRenderTargets.Count; i++)
		{
			ContentThatNeedsRenderTargets[i].Reset();
		}
	}

	internal static bool IsTileSpelunkable(int tileX, int tileY, Tile t)
	{
		return IsTileSpelunkable(tileX, tileY, t.type, t.frameX, t.frameY);
	}

	internal static bool IsTileSpelunkable(int tileX, int tileY, ushort typeCache, short tileFrameX, short tileFrameY)
	{
		bool? modded = TileLoader.IsTileSpelunkable(tileX, tileY, typeCache);
		if (modded.HasValue)
		{
			return modded.Value;
		}
		if (tileSpelunker[typeCache])
		{
			return true;
		}
		if (typeCache == 185 && tileFrameY == 18 && tileFrameX >= 576 && tileFrameX <= 882)
		{
			return true;
		}
		if (typeCache == 186 && tileFrameX >= 864 && tileFrameX <= 1170)
		{
			return true;
		}
		return false;
	}

	internal static bool IsTileBiomeSightable(int tileX, int tileY, Tile t, ref Color sightColor)
	{
		return IsTileBiomeSightable(tileX, tileY, t.type, t.frameX, t.frameY, ref sightColor);
	}

	internal static bool IsTileBiomeSightable(int tileX, int tileY, ushort type, short tileFrameX, short tileFrameY, ref Color sightColor)
	{
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		bool? modded = TileLoader.IsTileBiomeSightable(tileX, tileY, type, ref sightColor);
		if (modded.HasValue)
		{
			return modded.Value;
		}
		if (TileID.Sets.CorruptBiomeSight[type] || (remixWorld && type == 474))
		{
			sightColor = new Color(200, 100, 240);
			return true;
		}
		if (TileID.Sets.CrimsonBiomeSight[type] || (remixWorld && type == 195))
		{
			sightColor = new Color(255, 100, 100);
			return true;
		}
		if (TileID.Sets.HallowBiomeSight[type])
		{
			sightColor = new Color(255, 160, 240);
			return true;
		}
		return false;
	}

	protected void DrawTiles(bool solidLayer, bool forRenderTargets, bool intoRenderTargets, int waterStyleOverride = -1)
	{
		TilesRenderer.Draw(solidLayer, forRenderTargets, intoRenderTargets, waterStyleOverride);
	}

	protected void DrawGoreBehind()
	{
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_0322: Unknown result type (might be due to invalid IL or missing references)
		//IL_032e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < 600; i++)
		{
			if (!gore[i].active || gore[i].type <= 0)
			{
				continue;
			}
			bool flag = false;
			if (GoreID.Sets.DrawBehind[gore[i].type])
			{
				if (gore[i].type < GoreID.Count)
				{
					byte frame = gore[i].frame;
					if (frame >= 7 && frame <= 9)
					{
						goto IL_006b;
					}
				}
				flag = true;
			}
			goto IL_006b;
			IL_006b:
			if (flag)
			{
				LoadGore(gore[i].type);
				if (gore[i].Frame.ColumnCount > 1 || gore[i].Frame.RowCount > 1)
				{
					Rectangle sourceRectangle = gore[i].Frame.GetSourceRectangle(TextureAssets.Gore[gore[i].type].Value);
					Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f) + gore[i].drawOffset, (Rectangle?)sourceRectangle, alpha, gore[i].rotation, new Vector2((float)(sourceRectangle.Width / 2), (float)(sourceRectangle.Height / 2)), gore[i].scale, (SpriteEffects)0, 0f);
				}
				else
				{
					Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)TextureAssets.Gore[gore[i].type].Width() * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)TextureAssets.Gore[gore[i].type].Height() * 0.5) / 16.0)));
					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)) + gore[i].drawOffset, (Rectangle?)new Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2((float)(TextureAssets.Gore[gore[i].type].Width() / 2), (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), gore[i].scale, (SpriteEffects)0, 0f);
				}
			}
		}
	}

	protected void DrawGore()
	{
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f7: Unknown result type (might be due to invalid IL or missing references)
		drawBackGore = false;
		Vector2 vector = default(Vector2);
		for (int i = 0; i < 600; i++)
		{
			if (!gore[i].active || gore[i].type <= 0)
			{
				continue;
			}
			if (GoreID.Sets.DrawBehind[gore[i].type])
			{
				if (gore[i].type < GoreID.Count)
				{
					byte frame = gore[i].frame;
					if (frame >= 7 && frame <= 9)
					{
						goto IL_0078;
					}
				}
				drawBackGore = true;
				continue;
			}
			goto IL_0078;
			IL_0078:
			LoadGore(gore[i].type);
			if (gore[i].Frame.ColumnCount > 1 || gore[i].Frame.RowCount > 1)
			{
				Rectangle sourceRectangle = gore[i].Frame.GetSourceRectangle(TextureAssets.Gore[gore[i].type].Value);
				((Vector2)(ref vector))._002Ector(0f, 0f);
				if (gore[i].type == 1217)
				{
					vector.Y += 4f;
				}
				vector += gore[i].drawOffset;
				Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
				spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f) + vector, (Rectangle?)sourceRectangle, alpha, gore[i].rotation, new Vector2((float)(sourceRectangle.Width / 2), (float)(sourceRectangle.Height / 2)), gore[i].scale, (SpriteEffects)0, 0f);
			}
			else
			{
				Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)TextureAssets.Gore[gore[i].type].Width() * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)TextureAssets.Gore[gore[i].type].Height() * 0.5) / 16.0)));
				spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)) + gore[i].drawOffset, (Rectangle?)new Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2((float)(TextureAssets.Gore[gore[i].type].Width() / 2), (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), gore[i].scale, (SpriteEffects)0, 0f);
			}
		}
		TimeLogger.DetailedDrawTime(24);
	}

	/// <summary>
	/// Draws a small health bar.
	/// <br /> <see cref="F:Terraria.Main.spriteBatch" /> should <strong>already be started</strong> before calling this method.
	/// </summary>
	/// <param name="X">The x-coordinate of the health bar in world coordinates.</param>
	/// <param name="Y">The y-coordinate of the health bar in world coordinates.</param>
	/// <param name="Health">
	/// The current health displayed. The health bar is drawn <c><paramref name="Health" /> / <paramref name="MaxHealth" /></c> percent full.
	/// <br /> If <c><paramref name="Health" /> &lt;= 0</c>, no health bar is drawn.
	/// <br /> If <c><paramref name="Health" /> &gt; <paramref name="MaxHealth" /></c>, the health bar will not exceed max capacity.
	/// </param>
	/// <param name="MaxHealth">The maximum health displayed. The health bar is drawn <c><paramref name="Health" /> / <paramref name="MaxHealth" /></c> percent full.</param>
	/// <param name="alpha">The opacity of the healthbar, where <c>0f</c> is transparent and <c>1f</c> is opaque.</param>
	/// <param name="scale">The visual scale of the health bar.</param>
	/// <param name="noFlip">If <see langword="true" />, then the health bar will not adjust its y-position for players with reversed gravity.</param>
	public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f, bool noFlip = false)
	{
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_028d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		if (Health <= 0)
		{
			return;
		}
		float num = (float)Health / (float)MaxHealth;
		if (num > 1f)
		{
			num = 1f;
		}
		int num2 = (int)(36f * num);
		float num3 = X - 18f * scale;
		float num4 = Y;
		if (player[myPlayer].gravDir == -1f && !noFlip)
		{
			num4 -= screenPosition.Y;
			num4 = screenPosition.Y + (float)screenHeight - num4;
		}
		float num5 = 0f;
		float num6 = 0f;
		float num7 = 0f;
		float num8 = 255f;
		num -= 0.1f;
		if ((double)num > 0.5)
		{
			num6 = 255f;
			num5 = 255f * (1f - num) * 2f;
		}
		else
		{
			num6 = 255f * num * 2f;
			num5 = 255f;
		}
		float num9 = 0.95f;
		num5 = num5 * alpha * num9;
		num6 = num6 * alpha * num9;
		num8 = num8 * alpha * num9;
		if (num5 < 0f)
		{
			num5 = 0f;
		}
		if (num5 > 255f)
		{
			num5 = 255f;
		}
		if (num6 < 0f)
		{
			num6 = 0f;
		}
		if (num6 > 255f)
		{
			num6 = 255f;
		}
		if (num8 < 0f)
		{
			num8 = 0f;
		}
		if (num8 > 255f)
		{
			num8 = 255f;
		}
		Color color = default(Color);
		((Color)(ref color))._002Ector((int)(byte)num5, (int)(byte)num6, (int)(byte)num7, (int)(byte)num8);
		if (num2 < 3)
		{
			num2 = 3;
		}
		if (num2 < 34)
		{
			if (num2 < 36)
			{
				spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - screenPosition.X + (float)num2 * scale, num4 - screenPosition.Y), (Rectangle?)new Rectangle(2, 0, 2, TextureAssets.Hb2.Height()), color, 0f, new Vector2(0f, 0f), scale, (SpriteEffects)0, 0f);
			}
			if (num2 < 34)
			{
				spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - screenPosition.X + (float)(num2 + 2) * scale, num4 - screenPosition.Y), (Rectangle?)new Rectangle(num2 + 2, 0, 36 - num2 - 2, TextureAssets.Hb2.Height()), color, 0f, new Vector2(0f, 0f), scale, (SpriteEffects)0, 0f);
			}
			if (num2 > 2)
			{
				spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - screenPosition.X, num4 - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, num2 - 2, TextureAssets.Hb1.Height()), color, 0f, new Vector2(0f, 0f), scale, (SpriteEffects)0, 0f);
			}
			spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - screenPosition.X + (float)(num2 - 2) * scale, num4 - screenPosition.Y), (Rectangle?)new Rectangle(32, 0, 2, TextureAssets.Hb1.Height()), color, 0f, new Vector2(0f, 0f), scale, (SpriteEffects)0, 0f);
		}
		else
		{
			if (num2 < 36)
			{
				spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - screenPosition.X + (float)num2 * scale, num4 - screenPosition.Y), (Rectangle?)new Rectangle(num2, 0, 36 - num2, TextureAssets.Hb2.Height()), color, 0f, new Vector2(0f, 0f), scale, (SpriteEffects)0, 0f);
			}
			spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - screenPosition.X, num4 - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, num2, TextureAssets.Hb1.Height()), color, 0f, new Vector2(0f, 0f), scale, (SpriteEffects)0, 0f);
		}
	}

	public static float NPCAddHeight(NPC theNPC)
	{
		float num = 0f;
		if (theNPC.type == 125)
		{
			num = 30f;
		}
		else if (theNPC.ModNPC != null)
		{
			num = theNPC.ModNPC.DrawOffsetY;
		}
		else if (theNPC.type == 54)
		{
			num = 2f;
		}
		else if (theNPC.type == 205)
		{
			num = 8f;
		}
		else if (theNPC.type == 182)
		{
			num = 24f;
		}
		else if (theNPC.type == 178)
		{
			num = 2f;
		}
		else if (theNPC.type == 126)
		{
			num = 30f;
		}
		else if (theNPC.type == 6 || theNPC.type == 173)
		{
			num = 26f;
		}
		else if (theNPC.type == 94)
		{
			num = 14f;
		}
		else if (theNPC.type == 7 || theNPC.type == 8 || theNPC.type == 9)
		{
			num = 13f;
		}
		else if (theNPC.type == 98 || theNPC.type == 99 || theNPC.type == 100)
		{
			num = 13f;
		}
		else if (theNPC.type == 95 || theNPC.type == 96 || theNPC.type == 97)
		{
			num = 13f;
		}
		else if (theNPC.type == 10 || theNPC.type == 11 || theNPC.type == 12)
		{
			num = 8f;
		}
		else if (theNPC.type == 13 || theNPC.type == 14 || theNPC.type == 15)
		{
			num = 26f;
		}
		else if (theNPC.type == 175)
		{
			num = 4f;
		}
		else if (theNPC.type == 520)
		{
			num = 2f;
		}
		else if (theNPC.type >= 412 && theNPC.type <= 414)
		{
			num = 18f;
		}
		else if (theNPC.type == 48)
		{
			num = 32f;
		}
		else if (theNPC.type == 49 || theNPC.type == 51)
		{
			num = 4f;
		}
		else if (theNPC.type == 60)
		{
			num = 10f;
		}
		else if (theNPC.type == 62 || theNPC.type == 66 || theNPC.type == 156)
		{
			num = 14f;
		}
		else if (theNPC.type == 63 || theNPC.type == 64 || theNPC.type == 103)
		{
			num = 4f;
		}
		else if (theNPC.type == 65)
		{
			num = 5f;
		}
		else if (theNPC.type == 69)
		{
			num = 4f;
		}
		else if (theNPC.type == 70)
		{
			num = -4f;
		}
		else if (theNPC.type == 72)
		{
			num = -2f;
		}
		else if (theNPC.type == 83 || theNPC.type == 84)
		{
			num = 20f;
		}
		else if (theNPC.type == 150 || theNPC.type == 151 || theNPC.type == 158)
		{
			num = 10f;
		}
		else if (theNPC.type == 152)
		{
			num = 6f;
		}
		else if (theNPC.type == 153 || theNPC.type == 154)
		{
			num = 2f;
		}
		else if (theNPC.type == 165 || theNPC.type == 237 || theNPC.type == 238 || theNPC.type == 240 || theNPC.type == 531)
		{
			num = 10f;
		}
		else if (theNPC.type == 39 || theNPC.type == 40 || theNPC.type == 41)
		{
			num = 26f;
		}
		else if (theNPC.type >= 87 && theNPC.type <= 92)
		{
			num = 56f;
		}
		else if (theNPC.type >= 134 && theNPC.type <= 136)
		{
			num = 30f;
		}
		else if (theNPC.type == 169)
		{
			num = 8f;
		}
		else if (theNPC.type == 174)
		{
			num = 6f;
		}
		else if (theNPC.type == 369)
		{
			num = 2f;
		}
		else if (theNPC.type == 376)
		{
			num = 6f;
		}
		else if (theNPC.type == 579)
		{
			num = -2f;
		}
		else if (theNPC.type == 613 || theNPC.type == 612)
		{
			num = 2f;
		}
		switch (theNPC.type)
		{
		case 269:
		case 270:
		case 271:
		case 274:
		case 277:
			num -= 2f;
			break;
		}
		if (theNPC.townNPC && theNPC.ai[0] == 5f)
		{
			num -= 4f;
			if (theNPC.type == 637 || theNPC.type == 656 || NPCID.Sets.IsTownSlime[theNPC.type])
			{
				num -= 10f;
			}
		}
		if (theNPC.type == 671 || theNPC.type == 672 || theNPC.type == 673 || theNPC.type == 674 || theNPC.type == 675)
		{
			num += 10f;
		}
		return num * theNPC.scale;
	}

	protected void DrawProjectiles()
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		PlayerInput.SetZoom_MouseInWorld();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		int num = 0;
		CurrentDrawnEntity = null;
		CurrentDrawnEntityShader = 0;
		if (ignoreErrors)
		{
			for (int i = 0; i < 1000; i++)
			{
				if (projectile[i].active && projectile[i].type > 0 && !projectile[i].hide)
				{
					num++;
					try
					{
						DrawProj(i);
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
						projectile[i].active = false;
					}
				}
			}
		}
		else
		{
			for (int j = 0; j < 1000; j++)
			{
				if (projectile[j].active && projectile[j].type > 0 && !projectile[j].hide)
				{
					DrawProj(j);
				}
			}
		}
		CurrentDrawnEntity = null;
		CurrentDrawnEntityShader = 0;
		spriteBatch.End();
		TimeLogger.DetailedDrawTime(20);
	}

	public static int GetProjectileDesiredShader(Projectile proj)
	{
		int result = 0;
		if (proj.minion && proj.owner != 255)
		{
			result = player[proj.owner].cMinion;
		}
		if (projHook[proj.type] && proj.owner != 255)
		{
			result = player[proj.owner].cGrapple;
		}
		if (projPet[proj.type] && !proj.minion && proj.owner != 255 && proj.damage == 0 && !ProjectileID.Sets.LightPet[proj.type])
		{
			result = player[proj.owner].cPet;
		}
		if (!proj.minion && proj.owner != 255 && proj.damage == 0 && ProjectileID.Sets.LightPet[proj.type])
		{
			result = player[proj.owner].cLight;
		}
		if (proj.owner != 255)
		{
			switch (proj.type)
			{
			case 623:
			case 1020:
				result = player[proj.owner].cPet;
				break;
			case 818:
				result = player[proj.owner].cMinion;
				break;
			}
		}
		return result;
	}

	private void RefreshPlayerDrawOrder()
	{
		_playersThatDrawBehindNPCs.Clear();
		_playersThatDrawAfterProjectiles.Clear();
		if (gameMenu)
		{
			return;
		}
		Player player = null;
		for (int i = 0; i < 255; i++)
		{
			player = Main.player[i];
			if (i != myPlayer && player.active && !player.outOfRange)
			{
				if (player.isLockedToATile)
				{
					_playersThatDrawBehindNPCs.Add(player);
				}
				else
				{
					_playersThatDrawAfterProjectiles.Add(player);
				}
			}
		}
		player = LocalPlayer;
		if (player.isLockedToATile)
		{
			_playersThatDrawBehindNPCs.Add(player);
		}
		else
		{
			_playersThatDrawAfterProjectiles.Add(player);
		}
	}

	protected void DrawPlayers_BehindNPCs()
	{
		PotionOfReturnRenderer.DrawPlayers(Camera, _playersThatDrawBehindNPCs.Where((Player p) => p.PotionOfReturnOriginalUsePosition.HasValue));
		PlayerRenderer.DrawPlayers(Camera, _playersThatDrawBehindNPCs);
	}

	protected void DrawPlayers_AfterProjectiles()
	{
		PotionOfReturnRenderer.DrawPlayers(Camera, _playersThatDrawAfterProjectiles.Where((Player p) => p.PotionOfReturnOriginalUsePosition.HasValue));
		PlayerRenderer.DrawPlayers(Camera, _playersThatDrawAfterProjectiles);
	}

	protected void DrawElderEye(SpriteBatch spriteBatch, Vector2 worldPosition, float opacity, float scale, int frameNumber, Color passedColor)
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Extra[78].Value;
		Vector2 origin = default(Vector2);
		((Vector2)(ref origin))._002Ector(68f, 94f);
		Rectangle value2 = value.Frame(1, 8, 0, frameNumber);
		Vector2 position = worldPosition - screenPosition;
		passedColor *= opacity;
		spriteBatch.Draw(value, position, (Rectangle?)value2, passedColor, 0f, origin, scale, (SpriteEffects)0, 0f);
	}

	protected void DrawNPCs(bool behindTiles = false)
	{
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08af: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_087a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0405: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_066b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0675: Unknown result type (might be due to invalid IL or missing references)
		//IL_0687: Unknown result type (might be due to invalid IL or missing references)
		//IL_0691: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0500: Unknown result type (might be due to invalid IL or missing references)
		//IL_050b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0519: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_052f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0541: Unknown result type (might be due to invalid IL or missing references)
		//IL_0553: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_0570: Unknown result type (might be due to invalid IL or missing references)
		//IL_0596: Unknown result type (might be due to invalid IL or missing references)
		//IL_0720: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0759: Unknown result type (might be due to invalid IL or missing references)
		//IL_0776: Unknown result type (might be due to invalid IL or missing references)
		//IL_0781: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0794: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_080c: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector((int)screenPosition.X - 800, (int)screenPosition.Y - 800, screenWidth + 1600, screenHeight + 1600);
		Vector2 vector = default(Vector2);
		Vector2 vector2 = default(Vector2);
		Vector2 vector3 = default(Vector2);
		for (int num = 199; num >= 0; num--)
		{
			try
			{
				if (npc[num].active && npc[num].type > 0 && !npc[num].hide)
				{
					NPC obj = npc[num];
					obj.position += npc[num].netOffset;
					if (npc[num].behindTiles == behindTiles)
					{
						if (npc[num].type == 125 || npc[num].type == 126)
						{
							if (!NPC.IsMechQueenUp && !flag)
							{
								flag = true;
								for (int i = 0; i < 200; i++)
								{
									if (!npc[i].active || num == i || (npc[i].type != 125 && npc[i].type != 126))
									{
										continue;
									}
									float scale = npc[i].scale;
									float x = npc[i].Center.X;
									float num10 = npc[i].Bottom.Y - (float)npc[i].height * 0.5f * scale;
									float x2 = npc[num].Center.X;
									float y = npc[num].Bottom.Y - (float)npc[num].height * 0.5f * scale;
									((Vector2)(ref vector))._002Ector(x2, y);
									float num11 = x - vector.X;
									float num12 = num10 - vector.Y;
									float rotation = (float)Math.Atan2(num12, num11) - 1.57f;
									bool flag2 = true;
									float num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
									if (num13 > 2000f)
									{
										flag2 = false;
									}
									float num14 = 40f * scale;
									while (flag2)
									{
										num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
										if (num13 < num14)
										{
											flag2 = false;
											continue;
										}
										num13 = (float)TextureAssets.Chain12.Height() * scale / num13;
										num11 *= num13;
										num12 *= num13;
										vector.X += num11;
										vector.Y += num12;
										num11 = x - vector.X;
										num12 = num10 - vector.Y;
										Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
										spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain12.Width(), TextureAssets.Chain12.Height()), color, rotation, new Vector2((float)TextureAssets.Chain12.Width() * 0.5f, (float)TextureAssets.Chain12.Height() * 0.5f), scale, (SpriteEffects)0, 0f);
									}
								}
							}
						}
						else if (npc[num].type == 263 && npc[num].aiStyle == 52 && NPC.plantBoss >= 0)
						{
							((Vector2)(ref vector2))._002Ector(npc[num].position.X + (float)(npc[num].width / 2), npc[num].position.Y + (float)(npc[num].height / 2));
							float num15 = npc[NPC.plantBoss].Center.X - vector2.X;
							float num16 = npc[NPC.plantBoss].Center.Y - vector2.Y;
							float rotation2 = (float)Math.Atan2(num16, num15) - 1.57f;
							bool flag3 = true;
							while (flag3)
							{
								int num17 = 16;
								int num2 = 32;
								float num3 = (float)Math.Sqrt(num15 * num15 + num16 * num16);
								if (num3 < (float)num2)
								{
									num17 = (int)num3 - num2 + num17;
									flag3 = false;
								}
								num3 = (float)num17 / num3;
								num15 *= num3;
								num16 *= num3;
								vector2.X += num15;
								vector2.Y += num16;
								num15 = npc[NPC.plantBoss].Center.X - vector2.X + npc[NPC.plantBoss].netOffset.X;
								num16 = npc[NPC.plantBoss].Center.Y - vector2.Y + npc[NPC.plantBoss].netOffset.Y;
								Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
								spriteBatch.Draw(TextureAssets.Chain26.Value, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain26.Width(), num17), color2, rotation2, new Vector2((float)TextureAssets.Chain26.Width() * 0.5f, (float)TextureAssets.Chain26.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
							}
						}
						else if (npc[num].type == 264 && npc[num].aiStyle == 53 && NPC.plantBoss >= 0)
						{
							int num4 = NPC.plantBoss;
							if (npc[num].ai[3] > 0f)
							{
								num4 = (int)npc[num].ai[3] - 1;
							}
							((Vector2)(ref vector3))._002Ector(npc[num].position.X + (float)(npc[num].width / 2), npc[num].position.Y + (float)(npc[num].height / 2));
							float num5 = npc[num4].Center.X - vector3.X;
							float num6 = npc[num4].Center.Y - vector3.Y;
							float rotation3 = (float)Math.Atan2(num6, num5) - 1.57f;
							bool flag4 = true;
							while (flag4)
							{
								int num7 = 16;
								int num8 = 32;
								float num9 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
								if (num9 < (float)num8)
								{
									num7 = (int)num9 - num8 + num7;
									flag4 = false;
								}
								num9 = (float)num7 / num9;
								num5 *= num9;
								num6 *= num9;
								vector3.X += num5;
								vector3.Y += num6;
								num5 = npc[num4].Center.X - vector3.X + npc[num4].netOffset.X;
								num6 = npc[num4].Center.Y - vector3.Y + npc[num4].netOffset.Y;
								Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
								spriteBatch.Draw(TextureAssets.Chain27.Value, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain27.Width(), num7), color3, rotation3, new Vector2((float)TextureAssets.Chain27.Width() * 0.5f, (float)TextureAssets.Chain27.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
							}
						}
						if (NPCID.Sets.MustAlwaysDraw[npc[num].type] || ((Rectangle)(ref rectangle)).Intersects(new Rectangle((int)npc[num].position.X, (int)npc[num].position.Y, npc[num].width, npc[num].height)))
						{
							DrawNPCCheckAlt(npc[num]);
							DrawNPC(num, behindTiles);
						}
					}
					NPC obj2 = npc[num];
					obj2.position -= npc[num].netOffset;
				}
			}
			catch
			{
				npc[num].active = false;
			}
		}
	}

	public void DrawNPCCheckAlt(NPC n)
	{
		if (TownNPCProfiles.Instance.GetProfile(n, out var profile))
		{
			TextureAssets.Npc[n.type] = profile.GetTextureNPCShouldUse(n);
		}
	}

	public void DrawNPC(int iNPCIndex, bool behindTiles)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		NPC rCurrentNPC = npc[iNPCIndex];
		Vector2 screenPos = screenPosition;
		DrawNPCDirect(spriteBatch, rCurrentNPC, behindTiles, screenPos);
	}

	public void DrawNPCDirect_QueenSlimeWings(NPC rCurrentNPC, SpriteBatch mySpriteBatch, Vector2 screenPos, Vector2 drawCenter, Color originColor)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Extra[185].Value;
		Rectangle rectangle = value.Frame(1, 4, 0, (int)rCurrentNPC.localAI[3] / 6);
		float scale = 0.8f;
		Vector2 vector = default(Vector2);
		for (int i = 0; i < 2; i++)
		{
			float x = 1f;
			float num = 0f;
			SpriteEffects effects = (SpriteEffects)0;
			if (i == 1)
			{
				x = 0f;
				num = 0f - num + 2f;
				effects = (SpriteEffects)1;
			}
			Vector2 origin = rectangle.Size() * new Vector2(x, 0.5f);
			((Vector2)(ref vector))._002Ector(drawCenter.X + num, drawCenter.Y);
			if (rCurrentNPC.rotation != 0f)
			{
				vector = vector.RotatedBy(rCurrentNPC.rotation, rCurrentNPC.Bottom);
			}
			vector -= screenPos;
			float num2 = MathHelper.Clamp(rCurrentNPC.velocity.Y, -6f, 6f) * -0.1f;
			if (i == 0)
			{
				num2 *= -1f;
			}
			mySpriteBatch.Draw(value, vector, (Rectangle?)rectangle, originColor, rCurrentNPC.rotation + num2, origin, scale, effects, 0f);
		}
	}

	public void DrawNPCDirect(SpriteBatch mySpriteBatch, NPC rCurrentNPC, bool behindTiles, Vector2 screenPos)
	{
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0454: Unknown result type (might be due to invalid IL or missing references)
		//IL_0472: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_08df: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_090a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0911: Unknown result type (might be due to invalid IL or missing references)
		//IL_0919: Unknown result type (might be due to invalid IL or missing references)
		//IL_0920: Unknown result type (might be due to invalid IL or missing references)
		//IL_0928: Unknown result type (might be due to invalid IL or missing references)
		//IL_0953: Unknown result type (might be due to invalid IL or missing references)
		//IL_095d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0989: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0383: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0392: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03be: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_031b: Unknown result type (might be due to invalid IL or missing references)
		//IL_032e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f82: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0525: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_056b: Unknown result type (might be due to invalid IL or missing references)
		//IL_172b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1730: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0576: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_173a: Unknown result type (might be due to invalid IL or missing references)
		//IL_173f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e02: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1644: Unknown result type (might be due to invalid IL or missing references)
		//IL_1654: Unknown result type (might be due to invalid IL or missing references)
		//IL_165c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1677: Unknown result type (might be due to invalid IL or missing references)
		//IL_169c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_122d: Unknown result type (might be due to invalid IL or missing references)
		//IL_156d: Unknown result type (might be due to invalid IL or missing references)
		//IL_157f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1589: Unknown result type (might be due to invalid IL or missing references)
		//IL_1594: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1615: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_130e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1319: Unknown result type (might be due to invalid IL or missing references)
		//IL_1327: Unknown result type (might be due to invalid IL or missing references)
		//IL_132c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1339: Unknown result type (might be due to invalid IL or missing references)
		//IL_1340: Unknown result type (might be due to invalid IL or missing references)
		//IL_1348: Unknown result type (might be due to invalid IL or missing references)
		//IL_134f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1357: Unknown result type (might be due to invalid IL or missing references)
		//IL_1372: Unknown result type (might be due to invalid IL or missing references)
		//IL_137c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1050: Unknown result type (might be due to invalid IL or missing references)
		//IL_1057: Unknown result type (might be due to invalid IL or missing references)
		//IL_1061: Unknown result type (might be due to invalid IL or missing references)
		//IL_1068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0716: Unknown result type (might be due to invalid IL or missing references)
		//IL_071d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0725: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0747: Unknown result type (might be due to invalid IL or missing references)
		//IL_0751: Unknown result type (might be due to invalid IL or missing references)
		//IL_0777: Unknown result type (might be due to invalid IL or missing references)
		//IL_060a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0611: Unknown result type (might be due to invalid IL or missing references)
		//IL_0619: Unknown result type (might be due to invalid IL or missing references)
		//IL_0620: Unknown result type (might be due to invalid IL or missing references)
		//IL_0628: Unknown result type (might be due to invalid IL or missing references)
		//IL_063b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0645: Unknown result type (might be due to invalid IL or missing references)
		//IL_066b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_079c: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0690: Unknown result type (might be due to invalid IL or missing references)
		//IL_0697: Unknown result type (might be due to invalid IL or missing references)
		//IL_069f: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1420: Unknown result type (might be due to invalid IL or missing references)
		//IL_1427: Unknown result type (might be due to invalid IL or missing references)
		//IL_142e: Unknown result type (might be due to invalid IL or missing references)
		//IL_144b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1451: Unknown result type (might be due to invalid IL or missing references)
		//IL_0822: Unknown result type (might be due to invalid IL or missing references)
		//IL_0829: Unknown result type (might be due to invalid IL or missing references)
		//IL_0831: Unknown result type (might be due to invalid IL or missing references)
		//IL_0838: Unknown result type (might be due to invalid IL or missing references)
		//IL_0840: Unknown result type (might be due to invalid IL or missing references)
		//IL_0853: Unknown result type (might be due to invalid IL or missing references)
		//IL_085d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0883: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1116: Unknown result type (might be due to invalid IL or missing references)
		//IL_1120: Unknown result type (might be due to invalid IL or missing references)
		//IL_1146: Unknown result type (might be due to invalid IL or missing references)
		//IL_1899: Unknown result type (might be due to invalid IL or missing references)
		//IL_189e: Unknown result type (might be due to invalid IL or missing references)
		int type = rCurrentNPC.type;
		rCurrentNPC.SetFrameSize();
		Color newColor;
		if (rCurrentNPC.realLife == -1 && rCurrentNPC.life >= rCurrentNPC.lifeMax && !rCurrentNPC.boss)
		{
			newColor = Lighting.GetColor((int)((double)rCurrentNPC.position.X + (double)rCurrentNPC.width * 0.5) / 16, (int)(((double)rCurrentNPC.position.Y + (double)rCurrentNPC.height * 0.5) / 16.0));
			Vector3 val = ((Color)(ref newColor)).ToVector3();
			bool flag = ((Vector3)(ref val)).Length() > 0.4325f;
			bool flag2 = false;
			if (LockOnHelper.AimedTarget == rCurrentNPC)
			{
				flag2 = true;
			}
			else if (rCurrentNPC.Distance(player[myPlayer].Center) < 350f && flag)
			{
				flag2 = true;
			}
			if (flag2 && rCurrentNPC.lifeMax < 5)
			{
				flag2 = false;
			}
			if (flag2 && rCurrentNPC.aiStyle == 25 && rCurrentNPC.ai[0] == 0f)
			{
				flag2 = false;
			}
			if (flag2)
			{
				rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver + 0.025f, 0f, 1f);
			}
			else
			{
				rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver - 0.025f, 0f, 1f);
			}
		}
		else
		{
			rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver - 0.025f, 0f, 1f);
		}
		if (type == 1 && rCurrentNPC.ai[0] == -999f)
		{
			return;
		}
		if (type == 101)
		{
			bool flag3 = true;
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
			float num = rCurrentNPC.ai[0] * 16f + 8f - vector.X;
			float num12 = rCurrentNPC.ai[1] * 16f + 8f - vector.Y;
			float rotation = (float)Math.Atan2(num12, num) - 1.57f;
			bool flag4 = true;
			while (flag4)
			{
				float num22 = 0.75f;
				int height = 28;
				float num26 = (float)Math.Sqrt(num * num + num12 * num12);
				if (num26 < 28f * num22)
				{
					height = (int)num26 - 40 + 28;
					flag4 = false;
				}
				num26 = 20f * num22 / num26;
				num *= num26;
				num12 *= num26;
				vector.X += num;
				vector.Y += num12;
				num = rCurrentNPC.ai[0] * 16f + 8f - vector.X;
				num12 = rCurrentNPC.ai[1] * 16f + 8f - vector.Y;
				Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
				if (rCurrentNPC.IsABestiaryIconDummy)
				{
					color = rCurrentNPC.GetBestiaryEntryColor();
				}
				if (!flag3)
				{
					flag3 = true;
					mySpriteBatch.Draw(TextureAssets.Chain10.Value, new Vector2(vector.X - screenPos.X, vector.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain10.Width(), height), color, rotation, new Vector2((float)TextureAssets.Chain10.Width() * 0.5f, (float)TextureAssets.Chain10.Height() * 0.5f), num22, (SpriteEffects)0, 0f);
				}
				else
				{
					flag3 = false;
					mySpriteBatch.Draw(TextureAssets.Chain11.Value, new Vector2(vector.X - screenPos.X, vector.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain10.Width(), height), color, rotation, new Vector2((float)TextureAssets.Chain10.Width() * 0.5f, (float)TextureAssets.Chain10.Height() * 0.5f), num22, (SpriteEffects)0, 0f);
				}
			}
		}
		else if (rCurrentNPC.aiStyle == 13)
		{
			Vector2 vector2 = default(Vector2);
			((Vector2)(ref vector2))._002Ector(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
			float num27 = rCurrentNPC.ai[0] * 16f + 8f - vector2.X;
			float num28 = rCurrentNPC.ai[1] * 16f + 8f - vector2.Y;
			float rotation2 = (float)Math.Atan2(num28, num27) - 1.57f;
			bool flag5 = true;
			while (flag5)
			{
				int num29 = 28;
				int num30 = 40;
				if (type == 259 || type == 260)
				{
					num30 = 20;
					num29 = 12;
				}
				float num31 = (float)Math.Sqrt(num27 * num27 + num28 * num28);
				if (num31 < (float)num30)
				{
					num29 = (int)num31 - num30 + num29;
					flag5 = false;
				}
				num31 = (float)num29 / num31;
				num27 *= num31;
				num28 *= num31;
				vector2.X += num27;
				vector2.Y += num28;
				num27 = rCurrentNPC.ai[0] * 16f + 8f - vector2.X;
				num28 = rCurrentNPC.ai[1] * 16f + 8f - vector2.Y;
				Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
				if (rCurrentNPC.IsABestiaryIconDummy)
				{
					color2 = rCurrentNPC.GetBestiaryEntryColor();
				}
				if (type == 259 || type == 260)
				{
					((Color)(ref color2)).B = byte.MaxValue;
					if (((Color)(ref color2)).R < 100)
					{
						((Color)(ref color2)).R = 100;
					}
					if (((Color)(ref color2)).G < 150)
					{
						((Color)(ref color2)).G = 150;
					}
				}
				switch (type)
				{
				case 56:
					mySpriteBatch.Draw(TextureAssets.Chain5.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain4.Width(), num29), color2, rotation2, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
					break;
				case 175:
					mySpriteBatch.Draw(TextureAssets.Chain14.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain14.Width(), num29), color2, rotation2, new Vector2((float)TextureAssets.Chain14.Width() * 0.5f, (float)TextureAssets.Chain14.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
					break;
				case 259:
					mySpriteBatch.Draw(TextureAssets.Chain24.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain24.Width(), num29), color2, rotation2, new Vector2((float)TextureAssets.Chain24.Width() * 0.5f, (float)TextureAssets.Chain24.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
					break;
				case 260:
					mySpriteBatch.Draw(TextureAssets.Chain25.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain25.Width(), num29), color2, rotation2, new Vector2((float)TextureAssets.Chain25.Width() * 0.5f, (float)TextureAssets.Chain25.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
					break;
				default:
					mySpriteBatch.Draw(TextureAssets.Chain4.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain4.Width(), num29), color2, rotation2, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
					break;
				}
			}
		}
		if (type == 327)
		{
			float rotation3 = 0f;
			Vector2 vector3 = default(Vector2);
			((Vector2)(ref vector3))._002Ector(rCurrentNPC.Center.X, rCurrentNPC.Center.Y + 80f);
			int num2 = (int)rCurrentNPC.localAI[1];
			Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
			mySpriteBatch.Draw(TextureAssets.PumpkingCloak.Value, new Vector2(vector3.X - screenPos.X, vector3.Y - screenPos.Y), (Rectangle?)new Rectangle(0, TextureAssets.PumpkingCloak.Height() / 5 * num2, TextureAssets.PumpkingCloak.Width(), TextureAssets.PumpkingCloak.Height() / 5), color3, rotation3, new Vector2((float)TextureAssets.PumpkingCloak.Width() * 0.5f, (float)TextureAssets.PumpkingCloak.Height() * 0.5f / 5f), 1f, (SpriteEffects)0, 0f);
		}
		if (type == 328)
		{
			Vector2 vector4 = default(Vector2);
			((Vector2)(ref vector4))._002Ector(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
			for (int i = 0; i < 2; i++)
			{
				float num3 = npc[(int)rCurrentNPC.ai[1]].position.X + (float)(npc[(int)rCurrentNPC.ai[1]].width / 2) - vector4.X;
				float num4 = npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(npc[(int)rCurrentNPC.ai[1]].height / 2) - 30f - vector4.Y;
				float num5 = 0f;
				if (i == 0)
				{
					num3 -= 200f * rCurrentNPC.ai[0];
					num4 += 130f;
					num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
					num5 = 92f / num5;
					vector4.X += num3 * num5;
					vector4.Y += num4 * num5;
				}
				else
				{
					num3 -= 50f * rCurrentNPC.ai[0];
					num4 += 80f;
					num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
					num5 = 60f / num5;
					vector4.X += num3 * num5;
					vector4.Y += num4 * num5;
				}
				float rotation4 = (float)Math.Atan2(num4, num3) - 1.57f;
				Color color4 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
				mySpriteBatch.Draw(TextureAssets.PumpkingArm.Value, new Vector2(vector4.X - screenPos.X, vector4.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.PumpkingArm.Width(), TextureAssets.PumpkingArm.Height()), color4, rotation4, new Vector2((float)TextureAssets.PumpkingArm.Width() * 0.5f, (float)TextureAssets.PumpkingArm.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				if (i == 0)
				{
					vector4.X += num3 * num5 / 2f;
					vector4.Y += num4 * num5 / 2f;
				}
			}
		}
		if (type == 36)
		{
			Vector2 vector5 = default(Vector2);
			((Vector2)(ref vector5))._002Ector(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
			for (int j = 0; j < 2; j++)
			{
				float num6 = npc[(int)rCurrentNPC.ai[1]].position.X + (float)(npc[(int)rCurrentNPC.ai[1]].width / 2) - vector5.X;
				float num7 = npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(npc[(int)rCurrentNPC.ai[1]].height / 2) - vector5.Y;
				float num8 = 0f;
				if (j == 0)
				{
					num6 -= 200f * rCurrentNPC.ai[0];
					num7 += 130f;
					num8 = (float)Math.Sqrt(num6 * num6 + num7 * num7);
					num8 = 92f / num8;
					vector5.X += num6 * num8;
					vector5.Y += num7 * num8;
				}
				else
				{
					num6 -= 50f * rCurrentNPC.ai[0];
					num7 += 80f;
					num8 = (float)Math.Sqrt(num6 * num6 + num7 * num7);
					num8 = 60f / num8;
					vector5.X += num6 * num8;
					vector5.Y += num7 * num8;
				}
				float rotation5 = (float)Math.Atan2(num7, num6) - 1.57f;
				Color color5 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
				mySpriteBatch.Draw(TextureAssets.BoneArm.Value, new Vector2(vector5.X - screenPos.X, vector5.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.BoneArm.Width(), TextureAssets.BoneArm.Height()), color5, rotation5, new Vector2((float)TextureAssets.BoneArm.Width() * 0.5f, (float)TextureAssets.BoneArm.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				if (j == 0)
				{
					vector5.X += num6 * num8 / 2f;
					vector5.Y += num7 * num8 / 2f;
				}
				else if (((Game)this).IsActive)
				{
					vector5.X += num6 * num8 - 16f;
					vector5.Y += num7 * num8 - 6f;
					Vector2 position = new Vector2(vector5.X, vector5.Y);
					float speedX = num6 * 0.02f;
					float speedY = num7 * 0.02f;
					newColor = default(Color);
					int num9 = Dust.NewDust(position, 30, 10, 5, speedX, speedY, 0, newColor, 2f);
					dust[num9].noGravity = true;
				}
			}
		}
		if (rCurrentNPC.aiStyle == 47)
		{
			float scale = rCurrentNPC.scale;
			Vector2 vector6 = default(Vector2);
			((Vector2)(ref vector6))._002Ector(rCurrentNPC.Center.X, rCurrentNPC.Center.Y);
			Vector2 center = rCurrentNPC.Center;
			if (NPC.golemBoss != -1)
			{
				center = npc[NPC.golemBoss].Center;
			}
			float num10 = center.X - vector6.X;
			float num11 = center.Y - vector6.Y;
			num11 -= 7f * scale;
			num10 = ((type != 247) ? (num10 + 66f * scale) : (num10 - 70f * scale));
			float rotation6 = (float)Math.Atan2(num11, num10) - 1.57f;
			bool flag6 = true;
			while (flag6)
			{
				float num13 = (float)Math.Sqrt(num10 * num10 + num11 * num11);
				if (num13 < 16f)
				{
					flag6 = false;
					continue;
				}
				num13 = 16f * scale / num13;
				num10 *= num13;
				num11 *= num13;
				vector6.X += num10;
				vector6.Y += num11;
				num10 = center.X - vector6.X;
				num11 = center.Y - vector6.Y;
				num11 -= 7f * scale;
				num10 = ((type != 247) ? (num10 + 66f * scale) : (num10 - 70f * scale));
				if (getGoodWorld)
				{
					num11 += 8f;
				}
				Color color6 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
				mySpriteBatch.Draw(TextureAssets.Chain21.Value, new Vector2(vector6.X - screenPos.X, vector6.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain21.Width(), TextureAssets.Chain21.Height()), color6, rotation6, new Vector2((float)TextureAssets.Chain21.Width() * 0.5f, (float)TextureAssets.Chain21.Height() * 0.5f), scale, (SpriteEffects)0, 0f);
			}
		}
		if (rCurrentNPC.aiStyle >= 33 && rCurrentNPC.aiStyle <= 36)
		{
			Vector2 vector7 = default(Vector2);
			((Vector2)(ref vector7))._002Ector(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
			for (int k = 0; k < 2; k++)
			{
				float num14 = npc[(int)rCurrentNPC.ai[1]].position.X + (float)(npc[(int)rCurrentNPC.ai[1]].width / 2) - vector7.X;
				float num15 = npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(npc[(int)rCurrentNPC.ai[1]].height / 2) - vector7.Y;
				float num16 = 0f;
				if (k == 0)
				{
					num14 -= 200f * rCurrentNPC.ai[0];
					num15 += 130f;
					num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					num16 = 92f / num16;
					vector7.X += num14 * num16;
					vector7.Y += num15 * num16;
				}
				else
				{
					num14 -= 50f * rCurrentNPC.ai[0];
					num15 += 80f;
					num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					num16 = 60f / num16;
					vector7.X += num14 * num16;
					vector7.Y += num15 * num16;
				}
				float rotation7 = (float)Math.Atan2(num15, num14) - 1.57f;
				Color color7 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
				mySpriteBatch.Draw(TextureAssets.BoneArm2.Value, new Vector2(vector7.X - screenPos.X, vector7.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.BoneArm.Width(), TextureAssets.BoneArm.Height()), color7, rotation7, new Vector2((float)TextureAssets.BoneArm.Width() * 0.5f, (float)TextureAssets.BoneArm.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				if (k == 0)
				{
					vector7.X += num14 * num16 / 2f;
					vector7.Y += num15 * num16 / 2f;
				}
				else if (((Game)this).IsActive)
				{
					vector7.X += num14 * num16 - 16f;
					vector7.Y += num15 * num16 - 6f;
					Vector2 position2 = new Vector2(vector7.X, vector7.Y);
					float speedX2 = num14 * 0.02f;
					float speedY2 = num15 * 0.02f;
					newColor = default(Color);
					int num17 = Dust.NewDust(position2, 30, 10, 6, speedX2, speedY2, 0, newColor, 2.5f);
					dust[num17].noGravity = true;
				}
			}
		}
		if (rCurrentNPC.aiStyle == 20)
		{
			Vector2 vector8 = default(Vector2);
			((Vector2)(ref vector8))._002Ector(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
			float num18 = rCurrentNPC.ai[1] - vector8.X;
			float num19 = rCurrentNPC.ai[2] - vector8.Y;
			float num20 = (rCurrentNPC.rotation = (float)Math.Atan2(num19, num18) - 1.57f);
			bool flag7 = true;
			while (flag7)
			{
				int height2 = 12;
				float num21 = (float)Math.Sqrt(num18 * num18 + num19 * num19);
				if (num21 < 20f)
				{
					height2 = (int)num21 - 20 + 12;
					flag7 = false;
				}
				num21 = 12f / num21;
				num18 *= num21;
				num19 *= num21;
				vector8.X += num18;
				vector8.Y += num19;
				num18 = rCurrentNPC.ai[1] - vector8.X;
				num19 = rCurrentNPC.ai[2] - vector8.Y;
				Color color8 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
				mySpriteBatch.Draw(TextureAssets.Chain.Value, new Vector2(vector8.X - screenPos.X, vector8.Y - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain.Width(), height2), color8, num20, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
			mySpriteBatch.Draw(TextureAssets.SpikeBase.Value, new Vector2(rCurrentNPC.ai[1] - screenPos.X, rCurrentNPC.ai[2] - screenPos.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.SpikeBase.Width(), TextureAssets.SpikeBase.Height()), Lighting.GetColor((int)rCurrentNPC.ai[1] / 16, (int)(rCurrentNPC.ai[2] / 16f)), num20 - 0.75f, new Vector2((float)TextureAssets.SpikeBase.Width() * 0.5f, (float)TextureAssets.SpikeBase.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
		}
		Color npcColor = Lighting.GetColor((int)((double)rCurrentNPC.position.X + (double)rCurrentNPC.width * 0.5) / 16, (int)(((double)rCurrentNPC.position.Y + (double)rCurrentNPC.height * 0.5) / 16.0));
		if (rCurrentNPC.IsABestiaryIconDummy)
		{
			npcColor = rCurrentNPC.GetBestiaryEntryColor();
		}
		if (type >= 277 && type <= 280)
		{
			if (((Color)(ref npcColor)).R < byte.MaxValue)
			{
				((Color)(ref npcColor)).R = byte.MaxValue;
			}
			if (((Color)(ref npcColor)).G < 175)
			{
				((Color)(ref npcColor)).G = 175;
			}
		}
		if (type == -4)
		{
			int r = ((Color)(ref npcColor)).R;
			int g = ((Color)(ref npcColor)).G;
			int b = ((Color)(ref npcColor)).B;
			r *= 2;
			if (r > 255)
			{
				r = 255;
			}
			g *= 2;
			if (g > 255)
			{
				g = 255;
			}
			b *= 2;
			if (b > 255)
			{
				b = 255;
			}
			((Color)(ref npcColor))._002Ector(r, g, b);
		}
		if (behindTiles && type != 113 && type != 114)
		{
			int num32 = (int)((rCurrentNPC.position.X - 8f) / 16f);
			int num23 = (int)((rCurrentNPC.position.X + (float)rCurrentNPC.width + 8f) / 16f);
			int num24 = (int)((rCurrentNPC.position.Y - 8f) / 16f);
			int num25 = (int)((rCurrentNPC.position.Y + (float)rCurrentNPC.height + 8f) / 16f);
			for (int l = num32; l <= num23; l++)
			{
				for (int m = num24; m <= num25; m++)
				{
					if (Lighting.Brightness(l, m) == 0f)
					{
						npcColor = Color.Black;
					}
				}
			}
		}
		NPCLoader.DrawEffects(rCurrentNPC, ref npcColor);
		if (NPCLoader.PreDraw(rCurrentNPC, spriteBatch, screenPos, npcColor))
		{
			DrawNPCDirect_Inner(spriteBatch, rCurrentNPC, behindTiles, screenPos, ref npcColor);
		}
		NPCLoader.PostDraw(rCurrentNPC, spriteBatch, screenPos, npcColor);
	}

	private void DrawNPCDirect_Inner(SpriteBatch mySpriteBatch, NPC rCurrentNPC, bool behindTiles, Vector2 screenPos, ref Color npcColor)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0337: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_114ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_114b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11535: Unknown result type (might be due to invalid IL or missing references)
		//IL_1153a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11540: Unknown result type (might be due to invalid IL or missing references)
		//IL_11541: Unknown result type (might be due to invalid IL or missing references)
		//IL_11990: Unknown result type (might be due to invalid IL or missing references)
		//IL_11995: Unknown result type (might be due to invalid IL or missing references)
		//IL_0777: Unknown result type (might be due to invalid IL or missing references)
		//IL_077c: Unknown result type (might be due to invalid IL or missing references)
		//IL_077e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0783: Unknown result type (might be due to invalid IL or missing references)
		//IL_0785: Unknown result type (might be due to invalid IL or missing references)
		//IL_079f: Unknown result type (might be due to invalid IL or missing references)
		//IL_07aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07be: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07de: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0800: Unknown result type (might be due to invalid IL or missing references)
		//IL_080f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0814: Unknown result type (might be due to invalid IL or missing references)
		//IL_0821: Unknown result type (might be due to invalid IL or missing references)
		//IL_0830: Unknown result type (might be due to invalid IL or missing references)
		//IL_0835: Unknown result type (might be due to invalid IL or missing references)
		//IL_0840: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aed: Unknown result type (might be due to invalid IL or missing references)
		//IL_11af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b01: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b06: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_118b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_118bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_120c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_120c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_120cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_120d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_120e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_120e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_120ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_120f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_120f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_120fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1211a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1211f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12182: Unknown result type (might be due to invalid IL or missing references)
		//IL_12195: Unknown result type (might be due to invalid IL or missing references)
		//IL_1219f: Unknown result type (might be due to invalid IL or missing references)
		//IL_121a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_121a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_121ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_121b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_121b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_121dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_121e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_121f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_121f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_121fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12201: Unknown result type (might be due to invalid IL or missing references)
		//IL_12207: Unknown result type (might be due to invalid IL or missing references)
		//IL_1220e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12222: Unknown result type (might be due to invalid IL or missing references)
		//IL_12227: Unknown result type (might be due to invalid IL or missing references)
		//IL_1222c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12231: Unknown result type (might be due to invalid IL or missing references)
		//IL_1223e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12245: Unknown result type (might be due to invalid IL or missing references)
		//IL_1224f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1225b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12262: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_11de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e46: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e81: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11eb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11eb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_122a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_122a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_122ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_122b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_122bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_122c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_122c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_122cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_122d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_122da: Unknown result type (might be due to invalid IL or missing references)
		//IL_122e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_122ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_122f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_122f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12309: Unknown result type (might be due to invalid IL or missing references)
		//IL_1230e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12315: Unknown result type (might be due to invalid IL or missing references)
		//IL_1233d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12348: Unknown result type (might be due to invalid IL or missing references)
		//IL_12353: Unknown result type (might be due to invalid IL or missing references)
		//IL_12358: Unknown result type (might be due to invalid IL or missing references)
		//IL_1235d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1235f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12364: Unknown result type (might be due to invalid IL or missing references)
		//IL_1236a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12390: Unknown result type (might be due to invalid IL or missing references)
		//IL_1239b: Unknown result type (might be due to invalid IL or missing references)
		//IL_123a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_123aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_123af: Unknown result type (might be due to invalid IL or missing references)
		//IL_123b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_123bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_123c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_123d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_123db: Unknown result type (might be due to invalid IL or missing references)
		//IL_123e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_123e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_123f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_123f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12403: Unknown result type (might be due to invalid IL or missing references)
		//IL_1240f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1241b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12447: Unknown result type (might be due to invalid IL or missing references)
		//IL_1244c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1244e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12453: Unknown result type (might be due to invalid IL or missing references)
		//IL_12459: Unknown result type (might be due to invalid IL or missing references)
		//IL_1247f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1248a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12494: Unknown result type (might be due to invalid IL or missing references)
		//IL_12499: Unknown result type (might be due to invalid IL or missing references)
		//IL_1249e: Unknown result type (might be due to invalid IL or missing references)
		//IL_124a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_124aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_124b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_124c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_124ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_124cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_124d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_124e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_124e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_124f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_124f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12504: Unknown result type (might be due to invalid IL or missing references)
		//IL_12510: Unknown result type (might be due to invalid IL or missing references)
		//IL_12623: Unknown result type (might be due to invalid IL or missing references)
		//IL_12628: Unknown result type (might be due to invalid IL or missing references)
		//IL_1262a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1264a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1267c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12693: Unknown result type (might be due to invalid IL or missing references)
		//IL_12698: Unknown result type (might be due to invalid IL or missing references)
		//IL_1269e: Unknown result type (might be due to invalid IL or missing references)
		//IL_126d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_126de: Unknown result type (might be due to invalid IL or missing references)
		//IL_126e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11efd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f02: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f08: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f41: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f82: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_11faf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fff: Unknown result type (might be due to invalid IL or missing references)
		//IL_12005: Unknown result type (might be due to invalid IL or missing references)
		//IL_1200b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12012: Unknown result type (might be due to invalid IL or missing references)
		//IL_12026: Unknown result type (might be due to invalid IL or missing references)
		//IL_1202b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12030: Unknown result type (might be due to invalid IL or missing references)
		//IL_12035: Unknown result type (might be due to invalid IL or missing references)
		//IL_12042: Unknown result type (might be due to invalid IL or missing references)
		//IL_12048: Unknown result type (might be due to invalid IL or missing references)
		//IL_12053: Unknown result type (might be due to invalid IL or missing references)
		//IL_1205f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12065: Unknown result type (might be due to invalid IL or missing references)
		//IL_12070: Unknown result type (might be due to invalid IL or missing references)
		//IL_12075: Unknown result type (might be due to invalid IL or missing references)
		//IL_12544: Unknown result type (might be due to invalid IL or missing references)
		//IL_12549: Unknown result type (might be due to invalid IL or missing references)
		//IL_1254b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1256b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1259d: Unknown result type (might be due to invalid IL or missing references)
		//IL_125b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_125b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_125bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_125ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_125f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12600: Unknown result type (might be due to invalid IL or missing references)
		//IL_12718: Unknown result type (might be due to invalid IL or missing references)
		//IL_1271d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12722: Unknown result type (might be due to invalid IL or missing references)
		//IL_12727: Unknown result type (might be due to invalid IL or missing references)
		//IL_11751: Unknown result type (might be due to invalid IL or missing references)
		//IL_11754: Unknown result type (might be due to invalid IL or missing references)
		//IL_11755: Unknown result type (might be due to invalid IL or missing references)
		//IL_12739: Unknown result type (might be due to invalid IL or missing references)
		//IL_1273f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12746: Unknown result type (might be due to invalid IL or missing references)
		//IL_1274c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12751: Unknown result type (might be due to invalid IL or missing references)
		//IL_12757: Unknown result type (might be due to invalid IL or missing references)
		//IL_12769: Unknown result type (might be due to invalid IL or missing references)
		//IL_1276e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12775: Unknown result type (might be due to invalid IL or missing references)
		//IL_1279d: Unknown result type (might be due to invalid IL or missing references)
		//IL_127b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_127b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_127be: Unknown result type (might be due to invalid IL or missing references)
		//IL_127c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_127c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_127cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_127f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_127fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12806: Unknown result type (might be due to invalid IL or missing references)
		//IL_1280b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12810: Unknown result type (might be due to invalid IL or missing references)
		//IL_12816: Unknown result type (might be due to invalid IL or missing references)
		//IL_1281c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12823: Unknown result type (might be due to invalid IL or missing references)
		//IL_12837: Unknown result type (might be due to invalid IL or missing references)
		//IL_1283c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12841: Unknown result type (might be due to invalid IL or missing references)
		//IL_12846: Unknown result type (might be due to invalid IL or missing references)
		//IL_1285d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12864: Unknown result type (might be due to invalid IL or missing references)
		//IL_1286e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1287a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12881: Unknown result type (might be due to invalid IL or missing references)
		//IL_128bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_128c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_128ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_128da: Unknown result type (might be due to invalid IL or missing references)
		//IL_128e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bac: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1294d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1297c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12981: Unknown result type (might be due to invalid IL or missing references)
		//IL_12986: Unknown result type (might be due to invalid IL or missing references)
		//IL_1298d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12993: Unknown result type (might be due to invalid IL or missing references)
		//IL_12998: Unknown result type (might be due to invalid IL or missing references)
		//IL_1299e: Unknown result type (might be due to invalid IL or missing references)
		//IL_129b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_129bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_129e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a27: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_12aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_12aaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ade: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ae5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b42: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1176d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11770: Unknown result type (might be due to invalid IL or missing references)
		//IL_11771: Unknown result type (might be due to invalid IL or missing references)
		//IL_117bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_117c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13005: Unknown result type (might be due to invalid IL or missing references)
		//IL_1302a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13031: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0603: Unknown result type (might be due to invalid IL or missing references)
		//IL_0612: Unknown result type (might be due to invalid IL or missing references)
		//IL_0617: Unknown result type (might be due to invalid IL or missing references)
		//IL_0626: Unknown result type (might be due to invalid IL or missing references)
		//IL_062b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bff: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c86: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c90: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c95: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ca6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cad: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d04: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d58: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1184e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11853: Unknown result type (might be due to invalid IL or missing references)
		//IL_11866: Unknown result type (might be due to invalid IL or missing references)
		//IL_1186b: Unknown result type (might be due to invalid IL or missing references)
		//IL_130a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_130a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_130bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_130c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_130cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dee: Unknown result type (might be due to invalid IL or missing references)
		//IL_12df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_13248: Unknown result type (might be due to invalid IL or missing references)
		//IL_1324f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1325a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13260: Unknown result type (might be due to invalid IL or missing references)
		//IL_1326b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13272: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e48: Unknown result type (might be due to invalid IL or missing references)
		//IL_131b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_131b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_131c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_131ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_131cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_131da: Unknown result type (might be due to invalid IL or missing references)
		//IL_13200: Unknown result type (might be due to invalid IL or missing references)
		//IL_13206: Unknown result type (might be due to invalid IL or missing references)
		//IL_13210: Unknown result type (might be due to invalid IL or missing references)
		//IL_13221: Unknown result type (might be due to invalid IL or missing references)
		//IL_13224: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f68: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1802: Unknown result type (might be due to invalid IL or missing references)
		//IL_1806: Unknown result type (might be due to invalid IL or missing references)
		//IL_180b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1963: Unknown result type (might be due to invalid IL or missing references)
		//IL_1968: Unknown result type (might be due to invalid IL or missing references)
		//IL_196a: Unknown result type (might be due to invalid IL or missing references)
		//IL_196f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1994: Unknown result type (might be due to invalid IL or missing references)
		//IL_1999: Unknown result type (might be due to invalid IL or missing references)
		//IL_199b: Unknown result type (might be due to invalid IL or missing references)
		//IL_199d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eba: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_270c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2711: Unknown result type (might be due to invalid IL or missing references)
		//IL_2716: Unknown result type (might be due to invalid IL or missing references)
		//IL_271b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2720: Unknown result type (might be due to invalid IL or missing references)
		//IL_2723: Unknown result type (might be due to invalid IL or missing references)
		//IL_2730: Unknown result type (might be due to invalid IL or missing references)
		//IL_2735: Unknown result type (might be due to invalid IL or missing references)
		//IL_2740: Unknown result type (might be due to invalid IL or missing references)
		//IL_2747: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f35: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f66: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1574: Unknown result type (might be due to invalid IL or missing references)
		//IL_1579: Unknown result type (might be due to invalid IL or missing references)
		//IL_157b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1580: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_15aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1855: Unknown result type (might be due to invalid IL or missing references)
		//IL_1857: Unknown result type (might be due to invalid IL or missing references)
		//IL_1860: Unknown result type (might be due to invalid IL or missing references)
		//IL_1862: Unknown result type (might be due to invalid IL or missing references)
		//IL_186d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1871: Unknown result type (might be due to invalid IL or missing references)
		//IL_1880: Unknown result type (might be due to invalid IL or missing references)
		//IL_1882: Unknown result type (might be due to invalid IL or missing references)
		//IL_188b: Unknown result type (might be due to invalid IL or missing references)
		//IL_188d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1898: Unknown result type (might be due to invalid IL or missing references)
		//IL_189c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1845: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f83: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1901: Unknown result type (might be due to invalid IL or missing references)
		//IL_1910: Unknown result type (might be due to invalid IL or missing references)
		//IL_1915: Unknown result type (might be due to invalid IL or missing references)
		//IL_191a: Unknown result type (might be due to invalid IL or missing references)
		//IL_191e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1923: Unknown result type (might be due to invalid IL or missing references)
		//IL_1928: Unknown result type (might be due to invalid IL or missing references)
		//IL_192a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1932: Unknown result type (might be due to invalid IL or missing references)
		//IL_1934: Unknown result type (might be due to invalid IL or missing references)
		//IL_193f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1947: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a20: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f41: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f78: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fda: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2003: Unknown result type (might be due to invalid IL or missing references)
		//IL_2008: Unknown result type (might be due to invalid IL or missing references)
		//IL_200d: Unknown result type (might be due to invalid IL or missing references)
		//IL_200f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2016: Unknown result type (might be due to invalid IL or missing references)
		//IL_201e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2026: Unknown result type (might be due to invalid IL or missing references)
		//IL_2029: Unknown result type (might be due to invalid IL or missing references)
		//IL_2044: Unknown result type (might be due to invalid IL or missing references)
		//IL_2046: Unknown result type (might be due to invalid IL or missing references)
		//IL_204b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1604: Unknown result type (might be due to invalid IL or missing references)
		//IL_1609: Unknown result type (might be due to invalid IL or missing references)
		//IL_1625: Unknown result type (might be due to invalid IL or missing references)
		//IL_162a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1102: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1672: Unknown result type (might be due to invalid IL or missing references)
		//IL_1677: Unknown result type (might be due to invalid IL or missing references)
		//IL_167e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1683: Unknown result type (might be due to invalid IL or missing references)
		//IL_208b: Unknown result type (might be due to invalid IL or missing references)
		//IL_208d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2097: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_20aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_20db: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2104: Unknown result type (might be due to invalid IL or missing references)
		//IL_2109: Unknown result type (might be due to invalid IL or missing references)
		//IL_210e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2113: Unknown result type (might be due to invalid IL or missing references)
		//IL_2115: Unknown result type (might be due to invalid IL or missing references)
		//IL_2124: Unknown result type (might be due to invalid IL or missing references)
		//IL_212b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2132: Unknown result type (might be due to invalid IL or missing references)
		//IL_2137: Unknown result type (might be due to invalid IL or missing references)
		//IL_213c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2141: Unknown result type (might be due to invalid IL or missing references)
		//IL_2143: Unknown result type (might be due to invalid IL or missing references)
		//IL_214a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2152: Unknown result type (might be due to invalid IL or missing references)
		//IL_215a: Unknown result type (might be due to invalid IL or missing references)
		//IL_215d: Unknown result type (might be due to invalid IL or missing references)
		//IL_217a: Unknown result type (might be due to invalid IL or missing references)
		//IL_217c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2183: Unknown result type (might be due to invalid IL or missing references)
		//IL_218b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2193: Unknown result type (might be due to invalid IL or missing references)
		//IL_2196: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1129: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a93: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b35: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b44: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2207: Unknown result type (might be due to invalid IL or missing references)
		//IL_220a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_168f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1694: Unknown result type (might be due to invalid IL or missing references)
		//IL_1696: Unknown result type (might be due to invalid IL or missing references)
		//IL_1698: Unknown result type (might be due to invalid IL or missing references)
		//IL_169c: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_16af: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1703: Unknown result type (might be due to invalid IL or missing references)
		//IL_1708: Unknown result type (might be due to invalid IL or missing references)
		//IL_170a: Unknown result type (might be due to invalid IL or missing references)
		//IL_170c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1713: Unknown result type (might be due to invalid IL or missing references)
		//IL_1727: Unknown result type (might be due to invalid IL or missing references)
		//IL_172c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1731: Unknown result type (might be due to invalid IL or missing references)
		//IL_1736: Unknown result type (might be due to invalid IL or missing references)
		//IL_173b: Unknown result type (might be due to invalid IL or missing references)
		//IL_173d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1744: Unknown result type (might be due to invalid IL or missing references)
		//IL_174c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1754: Unknown result type (might be due to invalid IL or missing references)
		//IL_1757: Unknown result type (might be due to invalid IL or missing references)
		//IL_1774: Unknown result type (might be due to invalid IL or missing references)
		//IL_1776: Unknown result type (might be due to invalid IL or missing references)
		//IL_177e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1780: Unknown result type (might be due to invalid IL or missing references)
		//IL_178b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1793: Unknown result type (might be due to invalid IL or missing references)
		//IL_1796: Unknown result type (might be due to invalid IL or missing references)
		//IL_2255: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_127b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c35: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c50: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b56: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d26: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d45: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d84: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2da4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2da9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_356e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3573: Unknown result type (might be due to invalid IL or missing references)
		//IL_3575: Unknown result type (might be due to invalid IL or missing references)
		//IL_357a: Unknown result type (might be due to invalid IL or missing references)
		//IL_357c: Unknown result type (might be due to invalid IL or missing references)
		//IL_359b: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_35bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_35be: Unknown result type (might be due to invalid IL or missing references)
		//IL_35c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_35de: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eca: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f44: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22db: Unknown result type (might be due to invalid IL or missing references)
		//IL_22dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2304: Unknown result type (might be due to invalid IL or missing references)
		//IL_2306: Unknown result type (might be due to invalid IL or missing references)
		//IL_2308: Unknown result type (might be due to invalid IL or missing references)
		//IL_230a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2324: Unknown result type (might be due to invalid IL or missing references)
		//IL_232f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2339: Unknown result type (might be due to invalid IL or missing references)
		//IL_233e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2343: Unknown result type (might be due to invalid IL or missing references)
		//IL_2345: Unknown result type (might be due to invalid IL or missing references)
		//IL_2347: Unknown result type (might be due to invalid IL or missing references)
		//IL_234e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2362: Unknown result type (might be due to invalid IL or missing references)
		//IL_2367: Unknown result type (might be due to invalid IL or missing references)
		//IL_236c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2371: Unknown result type (might be due to invalid IL or missing references)
		//IL_2373: Unknown result type (might be due to invalid IL or missing references)
		//IL_2382: Unknown result type (might be due to invalid IL or missing references)
		//IL_2389: Unknown result type (might be due to invalid IL or missing references)
		//IL_2390: Unknown result type (might be due to invalid IL or missing references)
		//IL_2395: Unknown result type (might be due to invalid IL or missing references)
		//IL_239a: Unknown result type (might be due to invalid IL or missing references)
		//IL_239f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2298: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1319: Unknown result type (might be due to invalid IL or missing references)
		//IL_131b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1323: Unknown result type (might be due to invalid IL or missing references)
		//IL_1325: Unknown result type (might be due to invalid IL or missing references)
		//IL_1330: Unknown result type (might be due to invalid IL or missing references)
		//IL_1338: Unknown result type (might be due to invalid IL or missing references)
		//IL_133b: Unknown result type (might be due to invalid IL or missing references)
		//IL_130b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d02: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d45: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2895: Unknown result type (might be due to invalid IL or missing references)
		//IL_289a: Unknown result type (might be due to invalid IL or missing references)
		//IL_289c: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ca6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f65: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c15: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c80: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2906: Unknown result type (might be due to invalid IL or missing references)
		//IL_290b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2910: Unknown result type (might be due to invalid IL or missing references)
		//IL_2939: Unknown result type (might be due to invalid IL or missing references)
		//IL_293b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2959: Unknown result type (might be due to invalid IL or missing references)
		//IL_295d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2962: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2901: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f13: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fef: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3982: Unknown result type (might be due to invalid IL or missing references)
		//IL_3987: Unknown result type (might be due to invalid IL or missing references)
		//IL_3989: Unknown result type (might be due to invalid IL or missing references)
		//IL_398e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3990: Unknown result type (might be due to invalid IL or missing references)
		//IL_39af: Unknown result type (might be due to invalid IL or missing references)
		//IL_39ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_39c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_39c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_39ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_39d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_39d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_39d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_39ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_39f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_39f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_39fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3866: Unknown result type (might be due to invalid IL or missing references)
		//IL_3869: Unknown result type (might be due to invalid IL or missing references)
		//IL_3876: Unknown result type (might be due to invalid IL or missing references)
		//IL_387b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3886: Unknown result type (might be due to invalid IL or missing references)
		//IL_388d: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_38b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_38cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_38d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_38dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_38e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3910: Unknown result type (might be due to invalid IL or missing references)
		//IL_3922: Unknown result type (might be due to invalid IL or missing references)
		//IL_3927: Unknown result type (might be due to invalid IL or missing references)
		//IL_3954: Unknown result type (might be due to invalid IL or missing references)
		//IL_3963: Unknown result type (might be due to invalid IL or missing references)
		//IL_4700: Unknown result type (might be due to invalid IL or missing references)
		//IL_4705: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d27: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ced: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0daa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0daf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0def: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e02: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e25: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11db: Unknown result type (might be due to invalid IL or missing references)
		//IL_11de: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1201: Unknown result type (might be due to invalid IL or missing references)
		//IL_1206: Unknown result type (might be due to invalid IL or missing references)
		//IL_1208: Unknown result type (might be due to invalid IL or missing references)
		//IL_120a: Unknown result type (might be due to invalid IL or missing references)
		//IL_120c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1211: Unknown result type (might be due to invalid IL or missing references)
		//IL_1213: Unknown result type (might be due to invalid IL or missing references)
		//IL_1217: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1221: Unknown result type (might be due to invalid IL or missing references)
		//IL_1223: Unknown result type (might be due to invalid IL or missing references)
		//IL_122a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1232: Unknown result type (might be due to invalid IL or missing references)
		//IL_123a: Unknown result type (might be due to invalid IL or missing references)
		//IL_123d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d93: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ddb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1def: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e35: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e41: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e46: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e62: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_2974: Unknown result type (might be due to invalid IL or missing references)
		//IL_2976: Unknown result type (might be due to invalid IL or missing references)
		//IL_297d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2985: Unknown result type (might be due to invalid IL or missing references)
		//IL_2987: Unknown result type (might be due to invalid IL or missing references)
		//IL_2989: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_296d: Unknown result type (might be due to invalid IL or missing references)
		//IL_296f: Unknown result type (might be due to invalid IL or missing references)
		//IL_30a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_30aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_30af: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_30bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e40: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e53: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e58: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4738: Unknown result type (might be due to invalid IL or missing references)
		//IL_473d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4750: Unknown result type (might be due to invalid IL or missing references)
		//IL_4755: Unknown result type (might be due to invalid IL or missing references)
		//IL_472b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d59: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d86: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d96: Unknown result type (might be due to invalid IL or missing references)
		//IL_4da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1530: Unknown result type (might be due to invalid IL or missing references)
		//IL_1532: Unknown result type (might be due to invalid IL or missing references)
		//IL_1534: Unknown result type (might be due to invalid IL or missing references)
		//IL_1539: Unknown result type (might be due to invalid IL or missing references)
		//IL_153e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1540: Unknown result type (might be due to invalid IL or missing references)
		//IL_1547: Unknown result type (might be due to invalid IL or missing references)
		//IL_154f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1556: Unknown result type (might be due to invalid IL or missing references)
		//IL_1559: Unknown result type (might be due to invalid IL or missing references)
		//IL_151a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1524: Unknown result type (might be due to invalid IL or missing references)
		//IL_1529: Unknown result type (might be due to invalid IL or missing references)
		//IL_152e: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a09: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6419: Unknown result type (might be due to invalid IL or missing references)
		//IL_6427: Unknown result type (might be due to invalid IL or missing references)
		//IL_642d: Unknown result type (might be due to invalid IL or missing references)
		//IL_642f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6434: Unknown result type (might be due to invalid IL or missing references)
		//IL_6446: Unknown result type (might be due to invalid IL or missing references)
		//IL_644b: Unknown result type (might be due to invalid IL or missing references)
		//IL_646e: Unknown result type (might be due to invalid IL or missing references)
		//IL_64a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_64b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_64bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_64be: Unknown result type (might be due to invalid IL or missing references)
		//IL_64c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_64d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_64da: Unknown result type (might be due to invalid IL or missing references)
		//IL_64fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6539: Unknown result type (might be due to invalid IL or missing references)
		//IL_653e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6563: Unknown result type (might be due to invalid IL or missing references)
		//IL_656a: Unknown result type (might be due to invalid IL or missing references)
		//IL_656f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6574: Unknown result type (might be due to invalid IL or missing references)
		//IL_657b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6586: Unknown result type (might be due to invalid IL or missing references)
		//IL_6591: Unknown result type (might be due to invalid IL or missing references)
		//IL_6596: Unknown result type (might be due to invalid IL or missing references)
		//IL_65a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_65a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_65aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eda: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ef9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f04: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f35: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_599a: Unknown result type (might be due to invalid IL or missing references)
		//IL_599f: Unknown result type (might be due to invalid IL or missing references)
		//IL_59a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_59b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_59ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_59bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_59c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_59cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_59d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_59e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_59e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_59f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_59f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_59fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_6efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f16: Unknown result type (might be due to invalid IL or missing references)
		//IL_6893: Unknown result type (might be due to invalid IL or missing references)
		//IL_689a: Unknown result type (might be due to invalid IL or missing references)
		//IL_689f: Unknown result type (might be due to invalid IL or missing references)
		//IL_68a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_68ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_68b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_68c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_68c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_68d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_68d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_68da: Unknown result type (might be due to invalid IL or missing references)
		//IL_68e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_68ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_68ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_68f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_68ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_690b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6916: Unknown result type (might be due to invalid IL or missing references)
		//IL_692a: Unknown result type (might be due to invalid IL or missing references)
		//IL_692f: Unknown result type (might be due to invalid IL or missing references)
		//IL_693d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6942: Unknown result type (might be due to invalid IL or missing references)
		//IL_6947: Unknown result type (might be due to invalid IL or missing references)
		//IL_6955: Unknown result type (might be due to invalid IL or missing references)
		//IL_695a: Unknown result type (might be due to invalid IL or missing references)
		//IL_695c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6961: Unknown result type (might be due to invalid IL or missing references)
		//IL_6967: Unknown result type (might be due to invalid IL or missing references)
		//IL_6976: Unknown result type (might be due to invalid IL or missing references)
		//IL_6988: Unknown result type (might be due to invalid IL or missing references)
		//IL_6992: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f48: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f68: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f73: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f84: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3013: Unknown result type (might be due to invalid IL or missing references)
		//IL_3016: Unknown result type (might be due to invalid IL or missing references)
		//IL_3027: Unknown result type (might be due to invalid IL or missing references)
		//IL_302d: Unknown result type (might be due to invalid IL or missing references)
		//IL_302f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3036: Unknown result type (might be due to invalid IL or missing references)
		//IL_303b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3041: Unknown result type (might be due to invalid IL or missing references)
		//IL_3052: Unknown result type (might be due to invalid IL or missing references)
		//IL_305d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3068: Unknown result type (might be due to invalid IL or missing references)
		//IL_306f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3add: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3afc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4def: Unknown result type (might be due to invalid IL or missing references)
		//IL_4df0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5018: Unknown result type (might be due to invalid IL or missing references)
		//IL_5045: Unknown result type (might be due to invalid IL or missing references)
		//IL_505e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5092: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_50aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_50b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_50c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_50c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6663: Unknown result type (might be due to invalid IL or missing references)
		//IL_6668: Unknown result type (might be due to invalid IL or missing references)
		//IL_666a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6679: Unknown result type (might be due to invalid IL or missing references)
		//IL_6685: Unknown result type (might be due to invalid IL or missing references)
		//IL_6690: Unknown result type (might be due to invalid IL or missing references)
		//IL_66a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_66a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_66b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_66bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_66c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_66cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_66d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_66d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_66db: Unknown result type (might be due to invalid IL or missing references)
		//IL_66e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_66e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_66ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_66fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_671f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6729: Unknown result type (might be due to invalid IL or missing references)
		//IL_65ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_6608: Unknown result type (might be due to invalid IL or missing references)
		//IL_660d: Unknown result type (might be due to invalid IL or missing references)
		//IL_660f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6614: Unknown result type (might be due to invalid IL or missing references)
		//IL_661f: Unknown result type (might be due to invalid IL or missing references)
		//IL_662b: Unknown result type (might be due to invalid IL or missing references)
		//IL_663b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6640: Unknown result type (might be due to invalid IL or missing references)
		//IL_664a: Unknown result type (might be due to invalid IL or missing references)
		//IL_69c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_69c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_69cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_69d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_30e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_30f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_30fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3100: Unknown result type (might be due to invalid IL or missing references)
		//IL_3107: Unknown result type (might be due to invalid IL or missing references)
		//IL_310c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3111: Unknown result type (might be due to invalid IL or missing references)
		//IL_311b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3120: Unknown result type (might be due to invalid IL or missing references)
		//IL_3126: Unknown result type (might be due to invalid IL or missing references)
		//IL_3137: Unknown result type (might be due to invalid IL or missing references)
		//IL_3142: Unknown result type (might be due to invalid IL or missing references)
		//IL_314d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3154: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_480b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4810: Unknown result type (might be due to invalid IL or missing references)
		//IL_47dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_47e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_2470: Unknown result type (might be due to invalid IL or missing references)
		//IL_2475: Unknown result type (might be due to invalid IL or missing references)
		//IL_2477: Unknown result type (might be due to invalid IL or missing references)
		//IL_2479: Unknown result type (might be due to invalid IL or missing references)
		//IL_2483: Unknown result type (might be due to invalid IL or missing references)
		//IL_2488: Unknown result type (might be due to invalid IL or missing references)
		//IL_248a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2496: Unknown result type (might be due to invalid IL or missing references)
		//IL_249b: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2507: Unknown result type (might be due to invalid IL or missing references)
		//IL_2509: Unknown result type (might be due to invalid IL or missing references)
		//IL_2510: Unknown result type (might be due to invalid IL or missing references)
		//IL_2514: Unknown result type (might be due to invalid IL or missing references)
		//IL_251f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2530: Unknown result type (might be due to invalid IL or missing references)
		//IL_2533: Unknown result type (might be due to invalid IL or missing references)
		//IL_2551: Unknown result type (might be due to invalid IL or missing references)
		//IL_2553: Unknown result type (might be due to invalid IL or missing references)
		//IL_255a: Unknown result type (might be due to invalid IL or missing references)
		//IL_255e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2569: Unknown result type (might be due to invalid IL or missing references)
		//IL_257a: Unknown result type (might be due to invalid IL or missing references)
		//IL_257d: Unknown result type (might be due to invalid IL or missing references)
		//IL_259f: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a30: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_6746: Unknown result type (might be due to invalid IL or missing references)
		//IL_674b: Unknown result type (might be due to invalid IL or missing references)
		//IL_674d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6753: Unknown result type (might be due to invalid IL or missing references)
		//IL_675d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6769: Unknown result type (might be due to invalid IL or missing references)
		//IL_6774: Unknown result type (might be due to invalid IL or missing references)
		//IL_6788: Unknown result type (might be due to invalid IL or missing references)
		//IL_678d: Unknown result type (might be due to invalid IL or missing references)
		//IL_678f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6794: Unknown result type (might be due to invalid IL or missing references)
		//IL_679a: Unknown result type (might be due to invalid IL or missing references)
		//IL_679f: Unknown result type (might be due to invalid IL or missing references)
		//IL_67a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_67af: Unknown result type (might be due to invalid IL or missing references)
		//IL_67bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_67c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_67cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_67d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_67e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_67ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_67f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_67f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_67fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6800: Unknown result type (might be due to invalid IL or missing references)
		//IL_6805: Unknown result type (might be due to invalid IL or missing references)
		//IL_6810: Unknown result type (might be due to invalid IL or missing references)
		//IL_681c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6822: Unknown result type (might be due to invalid IL or missing references)
		//IL_682c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6836: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_5da6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dac: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ded: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e35: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_70b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_70e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_70fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_7132: Unknown result type (might be due to invalid IL or missing references)
		//IL_714b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7151: Unknown result type (might be due to invalid IL or missing references)
		//IL_715e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7163: Unknown result type (might be due to invalid IL or missing references)
		//IL_716e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7175: Unknown result type (might be due to invalid IL or missing references)
		//IL_71a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_71d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_71ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_7220: Unknown result type (might be due to invalid IL or missing references)
		//IL_7239: Unknown result type (might be due to invalid IL or missing references)
		//IL_723f: Unknown result type (might be due to invalid IL or missing references)
		//IL_726b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7276: Unknown result type (might be due to invalid IL or missing references)
		//IL_727d: Unknown result type (might be due to invalid IL or missing references)
		//IL_72b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_72b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_72ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_72fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7313: Unknown result type (might be due to invalid IL or missing references)
		//IL_7347: Unknown result type (might be due to invalid IL or missing references)
		//IL_7378: Unknown result type (might be due to invalid IL or missing references)
		//IL_737e: Unknown result type (might be due to invalid IL or missing references)
		//IL_738c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7391: Unknown result type (might be due to invalid IL or missing references)
		//IL_739c: Unknown result type (might be due to invalid IL or missing references)
		//IL_73a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_73c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_73cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_73fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7407: Unknown result type (might be due to invalid IL or missing references)
		//IL_740e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5142: Unknown result type (might be due to invalid IL or missing references)
		//IL_5147: Unknown result type (might be due to invalid IL or missing references)
		//IL_514d: Unknown result type (might be due to invalid IL or missing references)
		//IL_515d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5162: Unknown result type (might be due to invalid IL or missing references)
		//IL_5164: Unknown result type (might be due to invalid IL or missing references)
		//IL_5169: Unknown result type (might be due to invalid IL or missing references)
		//IL_5170: Unknown result type (might be due to invalid IL or missing references)
		//IL_5175: Unknown result type (might be due to invalid IL or missing references)
		//IL_5177: Unknown result type (might be due to invalid IL or missing references)
		//IL_517c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5188: Unknown result type (might be due to invalid IL or missing references)
		//IL_743c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7441: Unknown result type (might be due to invalid IL or missing references)
		//IL_7446: Unknown result type (might be due to invalid IL or missing references)
		//IL_74dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_74e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_74e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7511: Unknown result type (might be due to invalid IL or missing references)
		//IL_753e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7562: Unknown result type (might be due to invalid IL or missing references)
		//IL_7596: Unknown result type (might be due to invalid IL or missing references)
		//IL_75a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_75ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_75b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_75c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_75c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_36cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_36d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_47a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_47a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2612: Unknown result type (might be due to invalid IL or missing references)
		//IL_2614: Unknown result type (might be due to invalid IL or missing references)
		//IL_261b: Unknown result type (might be due to invalid IL or missing references)
		//IL_261f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2630: Unknown result type (might be due to invalid IL or missing references)
		//IL_2632: Unknown result type (might be due to invalid IL or missing references)
		//IL_2634: Unknown result type (might be due to invalid IL or missing references)
		//IL_2637: Unknown result type (might be due to invalid IL or missing references)
		//IL_2645: Unknown result type (might be due to invalid IL or missing references)
		//IL_2647: Unknown result type (might be due to invalid IL or missing references)
		//IL_264e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2650: Unknown result type (might be due to invalid IL or missing references)
		//IL_265a: Unknown result type (might be due to invalid IL or missing references)
		//IL_266b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2672: Unknown result type (might be due to invalid IL or missing references)
		//IL_2675: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bce: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a82: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ae0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b62: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3766: Unknown result type (might be due to invalid IL or missing references)
		//IL_3775: Unknown result type (might be due to invalid IL or missing references)
		//IL_377a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3791: Unknown result type (might be due to invalid IL or missing references)
		//IL_3798: Unknown result type (might be due to invalid IL or missing references)
		//IL_379f: Unknown result type (might be due to invalid IL or missing references)
		//IL_37a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4839: Unknown result type (might be due to invalid IL or missing references)
		//IL_483f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4845: Unknown result type (might be due to invalid IL or missing references)
		//IL_484b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4857: Unknown result type (might be due to invalid IL or missing references)
		//IL_485c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4863: Unknown result type (might be due to invalid IL or missing references)
		//IL_4869: Unknown result type (might be due to invalid IL or missing references)
		//IL_486e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4874: Unknown result type (might be due to invalid IL or missing references)
		//IL_4890: Unknown result type (might be due to invalid IL or missing references)
		//IL_4895: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_48db: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_48f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_4909: Unknown result type (might be due to invalid IL or missing references)
		//IL_490e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4913: Unknown result type (might be due to invalid IL or missing references)
		//IL_4919: Unknown result type (might be due to invalid IL or missing references)
		//IL_491f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4926: Unknown result type (might be due to invalid IL or missing references)
		//IL_493a: Unknown result type (might be due to invalid IL or missing references)
		//IL_493f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4944: Unknown result type (might be due to invalid IL or missing references)
		//IL_4949: Unknown result type (might be due to invalid IL or missing references)
		//IL_4952: Unknown result type (might be due to invalid IL or missing references)
		//IL_4958: Unknown result type (might be due to invalid IL or missing references)
		//IL_4963: Unknown result type (might be due to invalid IL or missing references)
		//IL_496f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4976: Unknown result type (might be due to invalid IL or missing references)
		//IL_6042: Unknown result type (might be due to invalid IL or missing references)
		//IL_6078: Unknown result type (might be due to invalid IL or missing references)
		//IL_607d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6093: Unknown result type (might be due to invalid IL or missing references)
		//IL_6099: Unknown result type (might be due to invalid IL or missing references)
		//IL_609f: Unknown result type (might be due to invalid IL or missing references)
		//IL_60a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_60aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_60af: Unknown result type (might be due to invalid IL or missing references)
		//IL_60b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_60ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_60c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_60c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_60cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_60d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_60e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_60e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_60ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_600c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fba: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c90: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c95: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d15: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d92: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c46: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_51ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_51b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_51b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_51c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_51cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_51d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_51e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_51ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_5231: Unknown result type (might be due to invalid IL or missing references)
		//IL_5236: Unknown result type (might be due to invalid IL or missing references)
		//IL_523c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5242: Unknown result type (might be due to invalid IL or missing references)
		//IL_5251: Unknown result type (might be due to invalid IL or missing references)
		//IL_5256: Unknown result type (might be due to invalid IL or missing references)
		//IL_525b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5268: Unknown result type (might be due to invalid IL or missing references)
		//IL_5278: Unknown result type (might be due to invalid IL or missing references)
		//IL_527d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5283: Unknown result type (might be due to invalid IL or missing references)
		//IL_5291: Unknown result type (might be due to invalid IL or missing references)
		//IL_5297: Unknown result type (might be due to invalid IL or missing references)
		//IL_5299: Unknown result type (might be due to invalid IL or missing references)
		//IL_529e: Unknown result type (might be due to invalid IL or missing references)
		//IL_52a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_52ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_52ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_52c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_52f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_52fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5303: Unknown result type (might be due to invalid IL or missing references)
		//IL_5309: Unknown result type (might be due to invalid IL or missing references)
		//IL_5318: Unknown result type (might be due to invalid IL or missing references)
		//IL_531d: Unknown result type (might be due to invalid IL or missing references)
		//IL_532c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5331: Unknown result type (might be due to invalid IL or missing references)
		//IL_5336: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3705: Unknown result type (might be due to invalid IL or missing references)
		//IL_370f: Unknown result type (might be due to invalid IL or missing references)
		//IL_371c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3721: Unknown result type (might be due to invalid IL or missing references)
		//IL_3726: Unknown result type (might be due to invalid IL or missing references)
		//IL_3750: Unknown result type (might be due to invalid IL or missing references)
		//IL_3752: Unknown result type (might be due to invalid IL or missing references)
		//IL_3754: Unknown result type (might be due to invalid IL or missing references)
		//IL_3759: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c16: Unknown result type (might be due to invalid IL or missing references)
		//IL_613d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6157: Unknown result type (might be due to invalid IL or missing references)
		//IL_615d: Unknown result type (might be due to invalid IL or missing references)
		//IL_615f: Unknown result type (might be due to invalid IL or missing references)
		//IL_616e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6174: Unknown result type (might be due to invalid IL or missing references)
		//IL_618c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6197: Unknown result type (might be due to invalid IL or missing references)
		//IL_610e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7665: Unknown result type (might be due to invalid IL or missing references)
		//IL_766a: Unknown result type (might be due to invalid IL or missing references)
		//IL_766f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7728: Unknown result type (might be due to invalid IL or missing references)
		//IL_7755: Unknown result type (might be due to invalid IL or missing references)
		//IL_7779: Unknown result type (might be due to invalid IL or missing references)
		//IL_77ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_77bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_77c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_77cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_77d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_77e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_321e: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_37f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_380c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3813: Unknown result type (might be due to invalid IL or missing references)
		//IL_381a: Unknown result type (might be due to invalid IL or missing references)
		//IL_381d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e16: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eed: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6255: Unknown result type (might be due to invalid IL or missing references)
		//IL_625a: Unknown result type (might be due to invalid IL or missing references)
		//IL_625c: Unknown result type (might be due to invalid IL or missing references)
		//IL_626b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6276: Unknown result type (might be due to invalid IL or missing references)
		//IL_6281: Unknown result type (might be due to invalid IL or missing references)
		//IL_6295: Unknown result type (might be due to invalid IL or missing references)
		//IL_629a: Unknown result type (might be due to invalid IL or missing references)
		//IL_62a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_62ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_62b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_62c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_62c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_62c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_62cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_62d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_62d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_62dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_62ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_630f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6319: Unknown result type (might be due to invalid IL or missing references)
		//IL_61df: Unknown result type (might be due to invalid IL or missing references)
		//IL_61fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6200: Unknown result type (might be due to invalid IL or missing references)
		//IL_6202: Unknown result type (might be due to invalid IL or missing references)
		//IL_6207: Unknown result type (might be due to invalid IL or missing references)
		//IL_6212: Unknown result type (might be due to invalid IL or missing references)
		//IL_621d: Unknown result type (might be due to invalid IL or missing references)
		//IL_622d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6232: Unknown result type (might be due to invalid IL or missing references)
		//IL_623c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7004: Unknown result type (might be due to invalid IL or missing references)
		//IL_7009: Unknown result type (might be due to invalid IL or missing references)
		//IL_700b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7010: Unknown result type (might be due to invalid IL or missing references)
		//IL_7027: Unknown result type (might be due to invalid IL or missing references)
		//IL_702c: Unknown result type (might be due to invalid IL or missing references)
		//IL_703b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7050: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_6def: Unknown result type (might be due to invalid IL or missing references)
		//IL_6df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e64: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e80: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e98: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6eb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ebb: Unknown result type (might be due to invalid IL or missing references)
		//IL_534f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5367: Unknown result type (might be due to invalid IL or missing references)
		//IL_536c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5372: Unknown result type (might be due to invalid IL or missing references)
		//IL_5380: Unknown result type (might be due to invalid IL or missing references)
		//IL_5386: Unknown result type (might be due to invalid IL or missing references)
		//IL_5388: Unknown result type (might be due to invalid IL or missing references)
		//IL_538d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5392: Unknown result type (might be due to invalid IL or missing references)
		//IL_539d: Unknown result type (might be due to invalid IL or missing references)
		//IL_53a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_53b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5401: Unknown result type (might be due to invalid IL or missing references)
		//IL_5406: Unknown result type (might be due to invalid IL or missing references)
		//IL_540c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5412: Unknown result type (might be due to invalid IL or missing references)
		//IL_5421: Unknown result type (might be due to invalid IL or missing references)
		//IL_5426: Unknown result type (might be due to invalid IL or missing references)
		//IL_542b: Unknown result type (might be due to invalid IL or missing references)
		//IL_33be: Unknown result type (might be due to invalid IL or missing references)
		//IL_343e: Unknown result type (might be due to invalid IL or missing references)
		//IL_344a: Unknown result type (might be due to invalid IL or missing references)
		//IL_344f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3460: Unknown result type (might be due to invalid IL or missing references)
		//IL_3479: Unknown result type (might be due to invalid IL or missing references)
		//IL_347e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3493: Unknown result type (might be due to invalid IL or missing references)
		//IL_34a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3512: Unknown result type (might be due to invalid IL or missing references)
		//IL_32a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_32ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_32b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_32ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_32e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_32f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3310: Unknown result type (might be due to invalid IL or missing references)
		//IL_3339: Unknown result type (might be due to invalid IL or missing references)
		//IL_3384: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a60: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a78: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ade: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aef: Unknown result type (might be due to invalid IL or missing references)
		//IL_4af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b59: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c06: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c16: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c23: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c41: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c46: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c63: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6336: Unknown result type (might be due to invalid IL or missing references)
		//IL_633b: Unknown result type (might be due to invalid IL or missing references)
		//IL_633d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6343: Unknown result type (might be due to invalid IL or missing references)
		//IL_634d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6358: Unknown result type (might be due to invalid IL or missing references)
		//IL_6363: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5aef: Unknown result type (might be due to invalid IL or missing references)
		//IL_5af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b11: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3eda: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f13: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f15: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f20: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f25: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f49: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f66: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f77: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4001: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ba2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b56: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_5444: Unknown result type (might be due to invalid IL or missing references)
		//IL_545f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5464: Unknown result type (might be due to invalid IL or missing references)
		//IL_546a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5478: Unknown result type (might be due to invalid IL or missing references)
		//IL_547e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5480: Unknown result type (might be due to invalid IL or missing references)
		//IL_5485: Unknown result type (might be due to invalid IL or missing references)
		//IL_548a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5495: Unknown result type (might be due to invalid IL or missing references)
		//IL_54a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_54ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_54f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_54fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5504: Unknown result type (might be due to invalid IL or missing references)
		//IL_550a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5519: Unknown result type (might be due to invalid IL or missing references)
		//IL_551e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5523: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_83ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_83b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_7afd: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_7856: Unknown result type (might be due to invalid IL or missing references)
		//IL_785b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7860: Unknown result type (might be due to invalid IL or missing references)
		//IL_7919: Unknown result type (might be due to invalid IL or missing references)
		//IL_7946: Unknown result type (might be due to invalid IL or missing references)
		//IL_796a: Unknown result type (might be due to invalid IL or missing references)
		//IL_799e: Unknown result type (might be due to invalid IL or missing references)
		//IL_79ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_79b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_79be: Unknown result type (might be due to invalid IL or missing references)
		//IL_79d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_79f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_553c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5557: Unknown result type (might be due to invalid IL or missing references)
		//IL_555c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5562: Unknown result type (might be due to invalid IL or missing references)
		//IL_5570: Unknown result type (might be due to invalid IL or missing references)
		//IL_5576: Unknown result type (might be due to invalid IL or missing references)
		//IL_5578: Unknown result type (might be due to invalid IL or missing references)
		//IL_557d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5582: Unknown result type (might be due to invalid IL or missing references)
		//IL_558d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5599: Unknown result type (might be due to invalid IL or missing references)
		//IL_55a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_55f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_55f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_55fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5602: Unknown result type (might be due to invalid IL or missing references)
		//IL_5611: Unknown result type (might be due to invalid IL or missing references)
		//IL_5616: Unknown result type (might be due to invalid IL or missing references)
		//IL_561b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5628: Unknown result type (might be due to invalid IL or missing references)
		//IL_5638: Unknown result type (might be due to invalid IL or missing references)
		//IL_563d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5643: Unknown result type (might be due to invalid IL or missing references)
		//IL_5651: Unknown result type (might be due to invalid IL or missing references)
		//IL_5657: Unknown result type (might be due to invalid IL or missing references)
		//IL_5659: Unknown result type (might be due to invalid IL or missing references)
		//IL_565e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5663: Unknown result type (might be due to invalid IL or missing references)
		//IL_566e: Unknown result type (might be due to invalid IL or missing references)
		//IL_567a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5686: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_56bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_56c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_56cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_56da: Unknown result type (might be due to invalid IL or missing references)
		//IL_56df: Unknown result type (might be due to invalid IL or missing references)
		//IL_56e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_56f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_5701: Unknown result type (might be due to invalid IL or missing references)
		//IL_5706: Unknown result type (might be due to invalid IL or missing references)
		//IL_570c: Unknown result type (might be due to invalid IL or missing references)
		//IL_571a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5720: Unknown result type (might be due to invalid IL or missing references)
		//IL_5722: Unknown result type (might be due to invalid IL or missing references)
		//IL_5727: Unknown result type (might be due to invalid IL or missing references)
		//IL_572c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5737: Unknown result type (might be due to invalid IL or missing references)
		//IL_5743: Unknown result type (might be due to invalid IL or missing references)
		//IL_574f: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_41b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_41be: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_41cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_41cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_41de: Unknown result type (might be due to invalid IL or missing references)
		//IL_41e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_41fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_4201: Unknown result type (might be due to invalid IL or missing references)
		//IL_4208: Unknown result type (might be due to invalid IL or missing references)
		//IL_420d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4212: Unknown result type (might be due to invalid IL or missing references)
		//IL_4214: Unknown result type (might be due to invalid IL or missing references)
		//IL_4219: Unknown result type (might be due to invalid IL or missing references)
		//IL_421b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4235: Unknown result type (might be due to invalid IL or missing references)
		//IL_4240: Unknown result type (might be due to invalid IL or missing references)
		//IL_424a: Unknown result type (might be due to invalid IL or missing references)
		//IL_424f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4254: Unknown result type (might be due to invalid IL or missing references)
		//IL_4256: Unknown result type (might be due to invalid IL or missing references)
		//IL_4258: Unknown result type (might be due to invalid IL or missing references)
		//IL_425f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4273: Unknown result type (might be due to invalid IL or missing references)
		//IL_4278: Unknown result type (might be due to invalid IL or missing references)
		//IL_427d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4282: Unknown result type (might be due to invalid IL or missing references)
		//IL_4287: Unknown result type (might be due to invalid IL or missing references)
		//IL_428a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4294: Unknown result type (might be due to invalid IL or missing references)
		//IL_429c: Unknown result type (might be due to invalid IL or missing references)
		//IL_42a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_42bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_42c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_42c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_42cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_42cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_42e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_42fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4301: Unknown result type (might be due to invalid IL or missing references)
		//IL_4306: Unknown result type (might be due to invalid IL or missing references)
		//IL_4308: Unknown result type (might be due to invalid IL or missing references)
		//IL_430a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4311: Unknown result type (might be due to invalid IL or missing references)
		//IL_4325: Unknown result type (might be due to invalid IL or missing references)
		//IL_432a: Unknown result type (might be due to invalid IL or missing references)
		//IL_432f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4334: Unknown result type (might be due to invalid IL or missing references)
		//IL_4339: Unknown result type (might be due to invalid IL or missing references)
		//IL_433c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4349: Unknown result type (might be due to invalid IL or missing references)
		//IL_434e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4359: Unknown result type (might be due to invalid IL or missing references)
		//IL_4360: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c22: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c45: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_82a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_82a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_82d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8306: Unknown result type (might be due to invalid IL or missing references)
		//IL_831f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8353: Unknown result type (might be due to invalid IL or missing references)
		//IL_836c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8371: Unknown result type (might be due to invalid IL or missing references)
		//IL_8377: Unknown result type (might be due to invalid IL or missing references)
		//IL_837c: Unknown result type (might be due to invalid IL or missing references)
		//IL_838a: Unknown result type (might be due to invalid IL or missing references)
		//IL_838f: Unknown result type (might be due to invalid IL or missing references)
		//IL_839a: Unknown result type (might be due to invalid IL or missing references)
		//IL_83a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8033: Unknown result type (might be due to invalid IL or missing references)
		//IL_8038: Unknown result type (might be due to invalid IL or missing references)
		//IL_80b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_80bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_80ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_80d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_80da: Unknown result type (might be due to invalid IL or missing references)
		//IL_80df: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b83: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c18: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c28: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_579c: Unknown result type (might be due to invalid IL or missing references)
		//IL_57a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_57a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_57ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_57bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_57c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_57d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_57d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_57da: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c78: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_814e: Unknown result type (might be due to invalid IL or missing references)
		//IL_817b: Unknown result type (might be due to invalid IL or missing references)
		//IL_819f: Unknown result type (might be due to invalid IL or missing references)
		//IL_81d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_81e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_81e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_81f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_81ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_8222: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d69: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d79: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d84: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_4395: Unknown result type (might be due to invalid IL or missing references)
		//IL_439a: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cba: Unknown result type (might be due to invalid IL or missing references)
		//IL_8421: Unknown result type (might be due to invalid IL or missing references)
		//IL_842c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8431: Unknown result type (might be due to invalid IL or missing references)
		//IL_8437: Unknown result type (might be due to invalid IL or missing references)
		//IL_8448: Unknown result type (might be due to invalid IL or missing references)
		//IL_8452: Unknown result type (might be due to invalid IL or missing references)
		//IL_8457: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ecb: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f65: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_43f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_43fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_43fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4403: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d11: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d13: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_5834: Unknown result type (might be due to invalid IL or missing references)
		//IL_584c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5851: Unknown result type (might be due to invalid IL or missing references)
		//IL_5857: Unknown result type (might be due to invalid IL or missing references)
		//IL_5865: Unknown result type (might be due to invalid IL or missing references)
		//IL_586b: Unknown result type (might be due to invalid IL or missing references)
		//IL_586d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5872: Unknown result type (might be due to invalid IL or missing references)
		//IL_5877: Unknown result type (might be due to invalid IL or missing references)
		//IL_5882: Unknown result type (might be due to invalid IL or missing references)
		//IL_588e: Unknown result type (might be due to invalid IL or missing references)
		//IL_589a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8482: Unknown result type (might be due to invalid IL or missing references)
		//IL_8487: Unknown result type (might be due to invalid IL or missing references)
		//IL_8496: Unknown result type (might be due to invalid IL or missing references)
		//IL_849c: Unknown result type (might be due to invalid IL or missing references)
		//IL_849e: Unknown result type (might be due to invalid IL or missing references)
		//IL_84a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_84a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_84bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_84c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_84f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8501: Unknown result type (might be due to invalid IL or missing references)
		//IL_850c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8540: Unknown result type (might be due to invalid IL or missing references)
		//IL_8559: Unknown result type (might be due to invalid IL or missing references)
		//IL_855e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8569: Unknown result type (might be due to invalid IL or missing references)
		//IL_8575: Unknown result type (might be due to invalid IL or missing references)
		//IL_857c: Unknown result type (might be due to invalid IL or missing references)
		//IL_85d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_85de: Unknown result type (might be due to invalid IL or missing references)
		//IL_85e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_85e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_85fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_8604: Unknown result type (might be due to invalid IL or missing references)
		//IL_8609: Unknown result type (might be due to invalid IL or missing references)
		//IL_444f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4453: Unknown result type (might be due to invalid IL or missing references)
		//IL_4458: Unknown result type (might be due to invalid IL or missing references)
		//IL_445a: Unknown result type (might be due to invalid IL or missing references)
		//IL_445e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4463: Unknown result type (might be due to invalid IL or missing references)
		//IL_447b: Unknown result type (might be due to invalid IL or missing references)
		//IL_447d: Unknown result type (might be due to invalid IL or missing references)
		//IL_447f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4481: Unknown result type (might be due to invalid IL or missing references)
		//IL_4485: Unknown result type (might be due to invalid IL or missing references)
		//IL_448a: Unknown result type (might be due to invalid IL or missing references)
		//IL_448c: Unknown result type (might be due to invalid IL or missing references)
		//IL_449a: Unknown result type (might be due to invalid IL or missing references)
		//IL_449f: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_44bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_44c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_44cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_44d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_44f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_44fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4508: Unknown result type (might be due to invalid IL or missing references)
		//IL_450d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4512: Unknown result type (might be due to invalid IL or missing references)
		//IL_4514: Unknown result type (might be due to invalid IL or missing references)
		//IL_4516: Unknown result type (might be due to invalid IL or missing references)
		//IL_451d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4531: Unknown result type (might be due to invalid IL or missing references)
		//IL_4536: Unknown result type (might be due to invalid IL or missing references)
		//IL_453b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4540: Unknown result type (might be due to invalid IL or missing references)
		//IL_4545: Unknown result type (might be due to invalid IL or missing references)
		//IL_4548: Unknown result type (might be due to invalid IL or missing references)
		//IL_4552: Unknown result type (might be due to invalid IL or missing references)
		//IL_455a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4561: Unknown result type (might be due to invalid IL or missing references)
		//IL_88b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_88ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_88bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_88bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8634: Unknown result type (might be due to invalid IL or missing references)
		//IL_863a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8644: Unknown result type (might be due to invalid IL or missing references)
		//IL_864f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8654: Unknown result type (might be due to invalid IL or missing references)
		//IL_8659: Unknown result type (might be due to invalid IL or missing references)
		//IL_866c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8677: Unknown result type (might be due to invalid IL or missing references)
		//IL_86a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_86b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_86bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_86f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_870a: Unknown result type (might be due to invalid IL or missing references)
		//IL_870f: Unknown result type (might be due to invalid IL or missing references)
		//IL_871a: Unknown result type (might be due to invalid IL or missing references)
		//IL_872c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8737: Unknown result type (might be due to invalid IL or missing references)
		//IL_873e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4585: Unknown result type (might be due to invalid IL or missing references)
		//IL_4587: Unknown result type (might be due to invalid IL or missing references)
		//IL_4589: Unknown result type (might be due to invalid IL or missing references)
		//IL_458b: Unknown result type (might be due to invalid IL or missing references)
		//IL_458f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4594: Unknown result type (might be due to invalid IL or missing references)
		//IL_4597: Unknown result type (might be due to invalid IL or missing references)
		//IL_4599: Unknown result type (might be due to invalid IL or missing references)
		//IL_459e: Unknown result type (might be due to invalid IL or missing references)
		//IL_45a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_45aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_45af: Unknown result type (might be due to invalid IL or missing references)
		//IL_45b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_45cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_45d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_45d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_45de: Unknown result type (might be due to invalid IL or missing references)
		//IL_45e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_45e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_4606: Unknown result type (might be due to invalid IL or missing references)
		//IL_4611: Unknown result type (might be due to invalid IL or missing references)
		//IL_461b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4620: Unknown result type (might be due to invalid IL or missing references)
		//IL_4625: Unknown result type (might be due to invalid IL or missing references)
		//IL_4627: Unknown result type (might be due to invalid IL or missing references)
		//IL_4629: Unknown result type (might be due to invalid IL or missing references)
		//IL_4630: Unknown result type (might be due to invalid IL or missing references)
		//IL_4644: Unknown result type (might be due to invalid IL or missing references)
		//IL_4649: Unknown result type (might be due to invalid IL or missing references)
		//IL_464e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4653: Unknown result type (might be due to invalid IL or missing references)
		//IL_4658: Unknown result type (might be due to invalid IL or missing references)
		//IL_465b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4665: Unknown result type (might be due to invalid IL or missing references)
		//IL_466d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4674: Unknown result type (might be due to invalid IL or missing references)
		//IL_4692: Unknown result type (might be due to invalid IL or missing references)
		//IL_4695: Unknown result type (might be due to invalid IL or missing references)
		//IL_469f: Unknown result type (might be due to invalid IL or missing references)
		//IL_46a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a03: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a30: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a96: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8902: Unknown result type (might be due to invalid IL or missing references)
		//IL_892f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8948: Unknown result type (might be due to invalid IL or missing references)
		//IL_897c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8995: Unknown result type (might be due to invalid IL or missing references)
		//IL_899a: Unknown result type (might be due to invalid IL or missing references)
		//IL_89a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_89ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_89b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_89bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_877d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8782: Unknown result type (might be due to invalid IL or missing references)
		//IL_8791: Unknown result type (might be due to invalid IL or missing references)
		//IL_8797: Unknown result type (might be due to invalid IL or missing references)
		//IL_8799: Unknown result type (might be due to invalid IL or missing references)
		//IL_879e: Unknown result type (might be due to invalid IL or missing references)
		//IL_87a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_87b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_87c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_87ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_87fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8807: Unknown result type (might be due to invalid IL or missing references)
		//IL_883b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8854: Unknown result type (might be due to invalid IL or missing references)
		//IL_8859: Unknown result type (might be due to invalid IL or missing references)
		//IL_8864: Unknown result type (might be due to invalid IL or missing references)
		//IL_8870: Unknown result type (might be due to invalid IL or missing references)
		//IL_8877: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c24: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c29: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c47: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2db: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a328: Unknown result type (might be due to invalid IL or missing references)
		//IL_a34c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a367: Unknown result type (might be due to invalid IL or missing references)
		//IL_a383: Unknown result type (might be due to invalid IL or missing references)
		//IL_a388: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d45: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d99: Unknown result type (might be due to invalid IL or missing references)
		//IL_8db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8db7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a424: Unknown result type (might be due to invalid IL or missing references)
		//IL_a43d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a471: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e25: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a617: Unknown result type (might be due to invalid IL or missing references)
		//IL_a61c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b03: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b23: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b73: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_92c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_9298: Unknown result type (might be due to invalid IL or missing references)
		//IL_929b: Unknown result type (might be due to invalid IL or missing references)
		//IL_929c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a799: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7df: Unknown result type (might be due to invalid IL or missing references)
		//IL_a813: Unknown result type (might be due to invalid IL or missing references)
		//IL_a82c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a831: Unknown result type (might be due to invalid IL or missing references)
		//IL_a83d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a842: Unknown result type (might be due to invalid IL or missing references)
		//IL_a84d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a854: Unknown result type (might be due to invalid IL or missing references)
		//IL_9691: Unknown result type (might be due to invalid IL or missing references)
		//IL_96be: Unknown result type (might be due to invalid IL or missing references)
		//IL_96d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_970b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9724: Unknown result type (might be due to invalid IL or missing references)
		//IL_9729: Unknown result type (might be due to invalid IL or missing references)
		//IL_9737: Unknown result type (might be due to invalid IL or missing references)
		//IL_973c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9747: Unknown result type (might be due to invalid IL or missing references)
		//IL_974e: Unknown result type (might be due to invalid IL or missing references)
		//IL_966a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bad: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_9466: Unknown result type (might be due to invalid IL or missing references)
		//IL_9493: Unknown result type (might be due to invalid IL or missing references)
		//IL_94ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_94e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_94f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_94fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_950c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9511: Unknown result type (might be due to invalid IL or missing references)
		//IL_951c: Unknown result type (might be due to invalid IL or missing references)
		//IL_951d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9523: Unknown result type (might be due to invalid IL or missing references)
		//IL_952e: Unknown result type (might be due to invalid IL or missing references)
		//IL_953b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9542: Unknown result type (might be due to invalid IL or missing references)
		//IL_9548: Unknown result type (might be due to invalid IL or missing references)
		//IL_92ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_92e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a639: Unknown result type (might be due to invalid IL or missing references)
		//IL_a640: Unknown result type (might be due to invalid IL or missing references)
		//IL_a64c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a656: Unknown result type (might be due to invalid IL or missing references)
		//IL_a65b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a660: Unknown result type (might be due to invalid IL or missing references)
		//IL_a694: Unknown result type (might be due to invalid IL or missing references)
		//IL_a69a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_a569: Unknown result type (might be due to invalid IL or missing references)
		//IL_a574: Unknown result type (might be due to invalid IL or missing references)
		//IL_a579: Unknown result type (might be due to invalid IL or missing references)
		//IL_a581: Unknown result type (might be due to invalid IL or missing references)
		//IL_a587: Unknown result type (might be due to invalid IL or missing references)
		//IL_a592: Unknown result type (might be due to invalid IL or missing references)
		//IL_a59a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a892: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a90c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a925: Unknown result type (might be due to invalid IL or missing references)
		//IL_a92a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a936: Unknown result type (might be due to invalid IL or missing references)
		//IL_a93b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a946: Unknown result type (might be due to invalid IL or missing references)
		//IL_a94d: Unknown result type (might be due to invalid IL or missing references)
		//IL_97c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9807: Unknown result type (might be due to invalid IL or missing references)
		//IL_980c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9812: Unknown result type (might be due to invalid IL or missing references)
		//IL_9818: Unknown result type (might be due to invalid IL or missing references)
		//IL_956c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9599: Unknown result type (might be due to invalid IL or missing references)
		//IL_95b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_95e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_95ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_9604: Unknown result type (might be due to invalid IL or missing references)
		//IL_9612: Unknown result type (might be due to invalid IL or missing references)
		//IL_9617: Unknown result type (might be due to invalid IL or missing references)
		//IL_9622: Unknown result type (might be due to invalid IL or missing references)
		//IL_9623: Unknown result type (might be due to invalid IL or missing references)
		//IL_9629: Unknown result type (might be due to invalid IL or missing references)
		//IL_9634: Unknown result type (might be due to invalid IL or missing references)
		//IL_92f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_92f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_92fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_92ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_930d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9312: Unknown result type (might be due to invalid IL or missing references)
		//IL_931d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9323: Unknown result type (might be due to invalid IL or missing references)
		//IL_932d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9338: Unknown result type (might be due to invalid IL or missing references)
		//IL_936e: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_aad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaee: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab22: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab34: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab54: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab66: Unknown result type (might be due to invalid IL or missing references)
		//IL_a971: Unknown result type (might be due to invalid IL or missing references)
		//IL_a976: Unknown result type (might be due to invalid IL or missing references)
		//IL_9986: Unknown result type (might be due to invalid IL or missing references)
		//IL_99b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_99d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_9398: Unknown result type (might be due to invalid IL or missing references)
		//IL_938b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f34: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f49: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f75: Unknown result type (might be due to invalid IL or missing references)
		//IL_9189: Unknown result type (might be due to invalid IL or missing references)
		//IL_91b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_91cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_9203: Unknown result type (might be due to invalid IL or missing references)
		//IL_921c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9221: Unknown result type (might be due to invalid IL or missing references)
		//IL_922f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9234: Unknown result type (might be due to invalid IL or missing references)
		//IL_923f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9246: Unknown result type (might be due to invalid IL or missing references)
		//IL_a719: Unknown result type (might be due to invalid IL or missing references)
		//IL_a71f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a72a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a736: Unknown result type (might be due to invalid IL or missing references)
		//IL_a744: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab98: Unknown result type (might be due to invalid IL or missing references)
		//IL_abc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_abde: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac12: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac24: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac44: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac56: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa35: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa67: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa72: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa79: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_9acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_9adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_9aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_9aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a51: Unknown result type (might be due to invalid IL or missing references)
		//IL_983d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9842: Unknown result type (might be due to invalid IL or missing references)
		//IL_9848: Unknown result type (might be due to invalid IL or missing references)
		//IL_984e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9854: Unknown result type (might be due to invalid IL or missing references)
		//IL_9859: Unknown result type (might be due to invalid IL or missing references)
		//IL_985f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9883: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a10a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a13e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a157: Unknown result type (might be due to invalid IL or missing references)
		//IL_a15c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a16a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a16f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a17a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a181: Unknown result type (might be due to invalid IL or missing references)
		//IL_a18e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a195: Unknown result type (might be due to invalid IL or missing references)
		//IL_a19b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c98: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d03: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d40: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d45: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_939d: Unknown result type (might be due to invalid IL or missing references)
		//IL_93a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_93a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_93a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_93b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_93bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_93c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_93cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_93d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_93e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a20a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a23e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a257: Unknown result type (might be due to invalid IL or missing references)
		//IL_a25c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a26a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a26f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a27a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a281: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_b10b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b138: Unknown result type (might be due to invalid IL or missing references)
		//IL_b151: Unknown result type (might be due to invalid IL or missing references)
		//IL_b185: Unknown result type (might be due to invalid IL or missing references)
		//IL_b197: Unknown result type (might be due to invalid IL or missing references)
		//IL_b19d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b01b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b048: Unknown result type (might be due to invalid IL or missing references)
		//IL_b061: Unknown result type (might be due to invalid IL or missing references)
		//IL_b095: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e915: Unknown result type (might be due to invalid IL or missing references)
		//IL_e949: Unknown result type (might be due to invalid IL or missing references)
		//IL_e959: Unknown result type (might be due to invalid IL or missing references)
		//IL_e95f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e98e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e999: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e08: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e28: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f04: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f96: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_a019: Unknown result type (might be due to invalid IL or missing references)
		//IL_a030: Unknown result type (might be due to invalid IL or missing references)
		//IL_a03f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a066: Unknown result type (might be due to invalid IL or missing references)
		//IL_9026: Unknown result type (might be due to invalid IL or missing references)
		//IL_908a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9095: Unknown result type (might be due to invalid IL or missing references)
		//IL_90c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_90d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_90db: Unknown result type (might be due to invalid IL or missing references)
		//IL_910f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9128: Unknown result type (might be due to invalid IL or missing references)
		//IL_912d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9138: Unknown result type (might be due to invalid IL or missing references)
		//IL_9144: Unknown result type (might be due to invalid IL or missing references)
		//IL_914b: Unknown result type (might be due to invalid IL or missing references)
		//IL_904f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_eca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1148c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11491: Unknown result type (might be due to invalid IL or missing references)
		//IL_11492: Unknown result type (might be due to invalid IL or missing references)
		//IL_11494: Unknown result type (might be due to invalid IL or missing references)
		//IL_e648: Unknown result type (might be due to invalid IL or missing references)
		//IL_e64d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e730: Unknown result type (might be due to invalid IL or missing references)
		//IL_e735: Unknown result type (might be due to invalid IL or missing references)
		//IL_b206: Unknown result type (might be due to invalid IL or missing references)
		//IL_b27f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b285: Unknown result type (might be due to invalid IL or missing references)
		//IL_b28a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2de: Unknown result type (might be due to invalid IL or missing references)
		//IL_b302: Unknown result type (might be due to invalid IL or missing references)
		//IL_b336: Unknown result type (might be due to invalid IL or missing references)
		//IL_b346: Unknown result type (might be due to invalid IL or missing references)
		//IL_b34c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b356: Unknown result type (might be due to invalid IL or missing references)
		//IL_b362: Unknown result type (might be due to invalid IL or missing references)
		//IL_b369: Unknown result type (might be due to invalid IL or missing references)
		//IL_f17f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f184: Unknown result type (might be due to invalid IL or missing references)
		//IL_f186: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_f22f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f23a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f241: Unknown result type (might be due to invalid IL or missing references)
		//IL_f264: Unknown result type (might be due to invalid IL or missing references)
		//IL_f269: Unknown result type (might be due to invalid IL or missing references)
		//IL_f26b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f28b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2df: Unknown result type (might be due to invalid IL or missing references)
		//IL_f314: Unknown result type (might be due to invalid IL or missing references)
		//IL_f31f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f326: Unknown result type (might be due to invalid IL or missing references)
		//IL_f095: Unknown result type (might be due to invalid IL or missing references)
		//IL_f09a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f09c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f0bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f0ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_f105: Unknown result type (might be due to invalid IL or missing references)
		//IL_f10a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f110: Unknown result type (might be due to invalid IL or missing references)
		//IL_f14a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f155: Unknown result type (might be due to invalid IL or missing references)
		//IL_f15c: Unknown result type (might be due to invalid IL or missing references)
		//IL_eec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_eec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_eec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_eee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef31: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef36: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef76: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef81: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef88: Unknown result type (might be due to invalid IL or missing references)
		//IL_efab: Unknown result type (might be due to invalid IL or missing references)
		//IL_efb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_efb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_efd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f004: Unknown result type (might be due to invalid IL or missing references)
		//IL_f01b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f020: Unknown result type (might be due to invalid IL or missing references)
		//IL_f026: Unknown result type (might be due to invalid IL or missing references)
		//IL_f060: Unknown result type (might be due to invalid IL or missing references)
		//IL_f06b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f072: Unknown result type (might be due to invalid IL or missing references)
		//IL_eddc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ede1: Unknown result type (might be due to invalid IL or missing references)
		//IL_ede3: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee03: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee35: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee51: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee57: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee97: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f96a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f96f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f971: Unknown result type (might be due to invalid IL or missing references)
		//IL_f991: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9da: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9df: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa31: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa45: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa53: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa62: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa67: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_f61f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f651: Unknown result type (might be due to invalid IL or missing references)
		//IL_f668: Unknown result type (might be due to invalid IL or missing references)
		//IL_f66d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f673: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_f513: Unknown result type (might be due to invalid IL or missing references)
		//IL_f518: Unknown result type (might be due to invalid IL or missing references)
		//IL_f51a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f53a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f56c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f583: Unknown result type (might be due to invalid IL or missing references)
		//IL_f588: Unknown result type (might be due to invalid IL or missing references)
		//IL_f58e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_f42e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f433: Unknown result type (might be due to invalid IL or missing references)
		//IL_f435: Unknown result type (might be due to invalid IL or missing references)
		//IL_f455: Unknown result type (might be due to invalid IL or missing references)
		//IL_f487: Unknown result type (might be due to invalid IL or missing references)
		//IL_f49e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4de: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_f349: Unknown result type (might be due to invalid IL or missing references)
		//IL_f34e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f350: Unknown result type (might be due to invalid IL or missing references)
		//IL_f370: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3be: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f404: Unknown result type (might be due to invalid IL or missing references)
		//IL_f40b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f725: Unknown result type (might be due to invalid IL or missing references)
		//IL_f73c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f741: Unknown result type (might be due to invalid IL or missing references)
		//IL_f746: Unknown result type (might be due to invalid IL or missing references)
		//IL_f75d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f764: Unknown result type (might be due to invalid IL or missing references)
		//IL_f799: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f80c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f822: Unknown result type (might be due to invalid IL or missing references)
		//IL_f827: Unknown result type (might be due to invalid IL or missing references)
		//IL_f855: Unknown result type (might be due to invalid IL or missing references)
		//IL_f864: Unknown result type (might be due to invalid IL or missing references)
		//IL_f885: Unknown result type (might be due to invalid IL or missing references)
		//IL_f88a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f88c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8de: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_f900: Unknown result type (might be due to invalid IL or missing references)
		//IL_f935: Unknown result type (might be due to invalid IL or missing references)
		//IL_f940: Unknown result type (might be due to invalid IL or missing references)
		//IL_f947: Unknown result type (might be due to invalid IL or missing references)
		//IL_e790: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b44b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b451: Unknown result type (might be due to invalid IL or missing references)
		//IL_b456: Unknown result type (might be due to invalid IL or missing references)
		//IL_b47f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b504: Unknown result type (might be due to invalid IL or missing references)
		//IL_b514: Unknown result type (might be due to invalid IL or missing references)
		//IL_b51a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b524: Unknown result type (might be due to invalid IL or missing references)
		//IL_b530: Unknown result type (might be due to invalid IL or missing references)
		//IL_b537: Unknown result type (might be due to invalid IL or missing references)
		//IL_b58a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b604: Unknown result type (might be due to invalid IL or missing references)
		//IL_b614: Unknown result type (might be due to invalid IL or missing references)
		//IL_b61a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b624: Unknown result type (might be due to invalid IL or missing references)
		//IL_b62f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b636: Unknown result type (might be due to invalid IL or missing references)
		//IL_acf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad13: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad24: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed82: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed84: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed95: Unknown result type (might be due to invalid IL or missing references)
		//IL_eda5: Unknown result type (might be due to invalid IL or missing references)
		//IL_edaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_edb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc71: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc73: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc93: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_fce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_fce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd04: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea10: Unknown result type (might be due to invalid IL or missing references)
		//IL_eaf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_eaf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_eafe: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb27: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb54: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb78: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebac: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_e812: Unknown result type (might be due to invalid IL or missing references)
		//IL_e846: Unknown result type (might be due to invalid IL or missing references)
		//IL_e856: Unknown result type (might be due to invalid IL or missing references)
		//IL_e85b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e866: Unknown result type (might be due to invalid IL or missing references)
		//IL_e872: Unknown result type (might be due to invalid IL or missing references)
		//IL_e879: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b806: Unknown result type (might be due to invalid IL or missing references)
		//IL_b81f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b853: Unknown result type (might be due to invalid IL or missing references)
		//IL_b863: Unknown result type (might be due to invalid IL or missing references)
		//IL_b869: Unknown result type (might be due to invalid IL or missing references)
		//IL_b873: Unknown result type (might be due to invalid IL or missing references)
		//IL_b87e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b885: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_faa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_faa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_fac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_faf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb10: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb16: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb31: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb33: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb43: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb49: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb65: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba28: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba55: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_baa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bab2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_bac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bacd: Unknown result type (might be due to invalid IL or missing references)
		//IL_bad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b701: Unknown result type (might be due to invalid IL or missing references)
		//IL_b71a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b74e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b75e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b763: Unknown result type (might be due to invalid IL or missing references)
		//IL_b769: Unknown result type (might be due to invalid IL or missing references)
		//IL_b76f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b779: Unknown result type (might be due to invalid IL or missing references)
		//IL_b785: Unknown result type (might be due to invalid IL or missing references)
		//IL_b78c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad55: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad64: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad71: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad77: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad82: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ada6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10822: Unknown result type (might be due to invalid IL or missing references)
		//IL_10827: Unknown result type (might be due to invalid IL or missing references)
		//IL_10829: Unknown result type (might be due to invalid IL or missing references)
		//IL_10849: Unknown result type (might be due to invalid IL or missing references)
		//IL_1087b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10892: Unknown result type (might be due to invalid IL or missing references)
		//IL_10897: Unknown result type (might be due to invalid IL or missing references)
		//IL_1089d: Unknown result type (might be due to invalid IL or missing references)
		//IL_108d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_108f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10908: Unknown result type (might be due to invalid IL or missing references)
		//IL_1090d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10912: Unknown result type (might be due to invalid IL or missing references)
		//IL_10916: Unknown result type (might be due to invalid IL or missing references)
		//IL_10920: Unknown result type (might be due to invalid IL or missing references)
		//IL_10925: Unknown result type (might be due to invalid IL or missing references)
		//IL_1092a: Unknown result type (might be due to invalid IL or missing references)
		//IL_fde3: Unknown result type (might be due to invalid IL or missing references)
		//IL_fde8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdea: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe53: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe58: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe98: Unknown result type (might be due to invalid IL or missing references)
		//IL_fea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_feaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_febe: Unknown result type (might be due to invalid IL or missing references)
		//IL_fec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_fec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_fed6: Unknown result type (might be due to invalid IL or missing references)
		//IL_fedb: Unknown result type (might be due to invalid IL or missing references)
		//IL_fee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10397: Unknown result type (might be due to invalid IL or missing references)
		//IL_1039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_103be: Unknown result type (might be due to invalid IL or missing references)
		//IL_103f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10407: Unknown result type (might be due to invalid IL or missing references)
		//IL_1040c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10412: Unknown result type (might be due to invalid IL or missing references)
		//IL_1044c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10457: Unknown result type (might be due to invalid IL or missing references)
		//IL_1045e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10472: Unknown result type (might be due to invalid IL or missing references)
		//IL_10477: Unknown result type (might be due to invalid IL or missing references)
		//IL_1047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10480: Unknown result type (might be due to invalid IL or missing references)
		//IL_1048a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1048f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10494: Unknown result type (might be due to invalid IL or missing references)
		//IL_10022: Unknown result type (might be due to invalid IL or missing references)
		//IL_10027: Unknown result type (might be due to invalid IL or missing references)
		//IL_10029: Unknown result type (might be due to invalid IL or missing references)
		//IL_10049: Unknown result type (might be due to invalid IL or missing references)
		//IL_1007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10092: Unknown result type (might be due to invalid IL or missing references)
		//IL_10097: Unknown result type (might be due to invalid IL or missing references)
		//IL_1009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_100e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_100e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc95: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd04: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b923: Unknown result type (might be due to invalid IL or missing references)
		//IL_b950: Unknown result type (might be due to invalid IL or missing references)
		//IL_b969: Unknown result type (might be due to invalid IL or missing references)
		//IL_b99d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9be: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9db: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f93: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_11015: Unknown result type (might be due to invalid IL or missing references)
		//IL_11047: Unknown result type (might be due to invalid IL or missing references)
		//IL_1105e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11063: Unknown result type (might be due to invalid IL or missing references)
		//IL_11069: Unknown result type (might be due to invalid IL or missing references)
		//IL_11084: Unknown result type (might be due to invalid IL or missing references)
		//IL_1108f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11096: Unknown result type (might be due to invalid IL or missing references)
		//IL_110b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_110be: Unknown result type (might be due to invalid IL or missing references)
		//IL_110c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_110e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11112: Unknown result type (might be due to invalid IL or missing references)
		//IL_11129: Unknown result type (might be due to invalid IL or missing references)
		//IL_1112e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11134: Unknown result type (might be due to invalid IL or missing references)
		//IL_1114f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1115a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11161: Unknown result type (might be due to invalid IL or missing references)
		//IL_1010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10114: Unknown result type (might be due to invalid IL or missing references)
		//IL_10119: Unknown result type (might be due to invalid IL or missing references)
		//IL_1011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10127: Unknown result type (might be due to invalid IL or missing references)
		//IL_1012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10131: Unknown result type (might be due to invalid IL or missing references)
		//IL_105d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_105d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_105d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_105f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1062b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10642: Unknown result type (might be due to invalid IL or missing references)
		//IL_10647: Unknown result type (might be due to invalid IL or missing references)
		//IL_1064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10687: Unknown result type (might be due to invalid IL or missing references)
		//IL_10692: Unknown result type (might be due to invalid IL or missing references)
		//IL_10699: Unknown result type (might be due to invalid IL or missing references)
		//IL_106ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_106b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_106b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_106bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_106c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_106ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_106cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_10af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd83: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_bde7: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb39: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb66: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbea: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1095e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10963: Unknown result type (might be due to invalid IL or missing references)
		//IL_10965: Unknown result type (might be due to invalid IL or missing references)
		//IL_10985: Unknown result type (might be due to invalid IL or missing references)
		//IL_109b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_109ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_109d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_109d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_109ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_109f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_109f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a01: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11184: Unknown result type (might be due to invalid IL or missing references)
		//IL_11189: Unknown result type (might be due to invalid IL or missing references)
		//IL_1118b: Unknown result type (might be due to invalid IL or missing references)
		//IL_111ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_111dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_111f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_111f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_111ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1121a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11225: Unknown result type (might be due to invalid IL or missing references)
		//IL_1122c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff14: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff19: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff84: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff89: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffac: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffde: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_104c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_104cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_104cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_104ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_10521: Unknown result type (might be due to invalid IL or missing references)
		//IL_10538: Unknown result type (might be due to invalid IL or missing references)
		//IL_1053d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10543: Unknown result type (might be due to invalid IL or missing references)
		//IL_10558: Unknown result type (might be due to invalid IL or missing references)
		//IL_1055e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10560: Unknown result type (might be due to invalid IL or missing references)
		//IL_1056b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10570: Unknown result type (might be due to invalid IL or missing references)
		//IL_10576: Unknown result type (might be due to invalid IL or missing references)
		//IL_10587: Unknown result type (might be due to invalid IL or missing references)
		//IL_10592: Unknown result type (might be due to invalid IL or missing references)
		//IL_10599: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d74: Unknown result type (might be due to invalid IL or missing references)
		//IL_10da6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ddc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10de2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10def: Unknown result type (might be due to invalid IL or missing references)
		//IL_10df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e16: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eae: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eca: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ed0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_1127d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11282: Unknown result type (might be due to invalid IL or missing references)
		//IL_11284: Unknown result type (might be due to invalid IL or missing references)
		//IL_112a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_112d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_112ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_112f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_112f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1132d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11338: Unknown result type (might be due to invalid IL or missing references)
		//IL_1133f: Unknown result type (might be due to invalid IL or missing references)
		//IL_be31: Unknown result type (might be due to invalid IL or missing references)
		//IL_be5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_be77: Unknown result type (might be due to invalid IL or missing references)
		//IL_beab: Unknown result type (might be due to invalid IL or missing references)
		//IL_bebb: Unknown result type (might be due to invalid IL or missing references)
		//IL_bec1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bedb: Unknown result type (might be due to invalid IL or missing references)
		//IL_bee6: Unknown result type (might be due to invalid IL or missing references)
		//IL_beed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10291: Unknown result type (might be due to invalid IL or missing references)
		//IL_102b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_102e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_102fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_102ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_10304: Unknown result type (might be due to invalid IL or missing references)
		//IL_10319: Unknown result type (might be due to invalid IL or missing references)
		//IL_1031f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10321: Unknown result type (might be due to invalid IL or missing references)
		//IL_1032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10331: Unknown result type (might be due to invalid IL or missing references)
		//IL_10337: Unknown result type (might be due to invalid IL or missing references)
		//IL_10348: Unknown result type (might be due to invalid IL or missing references)
		//IL_10353: Unknown result type (might be due to invalid IL or missing references)
		//IL_1035a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10165: Unknown result type (might be due to invalid IL or missing references)
		//IL_1016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_101be: Unknown result type (might be due to invalid IL or missing references)
		//IL_101d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_101da: Unknown result type (might be due to invalid IL or missing references)
		//IL_101e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_101f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_101fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_101fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10208: Unknown result type (might be due to invalid IL or missing references)
		//IL_1020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10213: Unknown result type (might be due to invalid IL or missing references)
		//IL_10224: Unknown result type (might be due to invalid IL or missing references)
		//IL_1022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10236: Unknown result type (might be due to invalid IL or missing references)
		//IL_106ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_10704: Unknown result type (might be due to invalid IL or missing references)
		//IL_10706: Unknown result type (might be due to invalid IL or missing references)
		//IL_10726: Unknown result type (might be due to invalid IL or missing references)
		//IL_10758: Unknown result type (might be due to invalid IL or missing references)
		//IL_1076f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10774: Unknown result type (might be due to invalid IL or missing references)
		//IL_1077a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10795: Unknown result type (might be due to invalid IL or missing references)
		//IL_10797: Unknown result type (might be due to invalid IL or missing references)
		//IL_107a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_107a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_107ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_107be: Unknown result type (might be due to invalid IL or missing references)
		//IL_107c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_107d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_113ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_113b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_113b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_113d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11404: Unknown result type (might be due to invalid IL or missing references)
		//IL_1141b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11420: Unknown result type (might be due to invalid IL or missing references)
		//IL_11426: Unknown result type (might be due to invalid IL or missing references)
		//IL_1145b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11466: Unknown result type (might be due to invalid IL or missing references)
		//IL_1146d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf25: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf52: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfda: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfe1: Unknown result type (might be due to invalid IL or missing references)
		//IL_aeb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_aec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_aeda: Unknown result type (might be due to invalid IL or missing references)
		//IL_aedf: Unknown result type (might be due to invalid IL or missing references)
		//IL_aef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_af0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_af20: Unknown result type (might be due to invalid IL or missing references)
		//IL_af3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_af45: Unknown result type (might be due to invalid IL or missing references)
		//IL_af67: Unknown result type (might be due to invalid IL or missing references)
		//IL_afad: Unknown result type (might be due to invalid IL or missing references)
		//IL_afc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c10: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c72: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c92: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d13: Unknown result type (might be due to invalid IL or missing references)
		//IL_c010: Unknown result type (might be due to invalid IL or missing references)
		//IL_c03d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c056: Unknown result type (might be due to invalid IL or missing references)
		//IL_c08a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c09a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c238: Unknown result type (might be due to invalid IL or missing references)
		//IL_c265: Unknown result type (might be due to invalid IL or missing references)
		//IL_c27e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c121: Unknown result type (might be due to invalid IL or missing references)
		//IL_c14e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c167: Unknown result type (might be due to invalid IL or missing references)
		//IL_c19b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c355: Unknown result type (might be due to invalid IL or missing references)
		//IL_c382: Unknown result type (might be due to invalid IL or missing references)
		//IL_c39b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3df: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c400: Unknown result type (might be due to invalid IL or missing references)
		//IL_c406: Unknown result type (might be due to invalid IL or missing references)
		//IL_c410: Unknown result type (might be due to invalid IL or missing references)
		//IL_c418: Unknown result type (might be due to invalid IL or missing references)
		//IL_c41f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c49a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c514: Unknown result type (might be due to invalid IL or missing references)
		//IL_c52d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c532: Unknown result type (might be due to invalid IL or missing references)
		//IL_c53d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c545: Unknown result type (might be due to invalid IL or missing references)
		//IL_c54c: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc32: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc50: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc76: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce02: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce07: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce12: Unknown result type (might be due to invalid IL or missing references)
		//IL_c988: Unknown result type (might be due to invalid IL or missing references)
		//IL_c98d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c993: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9da: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca07: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca20: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca54: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca72: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca89: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca90: Unknown result type (might be due to invalid IL or missing references)
		//IL_caaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_cab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_cacd: Unknown result type (might be due to invalid IL or missing references)
		//IL_cafa: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb13: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb47: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb60: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb65: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb70: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb83: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c90a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c92b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c935: Unknown result type (might be due to invalid IL or missing references)
		//IL_c942: Unknown result type (might be due to invalid IL or missing references)
		//IL_c948: Unknown result type (might be due to invalid IL or missing references)
		//IL_c63b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c641: Unknown result type (might be due to invalid IL or missing references)
		//IL_c66c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c699: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_c704: Unknown result type (might be due to invalid IL or missing references)
		//IL_c70f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c71b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c722: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c60c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c616: Unknown result type (might be due to invalid IL or missing references)
		//IL_c623: Unknown result type (might be due to invalid IL or missing references)
		//IL_c629: Unknown result type (might be due to invalid IL or missing references)
		//IL_d216: Unknown result type (might be due to invalid IL or missing references)
		//IL_d21b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d221: Unknown result type (might be due to invalid IL or missing references)
		//IL_d226: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_cea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_cea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ceb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_cec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_cec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_cece: Unknown result type (might be due to invalid IL or missing references)
		//IL_ced9: Unknown result type (might be due to invalid IL or missing references)
		//IL_cee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ceee: Unknown result type (might be due to invalid IL or missing references)
		//IL_cef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_cefe: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf13: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf18: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf23: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf33: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf38: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf48: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf58: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf62: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf84: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfae: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_c808: Unknown result type (might be due to invalid IL or missing references)
		//IL_c817: Unknown result type (might be due to invalid IL or missing references)
		//IL_c821: Unknown result type (might be due to invalid IL or missing references)
		//IL_c82f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c85d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c867: Unknown result type (might be due to invalid IL or missing references)
		//IL_c874: Unknown result type (might be due to invalid IL or missing references)
		//IL_c87a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c760: Unknown result type (might be due to invalid IL or missing references)
		//IL_c76a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c779: Unknown result type (might be due to invalid IL or missing references)
		//IL_c783: Unknown result type (might be due to invalid IL or missing references)
		//IL_c791: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d621: Unknown result type (might be due to invalid IL or missing references)
		//IL_d63a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d66e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d687: Unknown result type (might be due to invalid IL or missing references)
		//IL_d68c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_d712: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_d302: Unknown result type (might be due to invalid IL or missing references)
		//IL_d307: Unknown result type (might be due to invalid IL or missing references)
		//IL_d312: Unknown result type (might be due to invalid IL or missing references)
		//IL_d322: Unknown result type (might be due to invalid IL or missing references)
		//IL_d327: Unknown result type (might be due to invalid IL or missing references)
		//IL_d32c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d337: Unknown result type (might be due to invalid IL or missing references)
		//IL_d347: Unknown result type (might be due to invalid IL or missing references)
		//IL_d34c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d351: Unknown result type (might be due to invalid IL or missing references)
		//IL_d35c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d36c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d371: Unknown result type (might be due to invalid IL or missing references)
		//IL_d376: Unknown result type (might be due to invalid IL or missing references)
		//IL_d37e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d38e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d393: Unknown result type (might be due to invalid IL or missing references)
		//IL_d398: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_cff1: Unknown result type (might be due to invalid IL or missing references)
		//IL_cff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_cff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd28: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd41: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd75: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_cda4: Unknown result type (might be due to invalid IL or missing references)
		//IL_cdd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_cddb: Unknown result type (might be due to invalid IL or missing references)
		//IL_cde6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_d920: Unknown result type (might be due to invalid IL or missing references)
		//IL_d939: Unknown result type (might be due to invalid IL or missing references)
		//IL_d93e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d959: Unknown result type (might be due to invalid IL or missing references)
		//IL_d964: Unknown result type (might be due to invalid IL or missing references)
		//IL_d96b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d75f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d766: Unknown result type (might be due to invalid IL or missing references)
		//IL_d775: Unknown result type (might be due to invalid IL or missing references)
		//IL_d77a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d77f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d784: Unknown result type (might be due to invalid IL or missing references)
		//IL_d78a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d790: Unknown result type (might be due to invalid IL or missing references)
		//IL_d792: Unknown result type (might be due to invalid IL or missing references)
		//IL_d797: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d74e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_d405: Unknown result type (might be due to invalid IL or missing references)
		//IL_d406: Unknown result type (might be due to invalid IL or missing references)
		//IL_d40b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d99b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d806: Unknown result type (might be due to invalid IL or missing references)
		//IL_d811: Unknown result type (might be due to invalid IL or missing references)
		//IL_d81d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d83a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d85a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d865: Unknown result type (might be due to invalid IL or missing references)
		//IL_d871: Unknown result type (might be due to invalid IL or missing references)
		//IL_db45: Unknown result type (might be due to invalid IL or missing references)
		//IL_db72: Unknown result type (might be due to invalid IL or missing references)
		//IL_db8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc03: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_da1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_da36: Unknown result type (might be due to invalid IL or missing references)
		//IL_da3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_da5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_da87: Unknown result type (might be due to invalid IL or missing references)
		//IL_daa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_dad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_daed: Unknown result type (might be due to invalid IL or missing references)
		//IL_daf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dafd: Unknown result type (might be due to invalid IL or missing references)
		//IL_db09: Unknown result type (might be due to invalid IL or missing references)
		//IL_db10: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9df: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc85: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd04: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_d132: Unknown result type (might be due to invalid IL or missing references)
		//IL_d139: Unknown result type (might be due to invalid IL or missing references)
		//IL_d13e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d143: Unknown result type (might be due to invalid IL or missing references)
		//IL_d149: Unknown result type (might be due to invalid IL or missing references)
		//IL_d14f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d151: Unknown result type (might be due to invalid IL or missing references)
		//IL_d156: Unknown result type (might be due to invalid IL or missing references)
		//IL_d17e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d184: Unknown result type (might be due to invalid IL or missing references)
		//IL_d191: Unknown result type (might be due to invalid IL or missing references)
		//IL_d19c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_d115: Unknown result type (might be due to invalid IL or missing references)
		//IL_d121: Unknown result type (might be due to invalid IL or missing references)
		//IL_df5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_df64: Unknown result type (might be due to invalid IL or missing references)
		//IL_df93: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e00d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e026: Unknown result type (might be due to invalid IL or missing references)
		//IL_e02b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e036: Unknown result type (might be due to invalid IL or missing references)
		//IL_e042: Unknown result type (might be due to invalid IL or missing references)
		//IL_e049: Unknown result type (might be due to invalid IL or missing references)
		//IL_e06e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e09b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e101: Unknown result type (might be due to invalid IL or missing references)
		//IL_e110: Unknown result type (might be due to invalid IL or missing references)
		//IL_e11c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e123: Unknown result type (might be due to invalid IL or missing references)
		//IL_d546: Unknown result type (might be due to invalid IL or missing references)
		//IL_d54d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d552: Unknown result type (might be due to invalid IL or missing references)
		//IL_d557: Unknown result type (might be due to invalid IL or missing references)
		//IL_d55d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d563: Unknown result type (might be due to invalid IL or missing references)
		//IL_d565: Unknown result type (might be due to invalid IL or missing references)
		//IL_d56a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d592: Unknown result type (might be due to invalid IL or missing references)
		//IL_d598: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_d529: Unknown result type (might be due to invalid IL or missing references)
		//IL_d535: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd60: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd65: Unknown result type (might be due to invalid IL or missing references)
		//IL_de6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_de97: Unknown result type (might be due to invalid IL or missing references)
		//IL_debb: Unknown result type (might be due to invalid IL or missing references)
		//IL_deef: Unknown result type (might be due to invalid IL or missing references)
		//IL_deff: Unknown result type (might be due to invalid IL or missing references)
		//IL_df05: Unknown result type (might be due to invalid IL or missing references)
		//IL_df0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_df1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_df22: Unknown result type (might be due to invalid IL or missing references)
		//IL_e171: Unknown result type (might be due to invalid IL or missing references)
		//IL_e176: Unknown result type (might be due to invalid IL or missing references)
		//IL_e27b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e300: Unknown result type (might be due to invalid IL or missing references)
		//IL_e310: Unknown result type (might be due to invalid IL or missing references)
		//IL_e316: Unknown result type (might be due to invalid IL or missing references)
		//IL_e320: Unknown result type (might be due to invalid IL or missing references)
		//IL_e32c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e333: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_e48d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e492: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_e51e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e56f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5d6: Unknown result type (might be due to invalid IL or missing references)
		int type = rCurrentNPC.type;
		npcColor = rCurrentNPC.GetNPCColorTintedByBuffs(npcColor);
		if (type == 50)
		{
			Vector2 zero = Vector2.Zero;
			float num303 = 0f;
			zero.Y -= rCurrentNPC.velocity.Y;
			zero.X -= rCurrentNPC.velocity.X * 2f;
			num303 += rCurrentNPC.velocity.X * 0.05f;
			if (rCurrentNPC.frame.Y == 120)
			{
				zero.Y += 2f;
			}
			if (rCurrentNPC.frame.Y == 360)
			{
				zero.Y -= 2f;
			}
			if (rCurrentNPC.frame.Y == 480)
			{
				zero.Y -= 6f;
			}
			mySpriteBatch.Draw(TextureAssets.Ninja.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) + zero.X, rCurrentNPC.position.Y - screenPos.Y + (float)(rCurrentNPC.height / 2) + zero.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Ninja.Width(), TextureAssets.Ninja.Height()), npcColor, num303, new Vector2((float)(TextureAssets.Ninja.Width() / 2), (float)(TextureAssets.Ninja.Height() / 2)), 1f, (SpriteEffects)0, 0f);
		}
		if (type == 71)
		{
			Vector2 zero2 = Vector2.Zero;
			float num304 = 0f;
			zero2.Y -= rCurrentNPC.velocity.Y * 0.3f;
			zero2.X -= rCurrentNPC.velocity.X * 0.6f;
			num304 += rCurrentNPC.velocity.X * 0.09f;
			if (rCurrentNPC.frame.Y == 120)
			{
				zero2.Y += 2f;
			}
			if (rCurrentNPC.frame.Y == 360)
			{
				zero2.Y -= 2f;
			}
			if (rCurrentNPC.frame.Y == 480)
			{
				zero2.Y -= 6f;
			}
			GetItemDrawFrame(327, out var itemTexture, out var rectangle);
			mySpriteBatch.Draw(itemTexture, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) + zero2.X, rCurrentNPC.position.Y - screenPos.Y + (float)(rCurrentNPC.height / 2) + zero2.Y), (Rectangle?)rectangle, npcColor, num304, rectangle.Size() / 2f, 1f, (SpriteEffects)0, 0f);
		}
		if (type == 69)
		{
			mySpriteBatch.Draw(TextureAssets.AntLion.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height + 14f), (Rectangle?)new Rectangle(0, 0, TextureAssets.AntLion.Width(), TextureAssets.AntLion.Height()), npcColor, (0f - rCurrentNPC.rotation) * 0.3f, new Vector2((float)(TextureAssets.AntLion.Width() / 2), (float)(TextureAssets.AntLion.Height() / 2)), 1f, (SpriteEffects)0, 0f);
		}
		if (type == 1 && rCurrentNPC.ai[1] > 0f)
		{
			DrawNPC_SlimeItem(rCurrentNPC, type, npcColor, 0f);
		}
		float num305 = 0f;
		float num306 = NPCAddHeight(rCurrentNPC);
		Vector2 halfSize = default(Vector2);
		((Vector2)(ref halfSize))._002Ector((float)(TextureAssets.Npc[type].Width() / 2), (float)(TextureAssets.Npc[type].Height() / npcFrameCount[type] / 2));
		if (type == 108 || type == 124 || type == 625)
		{
			num305 = 2f;
		}
		else if (type == 357)
		{
			num305 = rCurrentNPC.localAI[0];
		}
		else if (type == 467)
		{
			num305 = 7f;
		}
		else if (type == 537)
		{
			num305 = 2f;
		}
		else if (type == 581)
		{
			num305 = -6f;
		}
		else if (type == 490)
		{
			num305 = 4f;
		}
		else if (type == 484)
		{
			num305 = 2f;
		}
		else if (type == 483)
		{
			num305 = 14f;
		}
		else if (type == 477)
		{
			num306 = 22f;
		}
		else if (type == 478)
		{
			num305 -= 2f;
		}
		else if (type == 606)
		{
			num305 -= 2f;
		}
		else if (type == 612 || type == 613)
		{
			num305 -= 2f;
		}
		else if (type == 469 && rCurrentNPC.ai[2] == 1f)
		{
			num305 = 14f;
		}
		else
		{
			switch (type)
			{
			case 4:
				((Vector2)(ref halfSize))._002Ector(55f, 107f);
				break;
			case 125:
				((Vector2)(ref halfSize))._002Ector(55f, 107f);
				break;
			case 126:
				((Vector2)(ref halfSize))._002Ector(55f, 107f);
				break;
			case 626:
			case 627:
				if (rCurrentNPC.wet)
				{
					num305 = -2f;
					halfSize = rCurrentNPC.frame.Size() * new Vector2(0.5f, 0.5f) + new Vector2(0f, -4f);
				}
				else
				{
					num305 = 2f;
				}
				break;
			case 63:
			case 64:
			case 103:
				halfSize.Y += 4f;
				break;
			case 69:
				halfSize.Y += 8f;
				break;
			case 262:
				halfSize.Y = 77f;
				num306 += 26f;
				break;
			case 264:
				halfSize.Y = 21f;
				num306 += 2f;
				break;
			case 266:
				num306 += 50f * rCurrentNPC.scale;
				break;
			case 268:
				num306 += 16f;
				break;
			case 288:
				num306 += 6f;
				break;
			}
		}
		if (rCurrentNPC.aiStyle == 10 || type == 72)
		{
			npcColor = Color.White;
		}
		SpriteEffects spriteEffects = (SpriteEffects)0;
		if (rCurrentNPC.spriteDirection == 1)
		{
			spriteEffects = (SpriteEffects)1;
		}
		if (type == 124 && rCurrentNPC.localAI[0] == 0f)
		{
			int num307 = 0;
			if (rCurrentNPC.frame.Y > 56)
			{
				num307 += 4;
			}
			num307 += rCurrentNPC.frame.Y / 56;
			if (num307 >= OffsetsPlayerHeadgear.Length)
			{
				num307 = 0;
			}
			float y = OffsetsPlayerHeadgear[num307].Y;
			LoadProjectile(582);
			Texture2D value = TextureAssets.Projectile[582].Value;
			if (rCurrentNPC.townNpcVariationIndex == 1)
			{
				value = TextureAssets.Extra[263].Value;
			}
			Vector2 position = rCurrentNPC.Center - screenPos;
			position -= new Vector2((float)value.Width, (float)(value.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
			position += new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY + y);
			position += new Vector2((float)(-rCurrentNPC.spriteDirection * 2), -2f);
			mySpriteBatch.Draw(value, position, (Rectangle?)null, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, value.Size() * new Vector2(0f, 0.5f), rCurrentNPC.scale, spriteEffects, 0f);
		}
		switch (type)
		{
		default:
			if (type != 546 && type != 552 && type != 553 && type != 554 && type != 561 && type != 562 && type != 563 && type != 555 && type != 556 && type != 557 && type != 558 && type != 559 && type != 560 && type != 574 && type != 575 && type != 568 && type != 569 && type != 572 && type != 573 && type != 566 && type != 567 && type != 570 && type != 578 && type != 571 && type != 583 && type != 584 && type != 585 && type != 618 && type != 620 && type != 661)
			{
				switch (type)
				{
				case 551:
				{
					Texture2D value12 = TextureAssets.Npc[type].Value;
					Vector2 vector70 = rCurrentNPC.Center - screenPos;
					Rectangle frame = rCurrentNPC.frame;
					_ = frame.Size() / 2f;
					SpriteEffects spriteEffects2 = (SpriteEffects)(spriteEffects ^ 1);
					float rotation11 = rCurrentNPC.rotation;
					Color color47 = npcColor;
					Color color10 = Color.Lerp(color47, Color.White, 0.6f);
					((Color)(ref color10)).A = 66;
					Vector2 val = new Vector2(171f, 44f);
					Vector2 vector11 = default(Vector2);
					((Vector2)(ref vector11))._002Ector(230f, 52f);
					Vector2 vector12 = Vector2.Lerp(val, vector11, 0.5f) + new Vector2(-50f, 30f);
					int num308 = (int)rCurrentNPC.localAI[0] / 4;
					Vector2 spinningpoint = val - vector12;
					Vector2 spinningpoint2 = vector11 - vector12;
					Texture2D value23 = TextureAssets.Extra[82].Value;
					if (((Enum)spriteEffects2).HasFlag((Enum)(object)(SpriteEffects)1))
					{
						spinningpoint2.X *= -1f;
					}
					Rectangle value34 = value23.Frame(2, 5, num308 / 5, num308 % 5);
					Vector2 origin = default(Vector2);
					((Vector2)(ref origin))._002Ector(16f, 176f);
					if (((Enum)spriteEffects2).HasFlag((Enum)(object)(SpriteEffects)1))
					{
						origin.X = (float)value34.Width - origin.X;
					}
					if (((Enum)spriteEffects2).HasFlag((Enum)(object)(SpriteEffects)1))
					{
						vector12.X = (float)frame.Width - vector12.X;
					}
					Texture2D value45 = TextureAssets.Extra[81].Value;
					if (((Enum)spriteEffects2).HasFlag((Enum)(object)(SpriteEffects)1))
					{
						spinningpoint.X *= -1f;
					}
					Rectangle value56 = value45.Frame(2, 5, num308 / 5, num308 % 5);
					Vector2 origin12 = default(Vector2);
					((Vector2)(ref origin12))._002Ector(215f, 170f);
					if (((Enum)spriteEffects2).HasFlag((Enum)(object)(SpriteEffects)1))
					{
						origin12.X = (float)value56.Width - origin12.X;
					}
					float lerpValue = Utils.GetLerpValue(0f, 30f, rCurrentNPC.localAI[1], clamped: true);
					if (lerpValue == 1f)
					{
						lerpValue = Utils.GetLerpValue(60f, 30f, rCurrentNPC.localAI[1], clamped: true);
					}
					lerpValue = 2f;
					Vector2 vector13 = rCurrentNPC.Size / 2f - screenPos;
					int num309 = -3;
					int num310 = 0;
					byte b2 = 2;
					for (int i = 9; i > num310; i += num309)
					{
						Vector2 vector14 = rCurrentNPC.oldPos[i] + vector13;
						float num311 = rCurrentNPC.oldRot[i];
						Color color11 = color47 * (1f - (float)i / 10f) * 0.35f;
						((Color)(ref color11)).A = (byte)(((Color)(ref color11)).A / b2);
						mySpriteBatch.Draw(value23, vector14 + spinningpoint2.RotatedBy(num311), (Rectangle?)value34, color11, num311, origin, 1f, spriteEffects2, 0f);
						mySpriteBatch.Draw(value12, vector14, (Rectangle?)frame, color11, num311, vector12, 1f, spriteEffects2, 0f);
						mySpriteBatch.Draw(value45, vector14 + spinningpoint.RotatedBy(num311), (Rectangle?)value56, color11, num311, origin12, 1f, spriteEffects2, 0f);
					}
					mySpriteBatch.Draw(value23, vector70 + spinningpoint2.RotatedBy(rotation11), (Rectangle?)value34, color47, rotation11, origin, 1f, spriteEffects2, 0f);
					mySpriteBatch.Draw(value12, vector70, (Rectangle?)frame, color47, rotation11, vector12, 1f, spriteEffects2, 0f);
					mySpriteBatch.Draw(TextureAssets.GlowMask[226].Value, vector70, (Rectangle?)frame, color10 * (0.7f + 0.3f * lerpValue), rotation11, vector12, 1f, spriteEffects2, 0f);
					mySpriteBatch.Draw(value45, vector70 + spinningpoint.RotatedBy(rotation11), (Rectangle?)value56, color47, rotation11, origin12, 1f, spriteEffects2, 0f);
					return;
				}
				case 657:
				{
					Texture2D value2 = TextureAssets.Npc[type].Value;
					Vector2 position35 = rCurrentNPC.Bottom - screenPos;
					position35.Y += 2f;
					int num323 = npcFrameCount[rCurrentNPC.type];
					int num324 = rCurrentNPC.frame.Y / rCurrentNPC.frame.Height;
					Rectangle rectangle7 = value2.Frame(2, 16, num324 / num323, num324 % num323);
					((Rectangle)(ref rectangle7)).Inflate(0, -2);
					Vector2 origin20 = rectangle7.Size() * new Vector2(0.5f, 1f);
					Color color15 = Color.Lerp(Color.White, npcColor, 0.5f);
					if (rCurrentNPC.life <= rCurrentNPC.lifeMax / 2)
					{
						DrawNPCDirect_QueenSlimeWings(rCurrentNPC, mySpriteBatch, screenPos, rCurrentNPC.Center, color15);
					}
					Texture2D value3 = TextureAssets.Extra[186].Value;
					Rectangle rectangle8 = value3.Frame();
					Vector2 origin21 = rectangle8.Size() * new Vector2(0.5f, 0.5f);
					Vector2 vector16 = default(Vector2);
					((Vector2)(ref vector16))._002Ector(rCurrentNPC.Center.X, rCurrentNPC.Center.Y);
					float num325 = 0f;
					switch (num324)
					{
					case 1:
					case 6:
						num325 -= 10f;
						break;
					case 3:
					case 5:
						num325 += 10f;
						break;
					case 4:
					case 12:
					case 13:
					case 14:
					case 15:
						num325 += 18f;
						break;
					case 7:
					case 8:
						num325 -= 14f;
						break;
					case 9:
						num325 -= 16f;
						break;
					case 10:
						num325 -= 18f;
						break;
					case 11:
						num325 += 20f;
						break;
					case 20:
						num325 -= 14f;
						break;
					case 21:
					case 23:
						num325 -= 18f;
						break;
					case 22:
						num325 -= 22f;
						break;
					}
					vector16.Y += num325;
					if (rCurrentNPC.rotation != 0f)
					{
						vector16 = vector16.RotatedBy(rCurrentNPC.rotation, rCurrentNPC.Bottom);
					}
					vector16 -= screenPos;
					if (!rCurrentNPC.IsABestiaryIconDummy)
					{
						mySpriteBatch.End();
						mySpriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, (Effect)null, Transform);
					}
					GameShaders.Misc["QueenSlime"].Apply();
					if (rCurrentNPC.ai[0] == 4f && rCurrentNPC.velocity.Y != 0f)
					{
						float num326 = 1f;
						if (rCurrentNPC.ai[2] == 1f)
						{
							num326 = 6f;
						}
						for (int num327 = 7; num327 >= 0; num327--)
						{
							float num328 = 1f - (float)num327 / 8f;
							Vector2 vector17 = rCurrentNPC.oldPos[num327] + new Vector2((float)rCurrentNPC.width * 0.5f, (float)rCurrentNPC.height);
							vector17 -= (rCurrentNPC.Bottom - Vector2.Lerp(vector17, rCurrentNPC.Bottom, 0.75f)) * num326;
							vector17 -= screenPos;
							Color color16 = color15 * num328;
							mySpriteBatch.Draw(value2, vector17, (Rectangle?)rectangle7, color16, rCurrentNPC.rotation, origin20, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
						}
					}
					if (!rCurrentNPC.IsABestiaryIconDummy)
					{
						mySpriteBatch.End();
						mySpriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
					}
					pixelShader.CurrentTechnique.Passes[0].Apply();
					mySpriteBatch.Draw(value3, vector16, (Rectangle?)rectangle8, color15, rCurrentNPC.rotation, origin21, 1f, (SpriteEffects)(spriteEffects ^ 1), 0f);
					GameShaders.Misc["QueenSlime"].Apply();
					if (!rCurrentNPC.IsABestiaryIconDummy)
					{
						mySpriteBatch.End();
						mySpriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, (Effect)null, Transform);
					}
					DrawData value4 = new DrawData(value2, position35, rectangle7, rCurrentNPC.GetAlpha(color15), rCurrentNPC.rotation, origin20, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1));
					GameShaders.Misc["QueenSlime"].Apply(value4);
					value4.Draw(mySpriteBatch);
					pixelShader.CurrentTechnique.Passes[0].Apply();
					if (!rCurrentNPC.IsABestiaryIconDummy)
					{
						mySpriteBatch.End();
						mySpriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
					}
					Texture2D value5 = TextureAssets.Extra[177].Value;
					rectangle7 = value5.Frame();
					origin20 = rectangle7.Size() * new Vector2(0.5f, 0.5f);
					((Vector2)(ref position35))._002Ector(rCurrentNPC.Center.X, rCurrentNPC.Top.Y - (float)((Rectangle)(ref rectangle7)).Bottom + 44f);
					float num329 = 0f;
					switch (num324)
					{
					case 1:
						num329 -= 10f;
						break;
					case 3:
					case 5:
					case 6:
						num329 += 10f;
						break;
					case 4:
					case 12:
					case 13:
					case 14:
					case 15:
						num329 += 18f;
						break;
					case 7:
					case 8:
						num329 -= 14f;
						break;
					case 9:
						num329 -= 16f;
						break;
					case 10:
						num329 -= 18f;
						break;
					case 11:
						num329 += 20f;
						break;
					case 20:
						num329 -= 14f;
						break;
					case 21:
					case 23:
						num329 -= 18f;
						break;
					case 22:
						num329 -= 22f;
						break;
					}
					position35.Y += num329;
					if (rCurrentNPC.rotation != 0f)
					{
						position35 = position35.RotatedBy(rCurrentNPC.rotation, rCurrentNPC.Bottom);
					}
					position35 -= screenPos;
					mySpriteBatch.Draw(value5, position35, (Rectangle?)rectangle7, color15, rCurrentNPC.rotation, origin20, 1f, (SpriteEffects)(spriteEffects ^ 1), 0f);
					return;
				}
				case 576:
				case 577:
				{
					Texture2D value9 = TextureAssets.Npc[type].Value;
					Vector2 vector18 = rCurrentNPC.Bottom - screenPos;
					Rectangle rectangle11 = value9.Frame(5, 10, rCurrentNPC.frame.Y / 10, rCurrentNPC.frame.Y % 10);
					Vector2 origin24 = rectangle11.Size() * new Vector2(0.5f, 1f);
					origin24.Y -= 4f;
					int num330 = 94;
					if (rCurrentNPC.spriteDirection == 1)
					{
						origin24.X = num330;
					}
					else
					{
						origin24.X = rectangle11.Width - num330;
					}
					Color value10 = Color.White;
					float amount5 = 0f;
					float amount6 = 0f;
					int num331 = 0;
					float num332 = 0f;
					Color color18 = npcColor;
					if (rCurrentNPC.localAI[3] < 60f)
					{
						float num333 = rCurrentNPC.localAI[3] / 60f;
						num331 = 3;
						num332 = 1f - num333 * num333;
						((Color)(ref value10))._002Ector(127, 0, 255, 0);
						amount6 = 1f;
						color18 = Color.Lerp(Color.Transparent, color18, num333 * num333);
					}
					for (int num334 = 0; num334 < num331; num334++)
					{
						Color value11 = npcColor;
						value11 = Color.Lerp(value11, value10, amount5);
						value11 = rCurrentNPC.GetAlpha(value11);
						value11 = Color.Lerp(value11, value10, amount6);
						value11 *= 1f - num332;
						Vector2 position2 = vector18;
						position2 -= new Vector2((float)value9.Width, (float)(value9.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position2 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value9, position2, (Rectangle?)rectangle11, value11, rCurrentNPC.rotation, origin24, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					}
					mySpriteBatch.Draw(value9, vector18, (Rectangle?)rectangle11, rCurrentNPC.GetAlpha(color18), rCurrentNPC.rotation, origin24, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					return;
				}
				case 594:
				{
					Texture2D value6 = TextureAssets.Npc[type].Value;
					Vector2 position36 = rCurrentNPC.Top - screenPos;
					Rectangle rectangle9 = value6.Frame(8, 1, rCurrentNPC.frame.Y);
					Rectangle value7 = value6.Frame(8);
					Vector2 origin22 = rectangle9.Size() * new Vector2(0.5f, 0f);
					Color color17 = npcColor;
					float scale12 = 1f;
					NPC nPC = rCurrentNPC.AI_113_WindyBalloon_GetSlaveNPC();
					if (nPC != null)
					{
						scale12 = nPC.scale;
						if (nPC.ai[1] > 0f)
						{
							DrawNPC_SlimeItem(nPC, nPC.type, color17, rCurrentNPC.rotation);
						}
						mySpriteBatch.Draw(value6, position36, (Rectangle?)value7, nPC.GetAlpha(color17), rCurrentNPC.rotation, origin22, scale12, spriteEffects, 0f);
						mySpriteBatch.Draw(value6, position36, (Rectangle?)value7, nPC.GetColor(color17), rCurrentNPC.rotation, origin22, scale12, spriteEffects, 0f);
					}
					mySpriteBatch.Draw(value6, position36, (Rectangle?)rectangle9, rCurrentNPC.GetAlpha(color17), rCurrentNPC.rotation, origin22, scale12, spriteEffects, 0f);
					return;
				}
				case 686:
				{
					Texture2D value8 = TextureAssets.Npc[type].Value;
					Vector2 position37 = rCurrentNPC.Top - screenPos;
					Rectangle rectangle10 = value8.Frame();
					Vector2 origin23 = rectangle10.Size() * new Vector2(0.5f, 0f);
					Color newColor2 = npcColor;
					mySpriteBatch.Draw(value8, position37, (Rectangle?)rectangle10, rCurrentNPC.GetAlpha(newColor2), rCurrentNPC.rotation, origin23, rCurrentNPC.scale, spriteEffects, 0f);
					return;
				}
				case 564:
				case 565:
				{
					Texture2D value13 = TextureAssets.Npc[type].Value;
					Vector2 vector19 = rCurrentNPC.Bottom - screenPos;
					Rectangle rectangle12 = value13.Frame(5, 9, rCurrentNPC.frame.Y / 9, rCurrentNPC.frame.Y % 9);
					Vector2 origin25 = rectangle12.Size() * new Vector2(0.5f, 1f);
					origin25.Y -= 10f;
					int num335 = 52;
					if (rCurrentNPC.spriteDirection == 1)
					{
						origin25.X = num335;
					}
					else
					{
						origin25.X = rectangle12.Width - num335;
					}
					Color value14 = Color.White;
					float amount7 = 0f;
					float amount8 = 0f;
					int num336 = 0;
					float num337 = 0f;
					float num338 = 0f;
					Color color19 = npcColor;
					if (rCurrentNPC.localAI[3] < 60f)
					{
						float num339 = rCurrentNPC.localAI[3] / 60f;
						num336 = 3;
						num337 = 1f - num339 * num339;
						num338 = 8f;
						((Color)(ref value14))._002Ector(127, 0, 255, 0);
						amount8 = 1f;
						color19 = Color.Lerp(Color.Transparent, color19, num339 * num339);
					}
					for (int num340 = 0; num340 < num336; num340++)
					{
						Color value15 = npcColor;
						value15 = Color.Lerp(value15, value14, amount7);
						value15 = rCurrentNPC.GetAlpha(value15);
						value15 = Color.Lerp(value15, value14, amount8);
						value15 *= 1f - num337;
						Vector2 position3 = vector19;
						position3 -= new Vector2((float)value13.Width, (float)(value13.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position3 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						position3 += ((float)num340 / (float)num336 * ((float)Math.PI * 2f)).ToRotationVector2() * num338 * num337;
						mySpriteBatch.Draw(value13, position3, (Rectangle?)rectangle12, value15, rCurrentNPC.rotation, origin25, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					}
					Color alpha6 = rCurrentNPC.GetAlpha(color19);
					num336 = 4;
					num338 = 4f;
					num337 = 0.625f + (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.75f + (float)Math.PI) * 0.125f;
					for (int num341 = 0; num341 < num336; num341++)
					{
						Color color20 = alpha6;
						color20 *= 1f - num337;
						Vector2 position4 = vector19;
						position4 -= new Vector2((float)value13.Width, (float)(value13.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position4 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						position4 += ((float)num341 / (float)num336 * ((float)Math.PI * 2f)).ToRotationVector2() * num338 * num337;
						mySpriteBatch.Draw(value13, position4, (Rectangle?)rectangle12, color20, rCurrentNPC.rotation, origin25, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					}
					mySpriteBatch.Draw(value13, vector19, (Rectangle?)rectangle12, alpha6, rCurrentNPC.rotation, origin25, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					if (rCurrentNPC.Opacity > 0f)
					{
						Color white2 = Color.White;
						((Color)(ref white2)).A = (byte)(((Color)(ref white2)).A / 2);
						white2 *= rCurrentNPC.Opacity;
						mySpriteBatch.Draw(TextureAssets.GlowMask[225].Value, vector19, (Rectangle?)rectangle12, white2, rCurrentNPC.rotation, origin25, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
						num336 = 4;
						num338 = 4f;
						num337 = 0.5f + (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.75f) * 0.5f;
						for (int num342 = 0; num342 < num336; num342++)
						{
							Color color21 = white2 * 0.35f;
							color21 *= 1f - num337;
							Vector2 position5 = vector19;
							position5 -= new Vector2((float)value13.Width, (float)(value13.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
							position5 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
							position5 += ((float)num342 / (float)num336 * ((float)Math.PI * 2f)).ToRotationVector2() * num338 * num337;
							mySpriteBatch.Draw(TextureAssets.GlowMask[225].Value, position5, (Rectangle?)rectangle12, color21, rCurrentNPC.rotation, origin25, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
						}
					}
					return;
				}
				case 548:
				{
					Texture2D value78 = TextureAssets.Npc[type].Value;
					Vector2 vector15 = rCurrentNPC.Bottom - screenPos;
					Rectangle rectangle6 = value78.Frame();
					Vector2 origin19 = rectangle6.Size() / 2f;
					origin19.Y += 30f;
					origin19.Y += 8f;
					origin19.X -= 1f;
					Color white = Color.White;
					float amount = 0f;
					float amount4 = 0f;
					int num312 = 0;
					float num313 = 0f;
					float num314 = 0f;
					Color newColor = npcColor;
					for (int num315 = 0; num315 < num312; num315++)
					{
						Color value82 = npcColor;
						value82 = Color.Lerp(value82, white, amount);
						value82 = rCurrentNPC.GetAlpha(value82);
						value82 = Color.Lerp(value82, white, amount4);
						value82 *= 1f - num313;
						Vector2 position23 = vector15;
						position23 -= new Vector2((float)value78.Width, (float)(value78.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position23 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						position23 += ((float)num315 / (float)num312 * ((float)Math.PI * 2f)).ToRotationVector2() * num314 * num313;
						mySpriteBatch.Draw(value78, position23, (Rectangle?)rectangle6, value82, rCurrentNPC.rotation, origin19, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					}
					Color alpha = rCurrentNPC.GetAlpha(newColor);
					num312 = 4;
					num314 = 4f;
					num313 = 0.625f + (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.75f + (float)Math.PI) * 0.125f;
					for (int num316 = 0; num316 < num312; num316++)
					{
						Color color12 = alpha;
						((Color)(ref color12)).A = 0;
						color12 *= 1f - num313;
						Vector2 position32 = vector15;
						position32 -= new Vector2((float)value78.Width, (float)(value78.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position32 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						position32 += ((float)num316 / (float)num312 * ((float)Math.PI * 2f)).ToRotationVector2() * num314 * num313;
						mySpriteBatch.Draw(value78, position32, (Rectangle?)rectangle6, color12, rCurrentNPC.rotation, origin19, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					}
					mySpriteBatch.Draw(value78, vector15, (Rectangle?)rectangle6, alpha, rCurrentNPC.rotation, origin19, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					if (rCurrentNPC.ai[1] == 2f)
					{
						float num317 = Math.Min(1f, rCurrentNPC.ai[0] / 120f);
						mySpriteBatch.Draw(value78, vector15, (Rectangle?)rectangle6, new Color(1f, 1f, 1f, 0f) * num317, rCurrentNPC.rotation, origin19, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
						float progress = MathHelper.Clamp(rCurrentNPC.ai[0] / 450f, 0f, 1f);
						if (!Terraria.Graphics.Effects.Filters.Scene["CrystalWin"].IsActive())
						{
							Terraria.Graphics.Effects.Filters.Scene.Activate("CrystalWin", rCurrentNPC.Center);
						}
						else
						{
							Terraria.Graphics.Effects.Filters.Scene["CrystalWin"].GetShader().UseProgress(progress);
						}
						Terraria.Graphics.Effects.Filters.Scene["CrystalWin"].GetShader().UseTargetPosition(rCurrentNPC.Center);
					}
					num312 = 4;
					num314 = 4f;
					num313 = 0.625f + (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.75f) * 0.125f;
					for (int num318 = 0; num318 < num312; num318++)
					{
						Color color13 = alpha;
						((Color)(ref color13)).A = 0;
						color13 *= 0.3f;
						color13 *= 1f - num313;
						Vector2 position33 = vector15;
						position33 -= new Vector2((float)value78.Width, (float)(value78.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position33 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						position33 += ((float)num318 / (float)num312 * ((float)Math.PI * 2f)).ToRotationVector2() * num314 * num313;
						mySpriteBatch.Draw(value78, position33, (Rectangle?)rectangle6, color13, rCurrentNPC.rotation, origin19, rCurrentNPC.scale, (SpriteEffects)(spriteEffects ^ 1), 0f);
					}
					if (rCurrentNPC.alpha < 255)
					{
						float num319 = GlobalTimeWrappedHourly % 3f / 3f;
						float num320 = num319;
						if (num320 > 0.5f)
						{
							num320 = 1f - num319;
						}
						if (num320 < 0f)
						{
							num320 = 0f;
						}
						float num321 = (num319 + 0.5f) % 1f;
						float num322 = num321;
						if (num322 > 0.5f)
						{
							num322 = 1f - num321;
						}
						if (num322 < 0f)
						{
							num322 = 0f;
						}
						value78 = TextureAssets.GlowMask[239].Value;
						rectangle6 = value78.Frame();
						origin19 = rectangle6.Size() / 2f;
						Vector2 position34 = vector15 + new Vector2(0f, -40f);
						Color color14 = default(Color);
						((Color)(ref color14))._002Ector(140, 50, 255, 0);
						color14 *= 0.6f;
						mySpriteBatch.Draw(value78, position34, (Rectangle?)rectangle6, color14, rCurrentNPC.rotation, origin19, rCurrentNPC.scale * 0.75f, (SpriteEffects)(spriteEffects ^ 1), 0f);
						num313 = 1f + num319 * 0.75f;
						mySpriteBatch.Draw(value78, position34, (Rectangle?)rectangle6, color14 * num320, rCurrentNPC.rotation, origin19, rCurrentNPC.scale * 0.75f * num313, (SpriteEffects)(spriteEffects ^ 1), 0f);
						num313 = 1f + num321 * 0.75f;
						mySpriteBatch.Draw(value78, position34, (Rectangle?)rectangle6, color14 * num322, rCurrentNPC.rotation, origin19, rCurrentNPC.scale * 0.75f * num313, (SpriteEffects)(spriteEffects ^ 1), 0f);
						value78 = TextureAssets.Extra[89].Value;
						rectangle6 = value78.Frame();
						origin19 = rectangle6.Size() / 2f;
						Vector2 scale11 = new Vector2(0.75f, 1f + num313) * 1.5f;
						num313 = 1f + num321 * 0.75f;
						if (rCurrentNPC.dontTakeDamageFromHostiles)
						{
							scale11.Y *= 0.6f;
						}
						position34.Y -= 6f;
						mySpriteBatch.Draw(value78, position34, (Rectangle?)rectangle6, color14 * num322, rCurrentNPC.rotation + (float)Math.PI / 2f, origin19, scale11, (SpriteEffects)(spriteEffects ^ 1), 0f);
						mySpriteBatch.Draw(value78, position34, (Rectangle?)rectangle6, Color.Lerp(color14, Color.White, 0.5f), rCurrentNPC.rotation + (float)Math.PI / 2f, origin19, 1.5f, (SpriteEffects)(spriteEffects ^ 1), 0f);
					}
					return;
				}
				default:
					if (type < 621 || type > 623)
					{
						break;
					}
					goto case 371;
				case 371:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				{
					Texture2D value67 = TextureAssets.Npc[type].Value;
					Vector2 position12 = rCurrentNPC.Center - screenPos;
					position12 -= new Vector2((float)value67.Width, (float)(value67.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position12 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value67, position12, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					return;
				}
				}
				Color val2 = default(Color);
				Vector3 val3;
				switch (type)
				{
				case 549:
				{
					Texture2D value54 = TextureAssets.Npc[type].Value;
					Vector2 vector59 = rCurrentNPC.Center - screenPos;
					Rectangle frame9 = rCurrentNPC.frame;
					Vector2 origin15 = default(Vector2);
					((Vector2)(ref origin15))._002Ector(70f, 127f);
					origin15.Y += 8f;
					Vector2 scale15 = default(Vector2);
					((Vector2)(ref scale15))._002Ector(rCurrentNPC.scale);
					float num201 = rCurrentNPC.localAI[0];
					if (num201 < 120f)
					{
						scale15 *= num201 / 240f + 0.5f;
					}
					Color alpha4 = rCurrentNPC.GetAlpha(npcColor);
					float lerpValue2 = Utils.GetLerpValue(0f, 120f, num201, clamped: true);
					float num202 = MathHelper.Lerp(32f, 0f, lerpValue2);
					Color color37 = alpha4;
					((Color)(ref color37)).A = (byte)MathHelper.Lerp((float)(int)((Color)(ref color37)).A, 0f, lerpValue2);
					color37 *= lerpValue2;
					if (num201 >= 120f)
					{
						color37 = alpha4;
					}
					mySpriteBatch.Draw(value54, vector59, (Rectangle?)frame9, color37, rCurrentNPC.rotation, origin15, scale15, spriteEffects, 0f);
					float y3 = (((rCurrentNPC.ai[0] + 54f) % 180f - 120f) / 180f * 2f * ((float)Math.PI * 2f)).ToRotationVector2().Y;
					if (num201 >= 120f)
					{
						num202 = y3 * 0f;
						((Color)(ref color37)).A = (byte)((float)(int)((Color)(ref color37)).A * 0.5f);
						color37 *= y3 / 2f + 0.5f;
						float num203 = 1f;
						for (float num204 = 0f; num204 < num203; num204 += 1f)
						{
							mySpriteBatch.Draw(value54, vector59 + ((float)Math.PI * 2f / num203 * num204).ToRotationVector2() * num202, (Rectangle?)frame9, color37, rCurrentNPC.rotation, origin15, scale15, spriteEffects, 0f);
						}
					}
					float num205 = rCurrentNPC.ai[0] / 180f - 0.76f;
					if (num205 < 0f)
					{
						num205 += 1f;
					}
					float num206 = 0f;
					float num207 = 0f;
					float num208 = 0.6f;
					float num209 = 0.8f;
					if (num205 >= num208 && num205 <= num209)
					{
						num206 = Utils.GetLerpValue(num208, num209, num205);
						num207 = MathHelper.Lerp(0.75f, 0.85f, num206);
					}
					num208 = num209;
					num209 = num208 + 0.13f;
					if (num205 >= num208 && num205 <= num209)
					{
						num206 = 1f - Utils.GetLerpValue(num208, num209, num205);
						num207 = MathHelper.Lerp(1.3f, 0.85f, num206);
					}
					Vector2 vector60 = default(Vector2);
					((Vector2)(ref vector60))._002Ector(0f, -150f);
					int frameNumber = frame9.Y / frame9.Height;
					float num210 = MathHelper.Clamp((num201 - 100f) / 40f, 0f, 1f);
					DrawElderEye(mySpriteBatch, rCurrentNPC.Center + vector60, 0.75f * num210, 0.75f, frameNumber, Color.White);
					DrawElderEye(mySpriteBatch, rCurrentNPC.Center + vector60, 0.75f * num210, 0.75f, frameNumber, new Color(255, 255, 255, 127) * (y3 / 2f + 0.5f));
					if (num206 > 0f && num207 > 0f)
					{
						DrawElderEye(mySpriteBatch, rCurrentNPC.Center + vector60, num206 * 0.5f, num207, frameNumber, new Color(255, 255, 255, 127));
					}
					if (num201 < 120f)
					{
						float num211 = (float)Math.PI * 2f * lerpValue2 * (float)Math.Pow(lerpValue2, 2.0) * 2f + lerpValue2;
						((Color)(ref color37)).A = (byte)((float)(int)((Color)(ref alpha4)).A * (float)Math.Pow(lerpValue2, 2.0) * 0.5f);
						float num212 = 3f;
						for (float num213 = 0f; num213 < num212; num213 += 1f)
						{
							mySpriteBatch.Draw(value54, vector59 + (num211 + (float)Math.PI * 2f / num212 * num213).ToRotationVector2() * num202, (Rectangle?)frame9, color37, rCurrentNPC.rotation, origin15, scale15, spriteEffects, 0f);
						}
					}
					break;
				}
				case 636:
					DrawNPCDirect_HallowBoss(mySpriteBatch, rCurrentNPC, ref screenPos, type, ref npcColor, ref halfSize, spriteEffects);
					break;
				case 677:
					DrawNPCDirect_Faeling(mySpriteBatch, rCurrentNPC, ref screenPos, type, ref npcColor, ref halfSize, spriteEffects);
					break;
				case 668:
					DrawNPCDirect_Deerclops(mySpriteBatch, rCurrentNPC, ref screenPos, type, ref npcColor, ref halfSize, spriteEffects);
					break;
				case 422:
				case 493:
				case 507:
				case 517:
				{
					Texture2D value57 = TextureAssets.Npc[type].Value;
					Vector2 vector63 = rCurrentNPC.Center - screenPos;
					Vector2 vector64 = vector63 - new Vector2(300f, 310f);
					vector63 -= new Vector2((float)value57.Width, (float)(value57.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					vector63 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value57, vector63, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					switch (type)
					{
					case 493:
					{
						value57 = TextureAssets.GlowMask[132].Value;
						val2 = rCurrentNPC.GetAlpha(npcColor);
						val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
						float num228 = 4f + ((Vector3)(ref val3)).Length() * 4f;
						for (int num229 = 0; num229 < 4; num229++)
						{
							mySpriteBatch.Draw(value57, vector63 + rCurrentNPC.velocity.RotatedBy((float)num229 * ((float)Math.PI / 2f)) * num228, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						break;
					}
					case 507:
					{
						value57 = TextureAssets.GlowMask[143].Value;
						val2 = rCurrentNPC.GetAlpha(npcColor);
						val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
						float num224 = 4f + ((Vector3)(ref val3)).Length() * 4f;
						for (int num225 = 0; num225 < 4; num225++)
						{
							mySpriteBatch.Draw(value57, vector63 + rCurrentNPC.velocity.RotatedBy((float)num225 * ((float)Math.PI / 2f)) * num224, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						break;
					}
					case 422:
					{
						value57 = TextureAssets.GlowMask[149].Value;
						val2 = rCurrentNPC.GetAlpha(npcColor);
						val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
						float num226 = 4f + ((Vector3)(ref val3)).Length() * 4f;
						for (int num227 = 0; num227 < 4; num227++)
						{
							mySpriteBatch.Draw(value57, vector63 + rCurrentNPC.velocity.RotatedBy((float)num227 * ((float)Math.PI / 2f)) * num226, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						break;
					}
					case 517:
					{
						value57 = TextureAssets.GlowMask[162].Value;
						val2 = rCurrentNPC.GetAlpha(npcColor);
						val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
						float num222 = 2f + ((Vector3)(ref val3)).Length() * 9f;
						for (int num223 = 0; num223 < 4; num223++)
						{
							mySpriteBatch.Draw(value57, vector63 + rCurrentNPC.velocity.RotatedBy((float)num223 * ((float)Math.PI / 2f)) * num222 + Vector2.UnitX * 2f, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						break;
					}
					}
					int num230 = 0;
					string key = "";
					switch (type)
					{
					case 422:
						num230 = NPC.ShieldStrengthTowerVortex;
						key = "Vortex";
						break;
					case 507:
						num230 = NPC.ShieldStrengthTowerNebula;
						key = "Nebula";
						break;
					case 517:
						num230 = NPC.ShieldStrengthTowerSolar;
						key = "Solar";
						break;
					case 493:
						num230 = NPC.ShieldStrengthTowerStardust;
						key = "Stardust";
						break;
					}
					float num231 = (float)num230 / (float)NPC.ShieldStrengthTowerMax;
					if (rCurrentNPC.IsABestiaryIconDummy)
					{
						break;
					}
					if (num230 > 0)
					{
						mySpriteBatch.End();
						mySpriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone, (Effect)null, Transform);
						float num232 = 0f;
						if (rCurrentNPC.ai[3] > 0f && rCurrentNPC.ai[3] <= 30f)
						{
							num232 = 1f - rCurrentNPC.ai[3] / 30f;
						}
						Terraria.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(1f + num232).UseProgress(0f);
						DrawData value58 = new DrawData(Assets.Request<Texture2D>("Images/Misc/Perlin").Value, vector64 + new Vector2(300f, 300f), (Rectangle?)new Rectangle(0, 0, 600, 600), Color.White * (num231 * 0.8f + 0.2f), rCurrentNPC.rotation, new Vector2(300f, 300f), rCurrentNPC.scale * (1f + num232 * 0.05f), spriteEffects, 0f);
						GameShaders.Misc["ForceField"].UseColor(new Vector3(1f + num232 * 0.5f));
						GameShaders.Misc["ForceField"].Apply(value58);
						value58.Draw(mySpriteBatch);
						mySpriteBatch.End();
						mySpriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
					}
					else if (rCurrentNPC.ai[3] > 0f)
					{
						mySpriteBatch.End();
						mySpriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone, (Effect)null, Transform);
						float num233 = rCurrentNPC.ai[3] / 120f;
						float num234 = Math.Min(rCurrentNPC.ai[3] / 30f, 1f);
						Terraria.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(Math.Min(5f, 15f * num233) + 1f).UseProgress(num233);
						DrawData value59 = new DrawData(Assets.Request<Texture2D>("Images/Misc/Perlin").Value, vector64 + new Vector2(300f, 300f), (Rectangle?)new Rectangle(0, 0, 600, 600), new Color(new Vector4(1f - (float)Math.Sqrt(num234))), rCurrentNPC.rotation, new Vector2(300f, 300f), rCurrentNPC.scale * (1f + num234), spriteEffects, 0f);
						GameShaders.Misc["ForceField"].UseColor(new Vector3(2f));
						GameShaders.Misc["ForceField"].Apply(value59);
						value59.Draw(mySpriteBatch);
						mySpriteBatch.End();
						mySpriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
					}
					else
					{
						Terraria.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(0f).UseProgress(0f);
					}
					break;
				}
				case 402:
				{
					LoadNPC(403);
					LoadNPC(404);
					Texture2D value55 = TextureAssets.Npc[rCurrentNPC.type].Value;
					Vector2 vector61 = rCurrentNPC.Center - screenPos;
					vector61 -= new Vector2((float)value55.Width, (float)(value55.Height / npcFrameCount[rCurrentNPC.type])) * rCurrentNPC.scale / 2f;
					vector61 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					int num214 = 0;
					float num215 = 2f / (float)rCurrentNPC.oldPos.Length * 0.7f;
					float num216 = 600f;
					float num217 = num216 - 30f;
					float num218 = Utils.Remap(rCurrentNPC.ai[2], 0f, num216, 0f, 1f);
					float num219 = 1f - Utils.Remap(num218, 0.5f, num217 / num216, 0f, 1f) * Utils.Remap(num218, num217 / num216, 1f, 1f, 0f);
					int num220 = rCurrentNPC.oldPos.Length - 1;
					while ((float)num220 >= 1f)
					{
						for (int num221 = 0; num221 < 2; num221++)
						{
							value55 = ((num214 != 0) ? TextureAssets.Npc[403].Value : TextureAssets.Npc[404].Value);
							Vector2 position14 = vector61 + rCurrentNPC.oldPos[num220] - rCurrentNPC.position;
							float rotation10 = rCurrentNPC.oldRot[num220];
							if (num220 >= 1 && num221 == 1)
							{
								Vector2 vector62 = Vector2.Lerp(rCurrentNPC.oldPos[num220], rCurrentNPC.oldPos[num220 - 1], 0.5f) - rCurrentNPC.oldPos[num220];
								rotation10 = MathHelper.WrapAngle(rCurrentNPC.oldRot[num220 - 1] * 0.5f + rCurrentNPC.oldRot[num220] * 0.5f);
								position14 += vector62;
							}
							float scale16 = rCurrentNPC.scale;
							mySpriteBatch.Draw(value55, position14, (Rectangle?)null, rCurrentNPC.GetAlpha(npcColor) * (0.8f - num215 * (float)num220 / 2f) * num219, rotation10, halfSize, scale16, spriteEffects, 0f);
							value55 = ((num214 != 0) ? TextureAssets.GlowMask[133].Value : TextureAssets.GlowMask[134].Value);
							mySpriteBatch.Draw(value55, position14, (Rectangle?)null, new Color(255, 255, 255, 0) * (1f - num215 * (float)num220 / 2f) * num219, rotation10, halfSize, scale16, spriteEffects, 0f);
							num214++;
						}
						num220 -= 2;
					}
					value55 = TextureAssets.Npc[rCurrentNPC.type].Value;
					mySpriteBatch.Draw(value55, vector61, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					value55 = TextureAssets.GlowMask[135].Value;
					mySpriteBatch.Draw(value55, vector61, (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0) * num219, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					DrawPrettyStarSparkle(Utils.Remap(rCurrentNPC.ai[2], 0f, num216, 0f, 1f), (SpriteEffects)0, vector61, new Color(255, 255, 255, 0), Color.CornflowerBlue, num218, 0.5f, num217 / num216, num217 / num216, 1f, (float)Math.PI * 2f * num218, new Vector2(2f, 2f), new Vector2(2f, 2f));
					break;
				}
				case 519:
				{
					Texture2D value60 = TextureAssets.Npc[rCurrentNPC.type].Value;
					Vector2 vector65 = rCurrentNPC.Center - screenPos;
					vector65 -= new Vector2((float)value60.Width, (float)(value60.Height / npcFrameCount[rCurrentNPC.type])) * rCurrentNPC.scale / 2f;
					vector65 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					value60 = TextureAssets.Npc[rCurrentNPC.type].Value;
					mySpriteBatch.Draw(value60, vector65, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					int num235 = 0;
					float num236 = 1f / (float)rCurrentNPC.oldPos.Length * 0.7f;
					int num237 = rCurrentNPC.oldPos.Length - 1;
					while ((float)num237 >= 0f)
					{
						float num238 = (float)(rCurrentNPC.oldPos.Length - num237) / (float)rCurrentNPC.oldPos.Length;
						Color pink = Color.Pink;
						pink *= 1f - num236 * (float)num237 / 1f;
						((Color)(ref pink)).A = (byte)((float)(int)((Color)(ref pink)).A * (1f - num238));
						mySpriteBatch.Draw(value60, vector65 + rCurrentNPC.oldPos[num237] - rCurrentNPC.position, (Rectangle?)null, pink, rCurrentNPC.oldRot[num237], halfSize, rCurrentNPC.scale * MathHelper.Lerp(0.3f, 1.1f, num238), spriteEffects, 0f);
						num235++;
						num237--;
					}
					break;
				}
				case 522:
				{
					Texture2D value68 = TextureAssets.Npc[rCurrentNPC.type].Value;
					Vector2 vector66 = rCurrentNPC.Center - screenPos;
					vector66 -= new Vector2((float)value68.Width, (float)(value68.Height / npcFrameCount[rCurrentNPC.type])) * rCurrentNPC.scale / 2f;
					vector66 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					int num255 = 0;
					float num256 = 1f / (float)rCurrentNPC.oldPos.Length * 1.1f;
					int num257 = rCurrentNPC.oldPos.Length - 1;
					while ((float)num257 >= 0f)
					{
						float num258 = (float)(rCurrentNPC.oldPos.Length - num257) / (float)rCurrentNPC.oldPos.Length;
						Color white6 = Color.White;
						white6 *= 1f - num256 * (float)num257 / 1f;
						((Color)(ref white6)).A = (byte)((float)(int)((Color)(ref white6)).A * (1f - num258));
						mySpriteBatch.Draw(value68, vector66 + rCurrentNPC.oldPos[num257] - rCurrentNPC.position, (Rectangle?)null, white6, rCurrentNPC.oldRot[num257], halfSize, rCurrentNPC.scale * MathHelper.Lerp(0.8f, 0.3f, num258), spriteEffects, 0f);
						num255++;
						num257--;
					}
					value68 = TextureAssets.Extra[57].Value;
					mySpriteBatch.Draw(value68, vector66, (Rectangle?)null, new Color(255, 255, 255, 0), 0f, value68.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
					break;
				}
				case 370:
				case 372:
				case 373:
				{
					Texture2D value61 = TextureAssets.Npc[type].Value;
					Color value62 = Color.White;
					float amount10 = 0f;
					bool flag12 = type == 370 && rCurrentNPC.ai[0] > 4f;
					bool num370 = type == 370 && rCurrentNPC.ai[0] > 9f;
					int num239 = 120;
					int num240 = 60;
					Color color38 = npcColor;
					if (num370)
					{
						npcColor = buffColor(npcColor, 0.4f, 0.8f, 0.4f, 1f);
					}
					else if (flag12)
					{
						npcColor = buffColor(npcColor, 0.5f, 0.7f, 0.5f, 1f);
					}
					else if (type == 370 && rCurrentNPC.ai[0] == 4f && rCurrentNPC.ai[2] > (float)num239)
					{
						float num241 = rCurrentNPC.ai[2] - (float)num239;
						num241 /= (float)num240;
						npcColor = buffColor(npcColor, 1f - 0.5f * num241, 1f - 0.3f * num241, 1f - 0.5f * num241, 1f);
					}
					int num242 = 10;
					int num243 = 2;
					switch (type)
					{
					case 370:
						if (rCurrentNPC.ai[0] == -1f)
						{
							num242 = 0;
						}
						if (rCurrentNPC.ai[0] == 0f || rCurrentNPC.ai[0] == 5f || rCurrentNPC.ai[0] == 10f)
						{
							num242 = 7;
						}
						if (rCurrentNPC.ai[0] == 1f)
						{
							value62 = Color.Blue;
							amount10 = 0.5f;
						}
						else
						{
							color38 = npcColor;
						}
						break;
					case 372:
					case 373:
						if (rCurrentNPC.ai[0] == 1f)
						{
							value62 = Color.Blue;
							amount10 = 0.5f;
						}
						break;
					}
					for (int num244 = 1; num244 < num242; num244 += num243)
					{
						_ = ref rCurrentNPC.oldPos[num244];
						Color value63 = color38;
						value63 = Color.Lerp(value63, value62, amount10);
						value63 = rCurrentNPC.GetAlpha(value63);
						value63 *= (float)(num242 - num244) / 15f;
						Vector2 position15 = rCurrentNPC.oldPos[num244] + new Vector2((float)rCurrentNPC.width, (float)rCurrentNPC.height) / 2f - screenPos;
						position15 -= new Vector2((float)value61.Width, (float)(value61.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position15 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value61, position15, (Rectangle?)rCurrentNPC.frame, value63, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					int num245 = 0;
					float num246 = 0f;
					float num247 = 0f;
					if (type == 370)
					{
						if (rCurrentNPC.ai[0] == -1f)
						{
							num245 = 0;
						}
						if (rCurrentNPC.ai[0] == 3f || rCurrentNPC.ai[0] == 8f)
						{
							int num248 = 60;
							int num249 = 30;
							if (rCurrentNPC.ai[2] > (float)num248)
							{
								num245 = 6;
								num246 = 1f - (float)Math.Cos((rCurrentNPC.ai[2] - (float)num248) / (float)num249 * ((float)Math.PI * 2f));
								num246 /= 3f;
								num247 = 40f;
							}
						}
						if (rCurrentNPC.ai[0] == 4f && rCurrentNPC.ai[2] > (float)num239)
						{
							num245 = 6;
							num246 = 1f - (float)Math.Cos((rCurrentNPC.ai[2] - (float)num239) / (float)num240 * ((float)Math.PI * 2f));
							num246 /= 3f;
							num247 = 60f;
						}
						if (rCurrentNPC.ai[0] == 9f && rCurrentNPC.ai[2] > (float)num239)
						{
							num245 = 6;
							num246 = 1f - (float)Math.Cos((rCurrentNPC.ai[2] - (float)num239) / (float)num240 * ((float)Math.PI * 2f));
							num246 /= 3f;
							num247 = 60f;
						}
						if (rCurrentNPC.ai[0] == 12f)
						{
							num245 = 6;
							num246 = 1f - (float)Math.Cos(rCurrentNPC.ai[2] / 30f * ((float)Math.PI * 2f));
							num246 /= 3f;
							num247 = 20f;
						}
					}
					for (int num250 = 0; num250 < num245; num250++)
					{
						Color value64 = npcColor;
						value64 = Color.Lerp(value64, value62, amount10);
						value64 = rCurrentNPC.GetAlpha(value64);
						value64 *= 1f - num246;
						Vector2 position16 = rCurrentNPC.Center + ((float)num250 / (float)num245 * ((float)Math.PI * 2f) + rCurrentNPC.rotation).ToRotationVector2() * num247 * num246 - screenPos;
						position16 -= new Vector2((float)value61.Width, (float)(value61.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position16 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value61, position16, (Rectangle?)rCurrentNPC.frame, value64, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					Vector2 position17 = rCurrentNPC.Center - screenPos;
					position17 -= new Vector2((float)value61.Width, (float)(value61.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position17 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value61, position17, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					if (type != 370 || !(rCurrentNPC.ai[0] >= 4f))
					{
						break;
					}
					value61 = TextureAssets.DukeFishron.Value;
					Color color39 = Color.Lerp(Color.White, Color.Yellow, 0.5f);
					value62 = Color.Yellow;
					amount10 = 1f;
					num246 = 0.5f;
					num247 = 10f;
					num243 = 1;
					if (rCurrentNPC.ai[0] == 4f)
					{
						float num251 = rCurrentNPC.ai[2] - (float)num239;
						num251 /= (float)num240;
						value62 *= num251;
						color39 *= num251;
					}
					if (rCurrentNPC.ai[0] == 12f)
					{
						float num252 = rCurrentNPC.ai[2];
						num252 /= 30f;
						if (num252 > 0.5f)
						{
							num252 = 1f - num252;
						}
						num252 *= 2f;
						num252 = 1f - num252;
						value62 *= num252;
						color39 *= num252;
					}
					for (int num253 = 1; num253 < num242; num253 += num243)
					{
						_ = ref rCurrentNPC.oldPos[num253];
						Color value65 = color39;
						value65 = Color.Lerp(value65, value62, amount10);
						value65 *= (float)(num242 - num253) / 15f;
						Vector2 position18 = rCurrentNPC.oldPos[num253] + new Vector2((float)rCurrentNPC.width, (float)rCurrentNPC.height) / 2f - screenPos;
						position18 -= new Vector2((float)value61.Width, (float)(value61.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position18 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value61, position18, (Rectangle?)rCurrentNPC.frame, value65, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					for (int num254 = 1; num254 < num245; num254++)
					{
						Color value66 = color39;
						value66 = Color.Lerp(value66, value62, amount10);
						value66 = rCurrentNPC.GetAlpha(value66);
						value66 *= 1f - num246;
						Vector2 position19 = rCurrentNPC.Center + ((float)num254 / (float)num245 * ((float)Math.PI * 2f) + rCurrentNPC.rotation).ToRotationVector2() * num247 * num246 - screenPos;
						position19 -= new Vector2((float)value61.Width, (float)(value61.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position19 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value61, position19, (Rectangle?)rCurrentNPC.frame, value66, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					mySpriteBatch.Draw(value61, position17, (Rectangle?)rCurrentNPC.frame, color39, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					break;
				}
				case 439:
				case 440:
				{
					int num371 = rCurrentNPC.frame.Y / (TextureAssets.Npc[type].Height() / npcFrameCount[type]);
					Texture2D value69 = TextureAssets.Npc[type].Value;
					Texture2D value70 = TextureAssets.Extra[30].Value;
					Rectangle rectangle3 = value70.Frame();
					rectangle3.Height /= 2;
					if (num371 >= 4)
					{
						rectangle3.Y += rectangle3.Height;
					}
					Color white7 = Color.White;
					float amount11 = 0f;
					Color color40 = npcColor;
					int num259 = 0;
					int num260 = 0;
					int num261 = 0;
					if (rCurrentNPC.ai[0] == -1f)
					{
						if (rCurrentNPC.ai[1] >= 320f && rCurrentNPC.ai[1] < 960f)
						{
							white7 = Color.White;
							amount11 = 0.5f;
							num259 = 6;
							num260 = 2;
							num261 = 1;
						}
					}
					else if (rCurrentNPC.ai[0] == 1f)
					{
						white7 = Color.White;
						amount11 = 0.5f;
						num259 = 4;
						num260 = 2;
						num261 = 1;
					}
					else
					{
						color40 = npcColor;
					}
					for (int num262 = num261; num262 < num259; num262 += num260)
					{
						_ = ref rCurrentNPC.oldPos[num262];
						Color value71 = color40;
						value71 = Color.Lerp(value71, white7, amount11);
						value71 = rCurrentNPC.GetAlpha(value71);
						value71 *= (float)(num259 - num262) / (float)num259;
						((Color)(ref value71)).A = 100;
						Vector2 position20 = rCurrentNPC.oldPos[num262] + new Vector2((float)rCurrentNPC.width, (float)rCurrentNPC.height) / 2f - screenPos;
						position20 -= rectangle3.Size() * rCurrentNPC.scale / 2f;
						position20 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value70, position20, (Rectangle?)rectangle3, value71, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					int num263 = 0;
					float num264 = 0f;
					float num265 = 0f;
					if (rCurrentNPC.ai[0] == 5f && rCurrentNPC.ai[1] >= 0f && rCurrentNPC.ai[1] < 30f)
					{
						num263 = 4;
						num264 = 1f - (float)Math.Cos((rCurrentNPC.ai[1] - 0f) / 30f * (float)Math.PI);
						num264 /= 2f;
						num265 = 70f;
					}
					for (int num266 = 0; num266 < num263; num266++)
					{
						Color value72 = npcColor;
						value72 = Color.Lerp(value72, white7, amount11);
						value72 = rCurrentNPC.GetAlpha(value72);
						value72 *= 1f - num264;
						Vector2 position21 = rCurrentNPC.Center + ((float)num266 / (float)num263 * ((float)Math.PI * 2f) + rCurrentNPC.rotation).ToRotationVector2() * num265 * num264 - screenPos;
						position21 -= new Vector2((float)value69.Width, (float)(value69.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position21 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value70, position21, (Rectangle?)rectangle3, value72, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					Vector2 position22 = rCurrentNPC.Center - screenPos;
					position22 -= new Vector2((float)value69.Width, (float)(value69.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position22 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value69, position22, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					break;
				}
				case 392:
				case 393:
				case 394:
				case 395:
				{
					Texture2D value73 = TextureAssets.Npc[type].Value;
					Vector2 vec = rCurrentNPC.Center - screenPos + Vector2.UnitY * rCurrentNPC.gfxOffY;
					vec = vec.Floor();
					float num267 = 0f;
					if (type == 393)
					{
						num267 = -8f;
					}
					mySpriteBatch.Draw(value73, vec, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize + Vector2.UnitY * num267, rCurrentNPC.scale, spriteEffects, 0f);
					if (type == 392)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[48].Value, vec, (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * num267, rCurrentNPC.scale, spriteEffects, 0f);
					}
					if (type == 395)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[49].Value, vec, (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * num267, rCurrentNPC.scale, spriteEffects, 0f);
					}
					if (type == 394)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[50].Value, vec, (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * num267, rCurrentNPC.scale, spriteEffects, 0f);
					}
					break;
				}
				case 83:
				case 84:
				case 179:
					mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305), (Rectangle?)rCurrentNPC.frame, Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					break;
				case 87:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				{
					Color alpha5 = rCurrentNPC.GetAlpha(npcColor);
					byte b3 = (byte)((((Color)(ref tileColor)).R + ((Color)(ref tileColor)).G + ((Color)(ref tileColor)).B) / 3);
					if (((Color)(ref alpha5)).R < b3)
					{
						((Color)(ref alpha5)).R = b3;
					}
					if (((Color)(ref alpha5)).G < b3)
					{
						((Color)(ref alpha5)).G = b3;
					}
					if (((Color)(ref alpha5)).B < b3)
					{
						((Color)(ref alpha5)).B = b3;
					}
					mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305), (Rectangle?)rCurrentNPC.frame, alpha5, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					break;
				}
				default:
				{
					switch (type)
					{
					case 491:
					{
						Texture2D value32 = TextureAssets.Npc[rCurrentNPC.type].Value;
						Rectangle frame3 = rCurrentNPC.frame;
						Vector2 origin7 = frame3.OriginFlip(new Vector2(208f, 460f), spriteEffects);
						Vector2 vector34 = rCurrentNPC.Center - screenPos;
						Vector2 vector35 = default(Vector2);
						((Vector2)(ref vector35))._002Ector((float)((!((Enum)spriteEffects).HasFlag((Enum)(object)(SpriteEffects)1)) ? 1 : (-1)), 1f);
						Color alpha11 = rCurrentNPC.GetAlpha(npcColor);
						mySpriteBatch.Draw(value32, vector34, (Rectangle?)frame3, alpha11, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects, 0f);
						int num359 = (int)rCurrentNPC.localAI[3] / 8;
						value32 = TextureAssets.Extra[40].Value;
						frame3 = value32.Frame(1, 4, 0, num359 % 4);
						origin7 = frame3.Size() * new Vector2(0.5f, 1f);
						mySpriteBatch.Draw(value32, vector34 + (new Vector2(102f, -384f) * vector35).RotatedBy(rCurrentNPC.rotation), (Rectangle?)frame3, alpha11, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects, 0f);
						value32 = TextureAssets.Extra[41].Value;
						frame3 = value32.Frame(1, 8, 0, num359 % 8);
						origin7 = frame3.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
						for (int num360 = 0; num360 < 5; num360++)
						{
							mySpriteBatch.Draw(value32, vector34 + (new Vector2((float)(-96 + 34 * num360), 40f) * vector35).RotatedBy(rCurrentNPC.rotation), (Rectangle?)frame3, alpha11, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects, 0f);
						}
						value32 = TextureAssets.Extra[42].Value;
						frame3 = value32.Frame(1, 4, 0, num359 % 4);
						origin7 = frame3.Size() * new Vector2(0.5f, 0f);
						for (int num361 = 0; num361 < 2; num361++)
						{
							mySpriteBatch.Draw(value32, vector34 + (new Vector2((float)(158 - 106 * num361), -302f) * vector35).RotatedBy(rCurrentNPC.rotation), (Rectangle?)frame3, alpha11, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects, 0f);
						}
						value32 = TextureAssets.Extra[43].Value;
						frame3 = value32.Frame(1, 4, 0, num359 % 4);
						origin7 = frame3.Size() * new Vector2(0.5f, 0f);
						for (int num362 = 0; num362 < 2; num362++)
						{
							mySpriteBatch.Draw(value32, vector34 + (new Vector2((float)(42 - 178 * num362), -444f) * vector35).RotatedBy(rCurrentNPC.rotation), (Rectangle?)frame3, alpha11, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects, 0f);
						}
						value32 = TextureAssets.Extra[44].Value;
						frame3 = value32.Frame(1, 4, 0, num359 % 4);
						origin7 = frame3.Size() * new Vector2(0.5f, 0f);
						mySpriteBatch.Draw(value32, vector34 + (new Vector2(-134f, -302f) * vector35).RotatedBy(rCurrentNPC.rotation), (Rectangle?)frame3, alpha11, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects, 0f);
						value32 = TextureAssets.Extra[45].Value;
						frame3 = value32.Frame(1, 4, 0, (2 + num359) % 4);
						origin7 = frame3.Size() * new Vector2(0.5f, 0f);
						mySpriteBatch.Draw(value32, vector34 + (new Vector2(-60f, -330f) * vector35).RotatedBy(rCurrentNPC.rotation), (Rectangle?)frame3, alpha11, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects, 0f);
						LoadNPC(492);
						if (!TextureAssets.Npc[492].IsLoaded)
						{
							return;
						}
						value32 = TextureAssets.Npc[492].Value;
						frame3 = value32.Frame(1, 9);
						origin7 = frame3.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
						for (int num363 = 0; num363 < 4; num363++)
						{
							int num364 = (int)rCurrentNPC.ai[num363];
							if (num364 >= 0)
							{
								frame3.Y = npc[num364].frame.Y;
								mySpriteBatch.Draw(value32, vector34 + (new Vector2((float)(-122 + 68 * num363), -20f) * vector35).RotatedBy(rCurrentNPC.rotation), (Rectangle?)frame3, alpha11, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						return;
					}
					case 398:
					{
						bool flag13 = false;
						Texture2D value16 = TextureAssets.Npc[type].Value;
						Texture2D value17 = TextureAssets.Extra[16].Value;
						Texture2D value18 = TextureAssets.Extra[14].Value;
						float num344 = 340f;
						float num345 = 0.5f;
						Vector2 vector20 = default(Vector2);
						((Vector2)(ref vector20))._002Ector(220f, -60f);
						Vector2 vector21 = default(Vector2);
						((Vector2)(ref vector21))._002Ector(76f, 66f);
						Texture2D value19 = TextureAssets.Extra[13].Value;
						Vector2 origin2 = default(Vector2);
						((Vector2)(ref origin2))._002Ector((float)value19.Width, 278f);
						Vector2 origin3 = default(Vector2);
						((Vector2)(ref origin3))._002Ector(0f, 278f);
						Vector2 vector22 = default(Vector2);
						((Vector2)(ref vector22))._002Ector(0f, 76f);
						Vector2 center2 = rCurrentNPC.Center;
						Point point = (rCurrentNPC.Center + new Vector2(0f, -150f)).ToTileCoordinates();
						Color alpha8 = rCurrentNPC.GetAlpha(Color.Lerp(Lighting.GetColor(point.X, point.Y), Color.White, 0.3f));
						Vector2 vector23 = default(Vector2);
						for (int num346 = 0; num346 < 2; num346++)
						{
							bool flag14 = num346 == 0;
							((Vector2)(ref vector23))._002Ector((float)((!flag14) ? 1 : (-1)), 1f);
							int num347 = -1;
							for (int num348 = 0; num348 < 200; num348++)
							{
								if (npc[num348].active && npc[num348].type == 397 && npc[num348].ai[2] == (float)num346 && npc[num348].ai[3] == (float)rCurrentNPC.whoAmI)
								{
									num347 = num348;
									break;
								}
							}
							if (num347 != -1)
							{
								Vector2 vector24 = center2 + vector20 * vector23;
								Vector2 vector25 = (npc[num347].Center + vector22 - vector24) * num345;
								if (flag13)
								{
									Dust[] array = dust;
									Vector2 position38 = vector24 + vector25;
									val2 = default(Color);
									array[Dust.NewDust(position38, 0, 0, 6, 0f, 0f, 0, val2)].noGravity = true;
								}
								float num349 = (float)Math.Acos(((Vector2)(ref vector25)).Length() / num344) * (0f - vector23.X);
								SpriteEffects effects = (SpriteEffects)(!flag14);
								Vector2 origin4 = vector21;
								if (!flag14)
								{
									origin4.X = (float)value18.Width - origin4.X;
								}
								mySpriteBatch.Draw(value18, vector24 - screenPos, (Rectangle?)null, alpha8, vector25.ToRotation() - num349 - (float)Math.PI / 2f, origin4, 1f, effects, 0f);
								if (flag13)
								{
									Dust[] array2 = dust;
									val2 = default(Color);
									array2[Dust.NewDust(vector24, 0, 0, 6, 0f, 0f, 0, val2)].noGravity = true;
								}
								if (flag13)
								{
									Dust[] array3 = dust;
									val2 = default(Color);
									array3[Dust.NewDust(center2, 0, 0, 6, 0f, 0f, 0, val2)].noGravity = true;
								}
								if (flag13)
								{
									Dust[] array4 = dust;
									Vector2 position39 = vector24 + Utils.RotatedBy(new Vector2(0f, num344), vector25.ToRotation() - num349 - (float)Math.PI / 2f);
									val2 = default(Color);
									array4[Dust.NewDust(position39, 0, 0, 6, 0f, 0f, 0, val2)].noGravity = true;
								}
							}
						}
						mySpriteBatch.Draw(value19, center2 - screenPos, (Rectangle?)null, alpha8, 0f, origin2, 1f, (SpriteEffects)0, 0f);
						mySpriteBatch.Draw(value19, center2 - screenPos, (Rectangle?)null, alpha8, 0f, origin3, 1f, (SpriteEffects)1, 0f);
						mySpriteBatch.Draw(value17, center2 - screenPos, (Rectangle?)null, alpha8, 0f, new Vector2(112f, 101f), 1f, (SpriteEffects)0, 0f);
						mySpriteBatch.Draw(value16, center2 - screenPos, (Rectangle?)rCurrentNPC.frame, alpha8, 0f, rCurrentNPC.frame.Size() / 2f, 1f, (SpriteEffects)0, 0f);
						return;
					}
					case 397:
					{
						Texture2D value33 = TextureAssets.Npc[type].Value;
						float num365 = 0.5f;
						Vector2 vector36 = default(Vector2);
						((Vector2)(ref vector36))._002Ector(220f, -60f);
						Vector2 vector37 = default(Vector2);
						((Vector2)(ref vector37))._002Ector(0f, 76f);
						Texture2D value35 = TextureAssets.Extra[15].Value;
						Vector2 val4 = new Vector2(60f, 30f);
						float num366 = 340f;
						Vector2 center4 = npc[(int)rCurrentNPC.ai[3]].Center;
						Point point4 = rCurrentNPC.Center.ToTileCoordinates();
						Color alpha12 = rCurrentNPC.GetAlpha(Color.Lerp(Lighting.GetColor(point4.X, point4.Y), Color.White, 0.3f));
						bool flag10 = rCurrentNPC.ai[2] == 0f;
						Vector2 vector38 = default(Vector2);
						((Vector2)(ref vector38))._002Ector((float)((!flag10) ? 1 : (-1)), 1f);
						Vector2 origin8 = default(Vector2);
						((Vector2)(ref origin8))._002Ector(120f, 180f);
						if (!flag10)
						{
							origin8.X = (float)value33.Width - origin8.X;
						}
						Texture2D value36 = TextureAssets.Extra[17].Value;
						Texture2D value37 = TextureAssets.Extra[19].Value;
						Vector2 vector39 = default(Vector2);
						((Vector2)(ref vector39))._002Ector(26f, 42f);
						if (!flag10)
						{
							vector39.X = (float)value36.Width - vector39.X;
						}
						Vector2 vector40 = default(Vector2);
						((Vector2)(ref vector40))._002Ector(30f, 66f);
						Vector2 vector41 = default(Vector2);
						((Vector2)(ref vector41))._002Ector(1f * (0f - vector38.X), 3f);
						Texture2D value38 = TextureAssets.Extra[26].Value;
						Rectangle value39 = value38.Frame();
						value39.Height /= 4;
						Vector2 val5 = center4 + vector36 * vector38;
						Vector2 vector42 = rCurrentNPC.Center + vector37;
						Vector2 v = val5 - vector42;
						v *= 1f - num365;
						Vector2 origin9 = val4;
						if (!flag10)
						{
							origin9.X = (float)value35.Width - origin9.X;
						}
						float num367 = (float)Math.Acos(((Vector2)(ref v)).Length() / num366) * (0f - vector38.X);
						mySpriteBatch.Draw(value35, vector42 - screenPos, (Rectangle?)null, alpha12, v.ToRotation() + num367 - (float)Math.PI / 2f, origin9, 1f, spriteEffects, 0f);
						if (rCurrentNPC.ai[0] == -2f)
						{
							int num368 = (int)rCurrentNPC.ai[1];
							num368 /= 8;
							value39.Y += value39.Height * num368;
							mySpriteBatch.Draw(value38, rCurrentNPC.Center - screenPos, (Rectangle?)value39, alpha12, 0f, vector39 - new Vector2(4f, 4f), 1f, spriteEffects, 0f);
						}
						else
						{
							mySpriteBatch.Draw(value36, rCurrentNPC.Center - screenPos, (Rectangle?)null, alpha12, 0f, vector39, 1f, spriteEffects, 0f);
							Vector2 vector43 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), vector40 * rCurrentNPC.localAI[1]);
							mySpriteBatch.Draw(value37, rCurrentNPC.Center - screenPos + vector43 + vector41, (Rectangle?)null, alpha12, 0f, new Vector2((float)value37.Width, (float)value37.Height) / 2f, 1f, (SpriteEffects)0, 0f);
						}
						mySpriteBatch.Draw(value33, rCurrentNPC.Center - screenPos, (Rectangle?)rCurrentNPC.frame, alpha12, 0f, origin8, 1f, spriteEffects, 0f);
						return;
					}
					case 396:
					{
						Texture2D value22 = TextureAssets.Npc[type].Value;
						Vector2 origin5 = default(Vector2);
						((Vector2)(ref origin5))._002Ector(191f, 130f);
						Texture2D value24 = TextureAssets.Extra[18].Value;
						Texture2D value25 = TextureAssets.Extra[19].Value;
						Vector2 vector26 = default(Vector2);
						((Vector2)(ref vector26))._002Ector(19f, 34f);
						Vector2 vector27 = default(Vector2);
						((Vector2)(ref vector27))._002Ector(27f, 59f);
						Vector2 vector28 = default(Vector2);
						((Vector2)(ref vector28))._002Ector(0f, 0f);
						Texture2D value26 = TextureAssets.Extra[25].Value;
						Vector2 vector29 = Utils.RotatedBy(new Vector2(0f, 214f), rCurrentNPC.rotation);
						Rectangle rectangle13 = value26.Frame();
						rectangle13.Height /= 3;
						rectangle13.Y += rectangle13.Height * (int)(rCurrentNPC.localAI[2] / 7f);
						Texture2D value27 = TextureAssets.Extra[29].Value;
						Vector2 vector30 = Utils.RotatedBy(new Vector2(0f, 4f), rCurrentNPC.rotation);
						Rectangle rectangle2 = value27.Frame();
						rectangle2.Height /= 4;
						rectangle2.Y += rectangle2.Height * (int)(rCurrentNPC.localAI[3] / 5f);
						Texture2D value28 = TextureAssets.Extra[26].Value;
						Rectangle value29 = value28.Frame();
						value29.Height /= 4;
						_ = npc[(int)rCurrentNPC.ai[3]].Center;
						Point point2 = rCurrentNPC.Center.ToTileCoordinates();
						Color alpha9 = rCurrentNPC.GetAlpha(Color.Lerp(Lighting.GetColor(point2.X, point2.Y), Color.White, 0.3f));
						if (rCurrentNPC.ai[0] < 0f)
						{
							int num354 = (int)rCurrentNPC.ai[1];
							num354 /= 8;
							value29.Y += value29.Height * num354;
							mySpriteBatch.Draw(value28, rCurrentNPC.Center - screenPos, (Rectangle?)value29, alpha9, rCurrentNPC.rotation, vector26 + new Vector2(4f, 4f), 1f, spriteEffects, 0f);
						}
						else
						{
							mySpriteBatch.Draw(value24, rCurrentNPC.Center - screenPos, (Rectangle?)null, alpha9, rCurrentNPC.rotation, vector26, 1f, spriteEffects, 0f);
							Vector2 vector31 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), vector27 * rCurrentNPC.localAI[1]);
							mySpriteBatch.Draw(value25, rCurrentNPC.Center - screenPos + vector31 + vector28, (Rectangle?)null, alpha9, rCurrentNPC.rotation, new Vector2((float)value25.Width, (float)value25.Height) / 2f, 1f, (SpriteEffects)0, 0f);
						}
						mySpriteBatch.Draw(value22, rCurrentNPC.Center - screenPos, (Rectangle?)rCurrentNPC.frame, alpha9, rCurrentNPC.rotation, origin5, 1f, spriteEffects, 0f);
						mySpriteBatch.Draw(value27, (rCurrentNPC.Center - screenPos + vector30).Floor(), (Rectangle?)rectangle2, alpha9, rCurrentNPC.rotation, rectangle2.Size() / 2f, 1f, spriteEffects, 0f);
						mySpriteBatch.Draw(value26, (rCurrentNPC.Center - screenPos + vector29).Floor(), (Rectangle?)rectangle13, alpha9, rCurrentNPC.rotation, rectangle13.Size() / 2f, 1f, spriteEffects, 0f);
						return;
					}
					case 400:
					{
						Texture2D value30 = TextureAssets.Npc[type].Value;
						Texture2D value31 = TextureAssets.Extra[19].Value;
						Vector2 origin6 = default(Vector2);
						((Vector2)(ref origin6))._002Ector(40f, 40f);
						Vector2 vector32 = default(Vector2);
						((Vector2)(ref vector32))._002Ector(30f, 30f);
						_ = rCurrentNPC.Center;
						Point point3 = rCurrentNPC.Center.ToTileCoordinates();
						Color alpha10 = rCurrentNPC.GetAlpha(Color.Lerp(Lighting.GetColor(point3.X, point3.Y), Color.White, 0.3f));
						mySpriteBatch.Draw(value30, rCurrentNPC.Center - screenPos, (Rectangle?)rCurrentNPC.frame, alpha10, rCurrentNPC.rotation, origin6, 1f, spriteEffects, 0f);
						Vector2 vector33 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), vector32 * rCurrentNPC.localAI[1]);
						mySpriteBatch.Draw(value31, rCurrentNPC.Center - screenPos + vector33, (Rectangle?)null, alpha10, rCurrentNPC.rotation, value31.Size() / 2f, rCurrentNPC.localAI[2], (SpriteEffects)0, 0f);
						return;
					}
					case 416:
					{
						int num355 = -1;
						int num356 = (int)rCurrentNPC.ai[0];
						Vector2 position7 = rCurrentNPC.position;
						Vector2 spinningpoint3 = Vector2.Zero;
						if (npc[num356].active && npc[num356].type == 415)
						{
							num355 = num356;
						}
						if (num355 != -1)
						{
							Vector2 position8 = rCurrentNPC.position;
							rCurrentNPC.Bottom = npc[num355].Bottom;
							position7 = rCurrentNPC.position;
							rCurrentNPC.position = position8;
							rCurrentNPC.gfxOffY = npc[num355].gfxOffY;
							spinningpoint3 = npc[num355].velocity;
						}
						Rectangle frame2 = rCurrentNPC.frame;
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position7.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position7.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame2, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						Color color48 = rCurrentNPC.color;
						val2 = default(Color);
						if (color48 != val2)
						{
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position7.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position7.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame2, rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						mySpriteBatch.Draw(TextureAssets.GlowMask[156].Value, position7 + rCurrentNPC.Size * new Vector2(0.5f, 1f) - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						val2 = rCurrentNPC.GetAlpha(npcColor);
						val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
						float num357 = 0.5f + ((Vector3)(ref val3)).Length() * 0.5f;
						for (int num358 = 0; num358 < 4; num358++)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[156].Value, position7 + rCurrentNPC.Size * new Vector2(0.5f, 1f) - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + spinningpoint3.RotatedBy((float)num358 * ((float)Math.PI / 2f)) * num357, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						return;
					}
					case 399:
					{
						Texture2D value20 = TextureAssets.Npc[type].Value;
						(rCurrentNPC.position - screenPos + Vector2.UnitY * rCurrentNPC.gfxOffY).Floor();
						float num350 = 5f;
						for (int num351 = 0; (float)num351 < num350; num351++)
						{
							float num352 = 1f - (GlobalTimeWrappedHourly + (float)num351) % num350 / num350;
							Color color22 = Color.LimeGreen;
							if (rCurrentNPC.ai[0] == 1f)
							{
								color22 = Color.Lerp(Color.LimeGreen, Color.Red, MathHelper.Clamp(rCurrentNPC.ai[1] / 20f, 0f, 1f));
							}
							if (rCurrentNPC.ai[0] == 2f)
							{
								color22 = Color.Red;
							}
							color22 *= 1f - num352;
							((Color)(ref color22)).A = 0;
							for (int num353 = 0; num353 < 2; num353++)
							{
								mySpriteBatch.Draw(TextureAssets.Extra[27].Value, rCurrentNPC.Center - screenPos + Vector2.UnitY * (rCurrentNPC.gfxOffY - 4f + 6f), (Rectangle?)null, color22, (float)Math.PI / 2f, new Vector2(10f, 48f), num352 * 4f, (SpriteEffects)0, 0f);
							}
						}
						mySpriteBatch.Draw(value20, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						value20 = TextureAssets.GlowMask[100].Value;
						mySpriteBatch.Draw(value20, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						value20 = TextureAssets.Extra[20].Value;
						Rectangle value21 = value20.Frame(1, 4, 0, (int)rCurrentNPC.ai[0] + 1);
						Vector2 position6 = default(Vector2);
						((Vector2)(ref position6))._002Ector(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)value20.Width * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY + 18f + 6f);
						mySpriteBatch.Draw(value20, position6, (Rectangle?)value21, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						value20 = TextureAssets.GlowMask[101].Value;
						mySpriteBatch.Draw(value20, position6, (Rectangle?)value21, new Color(127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						return;
					}
					case 94:
					{
						for (int num343 = 1; num343 < 6; num343 += 2)
						{
							_ = ref rCurrentNPC.oldPos[num343];
							Color alpha7 = rCurrentNPC.GetAlpha(npcColor);
							((Color)(ref alpha7)).R = (byte)(((Color)(ref alpha7)).R * (10 - num343) / 15);
							((Color)(ref alpha7)).G = (byte)(((Color)(ref alpha7)).G * (10 - num343) / 15);
							((Color)(ref alpha7)).B = (byte)(((Color)(ref alpha7)).B * (10 - num343) / 15);
							((Color)(ref alpha7)).A = (byte)(((Color)(ref alpha7)).A * (10 - num343) / 15);
							alpha7 = rCurrentNPC.GetShimmerColor(alpha7);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num343].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num343].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, alpha7, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						break;
					}
					case 384:
						return;
					}
					if (type == 125 || type == 126 || type == 127 || type == 128 || type == 129 || type == 130 || type == 131 || (type == 139 && rCurrentNPC.ai[3] == 0f) || type == 140)
					{
						for (int num369 = 9; num369 >= 0; num369 -= 2)
						{
							_ = ref rCurrentNPC.oldPos[num369];
							Color alpha13 = rCurrentNPC.GetAlpha(npcColor);
							((Color)(ref alpha13)).R = (byte)(((Color)(ref alpha13)).R * (10 - num369) / 20);
							((Color)(ref alpha13)).G = (byte)(((Color)(ref alpha13)).G * (10 - num369) / 20);
							((Color)(ref alpha13)).B = (byte)(((Color)(ref alpha13)).B * (10 - num369) / 20);
							((Color)(ref alpha13)).A = (byte)(((Color)(ref alpha13)).A * (10 - num369) / 20);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num369].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num369].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, alpha13, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					if (type == 417 && rCurrentNPC.ai[0] >= 6f && rCurrentNPC.ai[0] <= 6f)
					{
						for (int num100 = 5; num100 >= 0; num100--)
						{
							_ = ref rCurrentNPC.oldPos[num100];
							Color alpha2 = rCurrentNPC.GetAlpha(npcColor);
							((Color)(ref alpha2)).R = (byte)(((Color)(ref alpha2)).R * (10 - num100) / 20);
							((Color)(ref alpha2)).G = (byte)(((Color)(ref alpha2)).G * (10 - num100) / 20);
							((Color)(ref alpha2)).B = (byte)(((Color)(ref alpha2)).B * (10 - num100) / 20);
							((Color)(ref alpha2)).A = (byte)(((Color)(ref alpha2)).A * (10 - num100) / 20);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num100].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num100].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, alpha2, rCurrentNPC.oldRot[num100], halfSize, MathHelper.Lerp(0.5f, 1f, (5f - (float)num100) / 6f), spriteEffects, 0f);
						}
					}
					if (type == 419 && rCurrentNPC.ai[2] <= -9f)
					{
						int num101 = TextureAssets.GlowMask[154].Height() / npcFrameCount[type];
						int num102 = rCurrentNPC.frame.Y / num101;
						for (int num103 = 6; num103 >= 0; num103--)
						{
							_ = ref rCurrentNPC.oldPos[num103];
							Color white3 = Color.White;
							((Color)(ref white3)).R = (byte)(255 * (10 - num103) / 20);
							((Color)(ref white3)).G = (byte)(255 * (10 - num103) / 20);
							((Color)(ref white3)).B = (byte)(255 * (10 - num103) / 20);
							((Color)(ref white3)).A = 0;
							Rectangle frame4 = rCurrentNPC.frame;
							int num104 = (num102 - 3 - num103) % 3;
							if (num104 < 0)
							{
								num104 += 3;
							}
							num104 += 5;
							frame4.Y = num101 * num104;
							mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, new Vector2(rCurrentNPC.oldPos[num103].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num103].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)frame4, white3, rCurrentNPC.oldRot[num103], halfSize, MathHelper.Lerp(0.75f, 1.2f, (10f - (float)num103) / 10f), spriteEffects, 0f);
						}
					}
					if (type == 418 && (rCurrentNPC.ai[0] == 2f || rCurrentNPC.ai[0] == 4f))
					{
						Texture2D value40 = TextureAssets.Extra[55].Value;
						Vector2 origin10 = default(Vector2);
						((Vector2)(ref origin10))._002Ector((float)(value40.Width / 2), (float)(value40.Height / 8 + 14));
						int num105 = (int)rCurrentNPC.ai[1] / 2;
						float num106 = -(float)Math.PI / 2f * (float)rCurrentNPC.spriteDirection;
						float num107 = rCurrentNPC.ai[1] / 45f;
						if (num107 > 1f)
						{
							num107 = 1f;
						}
						num105 %= 4;
						for (int num108 = 6; num108 >= 0; num108--)
						{
							_ = ref rCurrentNPC.oldPos[num108];
							Color value41 = Color.Lerp(Color.Gold, Color.OrangeRed, num107);
							value41 = Color.Lerp(value41, Color.Blue, (float)num108 / 12f);
							((Color)(ref value41)).A = (byte)(64f * num107);
							((Color)(ref value41)).R = (byte)(((Color)(ref value41)).R * (10 - num108) / 20);
							((Color)(ref value41)).G = (byte)(((Color)(ref value41)).G * (10 - num108) / 20);
							((Color)(ref value41)).B = (byte)(((Color)(ref value41)).B * (10 - num108) / 20);
							((Color)(ref value41)).A = (byte)(((Color)(ref value41)).A * (10 - num108) / 20);
							value41 *= num107;
							int num109 = (num105 - num108) % 4;
							if (num109 < 0)
							{
								num109 += 4;
							}
							Rectangle value42 = value40.Frame(1, 4, 0, num109);
							mySpriteBatch.Draw(value40, new Vector2(rCurrentNPC.oldPos[num108].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num108].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)value42, value41, rCurrentNPC.oldRot[num108] + num106, origin10, MathHelper.Lerp(0.1f, 1.2f, (10f - (float)num108) / 10f), spriteEffects, 0f);
						}
					}
					if (type == 516)
					{
						int num110 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
						int num111 = rCurrentNPC.frame.Y / num110;
						for (int num112 = 6; num112 >= 0; num112--)
						{
							_ = ref rCurrentNPC.oldPos[num112];
							Color white4 = Color.White;
							((Color)(ref white4)).R = (byte)(255 * (10 - num112) / 20);
							((Color)(ref white4)).G = (byte)(255 * (10 - num112) / 20);
							((Color)(ref white4)).B = (byte)(255 * (10 - num112) / 20);
							((Color)(ref white4)).A = (byte)(255 * (10 - num112) / 20);
							white4 = Color.Lerp(white4, Color.Transparent, (float)num112 / 6f);
							Rectangle frame5 = rCurrentNPC.frame;
							int num113 = (num111 - 4 - num112) % 4;
							if (num113 < 0)
							{
								num113 += 4;
							}
							frame5.Y = num110 * num113;
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num112].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num112].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)frame5, white4, rCurrentNPC.rotation, halfSize, MathHelper.Lerp(0.35f, 1.2f, (10f - (float)num112) / 10f), spriteEffects, 0f);
						}
					}
					if (rCurrentNPC.type == 390 && rCurrentNPC.IsABestiaryIconDummy)
					{
						LoadNPC(391);
						Texture2D value43 = TextureAssets.Npc[391].Value;
						Rectangle value44 = value43.Frame(1, npcFrameCount[391], 0, (int)rCurrentNPC.localAI[3]);
						Vector2 vector44 = default(Vector2);
						((Vector2)(ref vector44))._002Ector((float)(-rCurrentNPC.width - 8), 10f);
						mySpriteBatch.Draw(value43, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY) + vector44, (Rectangle?)value44, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					Rectangle frame6 = rCurrentNPC.frame;
					if (type == 182 || type == 289)
					{
						frame6.Height -= 2;
					}
					switch (type)
					{
					case 420:
					case 421:
					case 423:
					case 424:
					{
						float num117 = 9f + 3f * (float)Math.Cos((float)Math.PI * 2f * GlobalTimeWrappedHourly);
						Vector2 spinningpoint5 = Vector2.UnitX * num117;
						Color color24 = Color.Teal * (num117 / 12f) * 0.8f;
						((Color)(ref color24)).A = (byte)(((Color)(ref color24)).A / 2);
						for (float num118 = 0f; num118 < (float)Math.PI * 2f; num118 += (float)Math.PI / 2f)
						{
							Vector2 vector47 = rCurrentNPC.position + spinningpoint5.RotatedBy(num118);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector47.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector47.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, color24, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						break;
					}
					case 662:
					{
						float num114 = 4f + 2f * (float)Math.Cos((float)Math.PI * 2f * GlobalTimeWrappedHourly);
						Vector2 spinningpoint4 = Vector2.UnitX * num114;
						Color color23 = Color.Cyan * (num114 / 12f) * 0.4f;
						((Color)(ref color23)).A = (byte)(((Color)(ref color23)).A / 4);
						for (float num115 = 0.9f; num115 >= 0f; num115 -= 0.125f)
						{
							Vector2 vector45 = rCurrentNPC.position - rCurrentNPC.velocity * 10f * num115;
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector45.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector45.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, color23 * (1f - num115), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						for (float num116 = 0f; num116 < (float)Math.PI * 2f; num116 += (float)Math.PI / 2f)
						{
							Vector2 vector46 = rCurrentNPC.position + spinningpoint4.RotatedBy(num116);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector46.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector46.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, color23, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						break;
					}
					}
					if (rCurrentNPC.aiStyle == 7)
					{
						DrawNPCExtras(rCurrentNPC, beforeDraw: true, num306, num305, npcColor, halfSize, spriteEffects, screenPos);
					}
					if (type == 346 && (double)rCurrentNPC.life < (double)rCurrentNPC.lifeMax * 0.5)
					{
						mySpriteBatch.Draw(TextureAssets.SantaTank.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 356)
					{
						frame6.Height--;
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 360)
					{
						float num119 = 0f;
						if (rCurrentNPC.ai[2] == 0f)
						{
							if (rCurrentNPC.rotation == 3.14f || rCurrentNPC.rotation == -3.14f)
							{
								num306 = 2f;
							}
							if (rCurrentNPC.direction < 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
							{
								num119 = 1f;
							}
							if (rCurrentNPC.direction > 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
							{
								num119 = -1f;
							}
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale + num119, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 655)
					{
						float num120 = 0f;
						if (rCurrentNPC.ai[2] == 0f)
						{
							if (rCurrentNPC.rotation == 3.14f || rCurrentNPC.rotation == -3.14f)
							{
								num306 = 2f;
							}
							if (rCurrentNPC.direction < 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
							{
								num120 = 1f;
							}
							if (rCurrentNPC.direction > 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
							{
								num120 = -1f;
							}
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale + num120, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(Color.Orange), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 266 && rCurrentNPC.life < rCurrentNPC.lifeMax && (expertMode || getGoodWorld))
					{
						Color alpha3 = rCurrentNPC.GetAlpha(npcColor);
						float num121 = 1f - (float)rCurrentNPC.life / (float)rCurrentNPC.lifeMax;
						if (expertMode)
						{
							num121 *= 2f;
						}
						num121 *= num121;
						if (getGoodWorld)
						{
							num121 = 1f;
						}
						num121 = MathHelper.Clamp(num121, 0f, 1f);
						((Color)(ref alpha3)).R = (byte)((float)(int)((Color)(ref alpha3)).R * num121);
						((Color)(ref alpha3)).G = (byte)((float)(int)((Color)(ref alpha3)).G * num121);
						((Color)(ref alpha3)).B = (byte)((float)(int)((Color)(ref alpha3)).B * num121);
						((Color)(ref alpha3)).A = (byte)((float)(int)((Color)(ref alpha3)).A * num121);
						for (int num122 = 0; num122 < 4; num122++)
						{
							Vector2 position9 = rCurrentNPC.position;
							float num123 = Math.Abs(rCurrentNPC.Center.X - Main.player[myPlayer].Center.X);
							float num124 = Math.Abs(rCurrentNPC.Center.Y - Main.player[myPlayer].Center.Y);
							if (num122 == 0 || num122 == 2)
							{
								position9.X = Main.player[myPlayer].Center.X + num123;
							}
							else
							{
								position9.X = Main.player[myPlayer].Center.X - num123;
							}
							position9.X -= rCurrentNPC.width / 2;
							if (num122 == 0 || num122 == 1)
							{
								position9.Y = Main.player[myPlayer].Center.Y + num124;
							}
							else
							{
								position9.Y = Main.player[myPlayer].Center.Y - num124;
							}
							position9.Y -= rCurrentNPC.height / 2;
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position9.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position9.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, alpha3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 421 && rCurrentNPC.ai[0] == 5f)
					{
						Player player = Main.player[rCurrentNPC.target];
						if (player.gravDir == -1f)
						{
							spriteEffects = (SpriteEffects)(spriteEffects | 2);
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - screenPos, (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, frame6.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[146].Value, new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - screenPos, (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, frame6.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else
					{
						switch (type)
						{
						case 518:
						{
							Vector2 vector51 = default(Vector2);
							((Vector2)(ref vector51))._002Ector(-10f, 0f);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize + vector51, rCurrentNPC.scale, spriteEffects, 0f);
							Color color51 = rCurrentNPC.color;
							val2 = default(Color);
							if (color51 != val2)
							{
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize + vector51, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 676:
						case 681:
						{
							if (!rCurrentNPC.IsABestiaryIconDummy)
							{
								mySpriteBatch.End();
								mySpriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, (Effect)null, Transform);
							}
							DrawData value46 = new DrawData(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects);
							GameShaders.Misc["RainbowTownSlime"].Apply(value46);
							value46.Draw(mySpriteBatch);
							pixelShader.CurrentTechnique.Passes[0].Apply();
							if (!rCurrentNPC.IsABestiaryIconDummy)
							{
								mySpriteBatch.End();
								mySpriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
							}
							break;
						}
						case 685:
						{
							Vector2 scale13 = default(Vector2);
							((Vector2)(ref scale13))._002Ector(rCurrentNPC.scale);
							float num131 = rCurrentNPC.rotation;
							int num132 = 9;
							Vector2 vector48 = rCurrentNPC.oldPos[num132];
							if (vector48 != Vector2.Zero && rCurrentNPC.velocity.Y == 0f)
							{
								Vector2 position10 = rCurrentNPC.position;
								Vector2 vector49 = vector48 - position10;
								float num133 = (float)Math.Sin(vector49.X / 30f * ((float)Math.PI * 2f));
								float num134 = (float)Math.Sin(vector49.Y / 30f * ((float)Math.PI * 2f));
								float num135 = Utils.Remap(((Vector2)(ref vector49)).Length(), 0f, 30f, 0f, 1f);
								scale13.X += num133 * num135 * 0.25f;
								scale13.Y += num134 * num135 * 0.25f;
								float num136 = (float)Math.Sin(Utils.Remap(((Vector2)(ref vector49)).Length(), 0f, 20f, 0f, 1f) * ((float)Math.PI * 2f));
								num131 += num136 * ((float)Math.PI / 4f) * 0.1f * (float)rCurrentNPC.spriteDirection;
							}
							Vector2 vector50 = default(Vector2);
							((Vector2)(ref vector50))._002Ector(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - 2f - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY);
							if (rCurrentNPC.velocity.Y == 0f)
							{
								vector50 = vector50.Floor();
								int num137 = 2;
								float num138 = vector50.X % 16f;
								if (num138 < (float)num137)
								{
									vector50.X -= num138;
								}
								if (num138 > (float)(16 - num137))
								{
									vector50.X += 16f - num138;
								}
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, vector50, (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), num131, halfSize, scale13, spriteEffects, 0f);
							break;
						}
						case 267:
						{
							Vector2 position11 = rCurrentNPC.Center + new Vector2(0f, num306 + num305 + rCurrentNPC.gfxOffY) - screenPos;
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, position11, (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							Color color50 = rCurrentNPC.color;
							val2 = default(Color);
							if (color50 != val2)
							{
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, position11, (Rectangle?)frame6, rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						default:
							if (rCurrentNPC.aiStyle == 7 && rCurrentNPC.ai[0] == 25f)
							{
								int num125 = type;
								float num126 = Utils.Remap(rCurrentNPC.ai[1], 0f, 60f, 0f, 1f);
								mySpriteBatch.End();
								mySpriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, (Effect)null, Transform);
								Texture2D value83 = TextureAssets.Npc[num125].Value;
								Vector2 position40 = new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY);
								Rectangle? sourceRect = frame6;
								Color val6 = Color.White * Utils.Remap(num126, 0f, 1f, 0f, 1f);
								val2 = rCurrentNPC.GetAlpha(npcColor);
								DrawData drawData = new DrawData(value83, position40, sourceRect, val6 * ((float)(int)((Color)(ref val2)).A / 255f), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects);
								drawData.shader = ContentSamples.CommonlyUsedContentSamples.ColorOnlyShaderIndex;
								GameShaders.Armor.Apply(ContentSamples.CommonlyUsedContentSamples.ColorOnlyShaderIndex, rCurrentNPC, drawData);
								float num127 = Utils.Remap(rCurrentNPC.ai[1], 45f, 90f, 0f, 1f);
								for (float num128 = 0f; num128 < 1f; num128 += 1f / 6f)
								{
									DrawData drawData2 = drawData;
									drawData2.color = hslToRgb(num128, 0.9f, 0.65f) * num127 * 0.5f;
									ref Vector2 position41 = ref drawData2.position;
									position41 += ((GlobalTimeWrappedHourly + num128) * ((float)Math.PI * 2f)).ToRotationVector2() * 4f * num127;
									drawData2.Draw(mySpriteBatch);
								}
								drawData.Draw(mySpriteBatch);
								pixelShader.CurrentTechnique.Passes[0].Apply();
								Color drawColor = default(Color);
								((Color)(ref drawColor))._002Ector(255, 255, 255, 0);
								float num129 = (float)Math.Sin(timeForVisualEffects * 6.2831854820251465 / 20.0);
								DrawPrettyStarSparkle(num126, (SpriteEffects)0, drawData.position, drawColor, hslToRgb(GlobalTimeWrappedHourly % 1f, 1f, 0.65f, 127), Utils.Remap(rCurrentNPC.ai[1], 30f, 60f, 0f, 30f), 0f, 30f, 30f, 36f, 0f, new Vector2(1.5f, 2.5f) * (1f + num129 * 0.025f), new Vector2(2f, 2f));
								DrawPrettyStarSparkle(num126, (SpriteEffects)0, drawData.position, drawColor, hslToRgb(GlobalTimeWrappedHourly % 1f, 1f, 0.65f, 127), Utils.Remap(rCurrentNPC.ai[1], 30f, 60f, 0f, 30f), 0f, 30f, 30f, 36f, (float)Math.PI / 4f, new Vector2(2.5f, 2.5f) * (1f + num129 * 0.025f), new Vector2(1f, 1f));
								mySpriteBatch.End();
								mySpriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
							}
							else
							{
								int num130 = type;
								if (NPC.IsMechQueenUp && num130 == 134)
								{
									num130 = 136;
									LoadNPC(num130);
								}
								mySpriteBatch.Draw(TextureAssets.Npc[num130].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								Color color49 = rCurrentNPC.color;
								val2 = default(Color);
								if (color49 != val2)
								{
									mySpriteBatch.Draw(TextureAssets.Npc[num130].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
							}
							break;
						}
					}
					if (rCurrentNPC.confused)
					{
						mySpriteBatch.Draw(TextureAssets.Confuse.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 - (float)TextureAssets.Confuse.Height() - 20f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Confuse.Width(), TextureAssets.Confuse.Height()), rCurrentNPC.GetShimmerColor(new Color(250, 250, 250, 70)), rCurrentNPC.velocity.X * -0.05f, new Vector2((float)(TextureAssets.Confuse.Width() / 2), (float)(TextureAssets.Confuse.Height() / 2)), essScale + 0.2f, (SpriteEffects)0, 0f);
					}
					if (type == 247 || type == 248)
					{
						Vector2 vector52 = default(Vector2);
						((Vector2)(ref vector52))._002Ector(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY);
						Texture2D value47 = TextureAssets.Npc[type].Value;
						if (rCurrentNPC.ai[0] == 1f)
						{
							for (int num139 = 0; num139 < 3; num139++)
							{
								int num140 = num139 * 5;
								int num141 = num140 + 15;
								float num142 = Utils.Remap(rCurrentNPC.ai[1], num140, num141, 0f, 1f);
								if (num142 != 0f)
								{
									float num143 = Utils.Remap(num142, 0f, 1f, 2f, 1.1f + 0.1f * (float)num139);
									float num144 = num142;
									val2 = new Color(255, 255, 255, 0) * num144;
									mySpriteBatch.Draw(value47, vector52, (Rectangle?)frame6, val2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale * num143, spriteEffects, 0f);
								}
							}
						}
						if (rCurrentNPC.ai[0] == 2f)
						{
							Color color25 = new Color(255, 255, 255, 0) * Utils.Remap(rCurrentNPC.ai[1], 0f, 30f, 1f, 0f);
							for (int num145 = 0; num145 < 3; num145++)
							{
								float num146 = 1f;
								Vector2 position13 = vector52 + rCurrentNPC.velocity * (float)num145 * -2f;
								float num147 = Utils.Remap(num145, 0f, 3f, 1f, 0f);
								mySpriteBatch.Draw(value47, position13, (Rectangle?)frame6, color25 * num147, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale * num146, spriteEffects, 0f);
							}
							for (int num148 = 0; num148 < 3; num148++)
							{
								float num149 = 1.1f + 0.1f * (float)num148;
								mySpriteBatch.Draw(value47, vector52, (Rectangle?)frame6, color25, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale * num149, spriteEffects, 0f);
							}
						}
					}
					if (type >= 639 && type <= 645)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[286].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(Color.White), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					if (type >= 646 && type <= 652)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[287].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, rCurrentNPC.GetAlpha(Color.White), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					if (type >= 134 && type <= 136 && npcColor != Color.Black)
					{
						mySpriteBatch.Draw(TextureAssets.Dest[type - 134].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305), (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0) * (1f - (float)rCurrentNPC.alpha / 255f), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 125)
					{
						mySpriteBatch.Draw(TextureAssets.EyeLaser.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305), (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 139)
					{
						mySpriteBatch.Draw(TextureAssets.Probe.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305), (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 127)
					{
						if (NPC.IsMechQueenUp)
						{
							rCurrentNPC.whoAmI = rCurrentNPC.whoAmI;
							Vector2 vector53 = default(Vector2);
							for (int num150 = 0; num150 < 200; num150++)
							{
								if (!npc[num150].active || (npc[num150].type != 125 && npc[num150].type != 126))
								{
									continue;
								}
								float scale14 = npc[num150].scale;
								float x = npc[num150].Center.X;
								float y2 = npc[num150].Center.Y;
								Vector2 mechQueenCenter = rCurrentNPC.GetMechQueenCenter();
								((Vector2)(ref vector53))._002Ector((float)((npc[num150].type == 125) ? (-18) : 20), -18f);
								vector53 = vector53.RotatedBy(rCurrentNPC.rotation);
								Vector2 vector54 = mechQueenCenter + vector53;
								float num151 = x - vector54.X;
								float num152 = y2 - vector54.Y;
								float rotation12 = (float)Math.Atan2(num152, num151) - 1.57f;
								bool flag11 = true;
								float num153 = (float)Math.Sqrt(num151 * num151 + num152 * num152);
								if (num153 > 2000f)
								{
									flag11 = false;
								}
								float num154 = 40f * scale14;
								while (flag11)
								{
									num153 = (float)Math.Sqrt(num151 * num151 + num152 * num152);
									if (num153 < num154)
									{
										flag11 = false;
										continue;
									}
									num153 = (float)TextureAssets.Chain12.Height() * scale14 / num153;
									num151 *= num153;
									num152 *= num153;
									Color color26 = Lighting.GetColor((int)vector54.X / 16, (int)(vector54.Y / 16f));
									spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector54.X - screenPosition.X, vector54.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain12.Width(), TextureAssets.Chain12.Height()), color26, rotation12, new Vector2((float)TextureAssets.Chain12.Width() * 0.5f, 0f), scale14, (SpriteEffects)0, 0f);
									vector54.X += num151;
									vector54.Y += num152;
									num151 = x - vector54.X;
									num152 = y2 - vector54.Y;
								}
							}
						}
						else
						{
							mySpriteBatch.Draw(TextureAssets.BoneEyes.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305), (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 131)
					{
						mySpriteBatch.Draw(TextureAssets.BoneLaser.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305), (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 120)
					{
						for (int num155 = 1; num155 < rCurrentNPC.oldPos.Length; num155++)
						{
							_ = ref rCurrentNPC.oldPos[num155];
							Color newColor3 = default(Color);
							((Color)(ref newColor3)).R = (byte)(150 * (10 - num155) / 15);
							((Color)(ref newColor3)).G = (byte)(100 * (10 - num155) / 15);
							((Color)(ref newColor3)).B = (byte)(150 * (10 - num155) / 15);
							((Color)(ref newColor3)).A = (byte)(50 * (10 - num155) / 15);
							newColor3 = rCurrentNPC.GetShimmerColor(newColor3);
							mySpriteBatch.Draw(TextureAssets.Chaos.Value, new Vector2(rCurrentNPC.oldPos[num155].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num155].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, newColor3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 137 || type == 138)
					{
						for (int num156 = 1; num156 < rCurrentNPC.oldPos.Length; num156++)
						{
							_ = ref rCurrentNPC.oldPos[num156];
							Color newColor4 = default(Color);
							((Color)(ref newColor4)).R = (byte)(150 * (10 - num156) / 15);
							((Color)(ref newColor4)).G = (byte)(100 * (10 - num156) / 15);
							((Color)(ref newColor4)).B = (byte)(150 * (10 - num156) / 15);
							((Color)(ref newColor4)).A = (byte)(50 * (10 - num156) / 15);
							newColor4 = rCurrentNPC.GetShimmerColor(newColor4);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num156].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num156].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, newColor4, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 327)
					{
						mySpriteBatch.Draw(TextureAssets.PumpkingFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						Color color27 = default(Color);
						Vector2 vector55 = default(Vector2);
						for (int num157 = 1; num157 < 10; num157++)
						{
							((Color)(ref color27))._002Ector(110 - num157 * 10, 110 - num157 * 10, 110 - num157 * 10, 110 - num157 * 10);
							((Vector2)(ref vector55))._002Ector((float)rand.Next(-10, 11) * 0.2f, (float)rand.Next(-10, 11) * 0.2f);
							mySpriteBatch.Draw(TextureAssets.PumpkingFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306) + vector55, (Rectangle?)rCurrentNPC.frame, color27, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 325)
					{
						mySpriteBatch.Draw(TextureAssets.TreeFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						Color color28 = default(Color);
						Vector2 vector56 = default(Vector2);
						for (int num158 = 1; num158 < 10; num158++)
						{
							((Color)(ref color28))._002Ector(110 - num158 * 10, 110 - num158 * 10, 110 - num158 * 10, 110 - num158 * 10);
							((Vector2)(ref vector56))._002Ector((float)rand.Next(-10, 11) * 0.2f, (float)rand.Next(-10, 11) * 0.2f);
							mySpriteBatch.Draw(TextureAssets.TreeFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306) + vector56, (Rectangle?)rCurrentNPC.frame, color28, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 345)
					{
						mySpriteBatch.Draw(TextureAssets.IceQueen.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						for (int num159 = 1; num159 < 5; num159++)
						{
							((Color)(ref val2))._002Ector(100 - num159 * 10, 100 - num159 * 10, 100 - num159 * 10, 100 - num159 * 10);
							mySpriteBatch.Draw(TextureAssets.IceQueen.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306) - rCurrentNPC.velocity * (float)num159 * 0.2f, (Rectangle?)rCurrentNPC.frame, val2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 355)
					{
						mySpriteBatch.Draw(TextureAssets.Firefly.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 358)
					{
						mySpriteBatch.Draw(TextureAssets.Lightningbug.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 654)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[290].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 653)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[288].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 82)
					{
						mySpriteBatch.Draw(TextureAssets.WraithEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						for (int num160 = 1; num160 < 10; num160++)
						{
							((Color)(ref val2))._002Ector(110 - num160 * 10, 110 - num160 * 10, 110 - num160 * 10, 110 - num160 * 10);
							mySpriteBatch.Draw(TextureAssets.WraithEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306) - rCurrentNPC.velocity * (float)num160 * 0.5f, (Rectangle?)rCurrentNPC.frame, val2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 253)
					{
						mySpriteBatch.Draw(TextureAssets.ReaperEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						for (int num161 = 1; num161 < 20; num161++)
						{
							((Color)(ref val2))._002Ector(210 - num161 * 20, 210 - num161 * 20, 210 - num161 * 20, 210 - num161 * 20);
							mySpriteBatch.Draw(TextureAssets.ReaperEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num306) - rCurrentNPC.velocity * (float)num161 * 0.5f, (Rectangle?)rCurrentNPC.frame, val2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 245 && rCurrentNPC.alpha == 0 && !getGoodWorld)
					{
						((Color)(ref val2))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, 0);
						mySpriteBatch.Draw(TextureAssets.Golem[3].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, val2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 246 && !getGoodWorld)
					{
						Color color29 = default(Color);
						((Color)(ref color29))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, 0);
						if (rCurrentNPC.frame.Y < 222)
						{
							if (!getGoodWorld)
							{
								mySpriteBatch.Draw(TextureAssets.Golem[1].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 20f, rCurrentNPC.Center.Y - screenPos.Y - 27f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Golem[1].Width(), TextureAssets.Golem[1].Height() / 2), color29, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
							}
							Rectangle value48 = frame6;
							value48.Y = 0;
							mySpriteBatch.Draw(TextureAssets.Extra[107].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)value48, color29, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (!getGoodWorld && rCurrentNPC.frame.Y < 444)
						{
							mySpriteBatch.Draw(TextureAssets.Golem[2].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X + 26f, rCurrentNPC.Center.Y - screenPos.Y - 28f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Golem[2].Width(), TextureAssets.Golem[2].Height() / 4), color29, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
						}
						else if (!getGoodWorld)
						{
							mySpriteBatch.Draw(TextureAssets.Golem[2].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 38f, rCurrentNPC.Center.Y - screenPos.Y - 28f), (Rectangle?)new Rectangle(0, TextureAssets.Golem[2].Height() / 2, TextureAssets.Golem[2].Width(), TextureAssets.Golem[2].Height() / 4), color29, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
						}
					}
					else if (type == 249 && !getGoodWorld)
					{
						Color color30 = default(Color);
						((Color)(ref color30))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, 0);
						if (!getGoodWorld)
						{
							mySpriteBatch.Draw(TextureAssets.Golem[1].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 20f, rCurrentNPC.Center.Y - screenPos.Y - 47f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Golem[1].Width(), TextureAssets.Golem[1].Height() / 2), color30, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
						}
						int num162 = (int)rCurrentNPC.frameCounter / 4;
						Texture2D value49 = TextureAssets.Extra[106].Value;
						Rectangle value50 = value49.Frame(1, 8);
						_ = Color.White;
						value50.Y += value50.Height * 2 * num162 + frame6.Y;
						mySpriteBatch.Draw(value49, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)value50, color30, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						value49 = TextureAssets.Extra[107].Value;
						value50 = frame6;
						mySpriteBatch.Draw(value49, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)value50, color30, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 383)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[11].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						if (rCurrentNPC.ai[2] != 0f && npc[(int)rCurrentNPC.ai[2] - 1].active && npc[(int)rCurrentNPC.ai[2] - 1].type == 384)
						{
							_ = rCurrentNPC.ai[2];
							mySpriteBatch.Draw(TextureAssets.Npc[384].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)null, new Color(100, 100, 100, 0), rCurrentNPC.rotation, new Vector2((float)TextureAssets.Npc[384].Width(), (float)TextureAssets.Npc[384].Height()) / 2f, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 381)
					{
						Vector2 zero3 = Vector2.Zero;
						Vector2 origin11 = Vector2.Zero;
						int num163 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
						int num164 = rCurrentNPC.frame.Y / num163;
						Rectangle value51 = default(Rectangle);
						((Rectangle)(ref value51))._002Ector(0, 0, 32, 42);
						switch (num164)
						{
						case 0:
							zero3 += new Vector2(8f, 32f);
							break;
						case 1:
							zero3 += new Vector2(6f, 72f);
							break;
						case 2:
							zero3 += new Vector2(8f, 126f);
							break;
						case 3:
							zero3 += new Vector2(6f, 174f);
							break;
						case 4:
							zero3 += new Vector2(6f, 224f);
							break;
						case 5:
							zero3 += new Vector2(8f, 272f);
							break;
						case 6:
							zero3 += new Vector2(10f, 318f);
							break;
						case 7:
							zero3 += new Vector2(14f, 366f);
							break;
						case 8:
							zero3 += new Vector2(10f, 414f);
							break;
						}
						zero3.Y -= num163 * num164;
						zero3 -= halfSize;
						int num165 = 2;
						if (rCurrentNPC.ai[2] > 0f)
						{
							num165 = (int)rCurrentNPC.ai[2] - 1;
						}
						if (rCurrentNPC.velocity.Y != 0f)
						{
							num165 = 3;
						}
						value51.Y += 44 * num165;
						switch (num165)
						{
						case 0:
							((Vector2)(ref origin11))._002Ector(10f, 18f);
							break;
						case 1:
							((Vector2)(ref origin11))._002Ector(8f, 20f);
							break;
						case 2:
							((Vector2)(ref origin11))._002Ector(8f, 20f);
							break;
						case 3:
							((Vector2)(ref origin11))._002Ector(8f, 20f);
							break;
						case 4:
							((Vector2)(ref origin11))._002Ector(6f, 18f);
							break;
						}
						if (((Enum)spriteEffects).HasFlag((Enum)(object)(SpriteEffects)1))
						{
							zero3.X *= -1f;
							origin11.X = (float)value51.Width - origin11.X;
						}
						zero3 += rCurrentNPC.Center;
						zero3 -= screenPos;
						zero3.Y += rCurrentNPC.gfxOffY;
						mySpriteBatch.Draw(TextureAssets.Extra[0].Value, zero3, (Rectangle?)value51, npcColor, rCurrentNPC.rotation, origin11, rCurrentNPC.scale, spriteEffects, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[24].Value, zero3, (Rectangle?)value51, new Color(255, 255, 255, 0), rCurrentNPC.rotation, origin11, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 382)
					{
						Vector2 zero4 = Vector2.Zero;
						Vector2 origin13 = Vector2.Zero;
						int num166 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
						int num167 = rCurrentNPC.frame.Y / num166;
						Rectangle value52 = default(Rectangle);
						((Rectangle)(ref value52))._002Ector(0, 0, 30, 42);
						switch (num167)
						{
						case 0:
							zero4 += new Vector2(8f, 30f);
							break;
						case 1:
							zero4 += new Vector2(6f, 68f);
							break;
						case 2:
							zero4 += new Vector2(8f, 120f);
							break;
						case 3:
							zero4 += new Vector2(6f, 166f);
							break;
						case 4:
							zero4 += new Vector2(6f, 214f);
							break;
						case 5:
							zero4 += new Vector2(8f, 260f);
							break;
						case 6:
							zero4 += new Vector2(14f, 304f);
							break;
						case 7:
							zero4 += new Vector2(14f, 350f);
							break;
						case 8:
							zero4 += new Vector2(10f, 396f);
							break;
						}
						zero4.Y -= num166 * num167;
						zero4 -= halfSize;
						int num168 = 2;
						if (rCurrentNPC.ai[2] > 0f)
						{
							num168 = (int)rCurrentNPC.ai[2] - 1;
						}
						if (rCurrentNPC.velocity.Y != 0f)
						{
							num168 = 3;
						}
						value52.Y += 44 * num168;
						switch (num168)
						{
						case 0:
							((Vector2)(ref origin13))._002Ector(10f, 18f);
							break;
						case 1:
							((Vector2)(ref origin13))._002Ector(8f, 20f);
							break;
						case 2:
							((Vector2)(ref origin13))._002Ector(8f, 20f);
							break;
						case 3:
							((Vector2)(ref origin13))._002Ector(8f, 20f);
							break;
						case 4:
							((Vector2)(ref origin13))._002Ector(6f, 18f);
							break;
						}
						if (((Enum)spriteEffects).HasFlag((Enum)(object)(SpriteEffects)1))
						{
							zero4.X *= -1f;
							origin13.X = (float)value52.Width - origin13.X;
						}
						zero4 += rCurrentNPC.Center;
						zero4 -= screenPos;
						zero4.Y += rCurrentNPC.gfxOffY;
						mySpriteBatch.Draw(TextureAssets.Extra[1].Value, zero4, (Rectangle?)value52, npcColor, rCurrentNPC.rotation, origin13, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 520)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[164].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						Vector2 zero5 = Vector2.Zero;
						Vector2 origin14 = default(Vector2);
						((Vector2)(ref origin14))._002Ector(4f, 4f);
						int num169 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
						_ = rCurrentNPC.frame.Y / num169;
						if (((Enum)spriteEffects).HasFlag((Enum)(object)(SpriteEffects)1))
						{
							zero5.X *= -1f;
							origin14.X = (float)TextureAssets.Extra[56].Width() - origin14.X;
						}
						zero5 += rCurrentNPC.Top + new Vector2(0f, 20f);
						zero5 -= screenPos;
						zero5.Y += rCurrentNPC.gfxOffY;
						float num170 = rCurrentNPC.localAI[3];
						if (((Enum)spriteEffects).HasFlag((Enum)(object)(SpriteEffects)1))
						{
							num170 += (float)Math.PI;
						}
						mySpriteBatch.Draw(TextureAssets.Extra[56].Value, zero5, (Rectangle?)null, npcColor, num170, origin14, rCurrentNPC.scale, spriteEffects, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[165].Value, zero5, (Rectangle?)null, new Color(255, 255, 255, 0), num170, origin14, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 386)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[31].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 387)
					{
						Color color31 = new Color(1f, 1f, 1f, 1f) * 0.75f;
						if (rCurrentNPC.ai[0] > 0f)
						{
							float amount9 = (rCurrentNPC.ai[0] + 1f) / 60f;
							color31 = Color.Lerp(color31, Color.White, amount9);
							((Color)(ref color31)).A = (byte)MathHelper.Lerp((float)(int)((Color)(ref color31)).A, 0f, amount9);
						}
						color31 *= (255f - (float)rCurrentNPC.alpha) / 255f;
						mySpriteBatch.Draw(TextureAssets.GlowMask[32].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, color31, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 388)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[33].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 389)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[34].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, new Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 4 && rCurrentNPC.ai[1] >= 4f && rCurrentNPC.ai[0] == 3f)
					{
						for (int num171 = 1; num171 < rCurrentNPC.oldPos.Length; num171++)
						{
							_ = ref rCurrentNPC.oldPos[num171];
							Color color32 = npcColor;
							((Color)(ref color32)).R = (byte)(0.5 * (double)(int)((Color)(ref color32)).R * (double)(10 - num171) / 20.0);
							((Color)(ref color32)).G = (byte)(0.5 * (double)(int)((Color)(ref color32)).G * (double)(10 - num171) / 20.0);
							((Color)(ref color32)).B = (byte)(0.5 * (double)(int)((Color)(ref color32)).B * (double)(10 - num171) / 20.0);
							((Color)(ref color32)).A = (byte)(0.5 * (double)(int)((Color)(ref color32)).A * (double)(10 - num171) / 20.0);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num171].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num171].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, color32, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 437)
					{
						Color white5 = Color.White;
						((Color)(ref white5)).A = 200;
						mySpriteBatch.Draw(TextureAssets.GlowMask[109].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)frame6, white5, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[108].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + num305 + rCurrentNPC.gfxOffY), (Rectangle?)null, white5, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (type == 471 && rCurrentNPC.ai[3] < 0f)
					{
						for (int num172 = 1; num172 < rCurrentNPC.oldPos.Length; num172++)
						{
							_ = ref rCurrentNPC.oldPos[num172];
							Color color33 = npcColor;
							((Color)(ref color33)).R = (byte)(0.5 * (double)(int)((Color)(ref color33)).R * (double)(10 - num172) / 20.0);
							((Color)(ref color33)).G = (byte)(0.5 * (double)(int)((Color)(ref color33)).G * (double)(10 - num172) / 20.0);
							((Color)(ref color33)).B = (byte)(0.5 * (double)(int)((Color)(ref color33)).B * (double)(10 - num172) / 20.0);
							((Color)(ref color33)).A = (byte)(0.5 * (double)(int)((Color)(ref color33)).A * (double)(10 - num172) / 20.0);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num172].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num172].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, color33, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 477 && ((Vector2)(ref rCurrentNPC.velocity)).Length() > 9f)
					{
						for (int num173 = 1; num173 < rCurrentNPC.oldPos.Length; num173++)
						{
							_ = ref rCurrentNPC.oldPos[num173];
							Color color34 = npcColor;
							((Color)(ref color34)).R = (byte)(0.5 * (double)(int)((Color)(ref color34)).R * (double)(10 - num173) / 20.0);
							((Color)(ref color34)).G = (byte)(0.5 * (double)(int)((Color)(ref color34)).G * (double)(10 - num173) / 20.0);
							((Color)(ref color34)).B = (byte)(0.5 * (double)(int)((Color)(ref color34)).B * (double)(10 - num173) / 20.0);
							((Color)(ref color34)).A = (byte)(0.5 * (double)(int)((Color)(ref color34)).A * (double)(10 - num173) / 20.0);
							Rectangle frame7 = rCurrentNPC.frame;
							int num174 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
							frame7.Y -= num174 * num173;
							while (frame7.Y < 0)
							{
								frame7.Y += num174 * npcFrameCount[type];
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num173].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num173].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)frame7, color34, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					if (type == 479 && (double)((Vector2)(ref rCurrentNPC.velocity)).Length() > 6.5)
					{
						for (int num175 = 1; num175 < rCurrentNPC.oldPos.Length; num175++)
						{
							_ = ref rCurrentNPC.oldPos[num175];
							Color color35 = npcColor;
							((Color)(ref color35)).R = (byte)(0.5 * (double)(int)((Color)(ref color35)).R * (double)(10 - num175) / 20.0);
							((Color)(ref color35)).G = (byte)(0.5 * (double)(int)((Color)(ref color35)).G * (double)(10 - num175) / 20.0);
							((Color)(ref color35)).B = (byte)(0.5 * (double)(int)((Color)(ref color35)).B * (double)(10 - num175) / 20.0);
							((Color)(ref color35)).A = (byte)(0.5 * (double)(int)((Color)(ref color35)).A * (double)(10 - num175) / 20.0);
							Rectangle frame8 = rCurrentNPC.frame;
							int num176 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
							frame8.Y -= num176 * num175;
							while (frame8.Y < 0)
							{
								frame8.Y += num176 * npcFrameCount[type];
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num175].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num175].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)frame8, color35, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
					}
					else if (type == 472)
					{
						mySpriteBatch.Draw(TextureAssets.GlowMask[110].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					else if (rCurrentNPC.aiStyle == 87)
					{
						if ((int)rCurrentNPC.ai[0] == 4 || rCurrentNPC.ai[0] == 5f || rCurrentNPC.ai[0] == 6f)
						{
							for (int num177 = 1; num177 < rCurrentNPC.oldPos.Length; num177++)
							{
								_ = ref rCurrentNPC.oldPos[num177];
								Color newColor5 = npcColor;
								((Color)(ref newColor5)).R = (byte)(0.5 * (double)(int)((Color)(ref newColor5)).R * (double)(10 - num177) / 20.0);
								((Color)(ref newColor5)).G = (byte)(0.5 * (double)(int)((Color)(ref newColor5)).G * (double)(10 - num177) / 20.0);
								((Color)(ref newColor5)).B = (byte)(0.5 * (double)(int)((Color)(ref newColor5)).B * (double)(10 - num177) / 20.0);
								((Color)(ref newColor5)).A = (byte)(0.5 * (double)(int)((Color)(ref newColor5)).A * (double)(10 - num177) / 20.0);
								newColor5 = rCurrentNPC.GetShimmerColor(newColor5);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num177].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num177].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306), (Rectangle?)rCurrentNPC.frame, newColor5, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
					}
					else
					{
						switch (type)
						{
						case 50:
						{
							Texture2D value53 = TextureAssets.Extra[39].Value;
							Vector2 center3 = rCurrentNPC.Center;
							float num199 = 0f;
							switch (rCurrentNPC.frame.Y / (TextureAssets.Npc[type].Height() / npcFrameCount[type]))
							{
							case 0:
								num199 = 2f;
								break;
							case 1:
								num199 = -6f;
								break;
							case 2:
								num199 = 2f;
								break;
							case 3:
								num199 = 10f;
								break;
							case 4:
								num199 = 2f;
								break;
							case 5:
								num199 = 0f;
								break;
							}
							center3.Y += rCurrentNPC.gfxOffY - (70f - num199) * rCurrentNPC.scale;
							mySpriteBatch.Draw(value53, center3 - screenPos, (Rectangle?)null, npcColor, 0f, value53.Size() / 2f, 1f, spriteEffects, 0f);
							break;
						}
						case 411:
							mySpriteBatch.Draw(TextureAssets.GlowMask[136].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 409:
							mySpriteBatch.Draw(TextureAssets.GlowMask[138].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 410:
							mySpriteBatch.Draw(TextureAssets.GlowMask[137].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 407:
							mySpriteBatch.Draw(TextureAssets.GlowMask[139].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 405:
							mySpriteBatch.Draw(TextureAssets.GlowMask[141].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 406:
							mySpriteBatch.Draw(TextureAssets.GlowMask[142].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 424:
							mySpriteBatch.Draw(TextureAssets.GlowMask[144].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 423:
							mySpriteBatch.Draw(TextureAssets.GlowMask[145].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 421:
							mySpriteBatch.Draw(TextureAssets.GlowMask[146].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 420:
							mySpriteBatch.Draw(TextureAssets.GlowMask[147].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 425:
						{
							Vector2 vector58 = rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(TextureAssets.GlowMask[150].Value, vector58, (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							Vector2 drawpos = vector58 + new Vector2((float)(27 * -rCurrentNPC.spriteDirection), 0f);
							float num200 = rCurrentNPC.ai[3];
							DrawPrettyStarSparkle(Utils.Remap(num200, 0f, 15f, 0f, 1f), (SpriteEffects)0, drawpos, new Color(255, 255, 255, 0), Color.Green, num200, 0f, 30f, 30f, 36f, 0f, new Vector2(3f, 1.5f), new Vector2(2f, 2f));
							break;
						}
						case 429:
							mySpriteBatch.Draw(TextureAssets.GlowMask[151].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 418:
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[161].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							val2 = rCurrentNPC.GetAlpha(npcColor);
							val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
							float num197 = 0.25f + ((Vector3)(ref val3)).Length() * 0.25f;
							for (int num198 = 0; num198 < 4; num198++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[161].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num198 * ((float)Math.PI / 2f)) * num197, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 412:
						case 413:
						case 414:
						{
							Color color36 = default(Color);
							((Color)(ref color36))._002Ector(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0);
							int num194 = 157 + type - 412;
							if (type == 414 && rCurrentNPC.localAI[2] != 0f)
							{
								int num195 = (int)rCurrentNPC.localAI[2];
								if (rCurrentNPC.localAI[2] < 0f)
								{
									num195 = 128 + (int)rCurrentNPC.localAI[2];
								}
								int num196 = 255 - num195;
								((Color)(ref color36))._002Ector(num196, num195, num195, num196);
							}
							mySpriteBatch.Draw(TextureAssets.GlowMask[num194].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, color36, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						}
						case 415:
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[155].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							val2 = rCurrentNPC.GetAlpha(npcColor);
							val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
							float num178 = 0.5f + ((Vector3)(ref val3)).Length() * 0.5f;
							for (int num179 = 0; num179 < 4; num179++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[155].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num179 * ((float)Math.PI / 2f)) * num178, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 419:
							mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							if (rCurrentNPC.ai[2] >= -6f)
							{
								val2 = rCurrentNPC.GetAlpha(npcColor);
								val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
								float num182 = 0.5f + ((Vector3)(ref val3)).Length() * 0.5f;
								for (int num183 = 0; num183 < 4; num183++)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num183 * ((float)Math.PI / 2f)) * num182, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
							}
							else
							{
								float num184 = 4f;
								for (int num185 = 0; num185 < 4; num185++)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((float)num185 * ((float)Math.PI / 2f)) * num184, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
							}
							break;
						case 417:
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[160].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							val2 = rCurrentNPC.GetAlpha(npcColor);
							val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
							float num192 = 0.25f + ((Vector3)(ref val3)).Length() * 0.25f;
							for (int num193 = 0; num193 < 4; num193++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[160].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num193 * ((float)Math.PI / 2f)) * num192, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 516:
						{
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							val2 = rCurrentNPC.GetAlpha(npcColor);
							val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
							float num186 = 0.5f + ((Vector3)(ref val3)).Length() * 0.5f;
							for (int num187 = 0; num187 < 4; num187++)
							{
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num187 * ((float)Math.PI / 2f)) * num186, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 518:
						{
							Vector2 vector57 = default(Vector2);
							((Vector2)(ref vector57))._002Ector(-10f, 0f);
							mySpriteBatch.Draw(TextureAssets.GlowMask[163].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize + vector57, rCurrentNPC.scale, spriteEffects, 0f);
							val2 = rCurrentNPC.GetAlpha(npcColor);
							val3 = ((Color)(ref val2)).ToVector3() - new Vector3(0.5f);
							float num190 = 0.5f + ((Vector3)(ref val3)).Length() * 0.5f;
							for (int num191 = 0; num191 < 4; num191++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[163].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num191 * ((float)Math.PI / 2f)) * num190, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize + vector57, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 344:
							mySpriteBatch.Draw(TextureAssets.GlowMask[253].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 100) * 0.5f, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 346:
						{
							float num180 = 4f;
							for (int num181 = 0; num181 < 4; num181++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[254].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((float)num181 * ((float)Math.PI / 2f)) * num180, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							mySpriteBatch.Draw(TextureAssets.GlowMask[254].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						}
						case 315:
						{
							float num188 = 2f;
							for (int num189 = 0; num189 < 4; num189++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[255].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((float)num189 * ((float)Math.PI / 2f)) * num188, (Rectangle?)rCurrentNPC.frame, new Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							mySpriteBatch.Draw(TextureAssets.GlowMask[255].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 200), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						}
						case 525:
							mySpriteBatch.Draw(TextureAssets.GlowMask[169].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 526:
							mySpriteBatch.Draw(TextureAssets.GlowMask[170].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 527:
							mySpriteBatch.Draw(TextureAssets.GlowMask[171].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 533:
							mySpriteBatch.Draw(TextureAssets.GlowMask[172].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						case 160:
						{
							Texture2D texture2D2 = null;
							texture2D2 = ((rCurrentNPC.townNpcVariationIndex != 1) ? TextureAssets.GlowMask[166].Value : TextureAssets.GlowMask[352].Value);
							mySpriteBatch.Draw(texture2D2, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						}
						case 209:
						{
							Texture2D texture2D = null;
							texture2D = ((rCurrentNPC.townNpcVariationIndex != 1) ? TextureAssets.GlowMask[167].Value : ((rCurrentNPC.altTexture != 1) ? TextureAssets.GlowMask[350].Value : TextureAssets.GlowMask[351].Value));
							mySpriteBatch.Draw(texture2D, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							break;
						}
						}
					}
					if (rCurrentNPC.aiStyle == 7)
					{
						DrawNPCExtras(rCurrentNPC, beforeDraw: false, num306, num305, npcColor, halfSize, spriteEffects, screenPos);
					}
					break;
				}
				case 488:
					break;
				}
				break;
			}
			goto case 426;
		case 426:
		case 427:
		case 428:
		case 521:
		case 523:
		case 541:
		case 542:
		case 543:
		case 544:
		case 545:
		case 581:
		{
			Texture2D value74 = TextureAssets.Npc[type].Value;
			Color color41 = Color.White;
			float amount2 = 0f;
			float amount3 = 0f;
			int num268 = 0;
			int num269 = 0;
			int num270 = 1;
			int num271 = 15;
			int num272 = 0;
			float scale17 = rCurrentNPC.scale;
			float value75 = rCurrentNPC.scale;
			int num273 = 0;
			float num274 = 0f;
			float num275 = 0f;
			float num276 = 0f;
			Color color42 = npcColor;
			Vector2 origin16 = halfSize;
			switch (type)
			{
			case 558:
			case 559:
			case 560:
			case 574:
			case 575:
				if (rCurrentNPC.ai[0] != 2f)
				{
					num268 = 0;
					break;
				}
				num268 = 6;
				num269 = 2;
				num271 = num268 * 3;
				num272 = 1;
				break;
			case 566:
			case 567:
			case 578:
				num268 = 0;
				num306 = -2f;
				break;
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 561:
			case 562:
			case 563:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
				num268 = 0;
				if (type == 561 || type == 562 || type == 563)
				{
					num306 = -8f;
				}
				if (type == 555 || type == 556 || type == 557)
				{
					num306 = -5f;
				}
				if (type == 572 || type == 573)
				{
					num306 = -4f;
				}
				if (type == 570 || type == 571)
				{
					spriteEffects = (SpriteEffects)(spriteEffects ^ 1);
					num306 = -2f;
				}
				if (type == 568 || type == 569)
				{
					spriteEffects = (SpriteEffects)(spriteEffects ^ 1);
					num306 = -3f;
					num273 = 4;
					num275 = 4f;
					num274 = (float)Math.Cos(GlobalTimeWrappedHourly % 1.5f / 1.5f * ((float)Math.PI * 2f)) / 6f + 0.75f;
					color41 = Color.HotPink;
					((Color)(ref color41)).A = 127;
					amount2 = 0.5f;
				}
				if (rCurrentNPC.localAI[3] < 60f)
				{
					float num288 = rCurrentNPC.localAI[3] / 60f;
					num273 = 3;
					num274 = 1f - num288 * num288;
					num275 = 8f;
					((Color)(ref color41))._002Ector(127, 0, 255, 0);
					amount3 = 1f;
					color42 = Color.Lerp(Color.Transparent, color42, num288 * num288);
				}
				break;
			case 541:
				num273 = 4;
				num275 = 6f;
				num274 = (float)Math.Cos(GlobalTimeWrappedHourly % 2.4f / 2.4f * ((float)Math.PI * 2f)) / 2f + 0.5f;
				color41 = Color.Gold;
				amount2 = 0.5f;
				break;
			case 661:
				num273 = 6;
				num275 = 6f;
				num274 = (float)Math.Cos(GlobalTimeWrappedHourly % 2.4f / 2.4f * ((float)Math.PI * 2f)) / 2f + 0.5f;
				num274 = MathHelper.Max(num274, Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[2], clamped: true));
				amount2 = 0.5f;
				break;
			case 426:
				num273 = 4;
				num275 = 4f;
				num274 = (float)Math.Cos(GlobalTimeWrappedHourly % 1.2f / 1.2f * ((float)Math.PI * 2f)) / 2f + 0.5f;
				color41 = Color.Turquoise;
				amount2 = 0.5f;
				num268 = 6;
				num269 = 2;
				num271 = num268;
				break;
			case 427:
				num268 = 8;
				num269 = 2;
				num271 = num268 * 3;
				break;
			case 546:
				num268 = 8;
				num269 = 2;
				num271 = num268 * 3;
				break;
			case 542:
			case 543:
			case 544:
			case 545:
				num268 = 6;
				num269 = 3;
				num271 = num268 * 2;
				break;
			case 581:
				num268 = 6;
				num269 = 2;
				num271 = num268 * 3;
				break;
			case 521:
				num268 = 10;
				num269 = 2;
				num271 = num268;
				num272 = 1;
				value75 = 0.3f;
				break;
			case 523:
				num273 = 3;
				num275 = 10f * rCurrentNPC.scale;
				amount2 = 0.5f;
				amount3 = 0.8f;
				color41 = Color.HotPink;
				((Color)(ref color41)).A = 128;
				num276 = rCurrentNPC.localAI[0];
				num274 = rCurrentNPC.localAI[1];
				break;
			case 620:
				num306 = -9f;
				origin16 = rCurrentNPC.frame.Size() * new Vector2(0.5f, 0.5f) + new Vector2((float)(-4 * rCurrentNPC.spriteDirection), 0f);
				num273 = 4;
				num275 = 6f;
				num274 = (float)Math.Cos(GlobalTimeWrappedHourly % 2.4f / 2.4f * ((float)Math.PI * 2f)) / 2f + 0.5f;
				color41 = Color.Gold;
				amount2 = 0.5f;
				num268 = 6;
				num269 = 2;
				num271 = num268 * 3;
				num272 = 1;
				break;
			case 618:
			{
				float num277 = 90f;
				float num278 = 180f;
				if (rCurrentNPC.ai[0] == 1f && rCurrentNPC.ai[1] < num277)
				{
					int num279 = 3;
					float num280 = num277 / (float)num279;
					float num372 = rCurrentNPC.ai[1] % num280 / num280;
					num273 = 6;
					num275 = 15f;
					num274 = num372 * 0.8f + 0.2f;
				}
				if (rCurrentNPC.ai[0] == 3f && rCurrentNPC.ai[1] < num278)
				{
					int num281 = 1;
					float num282 = num278 / (float)num281;
					float num283 = rCurrentNPC.ai[1] % num282 / num282;
					num273 = 4;
					num275 = 25f;
					num274 = num283;
					Vector2 vector67 = rCurrentNPC.scale * new Vector2(1f, 0.5f + num283 * 0.75f);
					Texture2D value76 = TextureAssets.Extra[59].Value;
					Rectangle rectangle4 = value76.Frame();
					Vector2 origin17 = rectangle4.Size() * new Vector2(0.5f, 0.5f);
					for (int num284 = 0; num284 < num273; num284++)
					{
						Color white8 = Color.White;
						white8 *= Utils.GetLerpValue(0f, 0.5f, num274) * Utils.GetLerpValue(1f, 0.5f, num274) * 0.25f;
						((Color)(ref white8)).A = 0;
						((Color)(ref white8)).G = 0;
						((Color)(ref white8)).B = 0;
						float num285 = (float)num284 / (float)num273 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num276;
						Vector2 position24 = rCurrentNPC.Center + num285.ToRotationVector2() * num275 * num274 - screenPos;
						position24 -= new Vector2((float)value74.Width, (float)(value74.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position24 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value76, position24, (Rectangle?)rectangle4, white8, num285, origin17, vector67 * 1.8f, spriteEffects, 0f);
					}
					for (int num286 = 0; num286 < num273; num286++)
					{
						Color white9 = Color.White;
						white9 *= Utils.GetLerpValue(0f, 0.5f, num274) * Utils.GetLerpValue(1f, 0.5f, num274) * 0.25f;
						((Color)(ref white9)).A = 0;
						float num287 = (float)num286 / (float)num273 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num276;
						Vector2 position25 = rCurrentNPC.Center + num287.ToRotationVector2() * num275 * num274 - screenPos;
						position25 -= new Vector2((float)value74.Width, (float)(value74.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
						position25 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value76, position25, (Rectangle?)rectangle4, white9, num287, origin17, vector67 * 1.5f, spriteEffects, 0f);
					}
				}
				break;
			}
			}
			for (int num289 = num270; num289 < num268; num289 += num269)
			{
				_ = ref rCurrentNPC.oldPos[num289];
				Color value77 = color42;
				value77 = Color.Lerp(value77, color41, amount2);
				value77 = rCurrentNPC.GetAlpha(value77);
				value77 *= (float)(num268 - num289) / (float)num271;
				_ = rCurrentNPC.rotation;
				if (num272 == 1)
				{
					_ = rCurrentNPC.oldRot[num289];
				}
				float scale18 = MathHelper.Lerp(scale17, value75, 1f - (float)(num268 - num289) / (float)num271);
				Vector2 position26 = rCurrentNPC.oldPos[num289] + new Vector2((float)rCurrentNPC.width, (float)rCurrentNPC.height) / 2f - screenPos;
				position26 -= new Vector2((float)value74.Width, (float)(value74.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
				position26 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
				mySpriteBatch.Draw(value74, position26, (Rectangle?)rCurrentNPC.frame, value77, rCurrentNPC.rotation, halfSize, scale18, spriteEffects, 0f);
			}
			for (int num290 = 0; num290 < num273; num290++)
			{
				Color value79 = npcColor;
				value79 = Color.Lerp(value79, color41, amount2);
				value79 = rCurrentNPC.GetAlpha(value79);
				value79 = Color.Lerp(value79, color41, amount3);
				value79 *= 1f - num274;
				Vector2 position27 = rCurrentNPC.Center + ((float)num290 / (float)num273 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num276).ToRotationVector2() * num275 * num274 - screenPos;
				position27 -= new Vector2((float)value74.Width, (float)(value74.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
				position27 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
				mySpriteBatch.Draw(value74, position27, (Rectangle?)rCurrentNPC.frame, value79, rCurrentNPC.rotation, origin16, rCurrentNPC.scale, spriteEffects, 0f);
			}
			Vector2 vector68 = rCurrentNPC.Center - screenPos;
			vector68 -= new Vector2((float)value74.Width, (float)(value74.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
			vector68 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
			mySpriteBatch.Draw(value74, vector68, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(color42), rCurrentNPC.rotation, origin16, rCurrentNPC.scale, spriteEffects, 0f);
			switch (type)
			{
			case 427:
				mySpriteBatch.Draw(TextureAssets.GlowMask[152].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				break;
			case 426:
				mySpriteBatch.Draw(TextureAssets.GlowMask[153].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num306 + rCurrentNPC.gfxOffY), (Rectangle?)rCurrentNPC.frame, new Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				break;
			}
			if (type == 541)
			{
				Color color43 = Utils.MultiplyRGBA(new Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0), Color.Gold);
				for (int num291 = 0; num291 < num273; num291++)
				{
					Color newColor6 = color43;
					newColor6 = rCurrentNPC.GetAlpha(newColor6);
					newColor6 *= 1f - num274;
					Vector2 position28 = rCurrentNPC.Center + ((float)num291 / (float)num273 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num276).ToRotationVector2() * (4f * num274 + 2f) - screenPos;
					position28 -= new Vector2((float)value74.Width, (float)(value74.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position28 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(TextureAssets.GlowMask[216].Value, position28, (Rectangle?)rCurrentNPC.frame, newColor6, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				mySpriteBatch.Draw(TextureAssets.GlowMask[216].Value, vector68, (Rectangle?)rCurrentNPC.frame, color43, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
			if (type == 661)
			{
				num276 = MathHelper.Lerp(0f, 3f, Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[2], clamped: true));
				for (int num292 = 0; num292 < num273; num292++)
				{
					Color newColor7 = Utils.MultiplyRGBA(new Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0), hslToRgb((GlobalTimeWrappedHourly + (float)num292 / (float)num273) % 1f, 1f, 0.5f));
					newColor7 = rCurrentNPC.GetAlpha(newColor7);
					newColor7 *= 1f - num274 * 0.5f;
					((Color)(ref newColor7)).A = 0;
					float num293 = 2f + rCurrentNPC.ai[2];
					Vector2 position29 = rCurrentNPC.Center + ((float)num292 / (float)num273 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num276).ToRotationVector2() * (num293 * num274 + 2f) - screenPos;
					position29 -= new Vector2((float)value74.Width, (float)(value74.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position29 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value74, position29, (Rectangle?)rCurrentNPC.frame, newColor7, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				mySpriteBatch.Draw(value74, vector68, (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 0) * 0.1f, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
			if ((type == 568 || type == 569) && rCurrentNPC.localAI[3] >= 60f)
			{
				Color color44 = Utils.MultiplyRGBA(new Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0), color41);
				for (int num294 = 0; num294 < num273; num294++)
				{
					Color newColor8 = color44;
					newColor8 = rCurrentNPC.GetAlpha(newColor8);
					newColor8 *= 1f - num274;
					Vector2 position30 = rCurrentNPC.Center + ((float)num294 / (float)num273 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num276).ToRotationVector2() * (4f * num274 + 2f) - screenPos;
					position30 -= new Vector2((float)value74.Width, (float)(value74.Height / npcFrameCount[type])) * rCurrentNPC.scale / 2f;
					position30 += halfSize * rCurrentNPC.scale + new Vector2(0f, num305 + num306 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(TextureAssets.GlowMask[224].Value, position30, (Rectangle?)rCurrentNPC.frame, newColor8, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				mySpriteBatch.Draw(TextureAssets.GlowMask[224].Value, vector68, (Rectangle?)rCurrentNPC.frame, color44, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				float num295 = rCurrentNPC.localAI[0];
				if (num295 > 0f)
				{
					byte a = (byte)((Math.Cos(num295 * ((float)Math.PI * 2f) / 60f) * 0.5 + 0.5) * 32.0 + 0.0);
					Color color45 = new Color(180, 90, 255, (int)a) * 0.75f;
					float num296 = 1f;
					if (num295 < 60f)
					{
						float lerpValue3 = Utils.GetLerpValue(0f, 60f, num295);
						color45 *= lerpValue3;
						num296 = MathHelper.Lerp(1f, 0.5f, 1f - lerpValue3 * lerpValue3);
					}
					Texture2D value80 = TextureAssets.Extra[89].Value;
					Vector2 origin18 = value80.Size() / 2f;
					Vector2 scale10 = default(Vector2);
					((Vector2)(ref scale10))._002Ector(num296);
					float num297 = num295 * 0.0041887905f;
					float num298 = (float)Math.PI / 2f;
					scale10.Y *= 1f;
					scale10.X *= 1f;
					for (float num299 = 0f; num299 < 16f; num299 += 1f)
					{
						float num300 = num297 + (float)Math.PI * 2f * (num299 / 16f);
						Vector2 position31 = rCurrentNPC.Center - screenPos + num300.ToRotationVector2() * 400f * num296;
						mySpriteBatch.Draw(value80, position31, (Rectangle?)null, color45, num300 + (float)Math.PI / 2f + num298, origin18, scale10, (SpriteEffects)0, 0f);
					}
				}
			}
			if (type == 546)
			{
				mySpriteBatch.Draw(TextureAssets.Extra[76].Value, vector68, (Rectangle?)rCurrentNPC.frame, new Color(255, 255, 255, 200), MathHelper.Clamp(rCurrentNPC.velocity.X * 0.1f, -(float)Math.PI / 8f, (float)Math.PI / 8f), halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
			if ((type == 566 || type == 567) && rCurrentNPC.localAI[3] >= 115f)
			{
				int frameY = (int)(GlobalTimeWrappedHourly % 0.5f / 0.5f * 4f);
				Texture2D value81 = TextureAssets.Extra[80].Value;
				Rectangle rectangle5 = value81.Frame(1, 4, 0, frameY);
				Vector2 vector69 = new Vector2((float)(rCurrentNPC.spriteDirection * 8), -26f) * rCurrentNPC.scale;
				int num301 = rCurrentNPC.frame.Y / rCurrentNPC.frame.Height;
				int num302 = 0;
				switch (num301)
				{
				case 0:
					num302 = 6;
					break;
				case 1:
					num302 = 4;
					break;
				case 2:
					num302 = 2;
					break;
				case 3:
					num302 = 6;
					break;
				case 4:
					num302 = 8;
					break;
				case 5:
					num302 = 6;
					break;
				case 6:
					num302 = 4;
					break;
				case 7:
					num302 = 6;
					break;
				case 8:
					num302 = 2;
					break;
				}
				Color color46 = default(Color);
				((Color)(ref color46))._002Ector(255, 255, 255, 130);
				vector69.Y += num302;
				mySpriteBatch.Draw(value81, vector68 + vector69 * rCurrentNPC.scale, (Rectangle?)rectangle5, color46, MathHelper.Clamp(rCurrentNPC.velocity.X * 0.1f, -(float)Math.PI / 8f, (float)Math.PI / 8f), rectangle5.Size() / 2f, rCurrentNPC.scale * 0.7f, (SpriteEffects)(spriteEffects ^ 1), 0f);
			}
			if (type == 618)
			{
				mySpriteBatch.Draw(TextureAssets.Extra[129].Value, vector68, (Rectangle?)rCurrentNPC.frame, rCurrentNPC.GetAlpha(color42), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
			}
			break;
		}
		}
	}

	private static void DrawNPCDirect_Deerclops(SpriteBatch mySpriteBatch, NPC rCurrentNPC, ref Vector2 screenPos, int typeCache, ref Color npcColor, ref Vector2 halfSize, SpriteEffects npcSpriteEffect)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_045c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0463: Unknown result type (might be due to invalid IL or missing references)
		//IL_046d: Unknown result type (might be due to invalid IL or missing references)
		//IL_047a: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0339: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_0373: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_038b: Unknown result type (might be due to invalid IL or missing references)
		//IL_038d: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0394: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_039b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0486: Unknown result type (might be due to invalid IL or missing references)
		//IL_0487: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04be: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04df: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f1: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Npc[typeCache].Value;
		Vector2 vector = rCurrentNPC.Bottom - screenPos;
		Rectangle rectangle = value.Frame(5, 5, rCurrentNPC.frame.Y / 5, rCurrentNPC.frame.Y % 5, 2, 2);
		Vector2 origin = rectangle.Size() * new Vector2(0.5f, 1f);
		origin.Y -= 4f;
		int num = 106;
		if (rCurrentNPC.spriteDirection == 1)
		{
			origin.X = num;
		}
		else
		{
			origin.X = rectangle.Width - num;
		}
		Color value2 = Color.White;
		float amount = 0f;
		float amount2 = 0f;
		int num5 = 0;
		float num6 = 0f;
		float num7 = 0f;
		float num8 = 10f;
		Color color = npcColor;
		if (rCurrentNPC.localAI[3] > 0f)
		{
			float num9 = rCurrentNPC.localAI[3] / 36f;
			num5 = 2;
			num6 = num9 * num9;
			num7 = 20f;
			value2 = new Color(80, 0, 0, 255) * 0.5f;
			amount2 = 1f;
			color = Color.Lerp(Color.Transparent, color, 1f - num9 * num9);
		}
		for (int i = 0; i < num5; i++)
		{
			Color value3 = npcColor;
			value3 = Color.Lerp(value3, value2, amount);
			value3 = rCurrentNPC.GetAlpha(value3);
			value3 = Color.Lerp(value3, value2, amount2);
			value3 *= 1f - num6 * 0.5f;
			Vector2 vector2 = vector;
			mySpriteBatch.Draw(value, vector2 + Utils.RotatedBy(new Vector2(0f, 1f), (float)i * ((float)Math.PI * 2f) / (float)num5 + GlobalTimeWrappedHourly * num8) * num6 * num7, (Rectangle?)rectangle, value3, rCurrentNPC.rotation, origin, rCurrentNPC.scale, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
		}
		Color color2 = rCurrentNPC.GetAlpha(color);
		Color value4 = default(Color);
		((Color)(ref value4))._002Ector(50, 0, 160);
		float num10 = 0f;
		if (rCurrentNPC.localAI[3] > 0f)
		{
			float amount3 = Utils.Remap(rCurrentNPC.localAI[3], 0f, 20f, 0f, 1f);
			color2 = Color.Lerp(color2, value4, amount3);
		}
		if (rCurrentNPC.ai[0] == 7f || rCurrentNPC.ai[0] == 8f)
		{
			num10 = Utils.Remap(rCurrentNPC.ai[1], 20f, 60f, 0f, 2f);
			if (num10 > 1f)
			{
				num10 = 2f - num10;
			}
			color2 = Color.Lerp(color2, value4, num10);
			color2 *= 1f - num10;
			float num11 = 5f;
			for (int j = 0; (float)j < num11; j++)
			{
				Vector2 vector3 = vector;
				float num12 = num10 * num10;
				float num2 = 80f * num12;
				float num3 = 80f * num12 + (float)(30 * j) * num12;
				Vector2 vector4 = Vector2.UnitX.RotatedBy((float)j * ((float)Math.PI * 2f) / num11 + GlobalTimeWrappedHourly * 6f) * num2;
				Vector2 vector5 = Vector2.UnitX.RotatedBy((float)j * ((float)Math.PI * 2f) / num11 + GlobalTimeWrappedHourly * 3f * ((float)j * 0.5f)) * num3;
				mySpriteBatch.Draw(value, vector3 + vector4 + vector5, (Rectangle?)rectangle, color2 * 0.5f, rCurrentNPC.rotation, origin, rCurrentNPC.scale, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
			}
		}
		mySpriteBatch.Draw(value, vector, (Rectangle?)rectangle, color2, rCurrentNPC.rotation, origin, rCurrentNPC.scale, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
		if (rCurrentNPC.localAI[3] > 0f)
		{
			Texture2D value5 = TextureAssets.Extra[245].Value;
			float num4 = Utils.Remap(rCurrentNPC.localAI[3], 0f, 20f, 0f, 1f);
			Color color3 = new Color(255, 30, 30, 66) * rCurrentNPC.Opacity * num4 * 0.25f * (1f - num10);
			for (int k = 0; k < num5; k++)
			{
				Vector2 vector6 = vector;
				mySpriteBatch.Draw(value5, vector6 + Utils.RotatedBy(new Vector2(0f, 1f), (float)k * ((float)Math.PI * 2f) / (float)num5 + GlobalTimeWrappedHourly * num8) * num6 * 4f, (Rectangle?)rectangle, color3, rCurrentNPC.rotation, origin, rCurrentNPC.scale, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
			}
		}
	}

	private static void DrawNPCDirect_DeerclopsLeg(SpriteBatch mySpriteBatch, NPC rCurrentNPC, ref Vector2 screenPos, int typeCache, ref Color npcColor, ref Vector2 halfSize, SpriteEffects npcSpriteEffect)
	{
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		Rectangle? sourceRectangle = null;
		int num = 0;
		int num2 = 0;
		mySpriteBatch.Draw(TextureAssets.Npc[typeCache].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[typeCache].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[typeCache].Height() * rCurrentNPC.scale / (float)npcFrameCount[typeCache] + 4f + halfSize.Y * rCurrentNPC.scale + (float)num2 + (float)num + rCurrentNPC.gfxOffY), sourceRectangle, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
	}

	private static void DrawNPCDirect_Faeling(SpriteBatch mySpriteBatch, NPC rCurrentNPC, ref Vector2 screenPos, int typeCache, ref Color npcColor, ref Vector2 halfSize, SpriteEffects npcSpriteEffect)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_027a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0281: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0318: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_032e: Unknown result type (might be due to invalid IL or missing references)
		//IL_032f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_033a: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03be: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_03eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_0428: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_0439: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0442: Unknown result type (might be due to invalid IL or missing references)
		//IL_0443: Unknown result type (might be due to invalid IL or missing references)
		//IL_044a: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Npc[typeCache].Value;
		Vector2 vector = rCurrentNPC.Center - screenPos;
		int num = 5;
		int horizontalFrames = 4;
		float num10 = ((float)rCurrentNPC.whoAmI * 0.11f + (float)timeForVisualEffects / 360f) % 1f;
		Color color = hslToRgb(num10, 1f, 0.65f);
		((Color)(ref color)).A = (byte)(((Color)(ref color)).A / 2);
		float rotation = rCurrentNPC.rotation;
		Rectangle rectangle = value.Frame(horizontalFrames, num, 0, rCurrentNPC.frame.Y);
		Vector2 origin = rectangle.Size() / 2f;
		float scale = rCurrentNPC.scale;
		Rectangle value2 = value.Frame(horizontalFrames, num, 2);
		Color color2 = new Color(255, 255, 255, 0) * 1f;
		int num11 = rCurrentNPC.oldPos.Length;
		int num12 = num11 - 1 - 5;
		int num13 = 5;
		int num14 = 3;
		float num15 = 32f;
		float num16 = 16f;
		Vector2 center = new Vector2(num15, num16);
		float fromMax = ((Vector2)(ref center)).Length();
		float num17 = Utils.Remap(Vector2.Distance(rCurrentNPC.oldPos[num12], rCurrentNPC.position), 0f, fromMax, 0f, 100f);
		num17 = (int)num17 / 5;
		num17 *= 5f;
		num17 /= 100f;
		num16 *= num17;
		num15 *= num17;
		float num2 = 9f;
		float num3 = 0.5f;
		float num4 = (float)Math.PI;
		for (int num5 = num12; num5 >= num13; num5 -= num14)
		{
			Vector2 vector2 = rCurrentNPC.oldPos[num5] - rCurrentNPC.position;
			float num6 = Utils.Remap(num5, 0f, num11, 1f, 0f);
			float num7 = 1f - num6;
			Vector2 spinningpoint = new Vector2((float)Math.Sin((double)((float)rCurrentNPC.whoAmI / 17f) + timeForVisualEffects / (double)num2 + (double)(num6 * 2f * ((float)Math.PI * 2f))) * num16, 0f - num15) * num7;
			Vector2 val = vector2;
			double radians = num4;
			center = default(Vector2);
			vector2 = val + spinningpoint.RotatedBy(radians, center);
			Color color3 = hslToRgb((num10 + num7 * num3) % 1f, 1f, 0.5f);
			((Color)(ref color3)).A = 0;
			mySpriteBatch.Draw(value, vector + vector2, (Rectangle?)value2, color3 * num6 * 0.16f, rotation, origin, scale * Utils.Remap(num6 * num6, 0f, 1f, 0f, 2.5f), npcSpriteEffect, 0f);
		}
		mySpriteBatch.Draw(value, vector, (Rectangle?)value2, color2, rotation, origin, scale, npcSpriteEffect, 0f);
		Rectangle value3 = value.Frame(horizontalFrames, num, 1, rCurrentNPC.frame.Y);
		Color white = Color.White;
		((Color)(ref white)).A = (byte)(((Color)(ref white)).A / 2);
		mySpriteBatch.Draw(value, vector, (Rectangle?)value3, white, rotation, origin, scale, npcSpriteEffect, 0f);
		mySpriteBatch.Draw(value, vector, (Rectangle?)rectangle, color, rotation, origin, scale, npcSpriteEffect, 0f);
		float num8 = MathHelper.Clamp((float)Math.Sin(timeForVisualEffects / 60.0) * 0.3f + 0.3f, 0f, 1f);
		float num9 = 0.8f + (float)Math.Sin(timeForVisualEffects / 15.0 * 6.2831854820251465) * 0.3f;
		Rectangle value4 = value.Frame(horizontalFrames, num, 3, rCurrentNPC.whoAmI % num);
		Color color4 = Color.Lerp(color, new Color(255, 255, 255, 0), 0.5f) * num8;
		mySpriteBatch.Draw(value, vector, (Rectangle?)value4, color4, rotation, origin, scale * num9, (SpriteEffects)0, 0f);
		Rectangle value5 = value.Frame(horizontalFrames, num, 3, 1);
		Color color5 = Color.Lerp(color, new Color(255, 255, 255, 0), 0.5f) * num8;
		mySpriteBatch.Draw(value, vector, (Rectangle?)value5, color5, rotation, origin, scale * num9, (SpriteEffects)0, 0f);
	}

	private static void DrawNPCDirect_HallowBoss(SpriteBatch mySpriteBatch, NPC rCurrentNPC, ref Vector2 screenPos, int typeCache, ref Color npcColor, ref Vector2 halfSize, SpriteEffects npcSpriteEffect)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_029f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0724: Unknown result type (might be due to invalid IL or missing references)
		//IL_0728: Unknown result type (might be due to invalid IL or missing references)
		//IL_072d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0732: Unknown result type (might be due to invalid IL or missing references)
		//IL_0733: Unknown result type (might be due to invalid IL or missing references)
		//IL_073a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0742: Unknown result type (might be due to invalid IL or missing references)
		//IL_0744: Unknown result type (might be due to invalid IL or missing references)
		//IL_074e: Unknown result type (might be due to invalid IL or missing references)
		//IL_075f: Unknown result type (might be due to invalid IL or missing references)
		//IL_079e: Unknown result type (might be due to invalid IL or missing references)
		//IL_079f: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0790: Unknown result type (might be due to invalid IL or missing references)
		//IL_088c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0891: Unknown result type (might be due to invalid IL or missing references)
		//IL_089b: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0839: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_090f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0914: Unknown result type (might be due to invalid IL or missing references)
		//IL_0919: Unknown result type (might be due to invalid IL or missing references)
		//IL_091a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0921: Unknown result type (might be due to invalid IL or missing references)
		//IL_092b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0936: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_0389: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_041b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0453: Unknown result type (might be due to invalid IL or missing references)
		//IL_0455: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0951: Unknown result type (might be due to invalid IL or missing references)
		//IL_0967: Unknown result type (might be due to invalid IL or missing references)
		//IL_096d: Unknown result type (might be due to invalid IL or missing references)
		//IL_096f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0985: Unknown result type (might be due to invalid IL or missing references)
		//IL_098a: Unknown result type (might be due to invalid IL or missing references)
		//IL_098f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0990: Unknown result type (might be due to invalid IL or missing references)
		//IL_0992: Unknown result type (might be due to invalid IL or missing references)
		//IL_0997: Unknown result type (might be due to invalid IL or missing references)
		//IL_099e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a93: Unknown result type (might be due to invalid IL or missing references)
		//IL_059e: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05af: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05db: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0609: Unknown result type (might be due to invalid IL or missing references)
		//IL_04db: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0500: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0adb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0678: Unknown result type (might be due to invalid IL or missing references)
		//IL_067b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0685: Unknown result type (might be due to invalid IL or missing references)
		//IL_068f: Unknown result type (might be due to invalid IL or missing references)
		//IL_069a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0642: Unknown result type (might be due to invalid IL or missing references)
		//IL_0647: Unknown result type (might be due to invalid IL or missing references)
		//IL_064c: Unknown result type (might be due to invalid IL or missing references)
		//IL_064e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0655: Unknown result type (might be due to invalid IL or missing references)
		//IL_065f: Unknown result type (might be due to invalid IL or missing references)
		//IL_066a: Unknown result type (might be due to invalid IL or missing references)
		//IL_055d: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_0577: Unknown result type (might be due to invalid IL or missing references)
		//IL_057e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0583: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_058a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_0599: Unknown result type (might be due to invalid IL or missing references)
		//IL_0502: Unknown result type (might be due to invalid IL or missing references)
		//IL_050c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0513: Unknown result type (might be due to invalid IL or missing references)
		//IL_051a: Unknown result type (might be due to invalid IL or missing references)
		//IL_051f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b08: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fb: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Npc[typeCache].Value;
		Vector2 vector = rCurrentNPC.Center - screenPos;
		bool flag = rCurrentNPC.AI_120_HallowBoss_IsInPhase2();
		int num = (int)rCurrentNPC.ai[0];
		Texture2D value4 = TextureAssets.Extra[159].Value;
		Rectangle rectangle = value4.Frame(1, 11, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 11);
		Color color = rCurrentNPC.GetAlpha(npcColor);
		Texture2D value5 = TextureAssets.Extra[158].Value;
		Texture2D value6 = TextureAssets.Extra[160].Value;
		Texture2D value7 = TextureAssets.Extra[157].Value;
		DrawNPCDirect_GetHallowBossArmFrame(rCurrentNPC, out var armFrame_Count, out var armFrameToUseLeft, out var armFrameToUseRight);
		Rectangle rectangle2 = value5.Frame(1, armFrame_Count, 0, armFrameToUseLeft);
		Rectangle rectangle3 = value6.Frame(1, armFrame_Count, 0, armFrameToUseRight);
		Vector2 origin = rectangle2.Size() / 2f;
		Vector2 origin2 = rectangle3.Size() / 2f;
		int num9 = 0;
		int num10 = 0;
		if (armFrameToUseLeft == 5)
		{
			num9 = 1;
		}
		if (armFrameToUseRight == 5)
		{
			num10 = 1;
		}
		float num11 = 1f;
		int num12 = 0;
		int num13 = 0;
		float num14 = 0f;
		float num15 = 0f;
		float num16 = 0f;
		if (num == 8 || num == 9)
		{
			num14 = Utils.GetLerpValue(0f, 30f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(90f, 30f, rCurrentNPC.ai[1], clamped: true);
			num15 = Utils.GetLerpValue(0f, 30f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(90f, 70f, rCurrentNPC.ai[1], clamped: true);
			num16 = Utils.GetLerpValue(0f, 15f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(45f, 30f, rCurrentNPC.ai[1], clamped: true);
			color = Color.Lerp(color, Color.White, num14);
			num11 *= 1f - num16;
			num12 = 4;
			num13 = 3;
		}
		if (num == 10)
		{
			num14 = Utils.GetLerpValue(30f, 90f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(165f, 90f, rCurrentNPC.ai[1], clamped: true);
			num15 = Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(180f, 120f, rCurrentNPC.ai[1], clamped: true);
			num16 = Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(180f, 120f, rCurrentNPC.ai[1], clamped: true);
			color = Color.Lerp(color, Color.White, num14);
			num11 *= 1f - num16;
			num13 = 4;
		}
		if (num13 + num12 > 0)
		{
			for (int i = -num13; i <= num13 + num12; i++)
			{
				if (i == 0)
				{
					continue;
				}
				Color color2 = Color.White;
				Vector2 position = vector;
				if (num == 8 || num == 9)
				{
					float hue = ((float)i + 5f) / 10f;
					float num2 = 200f;
					float num3 = (float)timeForVisualEffects / 60f;
					Matrix val = Matrix.CreateRotationX((num3 - 0.3f + (float)i * 0.1f) * 0.7f * ((float)Math.PI * 2f)) * Matrix.CreateRotationY((num3 - 0.8f + (float)i * 0.3f) * 0.7f * ((float)Math.PI * 2f)) * Matrix.CreateRotationZ((num3 + (float)i * 0.5f) * 0.1f * ((float)Math.PI * 2f));
					Vector3 vector2 = Vector3.Transform(Vector3.Forward, val);
					num2 += Utils.GetLerpValue(-1f, 1f, vector2.Z, clamped: true) * 150f;
					Vector2 spinningpoint = new Vector2(vector2.X, vector2.Y) * num2 * num14;
					float lerpValue = Utils.GetLerpValue(90f, 0f, rCurrentNPC.ai[1], clamped: true);
					color2 = hslToRgb(hue, 1f, MathHelper.Lerp(0.5f, 1f, lerpValue)) * 0.8f * num15;
					((Color)(ref color2)).A = (byte)(((Color)(ref color2)).A / 3);
					position += spinningpoint.RotatedBy(rCurrentNPC.ai[1] / 180f * ((float)Math.PI * 2f));
				}
				if (num == 10)
				{
					if (rCurrentNPC.ai[1] >= 90f)
					{
						float num4 = (float)timeForVisualEffects / 90f;
						int num5 = i;
						if (num5 < 0)
						{
							num5++;
						}
						Vector2 vector3 = (((float)num5 + 0.5f) * ((float)Math.PI / 4f) + (float)Math.PI * 2f * num4).ToRotationVector2();
						position += vector3 * new Vector2(600f * num14, 150f * num14);
					}
					else
					{
						position += 200f * new Vector2((float)i, 0f) * num14;
					}
					color2 = Color.White * 0.8f * num15 * num11;
					((Color)(ref color2)).A = (byte)(((Color)(ref color2)).A / 3);
				}
				if (i > num13)
				{
					float lerpValue2 = Utils.GetLerpValue(30f, 70f, rCurrentNPC.ai[1], clamped: true);
					if (lerpValue2 == 0f)
					{
						continue;
					}
					position = vector + rCurrentNPC.velocity * -3f * ((float)i - 4f) * lerpValue2;
					color2 *= 1f - num16;
				}
				mySpriteBatch.Draw(value4, position, (Rectangle?)rectangle, color2, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
				mySpriteBatch.Draw(value7, position, (Rectangle?)rectangle, color2, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
				if (flag)
				{
					Texture2D value8 = TextureAssets.Extra[187].Value;
					Rectangle value9 = value8.Frame(1, 8, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 8);
					mySpriteBatch.Draw(value8, position, (Rectangle?)value9, color2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
				mySpriteBatch.Draw(value, position, (Rectangle?)rCurrentNPC.frame, color2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
				for (int j = 0; j < 2; j++)
				{
					if (j == num9)
					{
						mySpriteBatch.Draw(value5, position, (Rectangle?)rectangle2, color2, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect, 0f);
					}
					if (j == num10)
					{
						mySpriteBatch.Draw(value6, position, (Rectangle?)rectangle3, color2, rCurrentNPC.rotation, origin2, rCurrentNPC.scale, npcSpriteEffect, 0f);
					}
				}
			}
		}
		color *= num11;
		mySpriteBatch.Draw(value4, vector, (Rectangle?)rectangle, color, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
		if (!rCurrentNPC.IsABestiaryIconDummy)
		{
			mySpriteBatch.End();
			mySpriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, (Effect)null, Transform);
		}
		DrawData value10 = new DrawData(value7, vector, rectangle, color, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect);
		GameShaders.Misc["HallowBoss"].Apply(value10);
		value10.Draw(mySpriteBatch);
		pixelShader.CurrentTechnique.Passes[0].Apply();
		if (!rCurrentNPC.IsABestiaryIconDummy)
		{
			mySpriteBatch.End();
			mySpriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		}
		float num6 = (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.5f) * 0.5f + 0.5f;
		Color color3 = hslToRgb((num6 * 0.08f + 0.6f) % 1f, 1f, 0.5f);
		((Color)(ref color3)).A = 0;
		color3 *= 0.6f;
		if (NPC.ShouldEmpressBeEnraged())
		{
			color3 = OurFavoriteColor;
			((Color)(ref color3)).A = 0;
			color3 *= 0.3f;
		}
		color3 *= num11 * rCurrentNPC.Opacity;
		if (flag)
		{
			Texture2D value11 = TextureAssets.Extra[187].Value;
			Rectangle value2 = value11.Frame(1, 8, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 8);
			mySpriteBatch.Draw(value11, vector, (Rectangle?)value2, color, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
			for (float num7 = 0f; num7 < 1f; num7 += 0.25f)
			{
				Vector2 vector4 = rCurrentNPC.rotation.ToRotationVector2().RotatedBy(num7 * ((float)Math.PI * 2f) + (float)Math.PI / 4f) * MathHelper.Lerp(2f, 8f, num6);
				mySpriteBatch.Draw(value11, vector + vector4, (Rectangle?)value2, color3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
			}
		}
		mySpriteBatch.Draw(value, vector, (Rectangle?)rCurrentNPC.frame, color, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
		if (flag)
		{
			Texture2D value3 = TextureAssets.Extra[188].Value;
			for (float num8 = 0f; num8 < 1f; num8 += 0.25f)
			{
				Vector2 vector5 = rCurrentNPC.rotation.ToRotationVector2().RotatedBy(num8 * ((float)Math.PI * 2f) + (float)Math.PI / 4f) * MathHelper.Lerp(2f, 8f, num6);
				mySpriteBatch.Draw(value3, vector + vector5, (Rectangle?)null, color3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
			}
		}
		for (int k = 0; k < 2; k++)
		{
			if (k == num9)
			{
				mySpriteBatch.Draw(value5, vector, (Rectangle?)rectangle2, color, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect, 0f);
			}
			if (k == num10)
			{
				mySpriteBatch.Draw(value6, vector, (Rectangle?)rectangle3, color, rCurrentNPC.rotation, origin2, rCurrentNPC.scale, npcSpriteEffect, 0f);
			}
		}
	}

	private static void DrawNPCDirect_GetHallowBossArmFrame(NPC rCurrentNPC, out int armFrame_Count, out int armFrameToUseLeft, out int armFrameToUseRight)
	{
		int num = 0;
		int num11 = 1;
		int num12 = 2;
		int num13 = 3;
		int num14 = 4;
		int num15 = 5;
		int num16 = 6;
		armFrame_Count = 7;
		armFrameToUseLeft = num;
		armFrameToUseRight = num;
		float num17 = rCurrentNPC.ai[1];
		int num18 = num;
		switch ((int)rCurrentNPC.ai[0])
		{
		case 6:
			armFrameToUseRight = (armFrameToUseLeft = ((num17 < 6f) ? num12 : ((num17 < 174f) ? num13 : ((!(num17 < 180f)) ? num : num12))));
			break;
		case 0:
			armFrameToUseRight = (armFrameToUseLeft = ((num17 < 106f) ? num11 : ((!(num17 < 110f)) ? num : num12)));
			break;
		case 2:
		case 11:
			num18 = ((num17 < 5f) ? num12 : ((!(num17 < 65f)) ? num12 : num13));
			armFrameToUseLeft = num18;
			break;
		case 5:
			num18 = ((num17 < 6f) ? num12 : ((!(num17 < 54f)) ? num12 : num13));
			armFrameToUseRight = num18;
			break;
		case 4:
		case 10:
			armFrameToUseRight = (armFrameToUseLeft = ((num17 < 6f) ? num12 : ((!(num17 < 54f)) ? num12 : num13)));
			break;
		case 8:
		case 9:
		{
			num18 = ((num17 < 10f) ? num12 : ((num17 < 20f) ? num13 : ((!(num17 < 30f)) ? num15 : num12)));
			int num5 = num18;
			int num6 = num18;
			int num7 = (int)rCurrentNPC.ai[3];
			int num8 = -1;
			if (num17 < 30f)
			{
				if (num7 == -1 * num8)
				{
					num6 = num11;
				}
				if (num7 == num8)
				{
					num5 = num11;
				}
			}
			int num9 = num15;
			int num10 = num16;
			if (num7 == num8 && num6 == num9)
			{
				num6 = num10;
			}
			if (num7 == -1 * num8 && num5 == num9)
			{
				num5 = num10;
			}
			armFrameToUseLeft = num6;
			armFrameToUseRight = num5;
			break;
		}
		case 7:
		{
			bool isExpertMode = GameModeInfo.IsExpertMode;
			int num2 = (isExpertMode ? 40 : 60);
			int num3 = 0;
			int num4 = 5;
			if (num17 < (float)(num3 + num4))
			{
				armFrameToUseLeft = num12;
				break;
			}
			num3 += num4;
			if (num17 < (float)(num3 + num2 - num4))
			{
				armFrameToUseLeft = num13;
				break;
			}
			num3 += num2 - num4;
			if (num17 < (float)(num3 + num4))
			{
				armFrameToUseLeft = num13;
				armFrameToUseRight = num12;
				break;
			}
			num3 += num4;
			if (num17 < (float)(num3 + num2 - num4))
			{
				armFrameToUseLeft = num13;
				armFrameToUseRight = num13;
				break;
			}
			num3 += num2 - num4;
			if (num17 < (float)(num3 + num2))
			{
				armFrameToUseLeft = num14;
				armFrameToUseRight = num13;
				break;
			}
			num3 += num2;
			if (num17 < (float)(num3 + num2))
			{
				armFrameToUseLeft = num14;
				armFrameToUseRight = num14;
				break;
			}
			num3 += num2;
			if (isExpertMode)
			{
				if (num17 < (float)(num3 + num4))
				{
					armFrameToUseLeft = num13;
					armFrameToUseRight = num14;
					break;
				}
				num3 += num4;
				if (num17 < (float)(num3 + num2 - num4))
				{
					armFrameToUseLeft = num11;
					armFrameToUseRight = num14;
					break;
				}
				num3 += num2 - num4;
				if (num17 < (float)(num3 + num4))
				{
					armFrameToUseLeft = num11;
					armFrameToUseRight = num13;
					break;
				}
				num3 += num4;
				if (num17 < (float)(num3 + num2 - num4))
				{
					armFrameToUseLeft = num11;
					armFrameToUseRight = num11;
					break;
				}
				num3 += num2 - num4;
			}
			if (num17 >= (float)num3)
			{
				armFrameToUseLeft = num12;
				armFrameToUseRight = num12;
			}
			break;
		}
		case 1:
		case 3:
			break;
		}
	}

	private static void DrawNPC_SlimeItem(NPC rCurrentNPC, int typeCache, Color npcColor, float addedRotation)
	{
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		int num19 = (int)rCurrentNPC.ai[1];
		float num12 = 1f;
		float num13 = 22f * rCurrentNPC.scale;
		float num14 = 18f * rCurrentNPC.scale;
		GetItemDrawFrame(num19, out var itemTexture, out var rectangle);
		float num15 = rectangle.Width;
		float num16 = rectangle.Height;
		bool num20 = (int)rCurrentNPC.ai[0] == -999;
		if (num20)
		{
			num13 = 14f * rCurrentNPC.scale;
			num14 = 14f * rCurrentNPC.scale;
		}
		if (num15 > num13)
		{
			num12 *= num13 / num15;
			num15 *= num12;
			num16 *= num12;
		}
		if (num16 > num14)
		{
			num12 *= num14 / num16;
			num15 *= num12;
			num16 *= num12;
		}
		float num17 = -1f;
		float num18 = 1f;
		int num10 = rCurrentNPC.frame.Y / (TextureAssets.Npc[typeCache].Height() / npcFrameCount[typeCache]);
		num18 -= (float)num10;
		num17 += (float)(num10 * 2);
		float num11 = 0.2f;
		num11 -= 0.3f * (float)num10;
		if (num20)
		{
			num11 = 0f;
			num18 -= 6f;
			num17 -= num15 * addedRotation;
		}
		if (num19 == 75)
		{
			((Color)(ref npcColor))._002Ector(255, 255, 255, 0);
			num11 *= 0.3f;
			num18 -= 2f;
		}
		npcColor = rCurrentNPC.GetShimmerColor(npcColor);
		spriteBatch.Draw(itemTexture, new Vector2(rCurrentNPC.Center.X - screenPosition.X + num17, rCurrentNPC.Center.Y - screenPosition.Y + rCurrentNPC.gfxOffY + num18), (Rectangle?)rectangle, npcColor, num11, rectangle.Size() / 2f, num12, (SpriteEffects)0, 0f);
	}

	/// <summary>
	/// Gets the texture and frame of the given item type (<see cref="F:Terraria.Item.type" />).
	/// </summary>
	/// <param name="item">The item type to use.</param>
	/// <param name="itemTexture">The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> in <see cref="F:Terraria.GameContent.TextureAssets.Item" /> of <paramref name="item" />.</param>
	/// <param name="itemFrame">The <see cref="T:Microsoft.Xna.Framework.Rectangle" /> covering this item's current frame on <paramref name="itemTexture" />.</param>
	public static void GetItemDrawFrame(int item, out Texture2D itemTexture, out Rectangle itemFrame)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		instance.LoadItem(item);
		itemTexture = TextureAssets.Item[item].Value;
		if (itemAnimations[item] != null)
		{
			itemFrame = itemAnimations[item].GetFrame(itemTexture);
		}
		else
		{
			itemFrame = itemTexture.Frame();
		}
	}

	protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect, Vector2 screenPosition)
	{
		//IL_0688: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0712: Unknown result type (might be due to invalid IL or missing references)
		//IL_072d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0733: Unknown result type (might be due to invalid IL or missing references)
		//IL_073e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0740: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0753: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e35: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e52: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12db: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1300: Unknown result type (might be due to invalid IL or missing references)
		//IL_1302: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_131a: Unknown result type (might be due to invalid IL or missing references)
		//IL_131f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1324: Unknown result type (might be due to invalid IL or missing references)
		//IL_132d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1334: Unknown result type (might be due to invalid IL or missing references)
		//IL_133e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1345: Unknown result type (might be due to invalid IL or missing references)
		//IL_134f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1354: Unknown result type (might be due to invalid IL or missing references)
		//IL_135c: Unknown result type (might be due to invalid IL or missing references)
		//IL_135e: Unknown result type (might be due to invalid IL or missing references)
		//IL_136a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1372: Unknown result type (might be due to invalid IL or missing references)
		//IL_1375: Unknown result type (might be due to invalid IL or missing references)
		//IL_111a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1126: Unknown result type (might be due to invalid IL or missing references)
		//IL_1008: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1012: Unknown result type (might be due to invalid IL or missing references)
		//IL_101b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1022: Unknown result type (might be due to invalid IL or missing references)
		//IL_102c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1033: Unknown result type (might be due to invalid IL or missing references)
		//IL_103d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1042: Unknown result type (might be due to invalid IL or missing references)
		//IL_104a: Unknown result type (might be due to invalid IL or missing references)
		//IL_104c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1058: Unknown result type (might be due to invalid IL or missing references)
		//IL_1060: Unknown result type (might be due to invalid IL or missing references)
		//IL_1063: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_113f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1145: Unknown result type (might be due to invalid IL or missing references)
		//IL_13da: Unknown result type (might be due to invalid IL or missing references)
		//IL_13df: Unknown result type (might be due to invalid IL or missing references)
		//IL_1185: Unknown result type (might be due to invalid IL or missing references)
		//IL_1199: Unknown result type (might be due to invalid IL or missing references)
		//IL_119e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0413: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_042c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_0985: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_140b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11be: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1216: Unknown result type (might be due to invalid IL or missing references)
		//IL_1220: Unknown result type (might be due to invalid IL or missing references)
		//IL_1225: Unknown result type (might be due to invalid IL or missing references)
		//IL_122a: Unknown result type (might be due to invalid IL or missing references)
		//IL_122c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1233: Unknown result type (might be due to invalid IL or missing references)
		//IL_1238: Unknown result type (might be due to invalid IL or missing references)
		//IL_123d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1245: Unknown result type (might be due to invalid IL or missing references)
		//IL_126b: Unknown result type (might be due to invalid IL or missing references)
		//IL_127b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1285: Unknown result type (might be due to invalid IL or missing references)
		//IL_128a: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1495: Unknown result type (might be due to invalid IL or missing references)
		//IL_149a: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0602: Unknown result type (might be due to invalid IL or missing references)
		//IL_060a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0611: Unknown result type (might be due to invalid IL or missing references)
		//IL_0619: Unknown result type (might be due to invalid IL or missing references)
		//IL_061e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0625: Unknown result type (might be due to invalid IL or missing references)
		//IL_062d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0634: Unknown result type (might be due to invalid IL or missing references)
		//IL_063e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1509: Unknown result type (might be due to invalid IL or missing references)
		//IL_150b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1510: Unknown result type (might be due to invalid IL or missing references)
		//IL_1518: Unknown result type (might be due to invalid IL or missing references)
		//IL_151a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1520: Unknown result type (might be due to invalid IL or missing references)
		//IL_1527: Unknown result type (might be due to invalid IL or missing references)
		//IL_152f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1532: Unknown result type (might be due to invalid IL or missing references)
		if (!beforeDraw && n.UsesPartyHat())
		{
			int num = n.frame.Y / n.frame.Height;
			int[] array = NPCID.Sets.TownNPCsFramingGroups[NPCID.Sets.NPCFramingGroup[n.type]];
			if (num >= array.Length)
			{
				num = 0;
			}
			Texture2D value = TextureAssets.Extra[72].Value;
			int num11 = 0;
			switch (n.GetPartyHatColor())
			{
			case PartyHatColor.Pink:
				num11 = 16;
				break;
			case PartyHatColor.Cyan:
				num11 = 17;
				break;
			case PartyHatColor.Purple:
				num11 = 18;
				break;
			case PartyHatColor.White:
				num11 = 19;
				break;
			}
			Rectangle rectangle = value.Frame(20, 1, num11 % 20);
			rectangle.Width -= 2;
			rectangle.Height -= 2;
			int num15 = 0;
			int num16 = 0;
			int num17 = n.spriteDirection;
			if (n.type == 663)
			{
				num15 = 1;
			}
			if (n.type == 637)
			{
				num15 = 6;
				switch (num)
				{
				case 19:
				case 22:
				case 23:
				case 24:
				case 25:
				case 26:
				case 27:
					num15 -= 2;
					break;
				case 11:
				case 12:
				case 13:
				case 14:
				case 15:
					num15 += 2;
					break;
				}
			}
			if (n.type == 638)
			{
				num15 = 12;
			}
			if (n.type == 656)
			{
				num15 = 6;
				switch (num)
				{
				case 1:
				case 2:
				case 3:
					num15 -= 2;
					break;
				case 18:
				case 19:
				case 20:
				case 21:
				case 22:
				case 23:
				case 24:
				case 25:
					num15 -= 4;
					break;
				case 8:
					num15 -= 2;
					break;
				}
			}
			if (NPCID.Sets.IsTownSlime[n.type])
			{
				num17 *= -1;
				switch (n.type)
				{
				default:
					num15 = 1;
					break;
				case 670:
					num15 = -1;
					break;
				case 681:
					num15 = -2;
					break;
				case 682:
					num15 = -1;
					num16 = 2;
					break;
				case 683:
					num15 = -1;
					num16 = -2;
					break;
				case 684:
					num15 = -4;
					break;
				case 679:
					break;
				}
			}
			if (n.IsShimmerVariant)
			{
				switch (n.type)
				{
				case 38:
					num15 += 2;
					num16 = -2;
					break;
				case 178:
				case 228:
					num15 = -4;
					num16 = -4;
					break;
				case 107:
					num15 = 2;
					num16 = -6;
					break;
				case 54:
					num16 = -6;
					break;
				case 160:
					num16 = -2;
					break;
				case 108:
				case 124:
				case 208:
				case 209:
				case 227:
					num16 = -4;
					break;
				}
			}
			Vector2 vector = n.Top + new Vector2((float)(-2 * num17), n.gfxOffY);
			vector.X += num15 * num17;
			vector.Y += array[num];
			vector.Y += num16;
			vector.Y += NPCID.Sets.HatOffsetY[n.type];
			int num18 = 0;
			if (n.ai[0] == 5f)
			{
				num18 = -4;
				if (n.type == 38)
				{
					num18 = -8;
				}
				if (n.type == 124)
				{
					num18 = -2;
				}
				if (n.type == 550)
				{
					num18 = -4;
				}
				if (n.type == 588)
				{
					num18 = -4;
				}
				if (n.type == 108 || n.type == 178)
				{
					num18 = -6;
				}
				if (n.type == 637)
				{
					num18 = -12;
				}
				if (n.type == 663)
				{
					num18 = -8;
				}
			}
			vector.Y += num18;
			if (n.type == 229 && n.ai[0] == 12f)
			{
				vector.X -= num17 * 4;
			}
			if (n.type == 550 && n.ai[0] == 5f)
			{
				vector.X += num17 * 7;
			}
			Vector2 origin = rectangle.Size() - new Vector2((float)(rectangle.Width / 2), 12f);
			int num19 = 0;
			switch (n.type)
			{
			case 550:
				num19 = -4;
				break;
			case 588:
				num19 = 0;
				break;
			case 227:
				num19 = -4;
				break;
			case 228:
				num19 = -2;
				break;
			case 17:
			case 18:
			case 19:
			case 20:
			case 22:
			case 124:
			case 229:
			case 353:
			case 633:
			case 637:
			case 638:
			case 656:
			case 670:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 683:
			case 684:
				num19 = -1;
				break;
			case 37:
			case 38:
			case 54:
			case 107:
			case 108:
			case 160:
			case 207:
			case 209:
				num19 = -3;
				break;
			case 178:
			case 208:
			case 369:
				num19 = 1;
				break;
			}
			vector.X += num19 * num17;
			vector.X += 4 * num17;
			SpriteEffects spriteEffects = npcSpriteEffect;
			if (NPCID.Sets.IsTownSlime[n.type])
			{
				spriteEffects = (SpriteEffects)(spriteEffects ^ 1);
			}
			float num20 = 1f;
			if (n.shimmerTransparency > 0f)
			{
				num20 *= 1f - n.shimmerTransparency;
			}
			spriteBatch.Draw(value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)rectangle, npcColor * n.Opacity * num20, 0f, origin, n.scale, spriteEffects, 0f);
		}
		if (!beforeDraw && n.type == 681)
		{
			spriteBatch.Draw(TextureAssets.Extra[250].Value, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)TextureAssets.Npc[n.type].Width() * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)TextureAssets.Npc[n.type].Height() * n.scale / (float)npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), (Rectangle?)n.frame, n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
		}
		if (NPCID.Sets.AttackType[n.type] == 1 && n.ai[0] == 12f && !beforeDraw)
		{
			if (n.type == 228 || n.type == 229 || n.type == 209)
			{
				return;
			}
			float num21 = n.ai[2];
			Vector2 vector4 = OffsetsNPCOffhand[2];
			if (n.spriteDirection == 1)
			{
				vector4.X *= -1f;
			}
			Vector2 vector5 = n.Bottom - vector4;
			if (n.type == 22 && n.ai[2] > -0.1f)
			{
				vector5.Y += 4f;
			}
			if (n.type == 368 && hardMode && n.ai[2] > -0.1f)
			{
				vector5.Y += 4f;
			}
			if (n.type == 368 && !hardMode && n.ai[2] < -0.1f)
			{
				vector5.Y -= 8f;
			}
			float rotation = num21 * ((float)Math.PI / 2f) * (float)n.spriteDirection;
			float num2 = 1f;
			int itemtype = 0;
			int num3 = 4;
			if (n.type == 19)
			{
				itemtype = (hardMode ? 98 : 95);
				if (hardMode)
				{
					vector5.X -= 10 * n.direction;
					vector5.Y += 4f;
				}
			}
			else if (n.type == 22)
			{
				itemtype = 39;
				num3 = 18;
			}
			else if (n.type == 178)
			{
				itemtype = 434;
			}
			else if (n.type == 227)
			{
				itemtype = 3350;
				num3 = 16;
				num2 = 0.85f;
			}
			else if (n.type == 368)
			{
				itemtype = (hardMode ? 2223 : 2269);
				if (hardMode)
				{
					num3 = 18;
				}
				else
				{
					if (n.ai[2] < -0.1f)
					{
						num3 = 28;
					}
					num2 = 0.75f;
				}
			}
			Vector2 val = DrawPlayerItemPos(1f, itemtype);
			GetItemDrawFrame(itemtype, out var itemTexture, out var value2);
			int num4 = (int)val.X - num3;
			NPCLoader.DrawTownAttackGun(n, ref itemTexture, ref value2, ref num2, ref num4);
			Vector2 origin2 = default(Vector2);
			((Vector2)(ref origin2))._002Ector((float)(-num4), (float)(value2.Height / 2));
			if (n.spriteDirection == -1)
			{
				((Vector2)(ref origin2))._002Ector((float)(value2.Width + num4), (float)(value2.Height / 2));
			}
			spriteBatch.Draw(itemTexture, new Vector2((float)(int)(vector5.X - screenPosition.X), (float)(int)(vector5.Y - screenPosition.Y)), (Rectangle?)value2, npcColor, rotation, origin2, n.scale * num2, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
			if (n.type == 22 && n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) >= 21)
			{
				Texture2D value3 = TextureAssets.Extra[52].Value;
				if (n.IsShimmerVariant)
				{
					value3 = TextureAssets.Extra[264].Value;
				}
				Rectangle value4 = value3.Frame(1, 5, 0, n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) - 21);
				spriteBatch.Draw(value3, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)TextureAssets.Npc[n.type].Width() * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)TextureAssets.Npc[n.type].Height() * n.scale / (float)npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), (Rectangle?)value4, n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
			}
			else if (n.type == 368 && n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) >= 21)
			{
				Texture2D value5 = TextureAssets.Extra[53].Value;
				if (n.IsShimmerVariant)
				{
					value5 = TextureAssets.Extra[265].Value;
				}
				Rectangle value6 = value5.Frame(1, 5, 0, n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) - 21);
				spriteBatch.Draw(value5, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)TextureAssets.Npc[n.type].Width() * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)TextureAssets.Npc[n.type].Height() * n.scale / (float)npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), (Rectangle?)value6, n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
			}
		}
		if (NPCID.Sets.AttackType[n.type] == 2 && (n.ai[0] == 14f || (n.ai[0] == 24f && n.frameCounter < 240.0)) && !beforeDraw)
		{
			Texture2D value7 = TextureAssets.Extra[51].Value;
			Vector2 vector6 = n.Bottom + new Vector2(0f, n.gfxOffY + 4f);
			Rectangle rectangle2 = value7.Frame(1, 4, 0, (int)n.frameCounter % 48 / 12);
			Vector2 origin3 = rectangle2.Size() * new Vector2(0.5f, 1f);
			spriteBatch.Draw(value7, new Vector2((float)(int)(vector6.X - screenPosition.X), (float)(int)(vector6.Y - screenPosition.Y)), (Rectangle?)rectangle2, n.GetMagicAuraColor(), 0f, origin3, n.scale, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
		}
		if (NPCID.Sets.AttackType[n.type] == 3 && n.ai[0] == 15f)
		{
			int num5 = 32;
			float num6 = 0f;
			Vector2 zero = Vector2.Zero;
			short num7 = 4;
			if (n.type == 207)
			{
				num7 = 3349;
				num6 = 0.15f;
				if (beforeDraw)
				{
					return;
				}
				if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
				{
					zero.Y = 12f;
				}
			}
			else if (n.type == 353)
			{
				num7 = 3352;
				num6 = 0.15f;
				if (!beforeDraw)
				{
					return;
				}
				if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
				{
					zero.Y = 12f;
				}
			}
			else if (n.type == 441)
			{
				num7 = 3351;
				num5 = 28;
				num6 = 0.1f;
				if (!beforeDraw)
				{
					return;
				}
				if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
				{
					zero.Y = 12f;
				}
			}
			GetItemDrawFrame(num7, out var itemTexture2, out var rectangle3);
			NPCLoader.DrawTownAttackSwing(n, ref itemTexture2, ref rectangle3, ref num5, ref num6, ref zero);
			Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num5, num5);
			Vector2 vector7 = swingStats.Item1 + (swingStats.Item1 - n.Center) * num6 + zero;
			Vector2 origin4 = rectangle3.Size() * new Vector2((float)((n.spriteDirection != 1) ? 1 : 0), 1f);
			spriteBatch.Draw(itemTexture2, new Vector2((float)(int)(vector7.X - screenPosition.X), (float)(int)(vector7.Y - screenPosition.Y)), (Rectangle?)rectangle3, n.GetAlpha(npcColor), swingStats.Item2, origin4, n.scale, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
		}
		if (n.type == 550 && n.ai[0] == 18f)
		{
			if (beforeDraw)
			{
				return;
			}
			instance.LoadItem(353);
			Texture2D value8 = TextureAssets.Item[353].Value;
			int num8 = 32;
			float num9 = 0.15f;
			Vector2 zero2 = Vector2.Zero;
			Rectangle rectangle4 = value8.Frame(1, 3, 0, 1);
			int num10 = (int)n.ai[2];
			if (num10 >= 0 && num10 < 255)
			{
				Player player = Main.player[num10];
				bool flag = player.HeldItem.type == 353 && player.direction == Math.Sign(n.Center.X - player.Center.X);
				float num22 = player.Hitbox.Distance(n.Center);
				float num12 = n.localAI[3];
				if (num22 < 46f && flag)
				{
					n.localAI[3] = 1f;
					if (n.localAI[3] != num12)
					{
						Vector2 vector8 = n.Center + new Vector2((float)(n.spriteDirection * 30), -6f);
						Vector2 vector9 = default(Vector2);
						((Vector2)(ref vector9))._002Ector(10f, 10f);
						for (int i = 0; i < 30; i++)
						{
							Dust obj = Dust.NewDustDirect(vector8 - vector9 / 2f, (int)vector9.X, (int)vector9.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.7f);
							obj.noGravity = true;
							obj.velocity *= 1f;
							Dust obj2 = Dust.NewDustDirect(vector8 - vector9 / 2f, (int)vector9.X, (int)vector9.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.6f);
							obj2.velocity *= 2f;
						}
					}
				}
				else if (n.localAI[3] == 1f)
				{
					n.localAI[3] = 2f;
				}
			}
			Tuple<Vector2, float> swingStats2 = n.GetSwingStats(40, 12, n.spriteDirection, num8, num8);
			Vector2 vector10 = swingStats2.Item1 + (swingStats2.Item1 - n.Center) * num9 + zero2;
			Vector2 origin5 = rectangle4.Size() * new Vector2((float)((n.spriteDirection != 1) ? 1 : 0), 1f);
			spriteBatch.Draw(value8, new Vector2((float)(int)(vector10.X - screenPosition.X), (float)(int)(vector10.Y - screenPosition.Y)), (Rectangle?)rectangle4, n.GetAlpha(npcColor), swingStats2.Item2, origin5, n.scale, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
		}
		if (beforeDraw || n.ai[0] != 23f)
		{
			return;
		}
		int num13 = (int)n.ai[2];
		if (num13 <= 0 || num13 > ItemID.Count)
		{
			return;
		}
		GetItemDrawFrame(num13, out var itemTexture3, out var rectangle5);
		int num14 = 0;
		num14 = (((int)n.frameCounter < 6) ? 1 : 2);
		if (n.ai[1] < 6f)
		{
			num14 = 1;
		}
		if (num14 == 0)
		{
			return;
		}
		Vector2 vector2 = Vector2.Zero;
		if (num14 == 1)
		{
			((Vector2)(ref vector2))._002Ector(10f, 6f);
		}
		if (num14 == 2)
		{
			((Vector2)(ref vector2))._002Ector(16f, 0f);
		}
		if (!((Enum)npcSpriteEffect).HasFlag((Enum)(object)(SpriteEffects)1))
		{
			vector2.X *= -1f;
		}
		if (n.type == 369)
		{
			vector2.X *= 0.5f;
			vector2.Y += 4f;
		}
		if (n.type == 453)
		{
			vector2.Y += 8f;
		}
		if (n.type == 550)
		{
			if (num13 == 353)
			{
				rectangle5 = itemTexture3.Frame(1, 3, 0, 1);
			}
			vector2.Y += 6f;
		}
		Vector2 vector3 = n.Center + vector2;
		Vector2 origin6 = rectangle5.Size() * new Vector2((float)((n.spriteDirection != 1) ? 1 : 0), 1f);
		Vector2 position = default(Vector2);
		((Vector2)(ref position))._002Ector((float)(int)(vector3.X - screenPosition.X), (float)(int)(vector3.Y - screenPosition.Y));
		Color alpha = n.GetAlpha(npcColor);
		spriteBatch.Draw(itemTexture3, position, (Rectangle?)rectangle5, alpha, 0f, origin6, n.scale, (SpriteEffects)(npcSpriteEffect ^ 1), 0f);
	}

	private void DrawProj_LightsBane(Projectile proj)
	{
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_023d: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_026b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0295: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Expected O, but got Unknown
		spriteBatch.End();
		if (_multiplyBlendState == null)
		{
			_ = BlendState.AlphaBlend;
			_ = BlendState.Additive;
			_multiplyBlendState = new BlendState
			{
				ColorBlendFunction = (BlendFunction)2,
				ColorDestinationBlend = (Blend)0,
				ColorSourceBlend = (Blend)4,
				AlphaBlendFunction = (BlendFunction)2,
				AlphaDestinationBlend = (Blend)0,
				AlphaSourceBlend = (Blend)4
			};
		}
		BlendState multiplyBlendState = _multiplyBlendState;
		spriteBatch.Begin((SpriteSortMode)0, multiplyBlendState, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		Vector2 position = proj.Center - screenPosition;
		LoadProjectile(proj.type);
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Rectangle rectangle = asset.Frame(1, 13, 0, proj.frame);
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = new Vector2(0.7f, 0.7f) * proj.scale;
		float num = Utils.Remap(proj.frame, 0f, 3f, 0f, 1f) * Utils.Remap(proj.frame, 4f, 12f, 1f, 0f);
		Rectangle value = asset.Frame(1, 13, 0, 12);
		Vector2 origin = vector + new Vector2(0f, 0f);
		spriteBatch.Draw(asset.Value, position, (Rectangle?)value, Color.White * 0.3f * num, proj.rotation, origin, new Vector2(1f, 6f) * vector2, (SpriteEffects)0, 0f);
		spriteBatch.Draw(asset.Value, position, (Rectangle?)value, Color.White * 0.3f * num, proj.rotation, origin, new Vector2(2f, 2f) * vector2, (SpriteEffects)0, 0f);
		spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, Color.White, proj.rotation, vector, vector2, (SpriteEffects)0, 0f);
		spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, Color.White, proj.rotation, vector, vector2, (SpriteEffects)0, 0f);
		spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, Color.White, proj.rotation, vector, vector2, (SpriteEffects)0, 0f);
		spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, Color.White, proj.rotation, vector, vector2, (SpriteEffects)0, 0f);
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.Additive, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, Color.Magenta, proj.rotation, vector, vector2, (SpriteEffects)0, 0f);
		spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, Color.Magenta, proj.rotation, vector, vector2, (SpriteEffects)0, 0f);
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
	}

	private void DrawProj_NightsEdge(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_0273: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_029a: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02af: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_030d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_038c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Rectangle rectangle = asset.Frame(1, 4);
		Vector2 origin = rectangle.Size() / 2f;
		float num = proj.scale * 1.1f;
		SpriteEffects effects = (SpriteEffects)((!(proj.ai[0] >= 0f)) ? 2 : 0);
		float num2 = proj.localAI[0] / proj.ai[1];
		float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f);
		float num4 = 0.975f;
		Color color5 = Lighting.GetColor(proj.Center.ToTileCoordinates());
		Vector3 val = ((Color)(ref color5)).ToVector3();
		float fromValue = ((Vector3)(ref val)).Length() / (float)Math.Sqrt(3.0);
		fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f);
		Color color = default(Color);
		((Color)(ref color))._002Ector(40, 20, 60);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color * fromValue * num3, proj.rotation + proj.ai[0] * ((float)Math.PI / 4f) * -1f * (1f - num2), origin, num * num4, effects, 0f);
		Color color2 = default(Color);
		((Color)(ref color2))._002Ector(80, 40, 180);
		Color color3 = Color.White * num3 * 0.5f;
		((Color)(ref color3)).A = (byte)((float)(int)((Color)(ref color3)).A * (1f - fromValue));
		Color color4 = color3 * fromValue * 0.5f;
		((Color)(ref color4)).G = (byte)((float)(int)((Color)(ref color4)).G * fromValue);
		((Color)(ref color4)).R = (byte)((float)(int)((Color)(ref color4)).R * (0.25f + fromValue * 0.75f));
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color4 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, new Color(80, 30, 160) * fromValue * num3 * 0.3f, proj.rotation, origin, num * 0.8f, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color2 * fromValue * num3 * 0.7f, proj.rotation, origin, num * num4, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.3f * num3 * (1f - fromValue * 0.7f), proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		Vector2 drawpos = vector + (proj.rotation + Utils.Remap(num2, 0f, 1f, 0f, (float)Math.PI / 2f) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
		DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos, new Color(255, 255, 255, 0) * num3 * 0.5f, color2, num2, 0f, 0.5f, 0.5f, 1f, (float)Math.PI / 4f, new Vector2(2f, 2f), Vector2.One);
	}

	private void DrawProj_Excalibur(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0286: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02af: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0340: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_035b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0375: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_039d: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_0439: Unknown result type (might be due to invalid IL or missing references)
		//IL_043c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0454: Unknown result type (might be due to invalid IL or missing references)
		//IL_045b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0460: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_048a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0491: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_049d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04df: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_050b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0538: Unknown result type (might be due to invalid IL or missing references)
		//IL_0550: Unknown result type (might be due to invalid IL or missing references)
		//IL_0557: Unknown result type (might be due to invalid IL or missing references)
		//IL_055c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0561: Unknown result type (might be due to invalid IL or missing references)
		//IL_056a: Unknown result type (might be due to invalid IL or missing references)
		//IL_057c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0583: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0592: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Rectangle rectangle = asset.Frame(1, 4);
		Vector2 origin = rectangle.Size() / 2f;
		float num = proj.scale * 1.1f;
		SpriteEffects effects = (SpriteEffects)((!(proj.ai[0] >= 0f)) ? 2 : 0);
		float num2 = proj.localAI[0] / proj.ai[1];
		float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f);
		float num4 = 0.975f;
		Color color6 = Lighting.GetColor(proj.Center.ToTileCoordinates());
		Vector3 val = ((Color)(ref color6)).ToVector3();
		float fromValue = ((Vector3)(ref val)).Length() / (float)Math.Sqrt(3.0);
		fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f);
		Color color = default(Color);
		((Color)(ref color))._002Ector(180, 160, 60);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color * fromValue * num3, proj.rotation + proj.ai[0] * ((float)Math.PI / 4f) * -1f * (1f - num2), origin, num, effects, 0f);
		Color color2 = default(Color);
		((Color)(ref color2))._002Ector(255, 240, 150);
		Color color3 = default(Color);
		((Color)(ref color3))._002Ector(255, 255, 80);
		Color color4 = Color.White * num3 * 0.5f;
		((Color)(ref color4)).A = (byte)((float)(int)((Color)(ref color4)).A * (1f - fromValue));
		Color color5 = color4 * fromValue * 0.5f;
		((Color)(ref color5)).G = (byte)((float)(int)((Color)(ref color5)).G * fromValue);
		((Color)(ref color5)).B = (byte)((float)(int)((Color)(ref color5)).R * (0.25f + fromValue * 0.75f));
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color3 * fromValue * num3 * 0.3f, proj.rotation, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color2 * fromValue * num3 * 0.5f, proj.rotation, origin, num * num4, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.6f * num3, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.5f * num3, proj.rotation + proj.ai[0] * -0.05f, origin, num * 0.8f, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.4f * num3, proj.rotation + proj.ai[0] * -0.1f, origin, num * 0.6f, effects, 0f);
		for (float num5 = 0f; num5 < 8f; num5 += 1f)
		{
			float num6 = proj.rotation + proj.ai[0] * num5 * ((float)Math.PI * -2f) * 0.025f + Utils.Remap(num2, 0f, 1f, 0f, (float)Math.PI / 4f) * proj.ai[0];
			Vector2 drawpos = vector + num6.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * num;
			float num7 = num5 / 9f;
			DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos, new Color(255, 255, 255, 0) * num3 * num7, color3, num2, 0f, 0.5f, 0.5f, 1f, num6, new Vector2(0f, Utils.Remap(num2, 0f, 1f, 3f, 0f)) * num, Vector2.One * num);
		}
		Vector2 drawpos2 = vector + (proj.rotation + Utils.Remap(num2, 0f, 1f, 0f, (float)Math.PI / 4f) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
		DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos2, new Color(255, 255, 255, 0) * num3 * 0.5f, color3, num2, 0f, 0.5f, 0.5f, 1f, 0f, new Vector2(2f, Utils.Remap(num2, 0f, 1f, 4f, 1f)) * num, Vector2.One * num);
	}

	private void DrawProj_TheHorsemansBlade(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_027f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0339: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0377: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_0435: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0454: Unknown result type (might be due to invalid IL or missing references)
		//IL_0459: Unknown result type (might be due to invalid IL or missing references)
		//IL_045e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_0483: Unknown result type (might be due to invalid IL or missing references)
		//IL_048a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0491: Unknown result type (might be due to invalid IL or missing references)
		//IL_0496: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0504: Unknown result type (might be due to invalid IL or missing references)
		//IL_0531: Unknown result type (might be due to invalid IL or missing references)
		//IL_0549: Unknown result type (might be due to invalid IL or missing references)
		//IL_0550: Unknown result type (might be due to invalid IL or missing references)
		//IL_0555: Unknown result type (might be due to invalid IL or missing references)
		//IL_055a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0563: Unknown result type (might be due to invalid IL or missing references)
		//IL_0575: Unknown result type (might be due to invalid IL or missing references)
		//IL_057c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_058b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d7: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Rectangle rectangle = asset.Frame(1, 4);
		Vector2 origin = rectangle.Size() / 2f;
		float num = proj.scale * 1.1f;
		SpriteEffects effects = (SpriteEffects)((!(proj.ai[0] >= 0f)) ? 2 : 0);
		float num2 = proj.localAI[0] / proj.ai[1];
		float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f);
		float num4 = 0.975f;
		Color color6 = Lighting.GetColor(proj.Center.ToTileCoordinates());
		Vector3 val = ((Color)(ref color6)).ToVector3();
		float fromValue = ((Vector3)(ref val)).Length() / (float)Math.Sqrt(3.0);
		fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f);
		Color color = default(Color);
		((Color)(ref color))._002Ector(193, 43, 43);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color * fromValue * num3, proj.rotation + proj.ai[0] * ((float)Math.PI / 4f) * -1f * (1f - num2), origin, num, effects, 0f);
		Color color2 = default(Color);
		((Color)(ref color2))._002Ector(247, 115, 0);
		Color color3 = default(Color);
		((Color)(ref color3))._002Ector(255, 202, 130);
		Color color4 = Color.White * num3 * 0.5f;
		((Color)(ref color4)).A = (byte)((float)(int)((Color)(ref color4)).A * (1f - fromValue));
		Color color5 = color4 * fromValue * 0.5f;
		((Color)(ref color5)).G = (byte)((float)(int)((Color)(ref color5)).G * fromValue);
		((Color)(ref color5)).B = (byte)((float)(int)((Color)(ref color5)).R * (0.25f + fromValue * 0.75f));
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color3 * fromValue * num3 * 0.3f, proj.rotation, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color2 * fromValue * num3 * 0.5f, proj.rotation, origin, num * num4, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.6f * num3, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.5f * num3, proj.rotation + proj.ai[0] * -0.05f, origin, num * 0.8f, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.4f * num3, proj.rotation + proj.ai[0] * -0.1f, origin, num * 0.6f, effects, 0f);
		for (float num5 = 0f; num5 < 8f; num5 += 1f)
		{
			float num6 = proj.rotation + proj.ai[0] * num5 * ((float)Math.PI * -2f) * 0.025f + Utils.Remap(num2, 0f, 1f, 0f, (float)Math.PI / 4f) * proj.ai[0];
			Vector2 drawpos = vector + num6.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * num;
			float num7 = num5 / 9f;
			DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos, new Color(255, 255, 255, 0) * num3 * num7, color3, num2, 0f, 0.5f, 0.5f, 1f, num6, new Vector2(0f, Utils.Remap(num2, 0f, 1f, 3f, 0f)) * num, Vector2.One * num);
		}
		Vector2 drawpos2 = vector + (proj.rotation + Utils.Remap(num2, 0f, 1f, 0f, (float)Math.PI / 4f) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
		DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos2, new Color(255, 255, 255, 0) * num3 * 0.5f, color3, num2, 0f, 0.5f, 0.5f, 1f, (float)Math.PI / 4f, new Vector2(Utils.Remap(num2, 0f, 1f, 4f, 1f)) * num, Vector2.One * num);
	}

	private void DrawProj_TrueExcalibur(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0288: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_032f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0339: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0364: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_039a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_0421: Unknown result type (might be due to invalid IL or missing references)
		//IL_0489: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04da: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0528: Unknown result type (might be due to invalid IL or missing references)
		//IL_052f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_055b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0620: Unknown result type (might be due to invalid IL or missing references)
		//IL_0627: Unknown result type (might be due to invalid IL or missing references)
		//IL_062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Rectangle rectangle = asset.Frame(1, 4);
		Vector2 origin = rectangle.Size() / 2f;
		float num = proj.scale * 1.1f;
		SpriteEffects effects = (SpriteEffects)((!(proj.ai[0] >= 0f)) ? 2 : 0);
		float num2 = proj.localAI[0] / proj.ai[1];
		float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f);
		float num4 = 0.975f;
		float amount = num3;
		Color color6 = Lighting.GetColor(proj.Center.ToTileCoordinates());
		Vector3 val = ((Color)(ref color6)).ToVector3();
		float fromValue = ((Vector3)(ref val)).Length() / (float)Math.Sqrt(3.0);
		fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f);
		Color color = Color.Lerp(new Color(180, 50, 90), new Color(180, 30, 60), amount);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color * fromValue * num3, proj.rotation + proj.ai[0] * ((float)Math.PI / 4f) * -1f * (1f - num2), origin, num, effects, 0f);
		Color color2 = Color.Lerp(new Color(255, 240, 150), new Color(255, 60, 170), amount);
		Color color3 = Color.Lerp(new Color(255, 255, 80), new Color(255, 60, 190), amount);
		Color color4 = Color.White * num3 * 0.5f;
		((Color)(ref color4)).A = (byte)((float)(int)((Color)(ref color4)).A * (1f - fromValue));
		Color color5 = color4 * fromValue * 0.5f;
		((Color)(ref color5)).G = (byte)((float)(int)((Color)(ref color5)).G * fromValue);
		((Color)(ref color5)).B = (byte)((float)(int)((Color)(ref color5)).R * (0.25f + fromValue * 0.75f));
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color3 * fromValue * num3 * 0.3f, proj.rotation, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color2 * fromValue * num3 * 0.5f, proj.rotation, origin, num * num4, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.6f * num3, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.5f * num3, proj.rotation + proj.ai[0] * -0.05f, origin, num * 0.8f, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.4f * num3, proj.rotation + proj.ai[0] * -0.1f, origin, num * 0.6f, effects, 0f);
		float num5 = num * 0.75f;
		for (float num6 = 0f; num6 < 12f; num6 += 1f)
		{
			float num7 = proj.rotation + proj.ai[0] * num6 * ((float)Math.PI * -2f) * 0.025f + Utils.Remap(num2, 0f, 0.6f, 0f, 0.95504415f) * proj.ai[0];
			Vector2 drawpos = vector + num7.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * num;
			float num8 = num6 / 12f;
			DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos, new Color(255, 255, 255, 0) * num3 * num8, color3, num2, 0f, 0.5f, 0.5f, 1f, num7, new Vector2(0f, Utils.Remap(num2, 0f, 1f, 3f, 0f)) * num5, Vector2.One * num5);
		}
		Vector2 drawpos2 = vector + (proj.rotation + Utils.Remap(num2, 0f, 0.6f, 0f, 0.95504415f) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
		DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos2, new Color(255, 255, 255, 0) * num3 * 0.5f, color3, num2, 0f, 0.5f, 0.5f, 1f, 0f, new Vector2(2f, Utils.Remap(num2, 0f, 1f, 4f, 1f)) * num5, Vector2.One * num5);
	}

	private void DrawProj_TrueNightsEdge(Projectile proj)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0280: Unknown result type (might be due to invalid IL or missing references)
		//IL_05de: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0602: Unknown result type (might be due to invalid IL or missing references)
		//IL_061a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0620: Unknown result type (might be due to invalid IL or missing references)
		//IL_0627: Unknown result type (might be due to invalid IL or missing references)
		//IL_062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_0671: Unknown result type (might be due to invalid IL or missing references)
		//IL_0683: Unknown result type (might be due to invalid IL or missing references)
		//IL_068e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0698: Unknown result type (might be due to invalid IL or missing references)
		//IL_069f: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_0308: Unknown result type (might be due to invalid IL or missing references)
		//IL_030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0328: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_0377: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0388: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03af: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_0410: Unknown result type (might be due to invalid IL or missing references)
		//IL_0426: Unknown result type (might be due to invalid IL or missing references)
		//IL_042d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0440: Unknown result type (might be due to invalid IL or missing references)
		//IL_0470: Unknown result type (might be due to invalid IL or missing references)
		//IL_0472: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0495: Unknown result type (might be due to invalid IL or missing references)
		//IL_0497: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_050a: Unknown result type (might be due to invalid IL or missing references)
		//IL_050c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0512: Unknown result type (might be due to invalid IL or missing references)
		//IL_0516: Unknown result type (might be due to invalid IL or missing references)
		//IL_051d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0533: Unknown result type (might be due to invalid IL or missing references)
		//IL_053a: Unknown result type (might be due to invalid IL or missing references)
		//IL_053f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0556: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_057f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_058f: Unknown result type (might be due to invalid IL or missing references)
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Rectangle rectangle = asset.Frame(1, 4);
		Vector2 origin = rectangle.Size() / 2f;
		float num = proj.scale * 1.1f;
		SpriteEffects effects = (SpriteEffects)((!(proj.ai[0] >= 0f)) ? 2 : 0);
		float num6 = 0.975f;
		Color color5 = Lighting.GetColor(proj.Center.ToTileCoordinates());
		Vector3 val = ((Color)(ref color5)).ToVector3();
		float fromValue = ((Vector3)(ref val)).Length() / (float)Math.Sqrt(3.0);
		fromValue = Utils.Remap(fromValue, 0.2f, 1f, 0f, 1f);
		float num7 = MathHelper.Min(0.15f + fromValue * 0.85f, Utils.Remap(proj.localAI[0], 30f, 96f, 1f, 0f));
		_ = proj.Size / 2f;
		float num8 = 2f;
		for (float num9 = num8; num9 >= 0f; num9 -= 1f)
		{
			if (!(proj.oldPos[(int)num9] == Vector2.Zero))
			{
				Vector2 val2 = proj.Center - proj.velocity * 0.5f * num9;
				float num10 = proj.oldRot[(int)num9] + proj.ai[0] * ((float)Math.PI * 2f) * 0.1f * (0f - num9);
				Vector2 position = val2 - screenPosition;
				float num11 = 1f - num9 / num8;
				float num12 = proj.Opacity * num11 * num11 * 0.85f;
				float amount = proj.Opacity * proj.Opacity;
				Color color = Color.Lerp(new Color(40, 20, 60, 120), new Color(80, 160, 50, 120), amount);
				spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, color * num7 * num12, num10 + proj.ai[0] * ((float)Math.PI / 4f) * -1f, origin, num * num6, effects, 0f);
				Color color2 = Color.Lerp(new Color(80, 40, 180), new Color(155, 255, 100), amount);
				Color color3 = Color.White * num12 * 0.5f;
				((Color)(ref color3)).A = (byte)((float)(int)((Color)(ref color3)).A * (1f - num7));
				Color color4 = color3 * num7 * 0.5f;
				((Color)(ref color4)).G = (byte)((float)(int)((Color)(ref color4)).G * num7);
				((Color)(ref color4)).R = (byte)((float)(int)((Color)(ref color4)).R * (0.25f + num7 * 0.75f));
				float num13 = 3f;
				for (float num2 = (float)Math.PI * -2f + (float)Math.PI * 2f / num13; num2 < 0f; num2 += (float)Math.PI * 2f / num13)
				{
					float num3 = Utils.Remap(num2, (float)Math.PI * -2f, 0f, 0f, 0.5f);
					spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, color4 * 0.15f * num3, num10 + proj.ai[0] * 0.01f + num2, origin, num, effects, 0f);
					spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, Color.Lerp(new Color(80, 30, 160), new Color(200, 255, 0), amount) * fromValue * num12 * num3, num10 + num2, origin, num * 0.8f, effects, 0f);
					spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, color2 * fromValue * num12 * MathHelper.Lerp(0.05f, 0.4f, fromValue) * num3, num10 + num2, origin, num * num6, effects, 0f);
					spriteBatch.Draw(asset.Value, position, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * MathHelper.Lerp(0.05f, 0.5f, fromValue) * num12 * num3, num10 + num2, origin, num, effects, 0f);
				}
				spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, color4 * 0.15f, num10 + proj.ai[0] * 0.01f, origin, num, effects, 0f);
				spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, Color.Lerp(new Color(80, 30, 160), new Color(200, 255, 0), amount) * num7 * num12, num10, origin, num * 0.8f, effects, 0f);
				spriteBatch.Draw(asset.Value, position, (Rectangle?)rectangle, color2 * fromValue * num12 * MathHelper.Lerp(0.05f, 0.4f, num7), num10, origin, num * num6, effects, 0f);
				spriteBatch.Draw(asset.Value, position, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * MathHelper.Lerp(0.05f, 0.5f, num7) * num12, num10, origin, num, effects, 0f);
			}
		}
		float num4 = 1f - proj.localAI[0] * 1f / 80f;
		if (num4 < 0.5f)
		{
			num4 = 0.5f;
		}
		Vector2 drawpos = proj.Center - screenPosition + (proj.rotation + 0.47123894f * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num * num4;
		float num5 = MathHelper.Min(num7, MathHelper.Lerp(1f, fromValue, Utils.Remap(proj.localAI[0], 0f, 80f, 0f, 1f)));
		DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos, new Color(255, 255, 255, 0) * proj.Opacity * 0.5f * num5, new Color(150, 255, 100) * num5, proj.Opacity, 0f, 1f, 1f, 2f, (float)Math.PI / 4f, new Vector2(2f, 2f), Vector2.One);
	}

	private void DrawProj_TerraBlade2(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_02aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0300: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_032e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_038b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03be: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03df: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_044c: Unknown result type (might be due to invalid IL or missing references)
		//IL_044f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0467: Unknown result type (might be due to invalid IL or missing references)
		//IL_046e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0473: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_048b: Unknown result type (might be due to invalid IL or missing references)
		//IL_049d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_054b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0563: Unknown result type (might be due to invalid IL or missing references)
		//IL_056a: Unknown result type (might be due to invalid IL or missing references)
		//IL_056f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0574: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_058f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0596: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0600: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Rectangle rectangle = asset.Frame(1, 4);
		Vector2 origin = rectangle.Size() / 2f;
		float num = proj.scale * 1.1f;
		SpriteEffects effects = (SpriteEffects)((!(proj.ai[0] >= 0f)) ? 2 : 0);
		float num2 = proj.localAI[0] / proj.ai[1];
		float num3 = Utils.Remap(num2, 0f, 0.6f, 0f, 1f) * Utils.Remap(num2, 0.6f, 1f, 1f, 0f);
		float num4 = 0.975f;
		Color color6 = Lighting.GetColor(proj.Center.ToTileCoordinates());
		Vector3 val = ((Color)(ref color6)).ToVector3();
		float num5 = ((Vector3)(ref val)).Length() / (float)Math.Sqrt(3.0);
		num5 = 0.5f + num5 * 0.5f;
		num5 = Utils.Remap(num5, 0.2f, 1f, 0f, 1f);
		Color color = default(Color);
		((Color)(ref color))._002Ector(45, 124, 205);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color * num5 * num3, proj.rotation + proj.ai[0] * ((float)Math.PI / 4f) * -1f * (1f - num2), origin, num * 0.95f, effects, 0f);
		Color color2 = default(Color);
		((Color)(ref color2))._002Ector(181, 230, 29);
		Color color3 = default(Color);
		((Color)(ref color3))._002Ector(34, 177, 76);
		Color color4 = Color.White * num3 * 0.5f;
		((Color)(ref color4)).A = (byte)((float)(int)((Color)(ref color4)).A * (1f - num5));
		Color color5 = color4 * num5 * 0.5f;
		((Color)(ref color5)).G = (byte)((float)(int)((Color)(ref color5)).G * num5);
		((Color)(ref color5)).B = (byte)((float)(int)((Color)(ref color5)).R * (0.25f + num5 * 0.75f));
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color3 * num5 * num3 * 0.3f, proj.rotation, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color2 * num5 * num3 * 0.5f, proj.rotation, origin, num * num4, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.6f * num3, proj.rotation + proj.ai[0] * 0.01f, origin, num, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.5f * num3, proj.rotation + proj.ai[0] * -0.05f, origin, num * 0.8f, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.4f * num3, proj.rotation + proj.ai[0] * -0.1f, origin, num * 0.6f, effects, 0f);
		for (float num6 = 0f; num6 < 12f; num6 += 1f)
		{
			float num7 = proj.rotation + proj.ai[0] * (num6 - 2f) * ((float)Math.PI * -2f) * 0.025f + Utils.Remap(num2, 0f, 1f, 0f, (float)Math.PI / 4f) * proj.ai[0];
			Vector2 drawpos = vector + num7.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * num;
			float num8 = num6 / 12f;
			DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos, new Color(255, 255, 255, 0) * num3 * num8, color3, num2, 0f, 0.5f, 0.5f, 1f, num7, new Vector2(0f, Utils.Remap(num2, 0f, 1f, 3f, 0f)) * num, Vector2.One * num);
		}
		Vector2 drawpos2 = vector + (proj.rotation + Utils.Remap(num2, 0f, 1f, 0f, (float)Math.PI / 4f) * proj.ai[0]).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * num;
		DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos2, new Color(255, 255, 255, 0) * num3 * 0.5f, color3, num2, 0f, 0.5f, 0.5f, 1f, 0f, new Vector2(2f, Utils.Remap(num2, 0f, 1f, 4f, 1f)) * num, Vector2.One * num * 1.5f);
	}

	private void DrawProj_TerraBlade2Shot(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0318: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_031f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_034e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0351: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0373: Unknown result type (might be due to invalid IL or missing references)
		//IL_037a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0384: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03be: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_0423: Unknown result type (might be due to invalid IL or missing references)
		//IL_042d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_0470: Unknown result type (might be due to invalid IL or missing references)
		//IL_047a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0484: Unknown result type (might be due to invalid IL or missing references)
		//IL_048b: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0502: Unknown result type (might be due to invalid IL or missing references)
		//IL_050b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_0546: Unknown result type (might be due to invalid IL or missing references)
		//IL_055e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0565: Unknown result type (might be due to invalid IL or missing references)
		//IL_056a: Unknown result type (might be due to invalid IL or missing references)
		//IL_056f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0587: Unknown result type (might be due to invalid IL or missing references)
		//IL_0599: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_07da: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0800: Unknown result type (might be due to invalid IL or missing references)
		//IL_0805: Unknown result type (might be due to invalid IL or missing references)
		//IL_080a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0813: Unknown result type (might be due to invalid IL or missing references)
		//IL_0825: Unknown result type (might be due to invalid IL or missing references)
		//IL_082c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0836: Unknown result type (might be due to invalid IL or missing references)
		//IL_083b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0874: Unknown result type (might be due to invalid IL or missing references)
		//IL_087b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0880: Unknown result type (might be due to invalid IL or missing references)
		//IL_0887: Unknown result type (might be due to invalid IL or missing references)
		//IL_0891: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0908: Unknown result type (might be due to invalid IL or missing references)
		//IL_090f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0914: Unknown result type (might be due to invalid IL or missing references)
		//IL_091b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0925: Unknown result type (might be due to invalid IL or missing references)
		//IL_0632: Unknown result type (might be due to invalid IL or missing references)
		//IL_064b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0663: Unknown result type (might be due to invalid IL or missing references)
		//IL_066a: Unknown result type (might be due to invalid IL or missing references)
		//IL_066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0674: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0701: Unknown result type (might be due to invalid IL or missing references)
		//IL_0708: Unknown result type (might be due to invalid IL or missing references)
		//IL_070f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0714: Unknown result type (might be due to invalid IL or missing references)
		//IL_071b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0722: Unknown result type (might be due to invalid IL or missing references)
		//IL_0733: Unknown result type (might be due to invalid IL or missing references)
		//IL_0745: Unknown result type (might be due to invalid IL or missing references)
		//IL_074c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0756: Unknown result type (might be due to invalid IL or missing references)
		//IL_075b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0799: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ba: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Rectangle rectangle = asset.Frame(1, 4);
		Vector2 origin = rectangle.Size() / 2f;
		float scale = proj.scale;
		SpriteEffects spriteEffects = (SpriteEffects)((!(proj.ai[0] >= 0f)) ? 2 : 0);
		SpriteEffects effects = (SpriteEffects)(spriteEffects ^ 2);
		float num = Utils.Remap(proj.localAI[0], 0f, proj.ai[1] + 30f, 0f, 1f);
		float opacity = proj.Opacity;
		float num5 = 0.975f;
		Color color6 = Lighting.GetColor(proj.Center.ToTileCoordinates());
		Vector3 val = ((Color)(ref color6)).ToVector3();
		float num6 = ((Vector3)(ref val)).Length() / (float)Math.Sqrt(3.0);
		num6 = 0.5f + num6 * 0.5f;
		num6 = Utils.Remap(num6, 0.2f, 1f, 0f, 1f);
		Color color = default(Color);
		((Color)(ref color))._002Ector(45, 124, 205);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color * num6 * opacity, proj.rotation + proj.ai[0] * ((float)Math.PI / 4f) * 0.5f * -1f * (1f - num), origin, scale * 0.95f, spriteEffects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color * num6 * opacity, proj.rotation + proj.ai[0] * ((float)Math.PI / 4f) * 0.5f * 1f * (1f - num), origin, scale * 0.95f, effects, 0f);
		Color color2 = default(Color);
		((Color)(ref color2))._002Ector(181, 230, 29);
		Color color3 = default(Color);
		((Color)(ref color3))._002Ector(34, 177, 76);
		Color color4 = Color.White * opacity * 0.5f;
		((Color)(ref color4)).A = (byte)((float)(int)((Color)(ref color4)).A * (1f - num6));
		Color color5 = color4 * num6 * 0.5f;
		((Color)(ref color5)).G = (byte)((float)(int)((Color)(ref color5)).G * num6);
		((Color)(ref color5)).B = (byte)((float)(int)((Color)(ref color5)).R * (0.25f + num6 * 0.75f));
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color5 * 0.15f, proj.rotation + proj.ai[0] * 0.01f, origin, scale, spriteEffects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color5 * 0.15f, proj.rotation + proj.ai[0] * -0.01f, origin, scale, effects, 0f);
		float num7 = 1f - num;
		float num8 = 0.25f;
		float num9 = 0.15f;
		float num10 = 0.05f;
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color3 * num6 * opacity * 0.3f, proj.rotation + proj.ai[0] * num8 * num7, origin, scale, spriteEffects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color3 * num6 * opacity * 0.3f, proj.rotation + (0f - proj.ai[0]) * num8 * num7, origin, scale, effects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)rectangle, color2 * num6 * opacity * 0.5f, proj.rotation + proj.ai[0] * num9 * num7, origin, scale * num5, spriteEffects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.6f * opacity, proj.rotation + proj.ai[0] * num10 * num7, origin, scale, spriteEffects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.5f * opacity, proj.rotation + proj.ai[0] * -0.05f, origin, scale * 0.8f, spriteEffects, 0f);
		spriteBatch.Draw(asset.Value, vector, (Rectangle?)asset.Frame(1, 4, 0, 3), Color.White * 0.4f * opacity, proj.rotation + proj.ai[0] * -0.1f, origin, scale * 0.6f, spriteEffects, 0f);
		for (float num11 = -9f; num11 < 9f; num11 += 1f)
		{
			float num12 = proj.rotation + proj.ai[0] * num11 * ((float)Math.PI * -2f) * 0.025f;
			Vector2 drawpos = vector + num12.ToRotationVector2() * ((float)asset.Width() * 0.5f - 6f) * scale;
			float num2 = Math.Abs(num11) / 9f;
			DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos, new Color(255, 255, 255, 0) * opacity * num2, color3, num, 0f, 0.5f, 0.5f, 1f, num12, new Vector2(0f, Utils.Remap(num, 0f, 1f, 3f, 0f)) * scale, Vector2.One * scale);
		}
		for (float num3 = -1f; num3 <= 1f; num3 += 0.5f)
		{
			if (num3 != 0f)
			{
				Vector2 drawpos2 = vector + (proj.rotation + num3 * (float)Math.PI * 0.75f * num).ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * scale;
				float num4 = Utils.Remap(Math.Abs(num3), 0f, 1f, 1f, 0.5f);
				DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos2, new Color(255, 255, 255, 0) * opacity * 0.5f, color3, num, 0f, 0.5f, 0.5f, 0.75f, (float)Math.PI / 4f, new Vector2(Utils.Remap(num, 0f, 1f, 4f, 1f)) * scale * num4, Vector2.One * scale * num4);
				DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos2, new Color(255, 255, 255, 0) * opacity * 0.5f, color3, num, 0f, 0.5f, 0.5f, 0.75f, 0f, new Vector2(2f, Utils.Remap(num, 0f, 1f, 4f, 1f)) * scale * num4, Vector2.One * scale * num4);
			}
		}
		Vector2 drawpos3 = vector + proj.rotation.ToRotationVector2() * ((float)asset.Width() * 0.5f - 4f) * scale;
		DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos3, new Color(255, 255, 255, 0) * opacity * 0.5f, color3, num, 0f, 0.5f, 0.5f, 1f, (float)Math.PI / 4f, new Vector2(Utils.Remap(num, 0f, 1f, 4f, 1f)) * scale, Vector2.One * scale * 1.5f);
		DrawPrettyStarSparkle(proj.Opacity, (SpriteEffects)0, drawpos3, new Color(255, 255, 255, 0) * opacity * 0.5f, color3, num, 0f, 0.5f, 0.5f, 1f, 0f, new Vector2(2f, Utils.Remap(num, 0f, 1f, 4f, 1f)) * scale, Vector2.One * scale * 1.5f);
	}

	public void DrawProj(int i)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		int num = ProjectileID.Sets.DrawScreenCheckFluff[projectile[i].type];
		Rectangle val = new Rectangle((int)Camera.ScaledPosition.X - num, (int)Camera.ScaledPosition.Y - num, (int)Camera.ScaledSize.X + num * 2, (int)Camera.ScaledSize.Y + num * 2);
		if (((Rectangle)(ref val)).Intersects(projectile[i].Hitbox))
		{
			Projectile proj = projectile[i];
			DrawProjDirect(proj);
		}
	}

	private void DrawContinuousTrail(Projectile proj)
	{
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		Color color = default(Color);
		((Color)(ref color))._002Ector(255, 255, 255, 255);
		bool flag = player[proj.owner].cPet == 0;
		DrawTrail(proj, new Vector2(10f, 2f), (Color)(flag ? new Color(177, 255, 32, 127) : color));
		DrawTrail(proj, new Vector2(-10f, 2f), (Color)(flag ? new Color(177, 255, 32, 127) : color));
	}

	private static void DrawTrail(Projectile proj, Vector2 rotatableOffsetFromCenter, Color baseColor)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Size / 2f;
		Texture2D value = TextureAssets.MagicPixel.Value;
		Rectangle value2 = default(Rectangle);
		((Rectangle)(ref value2))._002Ector(0, 0, 1, 1);
		Vector2[] oldPos = proj.oldPos;
		float[] oldRot = proj.oldRot;
		int num = oldPos.Length;
		for (int num2 = num - 1; num2 > 0; num2--)
		{
			if (!(oldPos[num2] == Vector2.Zero))
			{
				Vector2 vector2 = oldPos[num2] + vector + rotatableOffsetFromCenter.RotatedBy(oldRot[num2]);
				Vector2 v = oldPos[num2 - 1] + vector + rotatableOffsetFromCenter.RotatedBy(oldRot[num2 - 1]) - vector2;
				float y = ((Vector2)(ref v)).Length();
				float num3 = v.ToRotation();
				float num4 = Utils.Remap(num2, 0f, num, 1f, 0f);
				EntitySpriteDraw(value, vector2 - screenPosition, value2, baseColor * num4, num3 + (float)Math.PI / 2f, new Vector2((float)value2.Width / 2f, (float)value2.Height), new Vector2(4f, y), (SpriteEffects)0);
			}
		}
	}

	public void DrawProjDirect(Projectile proj)
	{
		PrepareDrawnProjectileDrawing(proj);
		DrawProj_Inner(proj);
	}

	private void DrawProj_DrawVoidLens(Projectile proj, ref bool earlyReturn)
	{
		if (proj.type == 734)
		{
			VoidLensHelper voidLensHelper = new VoidLensHelper(proj);
			_voidLensData.Clear();
			int selectionMode = TryInteractingWithVoidLens(proj);
			voidLensHelper.DrawToDrawData(_voidLensData, selectionMode);
			{
				foreach (DrawData voidLensDatum in _voidLensData)
				{
					EntitySpriteDraw(voidLensDatum);
				}
				return;
			}
		}
		earlyReturn = false;
	}

	private void DrawProj_Inner(Projectile proj)
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		float polePosX = 0f;
		float polePosY = 0f;
		LoadProjectile(proj.type);
		Vector2 mountedCenter = player[proj.owner].MountedCenter;
		if (player[proj.owner].mount.Active && player[proj.owner].mount.Type == 52)
		{
			mountedCenter += new Vector2((float)(player[proj.owner].direction * 14), -10f);
		}
		if (ProjectileLoader.PreDrawExtras(proj))
		{
			DrawProj_DrawYoyoString(proj, mountedCenter);
			DrawProj_DrawExtras(proj, mountedCenter, ref polePosX, ref polePosY);
		}
		DrawProj_Inner_DoDrawProj(proj, mountedCenter, polePosX, polePosY);
	}

	private void DrawProj_DrawYoyoString(Projectile proj, Vector2 mountedCenter)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03df: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0429: Unknown result type (might be due to invalid IL or missing references)
		//IL_044c: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_047e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0483: Unknown result type (might be due to invalid IL or missing references)
		//IL_0497: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ba: Unknown result type (might be due to invalid IL or missing references)
		if (proj.aiStyle != 99)
		{
			return;
		}
		Vector2 vector = mountedCenter;
		vector.Y += player[proj.owner].gfxOffY;
		float num = proj.Center.X - vector.X;
		float num4 = proj.Center.Y - vector.Y;
		Math.Sqrt(num * num + num4 * num4);
		float num5 = (float)Math.Atan2(num4, num) - 1.57f;
		if (!proj.counterweight)
		{
			int num6 = -1;
			if (proj.position.X + (float)(proj.width / 2) < player[proj.owner].position.X + (float)(player[proj.owner].width / 2))
			{
				num6 = 1;
			}
			num6 *= -1;
			player[proj.owner].itemRotation = (float)Math.Atan2(num4 * (float)num6, num * (float)num6);
		}
		bool flag = true;
		bool flag2 = true;
		if (num == 0f && num4 == 0f)
		{
			flag = false;
		}
		else
		{
			float num7 = (float)Math.Sqrt(num * num + num4 * num4);
			num7 = 12f / num7;
			num *= num7;
			num4 *= num7;
			vector.X -= num * 0.1f;
			vector.Y -= num4 * 0.1f;
			num = proj.position.X + (float)proj.width * 0.5f - vector.X;
			num4 = proj.position.Y + (float)proj.height * 0.5f - vector.Y;
		}
		Color color = default(Color);
		while (flag)
		{
			float num8 = 12f;
			float num9 = (float)Math.Sqrt(num * num + num4 * num4);
			float num10 = num9;
			if (float.IsNaN(num9) || float.IsNaN(num10))
			{
				flag = false;
				continue;
			}
			if (num9 < 20f)
			{
				num8 = num9 - 8f;
				flag = false;
			}
			num9 = 12f / num9;
			num *= num9;
			num4 *= num9;
			if (flag2)
			{
				flag2 = false;
			}
			else
			{
				vector.X += num;
				vector.Y += num4;
			}
			num = proj.position.X + (float)proj.width * 0.5f - vector.X;
			num4 = proj.position.Y + (float)proj.height * 0.1f - vector.Y;
			if (num10 > 12f)
			{
				float num11 = 0.3f;
				float num2 = Math.Abs(proj.velocity.X) + Math.Abs(proj.velocity.Y);
				if (num2 > 16f)
				{
					num2 = 16f;
				}
				num2 = 1f - num2 / 16f;
				num11 *= num2;
				num2 = num10 / 80f;
				if (num2 > 1f)
				{
					num2 = 1f;
				}
				num11 *= num2;
				if (num11 < 0f)
				{
					num11 = 0f;
				}
				num11 *= num2;
				num11 *= 0.5f;
				if (num4 > 0f)
				{
					num4 *= 1f + num11;
					num *= 1f - num11;
				}
				else
				{
					num2 = Math.Abs(proj.velocity.X) / 3f;
					if (num2 > 1f)
					{
						num2 = 1f;
					}
					num2 -= 0.5f;
					num11 *= num2;
					if (num11 > 0f)
					{
						num11 *= 2f;
					}
					num4 *= 1f + num11;
					num *= 1f - num11;
				}
			}
			num5 = (float)Math.Atan2(num4, num) - 1.57f;
			Color white = Color.White;
			((Color)(ref white)).A = (byte)((float)(int)((Color)(ref white)).A * 0.4f);
			white = TryApplyingPlayerStringColor(player[proj.owner].stringColor, white);
			float num3 = 0.5f;
			white = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), white);
			((Color)(ref color))._002Ector((int)(byte)((float)(int)((Color)(ref white)).R * num3), (int)(byte)((float)(int)((Color)(ref white)).G * num3), (int)(byte)((float)(int)((Color)(ref white)).B * num3), (int)(byte)((float)(int)((Color)(ref white)).A * num3));
			EntitySpriteDraw(TextureAssets.FishingLine.Value, new Vector2(vector.X - screenPosition.X + (float)TextureAssets.FishingLine.Width() * 0.5f, vector.Y - screenPosition.Y + (float)TextureAssets.FishingLine.Height() * 0.5f) - new Vector2(6f, 0f), (Rectangle?)new Rectangle(0, 0, TextureAssets.FishingLine.Width(), (int)num8), color, num5, new Vector2((float)TextureAssets.FishingLine.Width() * 0.5f, 0f), 1f, (SpriteEffects)0, 0f);
		}
	}

	private void DrawProj_DrawSpecialProjs(Projectile proj, ref bool earlyReturn)
	{
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0356: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_0429: Unknown result type (might be due to invalid IL or missing references)
		//IL_0453: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05de: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0605: Unknown result type (might be due to invalid IL or missing references)
		//IL_060a: Unknown result type (might be due to invalid IL or missing references)
		//IL_060c: Unknown result type (might be due to invalid IL or missing references)
		//IL_060e: Unknown result type (might be due to invalid IL or missing references)
		//IL_061d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0622: Unknown result type (might be due to invalid IL or missing references)
		//IL_0627: Unknown result type (might be due to invalid IL or missing references)
		//IL_0639: Unknown result type (might be due to invalid IL or missing references)
		//IL_0644: Unknown result type (might be due to invalid IL or missing references)
		//IL_0649: Unknown result type (might be due to invalid IL or missing references)
		//IL_0476: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_0482: Unknown result type (might be due to invalid IL or missing references)
		//IL_0487: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0474: Unknown result type (might be due to invalid IL or missing references)
		//IL_0514: Unknown result type (might be due to invalid IL or missing references)
		//IL_0516: Unknown result type (might be due to invalid IL or missing references)
		//IL_0520: Unknown result type (might be due to invalid IL or missing references)
		//IL_0525: Unknown result type (might be due to invalid IL or missing references)
		//IL_053e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0551: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		//IL_056f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0571: Unknown result type (might be due to invalid IL or missing references)
		//IL_0578: Unknown result type (might be due to invalid IL or missing references)
		//IL_057f: Unknown result type (might be due to invalid IL or missing references)
		//IL_058a: Unknown result type (might be due to invalid IL or missing references)
		//IL_058c: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_050d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0512: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0801: Unknown result type (might be due to invalid IL or missing references)
		//IL_0803: Unknown result type (might be due to invalid IL or missing references)
		//IL_080e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0813: Unknown result type (might be due to invalid IL or missing references)
		//IL_0816: Unknown result type (might be due to invalid IL or missing references)
		//IL_0829: Unknown result type (might be due to invalid IL or missing references)
		//IL_082e: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0703: Unknown result type (might be due to invalid IL or missing references)
		//IL_0719: Unknown result type (might be due to invalid IL or missing references)
		//IL_071b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0722: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_0748: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0757: Unknown result type (might be due to invalid IL or missing references)
		//IL_076d: Unknown result type (might be due to invalid IL or missing references)
		//IL_076f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0776: Unknown result type (might be due to invalid IL or missing references)
		//IL_077e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0682: Unknown result type (might be due to invalid IL or missing references)
		//IL_068d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0692: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a53: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a58: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_08da: Unknown result type (might be due to invalid IL or missing references)
		//IL_08df: Unknown result type (might be due to invalid IL or missing references)
		//IL_090d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0912: Unknown result type (might be due to invalid IL or missing references)
		//IL_0917: Unknown result type (might be due to invalid IL or missing references)
		//IL_091b: Unknown result type (might be due to invalid IL or missing references)
		//IL_091d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0922: Unknown result type (might be due to invalid IL or missing references)
		//IL_0932: Unknown result type (might be due to invalid IL or missing references)
		//IL_0937: Unknown result type (might be due to invalid IL or missing references)
		//IL_093c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0943: Unknown result type (might be due to invalid IL or missing references)
		//IL_0947: Unknown result type (might be due to invalid IL or missing references)
		//IL_0952: Unknown result type (might be due to invalid IL or missing references)
		//IL_0959: Unknown result type (might be due to invalid IL or missing references)
		//IL_0967: Unknown result type (might be due to invalid IL or missing references)
		//IL_0969: Unknown result type (might be due to invalid IL or missing references)
		//IL_096e: Unknown result type (might be due to invalid IL or missing references)
		//IL_097e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0983: Unknown result type (might be due to invalid IL or missing references)
		//IL_0988: Unknown result type (might be due to invalid IL or missing references)
		//IL_098f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0993: Unknown result type (might be due to invalid IL or missing references)
		//IL_099e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a9: Unknown result type (might be due to invalid IL or missing references)
		if (proj.aiStyle == 160)
		{
			DrawKite(proj);
			return;
		}
		if (proj.aiStyle == 165)
		{
			DrawWhip(proj);
			return;
		}
		if (proj.type == 879 || proj.type == 877 || proj.type == 878)
		{
			proj.position.Y -= Main.player[proj.owner].gfxOffY;
		}
		if (proj.aiStyle == 174)
		{
			DrawMultisegmentPet(proj);
			return;
		}
		if (proj.type == 1020)
		{
			DrawContinuousTrail(proj);
		}
		bool flag3 = true;
		switch (proj.type)
		{
		default:
			flag3 = false;
			break;
		case 932:
			DrawProj_FairyQueenRangedItemShot(proj);
			break;
		case 919:
			DrawProj_FairyQueenLance(proj);
			break;
		case 974:
			DrawProj_LightsBane(proj);
			break;
		case 972:
			DrawProj_NightsEdge(proj);
			break;
		case 973:
			DrawProj_TrueNightsEdge(proj);
			break;
		case 982:
			DrawProj_Excalibur(proj);
			break;
		case 997:
			DrawProj_TheHorsemansBlade(proj);
			break;
		case 984:
			DrawProj_TerraBlade2(proj);
			break;
		case 985:
			DrawProj_TerraBlade2Shot(proj);
			break;
		case 983:
			DrawProj_TrueExcalibur(proj);
			break;
		case 995:
			_stardewAnimation.Draw(spriteBatch, (int)proj.ai[0], proj.Center - screenPosition);
			flag3 = false;
			break;
		}
		if (flag3)
		{
			return;
		}
		if (proj.type == 34)
		{
			default(FlameLashDrawer).Draw(proj);
		}
		if (proj.type == 16)
		{
			default(MagicMissileDrawer).Draw(proj);
		}
		if (proj.type == 106)
		{
			default(LightDiscDrawer).Draw(proj);
		}
		if (proj.type == 933)
		{
			default(FinalFractalHelper).Draw(proj);
		}
		if (proj.type == 79)
		{
			default(RainbowRodDrawer).Draw(proj);
		}
		if (proj.type == 946)
		{
			EmpressBladeDrawer empressBladeDrawer = default(EmpressBladeDrawer);
			float num12 = GlobalTimeWrappedHourly % 3f / 3f;
			Player player = Main.player[proj.owner];
			float num13 = MathHelper.Max(1f, (float)player.maxMinions);
			float num14 = (float)proj.identity % num13 / num13 + num12;
			Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0f, 0f, num14 % 1f);
			Color fairyQueenWeaponsColor2 = proj.GetFairyQueenWeaponsColor(0f, 0f, (num14 + 0.5f) % 1f);
			empressBladeDrawer.ColorStart = fairyQueenWeaponsColor;
			empressBladeDrawer.ColorEnd = fairyQueenWeaponsColor2;
			empressBladeDrawer.Draw(proj);
			DrawProj_EmpressBlade(proj, num14);
		}
		else if (proj.type == 927)
		{
			DrawProj_PiercingStarlight(proj);
		}
		else if (proj.type == 917)
		{
			DrawProj_CoolWhipMinion(proj);
		}
		else if (proj.type == 923)
		{
			Vector2 position = proj.Center - screenPosition;
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle = value.Frame(1, 2);
			Rectangle value2 = value.Frame(1, 2, 0, 1);
			Vector2 origin = rectangle.Size() * new Vector2(0.03f, 0.5f);
			float num15 = 180f;
			float num23 = proj.ai[0] / ((float)Math.PI * 2f) + proj.localAI[0] / num15;
			float num16 = Utils.GetLerpValue(0f, 30f, proj.localAI[0], clamped: true) * Utils.GetLerpValue(num15, num15 - 30f, proj.localAI[0], clamped: true);
			Color color2 = hslToRgb(num23 % 1f, 1f, 1f) * num16;
			float lerpValue = Utils.GetLerpValue(40f, 60f, proj.localAI[0], clamped: true);
			Vector2 vector2 = new Vector2(1f, MathHelper.Lerp(0.25f, 0.7f, lerpValue)) * proj.scale;
			Color value3 = hslToRgb((num23 + 0.3f) % 1f, 1f, MathHelper.Lerp(0.3f, 0.66f, lerpValue)) * num16;
			if (NPC.ShouldEmpressBeEnraged())
			{
				value3 = OurFavoriteColor * num16;
			}
			value3 = Color.Lerp(value3, Color.White, 0.1f);
			((Color)(ref value3)).A = (byte)(((Color)(ref value3)).A / 2);
			spriteBatch.Draw(value, position, (Rectangle?)value2, value3, proj.rotation, origin, vector2 * 1.2f, (SpriteEffects)0, 0f);
			Color value4 = hslToRgb((num23 + 0.15f) % 1f, 1f, MathHelper.Lerp(0.3f, 0.5f, lerpValue)) * num16;
			if (NPC.ShouldEmpressBeEnraged())
			{
				value4 = OurFavoriteColor * num16;
			}
			value4 = Color.Lerp(value4, Color.White, 0.1f);
			((Color)(ref value4)).A = (byte)(((Color)(ref value4)).A / 2);
			spriteBatch.Draw(value, position, (Rectangle?)value2, value4, proj.rotation, origin, vector2 * 1.1f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(value, position, (Rectangle?)rectangle, color2 * 0.5f, proj.rotation, origin, vector2, (SpriteEffects)0, 0f);
			spriteBatch.Draw(value, position, (Rectangle?)value2, color2 * lerpValue, proj.rotation, origin, vector2, (SpriteEffects)0, 0f);
		}
		else if (proj.type == 950)
		{
			Vector2 position2 = proj.Center - screenPosition;
			Texture2D value5 = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle2 = value5.Frame();
			Vector2 origin2 = rectangle2.Size() * new Vector2(0.5f, 0.5f);
			Color color3 = new Color(255, 255, 255, 0) * proj.Opacity;
			float hue = ((proj.ai[2] == 1f) ? 0.96f : 0.92f);
			if (proj.ai[2] == 1f)
			{
				color3 = new Color(255, 0, 30, 180) * proj.Opacity;
			}
			Color color4 = hslToRgb(hue, 1f, 0.5f) * proj.Opacity;
			((Color)(ref color4)).A = 0;
			color3 *= 0.6f;
			color4 *= 0.6f;
			float scale = proj.scale;
			float num17 = proj.localAI[0];
			spriteBatch.Draw(value5, position2, (Rectangle?)rectangle2, color3, proj.rotation, origin2, num17, (SpriteEffects)0, 0f);
			spriteBatch.Draw(value5, position2, (Rectangle?)rectangle2, color4, proj.rotation, origin2, num17 * 0.95f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(value5, position2, (Rectangle?)rectangle2, color3, proj.rotation, origin2, scale, (SpriteEffects)0, 0f);
			spriteBatch.Draw(value5, position2, (Rectangle?)rectangle2, color4, proj.rotation, origin2, scale * 0.95f, (SpriteEffects)0, 0f);
		}
		else if (proj.type == 888)
		{
			DrawTwinsPet(proj);
		}
		else if (proj.type == 874)
		{
			DrawMurderAurora(proj);
		}
		else if (proj.type == 871)
		{
			Texture2D value6 = TextureAssets.Projectile[proj.type].Value;
			Rectangle rectangle3 = value6.Frame(1, 4);
			Vector2 origin3 = rectangle3.Size() / 2f;
			Color color5 = Color.White * proj.Opacity;
			SpriteEffects effects = (SpriteEffects)0;
			((Color)(ref color5)).A = (byte)(((Color)(ref color5)).A / 2);
			Color color6 = proj.AI_171_GetColor();
			((Color)(ref color6)).A = (byte)(((Color)(ref color6)).A / 2);
			float num18 = proj.scale * 1.3f;
			float num19 = 1f;
			int num20 = proj.AI_172_GetPelletStormsCount();
			bool flag4 = false;
			float num21 = float.PositiveInfinity;
			for (int i = 0; i < num20; i++)
			{
				Projectile.HallowBossPelletStormInfo hallowBossPelletStormInfo = proj.AI_172_GetPelletStormInfo(i);
				for (int j = 0; j < hallowBossPelletStormInfo.BulletsInStorm; j++)
				{
					float bulletProgress = hallowBossPelletStormInfo.GetBulletProgress(j);
					if (bulletProgress < num21)
					{
						num21 = bulletProgress;
					}
					if (hallowBossPelletStormInfo.IsValid(j))
					{
						if (i == num20 - 1 && bulletProgress > 0f)
						{
							flag4 = true;
						}
						rectangle3 = value6.Frame(1, 4, 0, (int)((double)(j + i * 6) + timeForVisualEffects / 4.0) % 4);
						float num22 = Utils.GetLerpValue(0f, 0.1f, bulletProgress, clamped: true) * Utils.GetLerpValue(1f, 0.8f, bulletProgress, clamped: true);
						Vector2 bulletPosition = hallowBossPelletStormInfo.GetBulletPosition(j, proj.Center);
						EntitySpriteDraw(value6, bulletPosition - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle3, color6 * num22, proj.rotation, origin3, num18 * num19, effects);
						EntitySpriteDraw(value6, bulletPosition - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle3, color5 * num22, proj.rotation, origin3, proj.scale * num19, effects);
					}
				}
			}
			if (!flag4 && num21 <= 1f)
			{
				EntitySpriteDraw(value6, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle3, color6, proj.rotation, origin3, num18, effects);
				EntitySpriteDraw(value6, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle3, color5, proj.rotation, origin3, proj.scale, effects);
			}
		}
		else
		{
			earlyReturn = false;
		}
	}

	private void DrawProj_DrawExtras(Projectile proj, Vector2 mountedCenter, ref float polePosX, ref float polePosY)
	{
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_029f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02af: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0440: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0555: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0565: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_033d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0603: Unknown result type (might be due to invalid IL or missing references)
		//IL_0609: Unknown result type (might be due to invalid IL or missing references)
		//IL_0613: Unknown result type (might be due to invalid IL or missing references)
		//IL_061e: Unknown result type (might be due to invalid IL or missing references)
		//IL_062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_063d: Unknown result type (might be due to invalid IL or missing references)
		//IL_064f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0661: Unknown result type (might be due to invalid IL or missing references)
		//IL_067c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0686: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_083b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0850: Unknown result type (might be due to invalid IL or missing references)
		//IL_148d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1493: Unknown result type (might be due to invalid IL or missing references)
		//IL_149d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_090a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0918: Unknown result type (might be due to invalid IL or missing references)
		//IL_091d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0929: Unknown result type (might be due to invalid IL or missing references)
		//IL_093b: Unknown result type (might be due to invalid IL or missing references)
		//IL_094d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0968: Unknown result type (might be due to invalid IL or missing references)
		//IL_0972: Unknown result type (might be due to invalid IL or missing references)
		//IL_0998: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_162e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1634: Unknown result type (might be due to invalid IL or missing references)
		//IL_163e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1644: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1175: Unknown result type (might be due to invalid IL or missing references)
		//IL_117b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1185: Unknown result type (might be due to invalid IL or missing references)
		//IL_118b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1195: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1208: Unknown result type (might be due to invalid IL or missing references)
		//IL_122e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1007: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028: Unknown result type (might be due to invalid IL or missing references)
		//IL_1032: Unknown result type (might be due to invalid IL or missing references)
		//IL_105e: Unknown result type (might be due to invalid IL or missing references)
		//IL_198a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1990: Unknown result type (might be due to invalid IL or missing references)
		//IL_199a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1543: Unknown result type (might be due to invalid IL or missing references)
		//IL_1549: Unknown result type (might be due to invalid IL or missing references)
		//IL_1553: Unknown result type (might be due to invalid IL or missing references)
		//IL_1559: Unknown result type (might be due to invalid IL or missing references)
		//IL_1563: Unknown result type (might be due to invalid IL or missing references)
		//IL_156e: Unknown result type (might be due to invalid IL or missing references)
		//IL_157c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1581: Unknown result type (might be due to invalid IL or missing references)
		//IL_1585: Unknown result type (might be due to invalid IL or missing references)
		//IL_1597: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_15be: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_135f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1365: Unknown result type (might be due to invalid IL or missing references)
		//IL_136f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1375: Unknown result type (might be due to invalid IL or missing references)
		//IL_137f: Unknown result type (might be due to invalid IL or missing references)
		//IL_138a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1398: Unknown result type (might be due to invalid IL or missing references)
		//IL_139d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_13be: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1427: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d76: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1700: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1898: Unknown result type (might be due to invalid IL or missing references)
		//IL_189e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_170e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1719: Unknown result type (might be due to invalid IL or missing references)
		//IL_1727: Unknown result type (might be due to invalid IL or missing references)
		//IL_172c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1730: Unknown result type (might be due to invalid IL or missing references)
		//IL_1742: Unknown result type (might be due to invalid IL or missing references)
		//IL_1754: Unknown result type (might be due to invalid IL or missing references)
		//IL_1763: Unknown result type (might be due to invalid IL or missing references)
		//IL_1769: Unknown result type (might be due to invalid IL or missing references)
		//IL_1773: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a59: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a98: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_18da: Unknown result type (might be due to invalid IL or missing references)
		//IL_18de: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1902: Unknown result type (might be due to invalid IL or missing references)
		//IL_1911: Unknown result type (might be due to invalid IL or missing references)
		//IL_1917: Unknown result type (might be due to invalid IL or missing references)
		//IL_1921: Unknown result type (might be due to invalid IL or missing references)
		//IL_244f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2454: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c41: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e14: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2000: Unknown result type (might be due to invalid IL or missing references)
		//IL_2005: Unknown result type (might be due to invalid IL or missing references)
		//IL_2011: Unknown result type (might be due to invalid IL or missing references)
		//IL_2023: Unknown result type (might be due to invalid IL or missing references)
		//IL_2035: Unknown result type (might be due to invalid IL or missing references)
		//IL_2050: Unknown result type (might be due to invalid IL or missing references)
		//IL_205a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2080: Unknown result type (might be due to invalid IL or missing references)
		//IL_215b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2168: Unknown result type (might be due to invalid IL or missing references)
		//IL_221a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2220: Unknown result type (might be due to invalid IL or missing references)
		//IL_222a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2230: Unknown result type (might be due to invalid IL or missing references)
		//IL_223a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2245: Unknown result type (might be due to invalid IL or missing references)
		//IL_2253: Unknown result type (might be due to invalid IL or missing references)
		//IL_2258: Unknown result type (might be due to invalid IL or missing references)
		//IL_2264: Unknown result type (might be due to invalid IL or missing references)
		//IL_2276: Unknown result type (might be due to invalid IL or missing references)
		//IL_2288: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_22df: Unknown result type (might be due to invalid IL or missing references)
		//IL_22fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2310: Unknown result type (might be due to invalid IL or missing references)
		//IL_2322: Unknown result type (might be due to invalid IL or missing references)
		//IL_234d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2367: Unknown result type (might be due to invalid IL or missing references)
		//IL_238c: Unknown result type (might be due to invalid IL or missing references)
		//IL_259a: Unknown result type (might be due to invalid IL or missing references)
		//IL_259f: Unknown result type (might be due to invalid IL or missing references)
		//IL_261a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2922: Unknown result type (might be due to invalid IL or missing references)
		//IL_2928: Unknown result type (might be due to invalid IL or missing references)
		//IL_2932: Unknown result type (might be due to invalid IL or missing references)
		//IL_2938: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3051: Unknown result type (might be due to invalid IL or missing references)
		//IL_305e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_270f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2710: Unknown result type (might be due to invalid IL or missing references)
		//IL_2712: Unknown result type (might be due to invalid IL or missing references)
		//IL_2717: Unknown result type (might be due to invalid IL or missing references)
		//IL_2719: Unknown result type (might be due to invalid IL or missing references)
		//IL_2721: Unknown result type (might be due to invalid IL or missing references)
		//IL_273a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_26db: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2703: Unknown result type (might be due to invalid IL or missing references)
		//IL_2708: Unknown result type (might be due to invalid IL or missing references)
		//IL_270d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3512: Unknown result type (might be due to invalid IL or missing references)
		//IL_351f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e38: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e48: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_29cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_29dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a10: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a34: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a59: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2759: Unknown result type (might be due to invalid IL or missing references)
		//IL_2748: Unknown result type (might be due to invalid IL or missing references)
		//IL_310a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3110: Unknown result type (might be due to invalid IL or missing references)
		//IL_311a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3120: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_276a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_35cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_35db: Unknown result type (might be due to invalid IL or missing references)
		//IL_35e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3161: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3622: Unknown result type (might be due to invalid IL or missing references)
		//IL_279c: Unknown result type (might be due to invalid IL or missing references)
		//IL_279e: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_27dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_38c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_38cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_38d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_38dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_31db: Unknown result type (might be due to invalid IL or missing references)
		//IL_31dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c98: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d51: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2805: Unknown result type (might be due to invalid IL or missing references)
		//IL_280a: Unknown result type (might be due to invalid IL or missing references)
		//IL_391d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f80: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f95: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3023: Unknown result type (might be due to invalid IL or missing references)
		//IL_281a: Unknown result type (might be due to invalid IL or missing references)
		//IL_281c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2821: Unknown result type (might be due to invalid IL or missing references)
		//IL_3257: Unknown result type (might be due to invalid IL or missing references)
		//IL_325d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3267: Unknown result type (might be due to invalid IL or missing references)
		//IL_326d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2830: Unknown result type (might be due to invalid IL or missing references)
		//IL_36fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3703: Unknown result type (might be due to invalid IL or missing references)
		//IL_370d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3713: Unknown result type (might be due to invalid IL or missing references)
		//IL_371d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3728: Unknown result type (might be due to invalid IL or missing references)
		//IL_3736: Unknown result type (might be due to invalid IL or missing references)
		//IL_373b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3747: Unknown result type (might be due to invalid IL or missing references)
		//IL_3759: Unknown result type (might be due to invalid IL or missing references)
		//IL_376b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3786: Unknown result type (might be due to invalid IL or missing references)
		//IL_3790: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_344e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3459: Unknown result type (might be due to invalid IL or missing references)
		//IL_3467: Unknown result type (might be due to invalid IL or missing references)
		//IL_346c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3478: Unknown result type (might be due to invalid IL or missing references)
		//IL_348a: Unknown result type (might be due to invalid IL or missing references)
		//IL_349c: Unknown result type (might be due to invalid IL or missing references)
		//IL_34b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2887: Unknown result type (might be due to invalid IL or missing references)
		//IL_2889: Unknown result type (might be due to invalid IL or missing references)
		//IL_288e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2895: Unknown result type (might be due to invalid IL or missing references)
		//IL_2899: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_28bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_287c: Unknown result type (might be due to invalid IL or missing references)
		//IL_287e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2883: Unknown result type (might be due to invalid IL or missing references)
		//IL_39f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_39fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a18: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a36: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a54: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_3362: Unknown result type (might be due to invalid IL or missing references)
		//IL_336c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3421: Unknown result type (might be due to invalid IL or missing references)
		//IL_342b: Unknown result type (might be due to invalid IL or missing references)
		//IL_33a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ac: Unknown result type (might be due to invalid IL or missing references)
		if (proj.bobber && player[proj.owner].inventory[player[proj.owner].selectedItem].holdStyle != 0)
		{
			DrawProj_FishingLine(proj, ref polePosX, ref polePosY, mountedCenter);
		}
		else if (proj.type == 32)
		{
			Vector2 vector29 = default(Vector2);
			((Vector2)(ref vector29))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num136 = mountedCenter.X - vector29.X;
			float num137 = mountedCenter.Y - vector29.Y;
			float rotation = (float)Math.Atan2(num137, num136) - 1.57f;
			bool flag27 = true;
			if (num136 == 0f && num137 == 0f)
			{
				flag27 = false;
			}
			else
			{
				float num138 = (float)Math.Sqrt(num136 * num136 + num137 * num137);
				num138 = 8f / num138;
				num136 *= num138;
				num137 *= num138;
				vector29.X -= num136;
				vector29.Y -= num137;
				num136 = mountedCenter.X - vector29.X;
				num137 = mountedCenter.Y - vector29.Y;
			}
			while (flag27)
			{
				float num139 = (float)Math.Sqrt(num136 * num136 + num137 * num137);
				if (num139 < 28f)
				{
					flag27 = false;
					continue;
				}
				if (float.IsNaN(num139))
				{
					flag27 = false;
					continue;
				}
				num139 = 28f / num139;
				num136 *= num139;
				num137 *= num139;
				vector29.X += num136;
				vector29.Y += num137;
				num136 = mountedCenter.X - vector29.X;
				num137 = mountedCenter.Y - vector29.Y;
				Color color32 = Lighting.GetColor((int)vector29.X / 16, (int)(vector29.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain5.Value, new Vector2(vector29.X - screenPosition.X, vector29.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain5.Width(), TextureAssets.Chain5.Height()), color32, rotation, new Vector2((float)TextureAssets.Chain5.Width() * 0.5f, (float)TextureAssets.Chain5.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 73)
		{
			Vector2 vector30 = default(Vector2);
			((Vector2)(ref vector30))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num140 = mountedCenter.X - vector30.X;
			float num141 = mountedCenter.Y - vector30.Y;
			float rotation12 = (float)Math.Atan2(num141, num140) - 1.57f;
			bool flag28 = true;
			while (flag28)
			{
				float num142 = (float)Math.Sqrt(num140 * num140 + num141 * num141);
				if (num142 < 25f)
				{
					flag28 = false;
					continue;
				}
				if (float.IsNaN(num142))
				{
					flag28 = false;
					continue;
				}
				num142 = 12f / num142;
				num140 *= num142;
				num141 *= num142;
				vector30.X += num140;
				vector30.Y += num141;
				num140 = mountedCenter.X - vector30.X;
				num141 = mountedCenter.Y - vector30.Y;
				Color color33 = Lighting.GetColor((int)vector30.X / 16, (int)(vector30.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain8.Value, new Vector2(vector30.X - screenPosition.X, vector30.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain8.Width(), TextureAssets.Chain8.Height()), color33, rotation12, new Vector2((float)TextureAssets.Chain8.Width() * 0.5f, (float)TextureAssets.Chain8.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 186)
		{
			Vector2 vector31 = default(Vector2);
			((Vector2)(ref vector31))._002Ector(proj.localAI[0], proj.localAI[1]);
			float num143 = Vector2.Distance(proj.Center, vector31) - ((Vector2)(ref proj.velocity)).Length();
			float num144 = (float)TextureAssets.Chain17.Height() - num143;
			if (num143 > 0f && proj.ai[1] > 0f)
			{
				Color color34 = Lighting.GetColor((int)proj.position.X / 16, (int)proj.position.Y / 16);
				EntitySpriteDraw(TextureAssets.Chain17.Value, vector31 - screenPosition, (Rectangle?)new Rectangle(0, (int)num144, TextureAssets.Chain17.Width(), (int)num143), color34, proj.rotation, new Vector2((float)(TextureAssets.Chain17.Width() / 2), 0f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 74)
		{
			Vector2 vector32 = default(Vector2);
			((Vector2)(ref vector32))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num145 = mountedCenter.X - vector32.X;
			float num146 = mountedCenter.Y - vector32.Y;
			float rotation16 = (float)Math.Atan2(num146, num145) - 1.57f;
			bool flag29 = true;
			while (flag29)
			{
				float num147 = (float)Math.Sqrt(num145 * num145 + num146 * num146);
				if (num147 < 25f)
				{
					flag29 = false;
					continue;
				}
				if (float.IsNaN(num147))
				{
					flag29 = false;
					continue;
				}
				num147 = 12f / num147;
				num145 *= num147;
				num146 *= num147;
				vector32.X += num145;
				vector32.Y += num146;
				num145 = mountedCenter.X - vector32.X;
				num146 = mountedCenter.Y - vector32.Y;
				Color color10 = Lighting.GetColor((int)vector32.X / 16, (int)(vector32.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain9.Value, new Vector2(vector32.X - screenPosition.X, vector32.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain8.Width(), TextureAssets.Chain8.Height()), color10, rotation16, new Vector2((float)TextureAssets.Chain8.Width() * 0.5f, (float)TextureAssets.Chain8.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 171)
		{
			Vector2 vector33 = default(Vector2);
			((Vector2)(ref vector33))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num148 = 0f - proj.velocity.X;
			float num149 = 0f - proj.velocity.Y;
			float num150 = 1f;
			if (proj.ai[0] <= 17f)
			{
				num150 = proj.ai[0] / 17f;
			}
			int num151 = (int)(30f * num150);
			float num152 = 1f;
			if (proj.ai[0] <= 30f)
			{
				num152 = proj.ai[0] / 30f;
			}
			float num153 = 0.4f * num152;
			float num154 = num153;
			num149 += num154;
			Vector2[] array = (Vector2[])(object)new Vector2[num151];
			float[] array2 = new float[num151];
			for (int k = 0; k < num151; k++)
			{
				float num155 = (float)Math.Sqrt(num148 * num148 + num149 * num149);
				float num156 = 5.6f;
				if (Math.Abs(num148) + Math.Abs(num149) < 1f)
				{
					num156 *= Math.Abs(num148) + Math.Abs(num149) / 1f;
				}
				num155 = num156 / num155;
				num148 *= num155;
				num149 *= num155;
				float num157 = (float)Math.Atan2(num149, num148) - 1.57f;
				array[k].X = vector33.X;
				array[k].Y = vector33.Y;
				array2[k] = num157;
				vector33.X += num148;
				vector33.Y += num149;
				num148 = 0f - proj.velocity.X;
				num149 = 0f - proj.velocity.Y;
				num154 += num153;
				num149 += num154;
			}
			for (int num158 = --num151; num158 >= 0; num158--)
			{
				vector33.X = array[num158].X;
				vector33.Y = array[num158].Y;
				float rotation17 = array2[num158];
				Color color11 = Lighting.GetColor((int)vector33.X / 16, (int)(vector33.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain16.Value, new Vector2(vector33.X - screenPosition.X, vector33.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain16.Width(), TextureAssets.Chain16.Height()), color11, rotation17, new Vector2((float)TextureAssets.Chain16.Width() * 0.5f, (float)TextureAssets.Chain16.Height() * 0.5f), 0.8f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 475)
		{
			Vector2 vector34 = default(Vector2);
			((Vector2)(ref vector34))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num159 = 0f - proj.velocity.X;
			float num160 = 0f - proj.velocity.Y;
			float num161 = 1f;
			if (proj.ai[0] <= 17f)
			{
				num161 = proj.ai[0] / 17f;
			}
			int num162 = (int)(30f * num161);
			float num163 = 1f;
			if (proj.ai[0] <= 30f)
			{
				num163 = proj.ai[0] / 30f;
			}
			float num164 = 0.4f * num163;
			float num165 = num164;
			num160 += num165;
			Vector2[] array3 = (Vector2[])(object)new Vector2[num162];
			float[] array4 = new float[num162];
			for (int l = 0; l < num162; l++)
			{
				float num166 = (float)Math.Sqrt(num159 * num159 + num160 * num160);
				float num167 = 5.6f;
				if (Math.Abs(num159) + Math.Abs(num160) < 1f)
				{
					num167 *= Math.Abs(num159) + Math.Abs(num160) / 1f;
				}
				num166 = num167 / num166;
				num159 *= num166;
				num160 *= num166;
				float num168 = (float)Math.Atan2(num160, num159) - 1.57f;
				array3[l].X = vector34.X;
				array3[l].Y = vector34.Y;
				array4[l] = num168;
				vector34.X += num159;
				vector34.Y += num160;
				num159 = 0f - proj.velocity.X;
				num160 = 0f - proj.velocity.Y;
				num165 += num164;
				num160 += num165;
			}
			int num169 = 0;
			for (int num170 = --num162; num170 >= 0; num170--)
			{
				vector34.X = array3[num170].X;
				vector34.Y = array3[num170].Y;
				float rotation18 = array4[num170];
				Color color12 = Lighting.GetColor((int)vector34.X / 16, (int)(vector34.Y / 16f));
				if (num169 % 2 == 0)
				{
					EntitySpriteDraw(TextureAssets.Chain38.Value, new Vector2(vector34.X - screenPosition.X, vector34.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain38.Width(), TextureAssets.Chain38.Height()), color12, rotation18, new Vector2((float)TextureAssets.Chain38.Width() * 0.5f, (float)TextureAssets.Chain38.Height() * 0.5f), 0.8f, (SpriteEffects)0, 0f);
				}
				else
				{
					EntitySpriteDraw(TextureAssets.Chain39.Value, new Vector2(vector34.X - screenPosition.X, vector34.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain39.Width(), TextureAssets.Chain39.Height()), color12, rotation18, new Vector2((float)TextureAssets.Chain39.Width() * 0.5f, (float)TextureAssets.Chain39.Height() * 0.5f), 0.8f, (SpriteEffects)0, 0f);
				}
				num169++;
			}
		}
		else if (proj.type == 505 || proj.type == 506)
		{
			Vector2 vector35 = default(Vector2);
			((Vector2)(ref vector35))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num171 = 0f - proj.velocity.X;
			float num172 = 0f - proj.velocity.Y;
			float num173 = 1f;
			if (proj.ai[0] <= 17f)
			{
				num173 = proj.ai[0] / 17f;
			}
			int num174 = (int)(30f * num173);
			float num175 = 1f;
			if (proj.ai[0] <= 30f)
			{
				num175 = proj.ai[0] / 30f;
			}
			float num176 = 0.4f * num175;
			float num177 = num176;
			num172 += num177;
			Vector2[] array5 = (Vector2[])(object)new Vector2[num174];
			float[] array6 = new float[num174];
			for (int m = 0; m < num174; m++)
			{
				float num178 = (float)Math.Sqrt(num171 * num171 + num172 * num172);
				float num179 = 5.6f;
				if (Math.Abs(num171) + Math.Abs(num172) < 1f)
				{
					num179 *= Math.Abs(num171) + Math.Abs(num172) / 1f;
				}
				num178 = num179 / num178;
				num171 *= num178;
				num172 *= num178;
				float num180 = (float)Math.Atan2(num172, num171) - 1.57f;
				array5[m].X = vector35.X;
				array5[m].Y = vector35.Y;
				array6[m] = num180;
				vector35.X += num171;
				vector35.Y += num172;
				num171 = 0f - proj.velocity.X;
				num172 = 0f - proj.velocity.Y;
				num177 += num176;
				num172 += num177;
			}
			int num181 = 0;
			for (int num182 = --num174; num182 >= 0; num182--)
			{
				vector35.X = array5[num182].X;
				vector35.Y = array5[num182].Y;
				float rotation19 = array6[num182];
				Color color13 = Lighting.GetColor((int)vector35.X / 16, (int)(vector35.Y / 16f));
				int num183 = 4;
				if (proj.type == 506)
				{
					num183 = 6;
				}
				num183 += num181 % 2;
				EntitySpriteDraw(TextureAssets.Chains[num183].Value, new Vector2(vector35.X - screenPosition.X, vector35.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chains[num183].Width(), TextureAssets.Chains[num183].Height()), color13, rotation19, new Vector2((float)TextureAssets.Chains[num183].Width() * 0.5f, (float)TextureAssets.Chains[num183].Height() * 0.5f), 0.8f, (SpriteEffects)0, 0f);
				num181++;
			}
		}
		else if (proj.type == 165)
		{
			Vector2 vector10 = default(Vector2);
			((Vector2)(ref vector10))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num184 = mountedCenter.X - vector10.X;
			float num185 = mountedCenter.Y - vector10.Y;
			float rotation20 = (float)Math.Atan2(num185, num184) - 1.57f;
			bool flag30 = true;
			while (flag30)
			{
				float num186 = (float)Math.Sqrt(num184 * num184 + num185 * num185);
				if (num186 < 25f)
				{
					flag30 = false;
					continue;
				}
				if (float.IsNaN(num186))
				{
					flag30 = false;
					continue;
				}
				num186 = 24f / num186;
				num184 *= num186;
				num185 *= num186;
				vector10.X += num184;
				vector10.Y += num185;
				num184 = mountedCenter.X - vector10.X;
				num185 = mountedCenter.Y - vector10.Y;
				Color color14 = Lighting.GetColor((int)vector10.X / 16, (int)(vector10.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain15.Value, new Vector2(vector10.X - screenPosition.X, vector10.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain15.Width(), TextureAssets.Chain15.Height()), color14, rotation20, new Vector2((float)TextureAssets.Chain15.Width() * 0.5f, (float)TextureAssets.Chain15.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type >= 230 && proj.type <= 235)
		{
			int num187 = proj.type - 229;
			Vector2 vector11 = default(Vector2);
			((Vector2)(ref vector11))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num188 = mountedCenter.X - vector11.X;
			float num189 = mountedCenter.Y - vector11.Y;
			float rotation21 = (float)Math.Atan2(num189, num188) - 1.57f;
			bool flag31 = true;
			while (flag31)
			{
				float num190 = (float)Math.Sqrt(num188 * num188 + num189 * num189);
				if (num190 < 25f)
				{
					flag31 = false;
					continue;
				}
				if (float.IsNaN(num190))
				{
					flag31 = false;
					continue;
				}
				num190 = (float)TextureAssets.GemChain[num187].Height() / num190;
				num188 *= num190;
				num189 *= num190;
				vector11.X += num188;
				vector11.Y += num189;
				num188 = mountedCenter.X - vector11.X;
				num189 = mountedCenter.Y - vector11.Y;
				Color color15 = Lighting.GetColor((int)vector11.X / 16, (int)(vector11.Y / 16f));
				EntitySpriteDraw(TextureAssets.GemChain[num187].Value, new Vector2(vector11.X - screenPosition.X, vector11.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.GemChain[num187].Width(), TextureAssets.GemChain[num187].Height()), color15, rotation21, new Vector2((float)TextureAssets.GemChain[num187].Width() * 0.5f, (float)TextureAssets.GemChain[num187].Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 753)
		{
			Vector2 vector12 = default(Vector2);
			((Vector2)(ref vector12))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num191 = mountedCenter.X - vector12.X;
			float num192 = mountedCenter.Y - vector12.Y;
			float rotation22 = (float)Math.Atan2(num192, num191) - 1.57f;
			bool flag10 = true;
			Texture2D value11 = TextureAssets.Extra[95].Value;
			while (flag10)
			{
				float num193 = (float)Math.Sqrt(num191 * num191 + num192 * num192);
				if (num193 < 25f)
				{
					flag10 = false;
					continue;
				}
				if (float.IsNaN(num193))
				{
					flag10 = false;
					continue;
				}
				num193 = (float)value11.Height / num193;
				num191 *= num193;
				num192 *= num193;
				vector12.X += num191;
				vector12.Y += num192;
				num191 = mountedCenter.X - vector12.X;
				num192 = mountedCenter.Y - vector12.Y;
				Color color16 = Lighting.GetColor((int)vector12.X / 16, (int)(vector12.Y / 16f));
				EntitySpriteDraw(value11, new Vector2(vector12.X - screenPosition.X, vector12.Y - screenPosition.Y), null, color16, rotation22, value11.Size() / 2f, 1f, (SpriteEffects)0);
			}
		}
		else if (proj.type == 865)
		{
			Vector2 vector13 = default(Vector2);
			((Vector2)(ref vector13))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num194 = mountedCenter.X - vector13.X;
			float num195 = mountedCenter.Y - vector13.Y;
			float rotation2 = (float)Math.Atan2(num195, num194) - 1.57f;
			bool flag11 = true;
			bool flag12 = true;
			Texture2D value12 = TextureAssets.Extra[154].Value;
			while (flag11)
			{
				float num196 = (float)Math.Sqrt(num194 * num194 + num195 * num195);
				if (num196 < 25f)
				{
					flag11 = false;
					continue;
				}
				if (float.IsNaN(num196))
				{
					flag11 = false;
					continue;
				}
				num196 = (float)value12.Height / num196;
				num194 *= num196;
				num195 *= num196;
				vector13.X += num194;
				vector13.Y += num195;
				num194 = mountedCenter.X - vector13.X;
				num195 = mountedCenter.Y - vector13.Y;
				if (!flag12)
				{
					Color color17 = Lighting.GetColor((int)vector13.X / 16, (int)(vector13.Y / 16f));
					EntitySpriteDraw(value12, new Vector2(vector13.X - screenPosition.X, vector13.Y - screenPosition.Y), null, color17, rotation2, value12.Size() / 2f, 1f, (SpriteEffects)0);
				}
				flag12 = false;
			}
		}
		else if (proj.type == 935)
		{
			Vector2 vector14 = default(Vector2);
			((Vector2)(ref vector14))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num197 = mountedCenter.X - vector14.X;
			float num198 = mountedCenter.Y - vector14.Y;
			float rotation3 = (float)Math.Atan2(num198, num197) - 1.57f;
			bool flag13 = true;
			bool flag14 = true;
			Texture2D value13 = TextureAssets.Extra[208].Value;
			while (flag13)
			{
				float num199 = (float)Math.Sqrt(num197 * num197 + num198 * num198);
				if (num199 < 8f)
				{
					flag13 = false;
					continue;
				}
				if (float.IsNaN(num199))
				{
					flag13 = false;
					continue;
				}
				num199 = (float)value13.Height / num199;
				num197 *= num199;
				num198 *= num199;
				vector14.X += num197;
				vector14.Y += num198;
				num197 = mountedCenter.X - vector14.X;
				num198 = mountedCenter.Y - vector14.Y;
				if (!flag14)
				{
					Color color18 = Lighting.GetColor((int)vector14.X / 16, (int)(vector14.Y / 16f));
					EntitySpriteDraw(value13, new Vector2(vector14.X - screenPosition.X, vector14.Y - screenPosition.Y), null, color18, rotation3, value13.Size() / 2f, 1f, (SpriteEffects)0);
				}
				flag14 = false;
			}
		}
		else if (proj.type == 256)
		{
			Vector2 vector15 = default(Vector2);
			((Vector2)(ref vector15))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num200 = mountedCenter.X - vector15.X;
			float num201 = mountedCenter.Y - vector15.Y;
			float num202 = (float)Math.Atan2(num201, num200) - 1.57f;
			bool flag15 = true;
			while (flag15)
			{
				float num203 = (float)Math.Sqrt(num200 * num200 + num201 * num201);
				if (num203 < 26f)
				{
					flag15 = false;
					continue;
				}
				if (float.IsNaN(num203))
				{
					flag15 = false;
					continue;
				}
				num203 = 26f / num203;
				num200 *= num203;
				num201 *= num203;
				vector15.X += num200;
				vector15.Y += num201;
				num200 = player[proj.owner].position.X + (float)(player[proj.owner].width / 2) - vector15.X;
				num201 = player[proj.owner].position.Y + (float)(player[proj.owner].height / 2) - vector15.Y;
				Color color19 = Lighting.GetColor((int)vector15.X / 16, (int)(vector15.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain20.Value, new Vector2(vector15.X - screenPosition.X, vector15.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain20.Width(), TextureAssets.Chain20.Height()), color19, num202 - 0.785f, new Vector2((float)TextureAssets.Chain20.Width() * 0.5f, (float)TextureAssets.Chain20.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 322)
		{
			Vector2 vector16 = default(Vector2);
			((Vector2)(ref vector16))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num204 = mountedCenter.X - vector16.X;
			float num205 = mountedCenter.Y - vector16.Y;
			float rotation4 = (float)Math.Atan2(num205, num204) - 1.57f;
			bool flag16 = true;
			while (flag16)
			{
				float num206 = (float)Math.Sqrt(num204 * num204 + num205 * num205);
				if (num206 < 22f)
				{
					flag16 = false;
					continue;
				}
				if (float.IsNaN(num206))
				{
					flag16 = false;
					continue;
				}
				num206 = 22f / num206;
				num204 *= num206;
				num205 *= num206;
				vector16.X += num204;
				vector16.Y += num205;
				num204 = mountedCenter.X - vector16.X;
				num205 = mountedCenter.Y - vector16.Y;
				Color color20 = Lighting.GetColor((int)vector16.X / 16, (int)(vector16.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain29.Value, new Vector2(vector16.X - screenPosition.X, vector16.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain29.Width(), TextureAssets.Chain29.Height()), color20, rotation4, new Vector2((float)TextureAssets.Chain29.Width() * 0.5f, (float)TextureAssets.Chain29.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 315)
		{
			Vector2 vector17 = default(Vector2);
			((Vector2)(ref vector17))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num207 = mountedCenter.X - vector17.X;
			float num208 = mountedCenter.Y - vector17.Y;
			float rotation5 = (float)Math.Atan2(num208, num207) - 1.57f;
			bool flag17 = true;
			while (flag17)
			{
				float num209 = (float)Math.Sqrt(num207 * num207 + num208 * num208);
				if (num209 < 50f)
				{
					flag17 = false;
					continue;
				}
				if (float.IsNaN(num209))
				{
					flag17 = false;
					continue;
				}
				num209 = 40f / num209;
				num207 *= num209;
				num208 *= num209;
				vector17.X += num207;
				vector17.Y += num208;
				num207 = mountedCenter.X - vector17.X;
				num208 = mountedCenter.Y - vector17.Y;
				Color color21 = Lighting.GetColor((int)vector17.X / 16, (int)(vector17.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain28.Value, new Vector2(vector17.X - screenPosition.X, vector17.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain28.Width(), TextureAssets.Chain28.Height()), color21, rotation5, new Vector2((float)TextureAssets.Chain28.Width() * 0.5f, (float)TextureAssets.Chain28.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 331)
		{
			Vector2 vector18 = default(Vector2);
			((Vector2)(ref vector18))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num210 = mountedCenter.X - vector18.X;
			float num211 = mountedCenter.Y - vector18.Y;
			float rotation6 = (float)Math.Atan2(num211, num210) - 1.57f;
			bool flag18 = true;
			while (flag18)
			{
				float num100 = (float)Math.Sqrt(num210 * num210 + num211 * num211);
				if (num100 < 30f)
				{
					flag18 = false;
					continue;
				}
				if (float.IsNaN(num100))
				{
					flag18 = false;
					continue;
				}
				num100 = 24f / num100;
				num210 *= num100;
				num211 *= num100;
				vector18.X += num210;
				vector18.Y += num211;
				num210 = mountedCenter.X - vector18.X;
				num211 = mountedCenter.Y - vector18.Y;
				Color color22 = Lighting.GetColor((int)vector18.X / 16, (int)(vector18.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain30.Value, new Vector2(vector18.X - screenPosition.X, vector18.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain30.Width(), TextureAssets.Chain30.Height()), color22, rotation6, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, (float)TextureAssets.Chain30.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 332)
		{
			int num101 = 0;
			Vector2 vector19 = default(Vector2);
			((Vector2)(ref vector19))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num102 = mountedCenter.X - vector19.X;
			float num103 = mountedCenter.Y - vector19.Y;
			float rotation7 = (float)Math.Atan2(num103, num102) - 1.57f;
			bool flag19 = true;
			while (flag19)
			{
				float num104 = (float)Math.Sqrt(num102 * num102 + num103 * num103);
				if (num104 < 30f)
				{
					flag19 = false;
					continue;
				}
				if (float.IsNaN(num104))
				{
					flag19 = false;
					continue;
				}
				int i2 = (int)vector19.X / 16;
				int j2 = (int)vector19.Y / 16;
				if (num101 == 0)
				{
					Lighting.AddLight(i2, j2, 0f, 0.2f, 0.2f);
				}
				if (num101 == 1)
				{
					Lighting.AddLight(i2, j2, 0.1f, 0.2f, 0f);
				}
				if (num101 == 2)
				{
					Lighting.AddLight(i2, j2, 0.2f, 0.1f, 0f);
				}
				if (num101 == 3)
				{
					Lighting.AddLight(i2, j2, 0.2f, 0f, 0.2f);
				}
				num104 = 16f / num104;
				num102 *= num104;
				num103 *= num104;
				vector19.X += num102;
				vector19.Y += num103;
				num102 = mountedCenter.X - vector19.X;
				num103 = mountedCenter.Y - vector19.Y;
				Color color23 = Lighting.GetColor((int)vector19.X / 16, (int)(vector19.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain31.Value, new Vector2(vector19.X - screenPosition.X, vector19.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, TextureAssets.Chain31.Height() / 4 * num101, TextureAssets.Chain31.Width(), TextureAssets.Chain31.Height() / 4), color23, rotation7, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, (float)(TextureAssets.Chain30.Height() / 8)), 1f, (SpriteEffects)0, 0f);
				EntitySpriteDraw(TextureAssets.Chain32.Value, new Vector2(vector19.X - screenPosition.X, vector19.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, TextureAssets.Chain31.Height() / 4 * num101, TextureAssets.Chain31.Width(), TextureAssets.Chain31.Height() / 4), new Color(200, 200, 200, 0), rotation7, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, (float)(TextureAssets.Chain30.Height() / 8)), 1f, (SpriteEffects)0, 0f);
				num101++;
				if (num101 > 3)
				{
					num101 = 0;
				}
			}
		}
		else if (proj.type == 372 || proj.type == 383 || proj.type == 396 || proj.type == 403 || proj.type == 404 || proj.type == 446 || (proj.type >= 486 && proj.type <= 489) || (proj.type >= 646 && proj.type <= 649) || proj.type == 652)
		{
			Texture2D texture2D = null;
			Color color24 = Color.Transparent;
			Texture2D value10 = TextureAssets.Chain33.Value;
			if (proj.type == 383)
			{
				value10 = TextureAssets.Chain34.Value;
			}
			if (proj.type == 396)
			{
				value10 = TextureAssets.Chain35.Value;
			}
			if (proj.type == 403)
			{
				value10 = TextureAssets.Chain36.Value;
			}
			if (proj.type == 404)
			{
				value10 = TextureAssets.Chain37.Value;
			}
			if (proj.type == 446)
			{
				value10 = TextureAssets.Extra[3].Value;
			}
			if (proj.type >= 486 && proj.type <= 489)
			{
				value10 = TextureAssets.Chains[proj.type - 486].Value;
			}
			if (proj.type >= 646 && proj.type <= 649)
			{
				value10 = TextureAssets.Chains[proj.type - 646 + 8].Value;
				texture2D = TextureAssets.Chains[proj.type - 646 + 12].Value;
				((Color)(ref color24))._002Ector(255, 255, 255, 127);
			}
			if (proj.type == 652)
			{
				value10 = TextureAssets.Chains[16].Value;
			}
			Vector2 center = proj.Center;
			Rectangle? sourceRectangle = null;
			Vector2 origin4 = default(Vector2);
			((Vector2)(ref origin4))._002Ector((float)value10.Width * 0.5f, (float)value10.Height * 0.5f);
			float num105 = value10.Height;
			float num106 = 0f;
			if (proj.type == 446)
			{
				int num107 = 7;
				int num108 = (int)proj.localAI[0] / num107;
				sourceRectangle = new Rectangle(0, value10.Height / 4 * num108, value10.Width, value10.Height / 4);
				origin4.Y /= 4f;
				num105 /= 4f;
			}
			switch (proj.type)
			{
			case 383:
				num106 = 14f;
				break;
			case 446:
				num106 = 20f;
				break;
			case 489:
				num106 = 10f;
				break;
			case 487:
				num106 = 8f;
				break;
			}
			if (num106 != 0f)
			{
				float num109 = -1.57f;
				Vector2 vector20 = default(Vector2);
				((Vector2)(ref vector20))._002Ector((float)Math.Cos(proj.rotation + num109), (float)Math.Sin(proj.rotation + num109));
				center -= vector20 * num106;
				vector20 = mountedCenter - center;
				((Vector2)(ref vector20)).Normalize();
				center -= vector20 * num105 / 2f;
			}
			Vector2 vector21 = mountedCenter - center;
			float rotation8 = (float)Math.Atan2(vector21.Y, vector21.X) - 1.57f;
			bool flag20 = true;
			if (float.IsNaN(center.X) && float.IsNaN(center.Y))
			{
				flag20 = false;
			}
			if (float.IsNaN(vector21.X) && float.IsNaN(vector21.Y))
			{
				flag20 = false;
			}
			while (flag20)
			{
				if (((Vector2)(ref vector21)).Length() < num105 + 1f)
				{
					flag20 = false;
					continue;
				}
				Vector2 vector22 = vector21;
				((Vector2)(ref vector22)).Normalize();
				center += vector22 * num105;
				vector21 = mountedCenter - center;
				Color color25 = Lighting.GetColor((int)center.X / 16, (int)(center.Y / 16f));
				if (proj.type == 396)
				{
					color25 *= (float)(255 - proj.alpha) / 255f;
				}
				if (proj.type == 446)
				{
					color25 = proj.GetAlpha(color25);
				}
				if (proj.type == 488)
				{
					Lighting.AddLight(center, 0.2f, 0f, 0.175f);
					((Color)(ref color25))._002Ector(255, 255, 255, 255);
				}
				if (proj.type >= 646 && proj.type <= 649)
				{
					color25 = proj.GetAlpha(color25);
				}
				EntitySpriteDraw(value10, center - screenPosition, sourceRectangle, color25, rotation8, origin4, 1f, (SpriteEffects)0);
				if (texture2D != null)
				{
					EntitySpriteDraw(texture2D, center - screenPosition, sourceRectangle, color24, rotation8, origin4, 1f, (SpriteEffects)0);
				}
			}
		}
		else if (proj.aiStyle == 7)
		{
			Vector2 vector23 = default(Vector2);
			((Vector2)(ref vector23))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num110 = mountedCenter.X - vector23.X;
			float num111 = mountedCenter.Y - vector23.Y;
			float rotation9 = (float)Math.Atan2(num111, num110) - 1.57f;
			bool flag21 = true;
			while (flag21)
			{
				float num112 = (float)Math.Sqrt(num110 * num110 + num111 * num111);
				if (num112 < 25f)
				{
					flag21 = false;
					continue;
				}
				if (float.IsNaN(num112))
				{
					flag21 = false;
					continue;
				}
				num112 = 12f / num112;
				num110 *= num112;
				num111 *= num112;
				vector23.X += num110;
				vector23.Y += num111;
				num110 = mountedCenter.X - vector23.X;
				num111 = mountedCenter.Y - vector23.Y;
				Color color26 = Lighting.GetColor((int)vector23.X / 16, (int)(vector23.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain.Value, new Vector2(vector23.X - screenPosition.X, vector23.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain.Width(), TextureAssets.Chain.Height()), color26, rotation9, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 262)
		{
			float x = proj.Center.X;
			float y = proj.Center.Y;
			float x4 = proj.velocity.X;
			float y3 = proj.velocity.Y;
			float num113 = (float)Math.Sqrt(x4 * x4 + y3 * y3);
			num113 = 4f / num113;
			if (proj.ai[0] == 0f)
			{
				x -= proj.velocity.X * num113;
				y -= proj.velocity.Y * num113;
			}
			else
			{
				x += proj.velocity.X * num113;
				y += proj.velocity.Y * num113;
			}
			Vector2 vector24 = default(Vector2);
			((Vector2)(ref vector24))._002Ector(x, y);
			x4 = mountedCenter.X - vector24.X;
			y3 = mountedCenter.Y - vector24.Y;
			float rotation10 = (float)Math.Atan2(y3, x4) - 1.57f;
			if (proj.alpha == 0)
			{
				int num114 = -1;
				if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
				{
					num114 = 1;
				}
				if (player[proj.owner].direction == 1)
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y3 * (float)num114, x4 * (float)num114);
				}
				else
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y3 * (float)num114, x4 * (float)num114);
				}
			}
			bool flag22 = true;
			while (flag22)
			{
				float num115 = (float)Math.Sqrt(x4 * x4 + y3 * y3);
				if (num115 < 25f)
				{
					flag22 = false;
					continue;
				}
				if (float.IsNaN(num115))
				{
					flag22 = false;
					continue;
				}
				num115 = 12f / num115;
				x4 *= num115;
				y3 *= num115;
				vector24.X += x4;
				vector24.Y += y3;
				x4 = mountedCenter.X - vector24.X;
				y3 = mountedCenter.Y - vector24.Y;
				Color color27 = Lighting.GetColor((int)vector24.X / 16, (int)(vector24.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain22.Value, new Vector2(vector24.X - screenPosition.X, vector24.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain22.Width(), TextureAssets.Chain22.Height()), color27, rotation10, new Vector2((float)TextureAssets.Chain22.Width() * 0.5f, (float)TextureAssets.Chain22.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 273)
		{
			float x5 = proj.Center.X;
			float y4 = proj.Center.Y;
			float x6 = proj.velocity.X;
			float y5 = proj.velocity.Y;
			float num116 = (float)Math.Sqrt(x6 * x6 + y5 * y5);
			num116 = 4f / num116;
			if (proj.ai[0] == 0f)
			{
				x5 -= proj.velocity.X * num116;
				y4 -= proj.velocity.Y * num116;
			}
			else
			{
				x5 += proj.velocity.X * num116;
				y4 += proj.velocity.Y * num116;
			}
			Vector2 vector25 = default(Vector2);
			((Vector2)(ref vector25))._002Ector(x5, y4);
			x6 = mountedCenter.X - vector25.X;
			y5 = mountedCenter.Y - vector25.Y;
			float rotation11 = (float)Math.Atan2(y5, x6) - 1.57f;
			if (proj.alpha == 0)
			{
				int num117 = -1;
				if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
				{
					num117 = 1;
				}
				if (player[proj.owner].direction == 1)
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y5 * (float)num117, x6 * (float)num117);
				}
				else
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y5 * (float)num117, x6 * (float)num117);
				}
			}
			bool flag23 = true;
			while (flag23)
			{
				float num118 = (float)Math.Sqrt(x6 * x6 + y5 * y5);
				if (num118 < 25f)
				{
					flag23 = false;
					continue;
				}
				if (float.IsNaN(num118))
				{
					flag23 = false;
					continue;
				}
				num118 = 12f / num118;
				x6 *= num118;
				y5 *= num118;
				vector25.X += x6;
				vector25.Y += y5;
				x6 = mountedCenter.X - vector25.X;
				y5 = mountedCenter.Y - vector25.Y;
				Color color28 = Lighting.GetColor((int)vector25.X / 16, (int)(vector25.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain23.Value, new Vector2(vector25.X - screenPosition.X, vector25.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain23.Width(), TextureAssets.Chain23.Height()), color28, rotation11, new Vector2((float)TextureAssets.Chain23.Width() * 0.5f, (float)TextureAssets.Chain23.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 481)
		{
			float x7 = proj.Center.X;
			float y6 = proj.Center.Y;
			float x8 = proj.velocity.X;
			float y7 = proj.velocity.Y;
			float num119 = (float)Math.Sqrt(x8 * x8 + y7 * y7);
			num119 = 4f / num119;
			if (proj.ai[0] == 0f)
			{
				x7 -= proj.velocity.X * num119;
				y6 -= proj.velocity.Y * num119;
			}
			else
			{
				x7 += proj.velocity.X * num119;
				y6 += proj.velocity.Y * num119;
			}
			Vector2 origin5 = default(Vector2);
			((Vector2)(ref origin5))._002Ector(x7, y6);
			x8 = mountedCenter.X - origin5.X;
			y7 = mountedCenter.Y - origin5.Y;
			float rotation13 = (float)Math.Atan2(y7, x8) - 1.57f;
			if (proj.alpha == 0)
			{
				int num120 = -1;
				if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
				{
					num120 = 1;
				}
				if (player[proj.owner].direction == 1)
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y7 * (float)num120, x8 * (float)num120);
				}
				else
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y7 * (float)num120, x8 * (float)num120);
				}
			}
			bool flag24 = true;
			while (flag24)
			{
				float num121 = 0.85f;
				float num122 = origin5.Distance(mountedCenter);
				float num123 = num122;
				if ((double)num122 < (double)TextureAssets.Chain40.Height() * 1.5)
				{
					flag24 = false;
					continue;
				}
				if (float.IsNaN(num122))
				{
					flag24 = false;
					continue;
				}
				num122 = (float)TextureAssets.Chain40.Height() * num121 / num122;
				x8 *= num122;
				y7 *= num122;
				origin5.X += x8;
				origin5.Y += y7;
				x8 = mountedCenter.X - origin5.X;
				y7 = mountedCenter.Y - origin5.Y;
				if (num123 > (float)(TextureAssets.Chain40.Height() * 2))
				{
					for (int n = 0; n < 2; n++)
					{
						float num124 = 0.75f;
						float num125 = 1f;
						num125 = ((n != 0) ? Math.Abs(player[proj.owner].velocity.Y) : Math.Abs(player[proj.owner].velocity.X));
						if (num125 > 10f)
						{
							num125 = 10f;
						}
						num125 /= 10f;
						num124 *= num125;
						num125 = num123 / 80f;
						if (num125 > 1f)
						{
							num125 = 1f;
						}
						num124 *= num125;
						if (num124 < 0f)
						{
							num124 = 0f;
						}
						if (float.IsNaN(num124))
						{
							continue;
						}
						if (n == 0)
						{
							if (player[proj.owner].velocity.X < 0f && proj.Center.X < mountedCenter.X)
							{
								y7 *= 1f - num124;
							}
							if (player[proj.owner].velocity.X > 0f && proj.Center.X > mountedCenter.X)
							{
								y7 *= 1f - num124;
							}
						}
						else
						{
							if (player[proj.owner].velocity.Y < 0f && proj.Center.Y < mountedCenter.Y)
							{
								x8 *= 1f - num124;
							}
							if (player[proj.owner].velocity.Y > 0f && proj.Center.Y > mountedCenter.Y)
							{
								x8 *= 1f - num124;
							}
						}
					}
				}
				Color color29 = Lighting.GetColor((int)origin5.X / 16, (int)(origin5.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain40.Value, new Vector2(origin5.X - screenPosition.X, origin5.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain40.Width(), TextureAssets.Chain40.Height()), color29, rotation13, new Vector2((float)TextureAssets.Chain40.Width() * 0.5f, (float)TextureAssets.Chain40.Height() * 0.5f), num121, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 271)
		{
			float x9 = proj.Center.X;
			float y8 = proj.Center.Y;
			float x10 = proj.velocity.X;
			float y9 = proj.velocity.Y;
			float num126 = (float)Math.Sqrt(x10 * x10 + y9 * y9);
			num126 = 4f / num126;
			if (proj.ai[0] == 0f)
			{
				x9 -= proj.velocity.X * num126;
				y8 -= proj.velocity.Y * num126;
			}
			else
			{
				x9 += proj.velocity.X * num126;
				y8 += proj.velocity.Y * num126;
			}
			Vector2 vector26 = default(Vector2);
			((Vector2)(ref vector26))._002Ector(x9, y8);
			x10 = mountedCenter.X - vector26.X;
			y9 = mountedCenter.Y - vector26.Y;
			float rotation14 = (float)Math.Atan2(y9, x10) - 1.57f;
			if (proj.alpha == 0)
			{
				int num127 = -1;
				if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
				{
					num127 = 1;
				}
				if (player[proj.owner].direction == 1)
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y9 * (float)num127, x10 * (float)num127);
				}
				else
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y9 * (float)num127, x10 * (float)num127);
				}
			}
			bool flag25 = true;
			while (flag25)
			{
				float num128 = (float)Math.Sqrt(x10 * x10 + y9 * y9);
				if (num128 < 25f)
				{
					flag25 = false;
					continue;
				}
				if (float.IsNaN(num128))
				{
					flag25 = false;
					continue;
				}
				num128 = 12f / num128;
				x10 *= num128;
				y9 *= num128;
				vector26.X += x10;
				vector26.Y += y9;
				x10 = mountedCenter.X - vector26.X;
				y9 = mountedCenter.Y - vector26.Y;
				Color color30 = Lighting.GetColor((int)vector26.X / 16, (int)(vector26.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain18.Value, new Vector2(vector26.X - screenPosition.X, vector26.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain18.Width(), TextureAssets.Chain18.Height()), color30, rotation14, new Vector2((float)TextureAssets.Chain18.Width() * 0.5f, (float)TextureAssets.Chain18.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.aiStyle == 13)
		{
			float num129 = proj.position.X + 8f;
			float num130 = proj.position.Y + 2f;
			float x11 = proj.velocity.X;
			float num131 = proj.velocity.Y;
			if (x11 == 0f && num131 == 0f)
			{
				num131 = 0.0001f;
				num131 = 0.0001f;
			}
			float num132 = (float)Math.Sqrt(x11 * x11 + num131 * num131);
			num132 = 20f / num132;
			if (proj.ai[0] == 0f)
			{
				num129 -= proj.velocity.X * num132;
				num130 -= proj.velocity.Y * num132;
			}
			else
			{
				num129 += proj.velocity.X * num132;
				num130 += proj.velocity.Y * num132;
			}
			Vector2 vector27 = default(Vector2);
			((Vector2)(ref vector27))._002Ector(num129, num130);
			x11 = mountedCenter.X - vector27.X;
			num131 = mountedCenter.Y - vector27.Y;
			float rotation15 = (float)Math.Atan2(num131, x11) - 1.57f;
			if (proj.alpha == 0)
			{
				int num133 = -1;
				if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
				{
					num133 = 1;
				}
				if (player[proj.owner].direction == 1)
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(num131 * (float)num133, x11 * (float)num133);
				}
				else
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(num131 * (float)num133, x11 * (float)num133);
				}
			}
			bool flag26 = true;
			while (flag26)
			{
				float num134 = (float)Math.Sqrt(x11 * x11 + num131 * num131);
				if (num134 < 25f)
				{
					flag26 = false;
					continue;
				}
				if (float.IsNaN(num134))
				{
					flag26 = false;
					continue;
				}
				num134 = 12f / num134;
				x11 *= num134;
				num131 *= num134;
				vector27.X += x11;
				vector27.Y += num131;
				x11 = mountedCenter.X - vector27.X;
				num131 = mountedCenter.Y - vector27.Y;
				Color color31 = Lighting.GetColor((int)vector27.X / 16, (int)(vector27.Y / 16f));
				EntitySpriteDraw(TextureAssets.Chain.Value, new Vector2(vector27.X - screenPosition.X, vector27.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain.Width(), TextureAssets.Chain.Height()), color31, rotation15, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
			}
		}
		else if (proj.type == 190)
		{
			float x2 = proj.position.X + (float)(proj.width / 2);
			float y10 = proj.position.Y + (float)(proj.height / 2);
			float x3 = proj.velocity.X;
			float y2 = proj.velocity.Y;
			Math.Sqrt(x3 * x3 + y2 * y2);
			Vector2 vector28 = default(Vector2);
			((Vector2)(ref vector28))._002Ector(x2, y10);
			x3 = mountedCenter.X - vector28.X;
			y2 = mountedCenter.Y + player[proj.owner].gfxOffY - vector28.Y;
			Math.Atan2(y2, x3);
			if (proj.alpha == 0)
			{
				int num135 = -1;
				if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
				{
					num135 = 1;
				}
				if (player[proj.owner].direction == 1)
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y2 * (float)num135, x3 * (float)num135);
				}
				else
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(y2 * (float)num135, x3 * (float)num135);
				}
			}
		}
		else if (proj.aiStyle == 15)
		{
			DrawProj_FlailChains(proj, mountedCenter);
		}
	}

	private void DrawProj_Inner_DoDrawProj(Projectile proj, Vector2 mountedCenter, float polePosX, float polePosY)
	{
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		Color projectileColor = Lighting.GetColor((int)((double)proj.position.X + (double)proj.width * 0.5) / 16, (int)(((double)proj.position.Y + (double)proj.height * 0.5) / 16.0));
		if (proj.hide && !ProjectileID.Sets.DontAttachHideToAlpha[proj.type])
		{
			projectileColor = Lighting.GetColor((int)mountedCenter.X / 16, (int)(mountedCenter.Y / 16f));
		}
		if (proj.type == 14)
		{
			projectileColor = Color.White;
		}
		if (ProjectileLoader.PreDraw(proj, ref projectileColor))
		{
			bool earlyReturn = true;
			DrawProj_DrawVoidLens(proj, ref earlyReturn);
			if (!earlyReturn)
			{
				earlyReturn = true;
				DrawProj_DrawSpecialProjs(proj, ref earlyReturn);
				if (!earlyReturn)
				{
					DrawProj_DrawNormalProjs(proj, polePosX, polePosY, mountedCenter, ref projectileColor);
				}
			}
		}
		ProjectileLoader.PostDraw(proj, projectileColor);
	}

	private void DrawProj_DrawNormalProjs(Projectile proj, float polePosX, float polePosY, Vector2 mountedCenter, ref Color projectileColor)
	{
		//IL_0807: Unknown result type (might be due to invalid IL or missing references)
		//IL_0812: Unknown result type (might be due to invalid IL or missing references)
		//IL_0832: Unknown result type (might be due to invalid IL or missing references)
		//IL_0834: Unknown result type (might be due to invalid IL or missing references)
		//IL_0835: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eac: Unknown result type (might be due to invalid IL or missing references)
		//IL_087f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0884: Unknown result type (might be due to invalid IL or missing references)
		//IL_0889: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eea: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1076: Unknown result type (might be due to invalid IL or missing references)
		//IL_107b: Unknown result type (might be due to invalid IL or missing references)
		//IL_107d: Unknown result type (might be due to invalid IL or missing references)
		//IL_107f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1089: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10da: Unknown result type (might be due to invalid IL or missing references)
		//IL_10df: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1100: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1152: Unknown result type (might be due to invalid IL or missing references)
		//IL_1154: Unknown result type (might be due to invalid IL or missing references)
		//IL_1163: Unknown result type (might be due to invalid IL or missing references)
		//IL_1168: Unknown result type (might be due to invalid IL or missing references)
		//IL_116d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1189: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2623: Unknown result type (might be due to invalid IL or missing references)
		//IL_2628: Unknown result type (might be due to invalid IL or missing references)
		//IL_263a: Unknown result type (might be due to invalid IL or missing references)
		//IL_263c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2647: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2700: Unknown result type (might be due to invalid IL or missing references)
		//IL_270a: Unknown result type (might be due to invalid IL or missing references)
		//IL_270f: Unknown result type (might be due to invalid IL or missing references)
		//IL_258b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2590: Unknown result type (might be due to invalid IL or missing references)
		//IL_2595: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_25ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_25dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2743: Unknown result type (might be due to invalid IL or missing references)
		//IL_2748: Unknown result type (might be due to invalid IL or missing references)
		//IL_274d: Unknown result type (might be due to invalid IL or missing references)
		//IL_275d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2762: Unknown result type (might be due to invalid IL or missing references)
		//IL_2767: Unknown result type (might be due to invalid IL or missing references)
		//IL_276b: Unknown result type (might be due to invalid IL or missing references)
		//IL_276d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2774: Unknown result type (might be due to invalid IL or missing references)
		//IL_277c: Unknown result type (might be due to invalid IL or missing references)
		//IL_278a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_27a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_27bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2838: Unknown result type (might be due to invalid IL or missing references)
		//IL_283f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2844: Unknown result type (might be due to invalid IL or missing references)
		//IL_2850: Unknown result type (might be due to invalid IL or missing references)
		//IL_2857: Unknown result type (might be due to invalid IL or missing references)
		//IL_285c: Unknown result type (might be due to invalid IL or missing references)
		//IL_285e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2862: Unknown result type (might be due to invalid IL or missing references)
		//IL_2867: Unknown result type (might be due to invalid IL or missing references)
		//IL_2869: Unknown result type (might be due to invalid IL or missing references)
		//IL_286d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2872: Unknown result type (might be due to invalid IL or missing references)
		//IL_2877: Unknown result type (might be due to invalid IL or missing references)
		//IL_287a: Unknown result type (might be due to invalid IL or missing references)
		//IL_287f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2884: Unknown result type (might be due to invalid IL or missing references)
		//IL_28a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_273b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2740: Unknown result type (might be due to invalid IL or missing references)
		//IL_265b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2660: Unknown result type (might be due to invalid IL or missing references)
		//IL_2665: Unknown result type (might be due to invalid IL or missing references)
		//IL_2675: Unknown result type (might be due to invalid IL or missing references)
		//IL_267a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2685: Unknown result type (might be due to invalid IL or missing references)
		//IL_2696: Unknown result type (might be due to invalid IL or missing references)
		//IL_269c: Unknown result type (might be due to invalid IL or missing references)
		//IL_269e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_28fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2907: Unknown result type (might be due to invalid IL or missing references)
		//IL_2913: Unknown result type (might be due to invalid IL or missing references)
		//IL_291a: Unknown result type (might be due to invalid IL or missing references)
		//IL_291c: Unknown result type (might be due to invalid IL or missing references)
		//IL_291e: Unknown result type (might be due to invalid IL or missing references)
		//IL_292a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2936: Unknown result type (might be due to invalid IL or missing references)
		//IL_293d: Unknown result type (might be due to invalid IL or missing references)
		//IL_293f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2946: Unknown result type (might be due to invalid IL or missing references)
		//IL_294b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2956: Unknown result type (might be due to invalid IL or missing references)
		//IL_2962: Unknown result type (might be due to invalid IL or missing references)
		//IL_2969: Unknown result type (might be due to invalid IL or missing references)
		//IL_296b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2972: Unknown result type (might be due to invalid IL or missing references)
		//IL_2977: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_28d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_28dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2993: Unknown result type (might be due to invalid IL or missing references)
		//IL_2998: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1335: Unknown result type (might be due to invalid IL or missing references)
		//IL_1337: Unknown result type (might be due to invalid IL or missing references)
		//IL_1339: Unknown result type (might be due to invalid IL or missing references)
		//IL_133b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1345: Unknown result type (might be due to invalid IL or missing references)
		//IL_134a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2217: Unknown result type (might be due to invalid IL or missing references)
		//IL_221c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2226: Unknown result type (might be due to invalid IL or missing references)
		//IL_222b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2235: Unknown result type (might be due to invalid IL or missing references)
		//IL_2236: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_29c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_29cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_29d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_29e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_29fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d03: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e58: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2280: Unknown result type (might be due to invalid IL or missing references)
		//IL_2282: Unknown result type (might be due to invalid IL or missing references)
		//IL_2284: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1414: Unknown result type (might be due to invalid IL or missing references)
		//IL_1419: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df9: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_22be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b65: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_1445: Unknown result type (might be due to invalid IL or missing references)
		//IL_144a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1454: Unknown result type (might be due to invalid IL or missing references)
		//IL_1459: Unknown result type (might be due to invalid IL or missing references)
		//IL_2db0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ddf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2df0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23da: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2401: Unknown result type (might be due to invalid IL or missing references)
		//IL_2410: Unknown result type (might be due to invalid IL or missing references)
		//IL_2415: Unknown result type (might be due to invalid IL or missing references)
		//IL_2319: Unknown result type (might be due to invalid IL or missing references)
		//IL_231e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2336: Unknown result type (might be due to invalid IL or missing references)
		//IL_233b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eac: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2edf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f02: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_2495: Unknown result type (might be due to invalid IL or missing references)
		//IL_2497: Unknown result type (might be due to invalid IL or missing references)
		//IL_2499: Unknown result type (might be due to invalid IL or missing references)
		//IL_249f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_24df: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_250f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2524: Unknown result type (might be due to invalid IL or missing references)
		//IL_2475: Unknown result type (might be due to invalid IL or missing references)
		//IL_247c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2487: Unknown result type (might be due to invalid IL or missing references)
		//IL_248e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2493: Unknown result type (might be due to invalid IL or missing references)
		//IL_233d: Unknown result type (might be due to invalid IL or missing references)
		//IL_233f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2375: Unknown result type (might be due to invalid IL or missing references)
		//IL_2379: Unknown result type (might be due to invalid IL or missing references)
		//IL_237e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2380: Unknown result type (might be due to invalid IL or missing references)
		//IL_238e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2393: Unknown result type (might be due to invalid IL or missing references)
		//IL_2398: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fce: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fde: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d29: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d42: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d57: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d63: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_300b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3010: Unknown result type (might be due to invalid IL or missing references)
		//IL_2065: Unknown result type (might be due to invalid IL or missing references)
		//IL_206a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2074: Unknown result type (might be due to invalid IL or missing references)
		//IL_2078: Unknown result type (might be due to invalid IL or missing references)
		//IL_207d: Unknown result type (might be due to invalid IL or missing references)
		//IL_207f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2081: Unknown result type (might be due to invalid IL or missing references)
		//IL_2085: Unknown result type (might be due to invalid IL or missing references)
		//IL_208a: Unknown result type (might be due to invalid IL or missing references)
		//IL_302c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3037: Unknown result type (might be due to invalid IL or missing references)
		//IL_303c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_151a: Unknown result type (might be due to invalid IL or missing references)
		//IL_154f: Unknown result type (might be due to invalid IL or missing references)
		//IL_308a: Unknown result type (might be due to invalid IL or missing references)
		//IL_308f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3091: Unknown result type (might be due to invalid IL or missing references)
		//IL_3096: Unknown result type (might be due to invalid IL or missing references)
		//IL_309b: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_30b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_30bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_30c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_307c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3080: Unknown result type (might be due to invalid IL or missing references)
		//IL_3085: Unknown result type (might be due to invalid IL or missing references)
		//IL_3123: Unknown result type (might be due to invalid IL or missing references)
		//IL_3128: Unknown result type (might be due to invalid IL or missing references)
		//IL_312a: Unknown result type (might be due to invalid IL or missing references)
		//IL_312f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3134: Unknown result type (might be due to invalid IL or missing references)
		//IL_3144: Unknown result type (might be due to invalid IL or missing references)
		//IL_3149: Unknown result type (might be due to invalid IL or missing references)
		//IL_314e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3155: Unknown result type (might be due to invalid IL or missing references)
		//IL_315d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3165: Unknown result type (might be due to invalid IL or missing references)
		//IL_318b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3190: Unknown result type (might be due to invalid IL or missing references)
		//IL_3195: Unknown result type (might be due to invalid IL or missing references)
		//IL_31a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_31aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_31af: Unknown result type (might be due to invalid IL or missing references)
		//IL_31b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_31c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_31cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_31f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_31fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3203: Unknown result type (might be due to invalid IL or missing references)
		//IL_3213: Unknown result type (might be due to invalid IL or missing references)
		//IL_3218: Unknown result type (might be due to invalid IL or missing references)
		//IL_321d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3224: Unknown result type (might be due to invalid IL or missing references)
		//IL_322e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3239: Unknown result type (might be due to invalid IL or missing references)
		//IL_3241: Unknown result type (might be due to invalid IL or missing references)
		//IL_161e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3457: Unknown result type (might be due to invalid IL or missing references)
		//IL_345c: Unknown result type (might be due to invalid IL or missing references)
		//IL_345e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3463: Unknown result type (might be due to invalid IL or missing references)
		//IL_3468: Unknown result type (might be due to invalid IL or missing references)
		//IL_3478: Unknown result type (might be due to invalid IL or missing references)
		//IL_347d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3482: Unknown result type (might be due to invalid IL or missing references)
		//IL_349a: Unknown result type (might be due to invalid IL or missing references)
		//IL_34a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_34b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_34bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_34da: Unknown result type (might be due to invalid IL or missing references)
		//IL_34df: Unknown result type (might be due to invalid IL or missing references)
		//IL_34f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_34f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_34fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3500: Unknown result type (might be due to invalid IL or missing references)
		//IL_3505: Unknown result type (might be due to invalid IL or missing references)
		//IL_350a: Unknown result type (might be due to invalid IL or missing references)
		//IL_351a: Unknown result type (might be due to invalid IL or missing references)
		//IL_351f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3530: Unknown result type (might be due to invalid IL or missing references)
		//IL_353c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3541: Unknown result type (might be due to invalid IL or missing references)
		//IL_3546: Unknown result type (might be due to invalid IL or missing references)
		//IL_354d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3552: Unknown result type (might be due to invalid IL or missing references)
		//IL_3556: Unknown result type (might be due to invalid IL or missing references)
		//IL_3586: Unknown result type (might be due to invalid IL or missing references)
		//IL_358b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_331d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3322: Unknown result type (might be due to invalid IL or missing references)
		//IL_332f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3334: Unknown result type (might be due to invalid IL or missing references)
		//IL_3339: Unknown result type (might be due to invalid IL or missing references)
		//IL_3349: Unknown result type (might be due to invalid IL or missing references)
		//IL_334e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3353: Unknown result type (might be due to invalid IL or missing references)
		//IL_335a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3362: Unknown result type (might be due to invalid IL or missing references)
		//IL_3370: Unknown result type (might be due to invalid IL or missing references)
		//IL_32bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_32da: Unknown result type (might be due to invalid IL or missing references)
		//IL_32df: Unknown result type (might be due to invalid IL or missing references)
		//IL_32e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_32ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_32f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3300: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_33cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_33d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_33f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3400: Unknown result type (might be due to invalid IL or missing references)
		//IL_3408: Unknown result type (might be due to invalid IL or missing references)
		//IL_1727: Unknown result type (might be due to invalid IL or missing references)
		//IL_1729: Unknown result type (might be due to invalid IL or missing references)
		//IL_172b: Unknown result type (might be due to invalid IL or missing references)
		//IL_172d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1737: Unknown result type (might be due to invalid IL or missing references)
		//IL_173c: Unknown result type (might be due to invalid IL or missing references)
		//IL_35a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_35ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_35b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3850: Unknown result type (might be due to invalid IL or missing references)
		//IL_3855: Unknown result type (might be due to invalid IL or missing references)
		//IL_3871: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_38bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_38c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_38c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_38cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_372f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3740: Unknown result type (might be due to invalid IL or missing references)
		//IL_3747: Unknown result type (might be due to invalid IL or missing references)
		//IL_3758: Unknown result type (might be due to invalid IL or missing references)
		//IL_3781: Unknown result type (might be due to invalid IL or missing references)
		//IL_3788: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3be0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_38e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_3909: Unknown result type (might be due to invalid IL or missing references)
		//IL_391e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3925: Unknown result type (might be due to invalid IL or missing references)
		//IL_393c: Unknown result type (might be due to invalid IL or missing references)
		//IL_394e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3953: Unknown result type (might be due to invalid IL or missing references)
		//IL_3958: Unknown result type (might be due to invalid IL or missing references)
		//IL_395c: Unknown result type (might be due to invalid IL or missing references)
		//IL_396b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3970: Unknown result type (might be due to invalid IL or missing references)
		//IL_3975: Unknown result type (might be due to invalid IL or missing references)
		//IL_3985: Unknown result type (might be due to invalid IL or missing references)
		//IL_398a: Unknown result type (might be due to invalid IL or missing references)
		//IL_398f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3996: Unknown result type (might be due to invalid IL or missing references)
		//IL_399e: Unknown result type (might be due to invalid IL or missing references)
		//IL_39a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_37bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_37cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_37de: Unknown result type (might be due to invalid IL or missing references)
		//IL_3807: Unknown result type (might be due to invalid IL or missing references)
		//IL_3648: Unknown result type (might be due to invalid IL or missing references)
		//IL_3668: Unknown result type (might be due to invalid IL or missing references)
		//IL_3672: Unknown result type (might be due to invalid IL or missing references)
		//IL_367c: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_36be: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c96: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d08: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d20: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d68: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d78: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d96: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3da2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3db5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3de1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dff: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e26: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf4: Unknown result type (might be due to invalid IL or missing references)
		//IL_39bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_39bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_39c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_39ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_39d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3adb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b42: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b47: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4008: Unknown result type (might be due to invalid IL or missing references)
		//IL_400d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4015: Unknown result type (might be due to invalid IL or missing references)
		//IL_401a: Unknown result type (might be due to invalid IL or missing references)
		//IL_401e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4023: Unknown result type (might be due to invalid IL or missing references)
		//IL_4025: Unknown result type (might be due to invalid IL or missing references)
		//IL_4027: Unknown result type (might be due to invalid IL or missing references)
		//IL_4029: Unknown result type (might be due to invalid IL or missing references)
		//IL_402e: Unknown result type (might be due to invalid IL or missing references)
		//IL_403e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4043: Unknown result type (might be due to invalid IL or missing references)
		//IL_4048: Unknown result type (might be due to invalid IL or missing references)
		//IL_4058: Unknown result type (might be due to invalid IL or missing references)
		//IL_405d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4063: Unknown result type (might be due to invalid IL or missing references)
		//IL_406e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4078: Unknown result type (might be due to invalid IL or missing references)
		//IL_407d: Unknown result type (might be due to invalid IL or missing references)
		//IL_408d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4094: Unknown result type (might be due to invalid IL or missing references)
		//IL_409b: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_40a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_40ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_40b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_40d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_40e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_40f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_40fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4102: Unknown result type (might be due to invalid IL or missing references)
		//IL_4107: Unknown result type (might be due to invalid IL or missing references)
		//IL_4117: Unknown result type (might be due to invalid IL or missing references)
		//IL_411c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4121: Unknown result type (might be due to invalid IL or missing references)
		//IL_4128: Unknown result type (might be due to invalid IL or missing references)
		//IL_4130: Unknown result type (might be due to invalid IL or missing references)
		//IL_4132: Unknown result type (might be due to invalid IL or missing references)
		//IL_4134: Unknown result type (might be due to invalid IL or missing references)
		//IL_39ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_39f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a00: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a07: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a23: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a27: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a57: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f46: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f57: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4170: Unknown result type (might be due to invalid IL or missing references)
		//IL_4175: Unknown result type (might be due to invalid IL or missing references)
		//IL_417e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4190: Unknown result type (might be due to invalid IL or missing references)
		//IL_4195: Unknown result type (might be due to invalid IL or missing references)
		//IL_419a: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_41d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_41df: Unknown result type (might be due to invalid IL or missing references)
		//IL_41e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_41e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_41ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_41f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_41f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_41f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4208: Unknown result type (might be due to invalid IL or missing references)
		//IL_420d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4212: Unknown result type (might be due to invalid IL or missing references)
		//IL_4222: Unknown result type (might be due to invalid IL or missing references)
		//IL_4227: Unknown result type (might be due to invalid IL or missing references)
		//IL_422d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4238: Unknown result type (might be due to invalid IL or missing references)
		//IL_4242: Unknown result type (might be due to invalid IL or missing references)
		//IL_4247: Unknown result type (might be due to invalid IL or missing references)
		//IL_4257: Unknown result type (might be due to invalid IL or missing references)
		//IL_425e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4265: Unknown result type (might be due to invalid IL or missing references)
		//IL_426c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4273: Unknown result type (might be due to invalid IL or missing references)
		//IL_4278: Unknown result type (might be due to invalid IL or missing references)
		//IL_4282: Unknown result type (might be due to invalid IL or missing references)
		//IL_42a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_42aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_42bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_42c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_42cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_42f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ec4: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ecb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ede: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4448: Unknown result type (might be due to invalid IL or missing references)
		//IL_444a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4454: Unknown result type (might be due to invalid IL or missing references)
		//IL_4459: Unknown result type (might be due to invalid IL or missing references)
		//IL_445e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4463: Unknown result type (might be due to invalid IL or missing references)
		//IL_4468: Unknown result type (might be due to invalid IL or missing references)
		//IL_4481: Unknown result type (might be due to invalid IL or missing references)
		//IL_4486: Unknown result type (might be due to invalid IL or missing references)
		//IL_448a: Unknown result type (might be due to invalid IL or missing references)
		//IL_44a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_44e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_44ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_44f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_450b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4515: Unknown result type (might be due to invalid IL or missing references)
		//IL_451a: Unknown result type (might be due to invalid IL or missing references)
		//IL_451c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4526: Unknown result type (might be due to invalid IL or missing references)
		//IL_452b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4569: Unknown result type (might be due to invalid IL or missing references)
		//IL_456e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4574: Unknown result type (might be due to invalid IL or missing references)
		//IL_4579: Unknown result type (might be due to invalid IL or missing references)
		//IL_4580: Unknown result type (might be due to invalid IL or missing references)
		//IL_4585: Unknown result type (might be due to invalid IL or missing references)
		//IL_430d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4312: Unknown result type (might be due to invalid IL or missing references)
		//IL_4317: Unknown result type (might be due to invalid IL or missing references)
		//IL_4327: Unknown result type (might be due to invalid IL or missing references)
		//IL_432c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4337: Unknown result type (might be due to invalid IL or missing references)
		//IL_4348: Unknown result type (might be due to invalid IL or missing references)
		//IL_434e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4350: Unknown result type (might be due to invalid IL or missing references)
		//IL_435a: Unknown result type (might be due to invalid IL or missing references)
		//IL_435f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4361: Unknown result type (might be due to invalid IL or missing references)
		//IL_4366: Unknown result type (might be due to invalid IL or missing references)
		//IL_436b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4372: Unknown result type (might be due to invalid IL or missing references)
		//IL_437a: Unknown result type (might be due to invalid IL or missing references)
		//IL_437c: Unknown result type (might be due to invalid IL or missing references)
		//IL_437e: Unknown result type (might be due to invalid IL or missing references)
		//IL_439a: Unknown result type (might be due to invalid IL or missing references)
		//IL_439f: Unknown result type (might be due to invalid IL or missing references)
		//IL_43a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_43b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_43be: Unknown result type (might be due to invalid IL or missing references)
		//IL_43c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_43cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_43cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_43d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_45c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_45d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_45d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_45df: Unknown result type (might be due to invalid IL or missing references)
		//IL_45e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_45f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4601: Unknown result type (might be due to invalid IL or missing references)
		//IL_4606: Unknown result type (might be due to invalid IL or missing references)
		//IL_4638: Unknown result type (might be due to invalid IL or missing references)
		//IL_463d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4647: Unknown result type (might be due to invalid IL or missing references)
		//IL_464d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4652: Unknown result type (might be due to invalid IL or missing references)
		//IL_465c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4661: Unknown result type (might be due to invalid IL or missing references)
		//IL_4663: Unknown result type (might be due to invalid IL or missing references)
		//IL_466d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4672: Unknown result type (might be due to invalid IL or missing references)
		//IL_467c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4681: Unknown result type (might be due to invalid IL or missing references)
		//IL_4683: Unknown result type (might be due to invalid IL or missing references)
		//IL_4684: Unknown result type (might be due to invalid IL or missing references)
		//IL_468b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4695: Unknown result type (might be due to invalid IL or missing references)
		//IL_469a: Unknown result type (might be due to invalid IL or missing references)
		//IL_469c: Unknown result type (might be due to invalid IL or missing references)
		//IL_46a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_46b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_48da: Unknown result type (might be due to invalid IL or missing references)
		//IL_48dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_48de: Unknown result type (might be due to invalid IL or missing references)
		//IL_48e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_46f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_46fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_46ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_4702: Unknown result type (might be due to invalid IL or missing references)
		//IL_4707: Unknown result type (might be due to invalid IL or missing references)
		//IL_470c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4716: Unknown result type (might be due to invalid IL or missing references)
		//IL_471b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4720: Unknown result type (might be due to invalid IL or missing references)
		//IL_472c: Unknown result type (might be due to invalid IL or missing references)
		//IL_472f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4734: Unknown result type (might be due to invalid IL or missing references)
		//IL_4739: Unknown result type (might be due to invalid IL or missing references)
		//IL_474e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4755: Unknown result type (might be due to invalid IL or missing references)
		//IL_475a: Unknown result type (might be due to invalid IL or missing references)
		//IL_476c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4771: Unknown result type (might be due to invalid IL or missing references)
		//IL_477b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4780: Unknown result type (might be due to invalid IL or missing references)
		//IL_4792: Unknown result type (might be due to invalid IL or missing references)
		//IL_4799: Unknown result type (might be due to invalid IL or missing references)
		//IL_479e: Unknown result type (might be due to invalid IL or missing references)
		//IL_47a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_47a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_47b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_47e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_47ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_47f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_47fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_480d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4817: Unknown result type (might be due to invalid IL or missing references)
		//IL_4821: Unknown result type (might be due to invalid IL or missing references)
		//IL_4826: Unknown result type (might be due to invalid IL or missing references)
		//IL_4903: Unknown result type (might be due to invalid IL or missing references)
		//IL_4905: Unknown result type (might be due to invalid IL or missing references)
		//IL_490a: Unknown result type (might be due to invalid IL or missing references)
		//IL_490f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4911: Unknown result type (might be due to invalid IL or missing references)
		//IL_4916: Unknown result type (might be due to invalid IL or missing references)
		//IL_4923: Unknown result type (might be due to invalid IL or missing references)
		//IL_4929: Unknown result type (might be due to invalid IL or missing references)
		//IL_492b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4930: Unknown result type (might be due to invalid IL or missing references)
		//IL_4935: Unknown result type (might be due to invalid IL or missing references)
		//IL_493c: Unknown result type (might be due to invalid IL or missing references)
		//IL_493f: Unknown result type (might be due to invalid IL or missing references)
		//IL_494f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4960: Unknown result type (might be due to invalid IL or missing references)
		//IL_4962: Unknown result type (might be due to invalid IL or missing references)
		//IL_4967: Unknown result type (might be due to invalid IL or missing references)
		//IL_496c: Unknown result type (might be due to invalid IL or missing references)
		//IL_496e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4973: Unknown result type (might be due to invalid IL or missing references)
		//IL_4986: Unknown result type (might be due to invalid IL or missing references)
		//IL_498c: Unknown result type (might be due to invalid IL or missing references)
		//IL_498e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4993: Unknown result type (might be due to invalid IL or missing references)
		//IL_4998: Unknown result type (might be due to invalid IL or missing references)
		//IL_499f: Unknown result type (might be due to invalid IL or missing references)
		//IL_49a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_49b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_49c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_49c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_49cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_49d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_49e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_49ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_49f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_49fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a02: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a15: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a35: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_48a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_48af: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_48ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_48bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_48be: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ddb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4de4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4af4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4af9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b13: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a90: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a95: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a97: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_4abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c71: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c78: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f64: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f96: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ced: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d09: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d48: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ca4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ca9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cab: Unknown result type (might be due to invalid IL or missing references)
		//IL_4caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e86: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e93: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eae: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ebb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4ec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_4edb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_4edf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f02: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_521b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5220: Unknown result type (might be due to invalid IL or missing references)
		//IL_5225: Unknown result type (might be due to invalid IL or missing references)
		//IL_5228: Unknown result type (might be due to invalid IL or missing references)
		//IL_522d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5232: Unknown result type (might be due to invalid IL or missing references)
		//IL_5003: Unknown result type (might be due to invalid IL or missing references)
		//IL_5008: Unknown result type (might be due to invalid IL or missing references)
		//IL_500a: Unknown result type (might be due to invalid IL or missing references)
		//IL_500c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5013: Unknown result type (might be due to invalid IL or missing references)
		//IL_5018: Unknown result type (might be due to invalid IL or missing references)
		//IL_501d: Unknown result type (might be due to invalid IL or missing references)
		//IL_671e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6731: Unknown result type (might be due to invalid IL or missing references)
		//IL_673b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6740: Unknown result type (might be due to invalid IL or missing references)
		//IL_6745: Unknown result type (might be due to invalid IL or missing references)
		//IL_6750: Unknown result type (might be due to invalid IL or missing references)
		//IL_6755: Unknown result type (might be due to invalid IL or missing references)
		//IL_675a: Unknown result type (might be due to invalid IL or missing references)
		//IL_675f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6764: Unknown result type (might be due to invalid IL or missing references)
		//IL_6794: Unknown result type (might be due to invalid IL or missing references)
		//IL_67a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_67ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_67c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_67c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_67cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_67cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_529d: Unknown result type (might be due to invalid IL or missing references)
		//IL_529f: Unknown result type (might be due to invalid IL or missing references)
		//IL_52ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_52d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_52d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_52e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_52e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6803: Unknown result type (might be due to invalid IL or missing references)
		//IL_6816: Unknown result type (might be due to invalid IL or missing references)
		//IL_6820: Unknown result type (might be due to invalid IL or missing references)
		//IL_6825: Unknown result type (might be due to invalid IL or missing references)
		//IL_682a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6835: Unknown result type (might be due to invalid IL or missing references)
		//IL_683a: Unknown result type (might be due to invalid IL or missing references)
		//IL_683f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6844: Unknown result type (might be due to invalid IL or missing references)
		//IL_6849: Unknown result type (might be due to invalid IL or missing references)
		//IL_68ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_5305: Unknown result type (might be due to invalid IL or missing references)
		//IL_530e: Unknown result type (might be due to invalid IL or missing references)
		//IL_531b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5320: Unknown result type (might be due to invalid IL or missing references)
		//IL_510d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5112: Unknown result type (might be due to invalid IL or missing references)
		//IL_5126: Unknown result type (might be due to invalid IL or missing references)
		//IL_6abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6acf: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ade: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b25: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b42: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b51: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5340: Unknown result type (might be due to invalid IL or missing references)
		//IL_534d: Unknown result type (might be due to invalid IL or missing references)
		//IL_535a: Unknown result type (might be due to invalid IL or missing references)
		//IL_535f: Unknown result type (might be due to invalid IL or missing references)
		//IL_512b: Unknown result type (might be due to invalid IL or missing references)
		//IL_514e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5150: Unknown result type (might be due to invalid IL or missing references)
		//IL_5154: Unknown result type (might be due to invalid IL or missing references)
		//IL_5159: Unknown result type (might be due to invalid IL or missing references)
		//IL_516b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5170: Unknown result type (might be due to invalid IL or missing references)
		//IL_5174: Unknown result type (might be due to invalid IL or missing references)
		//IL_5176: Unknown result type (might be due to invalid IL or missing references)
		//IL_517d: Unknown result type (might be due to invalid IL or missing references)
		//IL_51aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_51ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_51b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5109: Unknown result type (might be due to invalid IL or missing references)
		//IL_68ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_692f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6941: Unknown result type (might be due to invalid IL or missing references)
		//IL_694c: Unknown result type (might be due to invalid IL or missing references)
		//IL_695d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6967: Unknown result type (might be due to invalid IL or missing references)
		//IL_6971: Unknown result type (might be due to invalid IL or missing references)
		//IL_6992: Unknown result type (might be due to invalid IL or missing references)
		//IL_699d: Unknown result type (might be due to invalid IL or missing references)
		//IL_69a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_69b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_69be: Unknown result type (might be due to invalid IL or missing references)
		//IL_69c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_69d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_69da: Unknown result type (might be due to invalid IL or missing references)
		//IL_69e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_69e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_69eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_69f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_69fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a20: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a59: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a65: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_64b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_64bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_64dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_64ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_64f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_64f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_64fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_6504: Unknown result type (might be due to invalid IL or missing references)
		//IL_6509: Unknown result type (might be due to invalid IL or missing references)
		//IL_650e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6515: Unknown result type (might be due to invalid IL or missing references)
		//IL_651b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6520: Unknown result type (might be due to invalid IL or missing references)
		//IL_6525: Unknown result type (might be due to invalid IL or missing references)
		//IL_652a: Unknown result type (might be due to invalid IL or missing references)
		//IL_654a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6550: Unknown result type (might be due to invalid IL or missing references)
		//IL_6555: Unknown result type (might be due to invalid IL or missing references)
		//IL_655a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6565: Unknown result type (might be due to invalid IL or missing references)
		//IL_6571: Unknown result type (might be due to invalid IL or missing references)
		//IL_6577: Unknown result type (might be due to invalid IL or missing references)
		//IL_6581: Unknown result type (might be due to invalid IL or missing references)
		//IL_5390: Unknown result type (might be due to invalid IL or missing references)
		//IL_5392: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_5102: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_5497: Unknown result type (might be due to invalid IL or missing references)
		//IL_549e: Unknown result type (might be due to invalid IL or missing references)
		//IL_539e: Unknown result type (might be due to invalid IL or missing references)
		//IL_53a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_53aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_53af: Unknown result type (might be due to invalid IL or missing references)
		//IL_53b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_53b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_50cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_50d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_50e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c81: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c99: Unknown result type (might be due to invalid IL or missing references)
		//IL_6da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6da6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6db1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6de2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ded: Unknown result type (might be due to invalid IL or missing references)
		//IL_6df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e02: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_65dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_65e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6619: Unknown result type (might be due to invalid IL or missing references)
		//IL_6628: Unknown result type (might be due to invalid IL or missing references)
		//IL_662e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6630: Unknown result type (might be due to invalid IL or missing references)
		//IL_6636: Unknown result type (might be due to invalid IL or missing references)
		//IL_663b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6640: Unknown result type (might be due to invalid IL or missing references)
		//IL_6647: Unknown result type (might be due to invalid IL or missing references)
		//IL_664d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6652: Unknown result type (might be due to invalid IL or missing references)
		//IL_6657: Unknown result type (might be due to invalid IL or missing references)
		//IL_665c: Unknown result type (might be due to invalid IL or missing references)
		//IL_667c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6682: Unknown result type (might be due to invalid IL or missing references)
		//IL_6687: Unknown result type (might be due to invalid IL or missing references)
		//IL_668c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6697: Unknown result type (might be due to invalid IL or missing references)
		//IL_66a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_66a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_66b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_582a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5831: Unknown result type (might be due to invalid IL or missing references)
		//IL_54aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_54b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_54d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_54d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_54dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_54e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_54e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_54eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_541e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5424: Unknown result type (might be due to invalid IL or missing references)
		//IL_542f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5436: Unknown result type (might be due to invalid IL or missing references)
		//IL_5469: Unknown result type (might be due to invalid IL or missing references)
		//IL_546f: Unknown result type (might be due to invalid IL or missing references)
		//IL_547a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5481: Unknown result type (might be due to invalid IL or missing references)
		//IL_53e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_53f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_53f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_50c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_50a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_50aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_50c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d10: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d30: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d59: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e89: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e95: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ea0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c07: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c18: Unknown result type (might be due to invalid IL or missing references)
		//IL_583d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5844: Unknown result type (might be due to invalid IL or missing references)
		//IL_5863: Unknown result type (might be due to invalid IL or missing references)
		//IL_5865: Unknown result type (might be due to invalid IL or missing references)
		//IL_586f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5874: Unknown result type (might be due to invalid IL or missing references)
		//IL_5879: Unknown result type (might be due to invalid IL or missing references)
		//IL_587e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c59: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c87: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c96: Unknown result type (might be due to invalid IL or missing references)
		//IL_5561: Unknown result type (might be due to invalid IL or missing references)
		//IL_5567: Unknown result type (might be due to invalid IL or missing references)
		//IL_5572: Unknown result type (might be due to invalid IL or missing references)
		//IL_5579: Unknown result type (might be due to invalid IL or missing references)
		//IL_55ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_55b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_55bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_55c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_55d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5524: Unknown result type (might be due to invalid IL or missing references)
		//IL_5534: Unknown result type (might be due to invalid IL or missing references)
		//IL_553b: Unknown result type (might be due to invalid IL or missing references)
		//IL_58f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_58fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5905: Unknown result type (might be due to invalid IL or missing references)
		//IL_590c: Unknown result type (might be due to invalid IL or missing references)
		//IL_593f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5945: Unknown result type (might be due to invalid IL or missing references)
		//IL_5950: Unknown result type (might be due to invalid IL or missing references)
		//IL_5957: Unknown result type (might be due to invalid IL or missing references)
		//IL_596c: Unknown result type (might be due to invalid IL or missing references)
		//IL_58b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_58c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_58ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_5714: Unknown result type (might be due to invalid IL or missing references)
		//IL_7530: Unknown result type (might be due to invalid IL or missing references)
		//IL_7535: Unknown result type (might be due to invalid IL or missing references)
		//IL_753a: Unknown result type (might be due to invalid IL or missing references)
		//IL_754a: Unknown result type (might be due to invalid IL or missing references)
		//IL_754f: Unknown result type (might be due to invalid IL or missing references)
		//IL_756c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7579: Unknown result type (might be due to invalid IL or missing references)
		//IL_757e: Unknown result type (might be due to invalid IL or missing references)
		//IL_75a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_75b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f82: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f89: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_700b: Unknown result type (might be due to invalid IL or missing references)
		//IL_701e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7028: Unknown result type (might be due to invalid IL or missing references)
		//IL_702d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7032: Unknown result type (might be due to invalid IL or missing references)
		//IL_7037: Unknown result type (might be due to invalid IL or missing references)
		//IL_7047: Unknown result type (might be due to invalid IL or missing references)
		//IL_704c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7069: Unknown result type (might be due to invalid IL or missing references)
		//IL_7073: Unknown result type (might be due to invalid IL or missing references)
		//IL_709e: Unknown result type (might be due to invalid IL or missing references)
		//IL_70c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_70f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_70fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7101: Unknown result type (might be due to invalid IL or missing references)
		//IL_7111: Unknown result type (might be due to invalid IL or missing references)
		//IL_7116: Unknown result type (might be due to invalid IL or missing references)
		//IL_7133: Unknown result type (might be due to invalid IL or missing references)
		//IL_7140: Unknown result type (might be due to invalid IL or missing references)
		//IL_7145: Unknown result type (might be due to invalid IL or missing references)
		//IL_716f: Unknown result type (might be due to invalid IL or missing references)
		//IL_717a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_55f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5607: Unknown result type (might be due to invalid IL or missing references)
		//IL_560c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5611: Unknown result type (might be due to invalid IL or missing references)
		//IL_5616: Unknown result type (might be due to invalid IL or missing references)
		//IL_5720: Unknown result type (might be due to invalid IL or missing references)
		//IL_5722: Unknown result type (might be due to invalid IL or missing references)
		//IL_572c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5731: Unknown result type (might be due to invalid IL or missing references)
		//IL_5736: Unknown result type (might be due to invalid IL or missing references)
		//IL_573b: Unknown result type (might be due to invalid IL or missing references)
		//IL_721e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7223: Unknown result type (might be due to invalid IL or missing references)
		//IL_722a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7230: Unknown result type (might be due to invalid IL or missing references)
		//IL_7235: Unknown result type (might be due to invalid IL or missing references)
		//IL_723b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7255: Unknown result type (might be due to invalid IL or missing references)
		//IL_725a: Unknown result type (might be due to invalid IL or missing references)
		//IL_726c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7271: Unknown result type (might be due to invalid IL or missing references)
		//IL_7276: Unknown result type (might be due to invalid IL or missing references)
		//IL_728f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7294: Unknown result type (might be due to invalid IL or missing references)
		//IL_72ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_72bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_72c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_72ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_72d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_72d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_72e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_72ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_730a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7314: Unknown result type (might be due to invalid IL or missing references)
		//IL_733f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7362: Unknown result type (might be due to invalid IL or missing references)
		//IL_7398: Unknown result type (might be due to invalid IL or missing references)
		//IL_739d: Unknown result type (might be due to invalid IL or missing references)
		//IL_73a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_73b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_73b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_73d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_73de: Unknown result type (might be due to invalid IL or missing references)
		//IL_7408: Unknown result type (might be due to invalid IL or missing references)
		//IL_7419: Unknown result type (might be due to invalid IL or missing references)
		//IL_742b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7430: Unknown result type (might be due to invalid IL or missing references)
		//IL_7435: Unknown result type (might be due to invalid IL or missing references)
		//IL_7445: Unknown result type (might be due to invalid IL or missing references)
		//IL_744a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7467: Unknown result type (might be due to invalid IL or missing references)
		//IL_7472: Unknown result type (might be due to invalid IL or missing references)
		//IL_7477: Unknown result type (might be due to invalid IL or missing references)
		//IL_74a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_74b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_598f: Unknown result type (might be due to invalid IL or missing references)
		//IL_599a: Unknown result type (might be due to invalid IL or missing references)
		//IL_599f: Unknown result type (might be due to invalid IL or missing references)
		//IL_59a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_59a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_5acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_5683: Unknown result type (might be due to invalid IL or missing references)
		//IL_5689: Unknown result type (might be due to invalid IL or missing references)
		//IL_5694: Unknown result type (might be due to invalid IL or missing references)
		//IL_569b: Unknown result type (might be due to invalid IL or missing references)
		//IL_56ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_56d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_56df: Unknown result type (might be due to invalid IL or missing references)
		//IL_56e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5646: Unknown result type (might be due to invalid IL or missing references)
		//IL_5656: Unknown result type (might be due to invalid IL or missing references)
		//IL_565d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a19: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_59dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_59ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_59f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7737: Unknown result type (might be due to invalid IL or missing references)
		//IL_774a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7754: Unknown result type (might be due to invalid IL or missing references)
		//IL_7759: Unknown result type (might be due to invalid IL or missing references)
		//IL_775e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7769: Unknown result type (might be due to invalid IL or missing references)
		//IL_776e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7773: Unknown result type (might be due to invalid IL or missing references)
		//IL_7778: Unknown result type (might be due to invalid IL or missing references)
		//IL_777d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7782: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d71: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d02: Unknown result type (might be due to invalid IL or missing references)
		//IL_57b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_57b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_57c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_57c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_57fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5802: Unknown result type (might be due to invalid IL or missing references)
		//IL_580d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5814: Unknown result type (might be due to invalid IL or missing references)
		//IL_5774: Unknown result type (might be due to invalid IL or missing references)
		//IL_5784: Unknown result type (might be due to invalid IL or missing references)
		//IL_578b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7669: Unknown result type (might be due to invalid IL or missing references)
		//IL_766b: Unknown result type (might be due to invalid IL or missing references)
		//IL_766c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b47: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b58: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b21: Unknown result type (might be due to invalid IL or missing references)
		//IL_7967: Unknown result type (might be due to invalid IL or missing references)
		//IL_7985: Unknown result type (might be due to invalid IL or missing references)
		//IL_7992: Unknown result type (might be due to invalid IL or missing references)
		//IL_7997: Unknown result type (might be due to invalid IL or missing references)
		//IL_79c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_79cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7824: Unknown result type (might be due to invalid IL or missing references)
		//IL_782f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7834: Unknown result type (might be due to invalid IL or missing references)
		//IL_769c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f65: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f48: Unknown result type (might be due to invalid IL or missing references)
		//IL_79f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_78d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_78de: Unknown result type (might be due to invalid IL or missing references)
		//IL_78f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7908: Unknown result type (might be due to invalid IL or missing references)
		//IL_790d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7912: Unknown result type (might be due to invalid IL or missing references)
		//IL_7917: Unknown result type (might be due to invalid IL or missing references)
		//IL_76b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f87: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f96: Unknown result type (might be due to invalid IL or missing references)
		//IL_7abe: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_76e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_5dd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_76fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ded: Unknown result type (might be due to invalid IL or missing references)
		//IL_5df4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c65: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_80f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_810a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8114: Unknown result type (might be due to invalid IL or missing references)
		//IL_8119: Unknown result type (might be due to invalid IL or missing references)
		//IL_811e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8129: Unknown result type (might be due to invalid IL or missing references)
		//IL_812e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8133: Unknown result type (might be due to invalid IL or missing references)
		//IL_8138: Unknown result type (might be due to invalid IL or missing references)
		//IL_813d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8149: Unknown result type (might be due to invalid IL or missing references)
		//IL_8167: Unknown result type (might be due to invalid IL or missing references)
		//IL_8174: Unknown result type (might be due to invalid IL or missing references)
		//IL_8179: Unknown result type (might be due to invalid IL or missing references)
		//IL_81a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_81ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_81c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_81e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_81fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_8216: Unknown result type (might be due to invalid IL or missing references)
		//IL_8240: Unknown result type (might be due to invalid IL or missing references)
		//IL_824b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e21: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e26: Unknown result type (might be due to invalid IL or missing references)
		//IL_7db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7db9: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ddc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e04: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d02: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_8316: Unknown result type (might be due to invalid IL or missing references)
		//IL_8327: Unknown result type (might be due to invalid IL or missing references)
		//IL_8331: Unknown result type (might be due to invalid IL or missing references)
		//IL_8336: Unknown result type (might be due to invalid IL or missing references)
		//IL_833b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8346: Unknown result type (might be due to invalid IL or missing references)
		//IL_834b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8350: Unknown result type (might be due to invalid IL or missing references)
		//IL_8355: Unknown result type (might be due to invalid IL or missing references)
		//IL_835a: Unknown result type (might be due to invalid IL or missing references)
		//IL_836c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8372: Unknown result type (might be due to invalid IL or missing references)
		//IL_8380: Unknown result type (might be due to invalid IL or missing references)
		//IL_8385: Unknown result type (might be due to invalid IL or missing references)
		//IL_83a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_83ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_854f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8554: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7eb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e71: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_887a: Unknown result type (might be due to invalid IL or missing references)
		//IL_887f: Unknown result type (might be due to invalid IL or missing references)
		//IL_85bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_85c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_85cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_85d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_85dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_85e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_85f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8603: Unknown result type (might be due to invalid IL or missing references)
		//IL_860d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8652: Unknown result type (might be due to invalid IL or missing references)
		//IL_8657: Unknown result type (might be due to invalid IL or missing references)
		//IL_865d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8664: Unknown result type (might be due to invalid IL or missing references)
		//IL_866f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8680: Unknown result type (might be due to invalid IL or missing references)
		//IL_868a: Unknown result type (might be due to invalid IL or missing references)
		//IL_868f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8694: Unknown result type (might be due to invalid IL or missing references)
		//IL_84cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_84d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_84e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_84ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_84f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8500: Unknown result type (might be due to invalid IL or missing references)
		//IL_8505: Unknown result type (might be due to invalid IL or missing references)
		//IL_8527: Unknown result type (might be due to invalid IL or missing references)
		//IL_8532: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eae: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eea: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e74: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_88c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_88cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_88d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8918: Unknown result type (might be due to invalid IL or missing references)
		//IL_891d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8922: Unknown result type (might be due to invalid IL or missing references)
		//IL_8927: Unknown result type (might be due to invalid IL or missing references)
		//IL_892c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8932: Unknown result type (might be due to invalid IL or missing references)
		//IL_8937: Unknown result type (might be due to invalid IL or missing references)
		//IL_8942: Unknown result type (might be due to invalid IL or missing references)
		//IL_894e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8954: Unknown result type (might be due to invalid IL or missing references)
		//IL_895e: Unknown result type (might be due to invalid IL or missing references)
		//IL_898e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8993: Unknown result type (might be due to invalid IL or missing references)
		//IL_8998: Unknown result type (might be due to invalid IL or missing references)
		//IL_899e: Unknown result type (might be due to invalid IL or missing references)
		//IL_89a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_89b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_89ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_89bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_89c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_881b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8821: Unknown result type (might be due to invalid IL or missing references)
		//IL_8826: Unknown result type (might be due to invalid IL or missing references)
		//IL_8835: Unknown result type (might be due to invalid IL or missing references)
		//IL_884d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8852: Unknown result type (might be due to invalid IL or missing references)
		//IL_8415: Unknown result type (might be due to invalid IL or missing references)
		//IL_841b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8429: Unknown result type (might be due to invalid IL or missing references)
		//IL_842e: Unknown result type (might be due to invalid IL or missing references)
		//IL_844f: Unknown result type (might be due to invalid IL or missing references)
		//IL_845c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8461: Unknown result type (might be due to invalid IL or missing references)
		//IL_847f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8490: Unknown result type (might be due to invalid IL or missing references)
		//IL_8495: Unknown result type (might be due to invalid IL or missing references)
		//IL_606d: Unknown result type (might be due to invalid IL or missing references)
		//IL_606f: Unknown result type (might be due to invalid IL or missing references)
		//IL_607a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6081: Unknown result type (might be due to invalid IL or missing references)
		//IL_60b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_60b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_60c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_60c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6034: Unknown result type (might be due to invalid IL or missing references)
		//IL_6040: Unknown result type (might be due to invalid IL or missing references)
		//IL_6047: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c01: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c06: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c31: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c36: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d27: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d43: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d48: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d84: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_8da4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8daa: Unknown result type (might be due to invalid IL or missing references)
		//IL_8daf: Unknown result type (might be due to invalid IL or missing references)
		//IL_8db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_8de5: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b26: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b31: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b60: Unknown result type (might be due to invalid IL or missing references)
		//IL_7faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fff: Unknown result type (might be due to invalid IL or missing references)
		//IL_800c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8011: Unknown result type (might be due to invalid IL or missing references)
		//IL_8026: Unknown result type (might be due to invalid IL or missing references)
		//IL_802b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8035: Unknown result type (might be due to invalid IL or missing references)
		//IL_805f: Unknown result type (might be due to invalid IL or missing references)
		//IL_806a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9003: Unknown result type (might be due to invalid IL or missing references)
		//IL_9016: Unknown result type (might be due to invalid IL or missing references)
		//IL_9020: Unknown result type (might be due to invalid IL or missing references)
		//IL_9025: Unknown result type (might be due to invalid IL or missing references)
		//IL_902a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9035: Unknown result type (might be due to invalid IL or missing references)
		//IL_903a: Unknown result type (might be due to invalid IL or missing references)
		//IL_903f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9044: Unknown result type (might be due to invalid IL or missing references)
		//IL_9064: Unknown result type (might be due to invalid IL or missing references)
		//IL_9069: Unknown result type (might be due to invalid IL or missing references)
		//IL_906e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9075: Unknown result type (might be due to invalid IL or missing references)
		//IL_907a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e62: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_8edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_8efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f12: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f18: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f34: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f39: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f43: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f48: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f70: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f85: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_8faa: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_86ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_6272: Unknown result type (might be due to invalid IL or missing references)
		//IL_6274: Unknown result type (might be due to invalid IL or missing references)
		//IL_627e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6283: Unknown result type (might be due to invalid IL or missing references)
		//IL_6288: Unknown result type (might be due to invalid IL or missing references)
		//IL_628d: Unknown result type (might be due to invalid IL or missing references)
		//IL_957d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9582: Unknown result type (might be due to invalid IL or missing references)
		//IL_90b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_90b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_90bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_9116: Unknown result type (might be due to invalid IL or missing references)
		//IL_911b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9120: Unknown result type (might be due to invalid IL or missing references)
		//IL_9125: Unknown result type (might be due to invalid IL or missing references)
		//IL_912a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9130: Unknown result type (might be due to invalid IL or missing references)
		//IL_9135: Unknown result type (might be due to invalid IL or missing references)
		//IL_9140: Unknown result type (might be due to invalid IL or missing references)
		//IL_914c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9152: Unknown result type (might be due to invalid IL or missing references)
		//IL_915c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9161: Unknown result type (might be due to invalid IL or missing references)
		//IL_916b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9170: Unknown result type (might be due to invalid IL or missing references)
		//IL_91a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_91a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_91aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_91b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_91b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_91c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_91cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_91d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_91d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_871a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8720: Unknown result type (might be due to invalid IL or missing references)
		//IL_8725: Unknown result type (might be due to invalid IL or missing references)
		//IL_872a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8735: Unknown result type (might be due to invalid IL or missing references)
		//IL_8741: Unknown result type (might be due to invalid IL or missing references)
		//IL_8754: Unknown result type (might be due to invalid IL or missing references)
		//IL_8770: Unknown result type (might be due to invalid IL or missing references)
		//IL_878a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8791: Unknown result type (might be due to invalid IL or missing references)
		//IL_8796: Unknown result type (might be due to invalid IL or missing references)
		//IL_87a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_87ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_87b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_87b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_87ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_87d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9960: Unknown result type (might be due to invalid IL or missing references)
		//IL_9966: Unknown result type (might be due to invalid IL or missing references)
		//IL_996b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9970: Unknown result type (might be due to invalid IL or missing references)
		//IL_9976: Unknown result type (might be due to invalid IL or missing references)
		//IL_997b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9992: Unknown result type (might be due to invalid IL or missing references)
		//IL_9998: Unknown result type (might be due to invalid IL or missing references)
		//IL_999d: Unknown result type (might be due to invalid IL or missing references)
		//IL_99aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_99af: Unknown result type (might be due to invalid IL or missing references)
		//IL_99d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_99e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_99ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_99f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_99fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a02: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a27: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a53: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9aaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ab4: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ab9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9abe: Unknown result type (might be due to invalid IL or missing references)
		//IL_9635: Unknown result type (might be due to invalid IL or missing references)
		//IL_963f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9644: Unknown result type (might be due to invalid IL or missing references)
		//IL_968f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9694: Unknown result type (might be due to invalid IL or missing references)
		//IL_9699: Unknown result type (might be due to invalid IL or missing references)
		//IL_969e: Unknown result type (might be due to invalid IL or missing references)
		//IL_96a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_96a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_96ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_96b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_96c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_96cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_96d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9705: Unknown result type (might be due to invalid IL or missing references)
		//IL_970a: Unknown result type (might be due to invalid IL or missing references)
		//IL_970f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9715: Unknown result type (might be due to invalid IL or missing references)
		//IL_971c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9727: Unknown result type (might be due to invalid IL or missing references)
		//IL_9731: Unknown result type (might be due to invalid IL or missing references)
		//IL_9736: Unknown result type (might be due to invalid IL or missing references)
		//IL_973b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9316: Unknown result type (might be due to invalid IL or missing references)
		//IL_931c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9323: Unknown result type (might be due to invalid IL or missing references)
		//IL_9328: Unknown result type (might be due to invalid IL or missing references)
		//IL_932d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9333: Unknown result type (might be due to invalid IL or missing references)
		//IL_9339: Unknown result type (might be due to invalid IL or missing references)
		//IL_9345: Unknown result type (might be due to invalid IL or missing references)
		//IL_934f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9354: Unknown result type (might be due to invalid IL or missing references)
		//IL_9359: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a55: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a65: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a84: Unknown result type (might be due to invalid IL or missing references)
		//IL_8aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_8aba: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8add: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9da4: Unknown result type (might be due to invalid IL or missing references)
		//IL_9db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_9db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dba: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e59: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e73: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9eac: Unknown result type (might be due to invalid IL or missing references)
		//IL_9eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ebe: Unknown result type (might be due to invalid IL or missing references)
		//IL_9eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_9efa: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f29: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f36: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c41: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c47: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c68: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c79: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_988d: Unknown result type (might be due to invalid IL or missing references)
		//IL_989d: Unknown result type (might be due to invalid IL or missing references)
		//IL_98a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_98a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_98ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_98b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_98ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_98d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_98d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6114: Unknown result type (might be due to invalid IL or missing references)
		//IL_611b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_9cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d07: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d13: Unknown result type (might be due to invalid IL or missing references)
		//IL_950b: Unknown result type (might be due to invalid IL or missing references)
		//IL_951b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9521: Unknown result type (might be due to invalid IL or missing references)
		//IL_9526: Unknown result type (might be due to invalid IL or missing references)
		//IL_952b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9531: Unknown result type (might be due to invalid IL or missing references)
		//IL_9538: Unknown result type (might be due to invalid IL or missing references)
		//IL_9550: Unknown result type (might be due to invalid IL or missing references)
		//IL_9555: Unknown result type (might be due to invalid IL or missing references)
		//IL_93e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_93ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_93f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_9402: Unknown result type (might be due to invalid IL or missing references)
		//IL_9407: Unknown result type (might be due to invalid IL or missing references)
		//IL_940c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9224: Unknown result type (might be due to invalid IL or missing references)
		//IL_6132: Unknown result type (might be due to invalid IL or missing references)
		//IL_6139: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_9789: Unknown result type (might be due to invalid IL or missing references)
		//IL_9251: Unknown result type (might be due to invalid IL or missing references)
		//IL_9257: Unknown result type (might be due to invalid IL or missing references)
		//IL_925c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9261: Unknown result type (might be due to invalid IL or missing references)
		//IL_9267: Unknown result type (might be due to invalid IL or missing references)
		//IL_926c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9277: Unknown result type (might be due to invalid IL or missing references)
		//IL_9283: Unknown result type (might be due to invalid IL or missing references)
		//IL_9296: Unknown result type (might be due to invalid IL or missing references)
		//IL_92b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_92cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_92d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_92d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_92e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_92ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_92f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_92f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6150: Unknown result type (might be due to invalid IL or missing references)
		//IL_6152: Unknown result type (might be due to invalid IL or missing references)
		//IL_615c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6161: Unknown result type (might be due to invalid IL or missing references)
		//IL_6166: Unknown result type (might be due to invalid IL or missing references)
		//IL_616b: Unknown result type (might be due to invalid IL or missing references)
		//IL_632a: Unknown result type (might be due to invalid IL or missing references)
		//IL_632c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6337: Unknown result type (might be due to invalid IL or missing references)
		//IL_633e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6371: Unknown result type (might be due to invalid IL or missing references)
		//IL_6373: Unknown result type (might be due to invalid IL or missing references)
		//IL_637e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6385: Unknown result type (might be due to invalid IL or missing references)
		//IL_62f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_62fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6304: Unknown result type (might be due to invalid IL or missing references)
		//IL_a051: Unknown result type (might be due to invalid IL or missing references)
		//IL_a056: Unknown result type (might be due to invalid IL or missing references)
		//IL_a05b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a061: Unknown result type (might be due to invalid IL or missing references)
		//IL_a06c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0da: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a107: Unknown result type (might be due to invalid IL or missing references)
		//IL_a111: Unknown result type (might be due to invalid IL or missing references)
		//IL_a11b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a120: Unknown result type (might be due to invalid IL or missing references)
		//IL_a125: Unknown result type (might be due to invalid IL or missing references)
		//IL_a12b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a131: Unknown result type (might be due to invalid IL or missing references)
		//IL_a13c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a14d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a158: Unknown result type (might be due to invalid IL or missing references)
		//IL_a16f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a186: Unknown result type (might be due to invalid IL or missing references)
		//IL_a191: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a20f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a223: Unknown result type (might be due to invalid IL or missing references)
		//IL_a229: Unknown result type (might be due to invalid IL or missing references)
		//IL_a22b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a230: Unknown result type (might be due to invalid IL or missing references)
		//IL_a263: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b57: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b62: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b67: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b73: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c03: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c24: Unknown result type (might be due to invalid IL or missing references)
		//IL_97b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_97bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_97c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_97c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_97cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_97d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_97dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_97e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_97fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_9817: Unknown result type (might be due to invalid IL or missing references)
		//IL_9831: Unknown result type (might be due to invalid IL or missing references)
		//IL_9838: Unknown result type (might be due to invalid IL or missing references)
		//IL_983d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9849: Unknown result type (might be due to invalid IL or missing references)
		//IL_9854: Unknown result type (might be due to invalid IL or missing references)
		//IL_9859: Unknown result type (might be due to invalid IL or missing references)
		//IL_985e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a489: Unknown result type (might be due to invalid IL or missing references)
		//IL_af4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_af61: Unknown result type (might be due to invalid IL or missing references)
		//IL_af6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_af70: Unknown result type (might be due to invalid IL or missing references)
		//IL_af75: Unknown result type (might be due to invalid IL or missing references)
		//IL_af80: Unknown result type (might be due to invalid IL or missing references)
		//IL_af85: Unknown result type (might be due to invalid IL or missing references)
		//IL_af8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_af8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_af94: Unknown result type (might be due to invalid IL or missing references)
		//IL_afb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_afb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_afbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_afdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_afe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_afeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_affd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b008: Unknown result type (might be due to invalid IL or missing references)
		//IL_b00d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a534: Unknown result type (might be due to invalid IL or missing references)
		//IL_a539: Unknown result type (might be due to invalid IL or missing references)
		//IL_a540: Unknown result type (might be due to invalid IL or missing references)
		//IL_a545: Unknown result type (might be due to invalid IL or missing references)
		//IL_a54b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a551: Unknown result type (might be due to invalid IL or missing references)
		//IL_a55c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a56d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a578: Unknown result type (might be due to invalid IL or missing references)
		//IL_a58f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_a602: Unknown result type (might be due to invalid IL or missing references)
		//IL_a608: Unknown result type (might be due to invalid IL or missing references)
		//IL_a612: Unknown result type (might be due to invalid IL or missing references)
		//IL_a617: Unknown result type (might be due to invalid IL or missing references)
		//IL_944a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9450: Unknown result type (might be due to invalid IL or missing references)
		//IL_9455: Unknown result type (might be due to invalid IL or missing references)
		//IL_945a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9460: Unknown result type (might be due to invalid IL or missing references)
		//IL_9465: Unknown result type (might be due to invalid IL or missing references)
		//IL_9470: Unknown result type (might be due to invalid IL or missing references)
		//IL_947c: Unknown result type (might be due to invalid IL or missing references)
		//IL_948f: Unknown result type (might be due to invalid IL or missing references)
		//IL_94b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_94be: Unknown result type (might be due to invalid IL or missing references)
		//IL_94ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_94cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_94d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a294: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2df: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_a314: Unknown result type (might be due to invalid IL or missing references)
		//IL_a32b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a330: Unknown result type (might be due to invalid IL or missing references)
		//IL_a342: Unknown result type (might be due to invalid IL or missing references)
		//IL_a347: Unknown result type (might be due to invalid IL or missing references)
		//IL_61e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_61e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_61f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_61fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_622d: Unknown result type (might be due to invalid IL or missing references)
		//IL_622f: Unknown result type (might be due to invalid IL or missing references)
		//IL_623a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6241: Unknown result type (might be due to invalid IL or missing references)
		//IL_61ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_61b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_61c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_a40f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a414: Unknown result type (might be due to invalid IL or missing references)
		//IL_a419: Unknown result type (might be due to invalid IL or missing references)
		//IL_a41e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a423: Unknown result type (might be due to invalid IL or missing references)
		//IL_a42f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a435: Unknown result type (might be due to invalid IL or missing references)
		//IL_a440: Unknown result type (might be due to invalid IL or missing references)
		//IL_a453: Unknown result type (might be due to invalid IL or missing references)
		//IL_a35a: Unknown result type (might be due to invalid IL or missing references)
		//IL_a35f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a377: Unknown result type (might be due to invalid IL or missing references)
		//IL_a37c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b066: Unknown result type (might be due to invalid IL or missing references)
		//IL_b076: Unknown result type (might be due to invalid IL or missing references)
		//IL_b07b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b080: Unknown result type (might be due to invalid IL or missing references)
		//IL_b093: Unknown result type (might be due to invalid IL or missing references)
		//IL_b098: Unknown result type (might be due to invalid IL or missing references)
		//IL_b09d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b104: Unknown result type (might be due to invalid IL or missing references)
		//IL_b109: Unknown result type (might be due to invalid IL or missing references)
		//IL_a65d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a67b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a68f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a695: Unknown result type (might be due to invalid IL or missing references)
		//IL_a697: Unknown result type (might be due to invalid IL or missing references)
		//IL_a69c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b207: Unknown result type (might be due to invalid IL or missing references)
		//IL_b20c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b216: Unknown result type (might be due to invalid IL or missing references)
		//IL_b21b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b221: Unknown result type (might be due to invalid IL or missing references)
		//IL_b228: Unknown result type (might be due to invalid IL or missing references)
		//IL_b232: Unknown result type (might be due to invalid IL or missing references)
		//IL_b237: Unknown result type (might be due to invalid IL or missing references)
		//IL_b23c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b249: Unknown result type (might be due to invalid IL or missing references)
		//IL_b24f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b259: Unknown result type (might be due to invalid IL or missing references)
		//IL_b25e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b263: Unknown result type (might be due to invalid IL or missing references)
		//IL_b268: Unknown result type (might be due to invalid IL or missing references)
		//IL_b26e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b278: Unknown result type (might be due to invalid IL or missing references)
		//IL_b27d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b282: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b29d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_a760: Unknown result type (might be due to invalid IL or missing references)
		//IL_a77c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a781: Unknown result type (might be due to invalid IL or missing references)
		//IL_a737: Unknown result type (might be due to invalid IL or missing references)
		//IL_a753: Unknown result type (might be due to invalid IL or missing references)
		//IL_a758: Unknown result type (might be due to invalid IL or missing references)
		//IL_a787: Unknown result type (might be due to invalid IL or missing references)
		//IL_a78d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a79d: Unknown result type (might be due to invalid IL or missing references)
		//IL_aacb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b318: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_a824: Unknown result type (might be due to invalid IL or missing references)
		//IL_a833: Unknown result type (might be due to invalid IL or missing references)
		//IL_a839: Unknown result type (might be due to invalid IL or missing references)
		//IL_a83b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a840: Unknown result type (might be due to invalid IL or missing references)
		//IL_a868: Unknown result type (might be due to invalid IL or missing references)
		//IL_a87f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a884: Unknown result type (might be due to invalid IL or missing references)
		//IL_a896: Unknown result type (might be due to invalid IL or missing references)
		//IL_a89b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a900: Unknown result type (might be due to invalid IL or missing references)
		//IL_a905: Unknown result type (might be due to invalid IL or missing references)
		//IL_a90b: Unknown result type (might be due to invalid IL or missing references)
		//IL_a911: Unknown result type (might be due to invalid IL or missing references)
		//IL_a91c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a921: Unknown result type (might be due to invalid IL or missing references)
		//IL_a926: Unknown result type (might be due to invalid IL or missing references)
		//IL_a94c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a952: Unknown result type (might be due to invalid IL or missing references)
		//IL_a963: Unknown result type (might be due to invalid IL or missing references)
		//IL_a968: Unknown result type (might be due to invalid IL or missing references)
		//IL_a96d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a972: Unknown result type (might be due to invalid IL or missing references)
		//IL_a977: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa72: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa90: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a988: Unknown result type (might be due to invalid IL or missing references)
		//IL_a98d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a99f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa09: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa20: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa56: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4df: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b668: Unknown result type (might be due to invalid IL or missing references)
		//IL_b66d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b895: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_b901: Unknown result type (might be due to invalid IL or missing references)
		//IL_b918: Unknown result type (might be due to invalid IL or missing references)
		//IL_b924: Unknown result type (might be due to invalid IL or missing references)
		//IL_b929: Unknown result type (might be due to invalid IL or missing references)
		//IL_b52d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b532: Unknown result type (might be due to invalid IL or missing references)
		//IL_b538: Unknown result type (might be due to invalid IL or missing references)
		//IL_b53d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b543: Unknown result type (might be due to invalid IL or missing references)
		//IL_b549: Unknown result type (might be due to invalid IL or missing references)
		//IL_b998: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9db: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba28: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b567: Unknown result type (might be due to invalid IL or missing references)
		//IL_b56c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b572: Unknown result type (might be due to invalid IL or missing references)
		//IL_b577: Unknown result type (might be due to invalid IL or missing references)
		//IL_b57d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b583: Unknown result type (might be due to invalid IL or missing references)
		//IL_b589: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_b601: Unknown result type (might be due to invalid IL or missing references)
		//IL_b606: Unknown result type (might be due to invalid IL or missing references)
		//IL_b615: Unknown result type (might be due to invalid IL or missing references)
		//IL_b621: Unknown result type (might be due to invalid IL or missing references)
		//IL_b627: Unknown result type (might be due to invalid IL or missing references)
		//IL_b62d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_baa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bac8: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba43: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba53: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba77: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba79: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb07: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb12: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb17: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb31: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb37: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb41: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb46: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb73: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb96: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc01: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc03: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc49: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc84: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc90: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc92: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcba: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bcd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b74a: Unknown result type (might be due to invalid IL or missing references)
		//IL_b756: Unknown result type (might be due to invalid IL or missing references)
		//IL_b760: Unknown result type (might be due to invalid IL or missing references)
		//IL_b765: Unknown result type (might be due to invalid IL or missing references)
		//IL_b76c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b771: Unknown result type (might be due to invalid IL or missing references)
		//IL_b776: Unknown result type (might be due to invalid IL or missing references)
		//IL_b77b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b782: Unknown result type (might be due to invalid IL or missing references)
		//IL_b78c: Unknown result type (might be due to invalid IL or missing references)
		//IL_b79d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b82b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b83b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b847: Unknown result type (might be due to invalid IL or missing references)
		//IL_b84d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd63: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd69: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd87: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c033: Unknown result type (might be due to invalid IL or missing references)
		//IL_c03f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c04b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c051: Unknown result type (might be due to invalid IL or missing references)
		//IL_c057: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_bde1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdec: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bdfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_be03: Unknown result type (might be due to invalid IL or missing references)
		//IL_be09: Unknown result type (might be due to invalid IL or missing references)
		//IL_be18: Unknown result type (might be due to invalid IL or missing references)
		//IL_be24: Unknown result type (might be due to invalid IL or missing references)
		//IL_be2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_be57: Unknown result type (might be due to invalid IL or missing references)
		//IL_c23c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c24c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c26b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c275: Unknown result type (might be due to invalid IL or missing references)
		//IL_c280: Unknown result type (might be due to invalid IL or missing references)
		//IL_c291: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c306: Unknown result type (might be due to invalid IL or missing references)
		//IL_c310: Unknown result type (might be due to invalid IL or missing references)
		//IL_c321: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0be: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_c113: Unknown result type (might be due to invalid IL or missing references)
		//IL_c118: Unknown result type (might be due to invalid IL or missing references)
		//IL_c356: Unknown result type (might be due to invalid IL or missing references)
		//IL_c36d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c378: Unknown result type (might be due to invalid IL or missing references)
		//IL_c384: Unknown result type (might be due to invalid IL or missing references)
		//IL_be96: Unknown result type (might be due to invalid IL or missing references)
		//IL_bea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_beb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bedb: Unknown result type (might be due to invalid IL or missing references)
		//IL_bef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_befb: Unknown result type (might be due to invalid IL or missing references)
		//IL_befd: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf02: Unknown result type (might be due to invalid IL or missing references)
		//IL_c144: Unknown result type (might be due to invalid IL or missing references)
		//IL_c149: Unknown result type (might be due to invalid IL or missing references)
		//IL_c158: Unknown result type (might be due to invalid IL or missing references)
		//IL_c15e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c160: Unknown result type (might be due to invalid IL or missing references)
		//IL_c165: Unknown result type (might be due to invalid IL or missing references)
		//IL_c16a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c176: Unknown result type (might be due to invalid IL or missing references)
		//IL_c17c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c181: Unknown result type (might be due to invalid IL or missing references)
		//IL_c186: Unknown result type (might be due to invalid IL or missing references)
		//IL_c191: Unknown result type (might be due to invalid IL or missing references)
		//IL_c19e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1af: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c440: Unknown result type (might be due to invalid IL or missing references)
		//IL_c461: Unknown result type (might be due to invalid IL or missing references)
		//IL_c46c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c478: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_c40b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf37: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf54: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf75: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf77: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf97: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_bff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_bffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4de: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c53e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c549: Unknown result type (might be due to invalid IL or missing references)
		//IL_c54e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c55e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c56c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c572: Unknown result type (might be due to invalid IL or missing references)
		//IL_c574: Unknown result type (might be due to invalid IL or missing references)
		//IL_c579: Unknown result type (might be due to invalid IL or missing references)
		//IL_c517: Unknown result type (might be due to invalid IL or missing references)
		//IL_c51c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c67a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c685: Unknown result type (might be due to invalid IL or missing references)
		//IL_c68a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_c592: Unknown result type (might be due to invalid IL or missing references)
		//IL_c598: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_c61f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c625: Unknown result type (might be due to invalid IL or missing references)
		//IL_c630: Unknown result type (might be due to invalid IL or missing references)
		//IL_c63c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c648: Unknown result type (might be due to invalid IL or missing references)
		//IL_c85d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c863: Unknown result type (might be due to invalid IL or missing references)
		//IL_c87b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c885: Unknown result type (might be due to invalid IL or missing references)
		//IL_c88a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c88f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c89a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca18: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca20: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca25: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_c708: Unknown result type (might be due to invalid IL or missing references)
		//IL_c70d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c71c: Unknown result type (might be due to invalid IL or missing references)
		//IL_c727: Unknown result type (might be due to invalid IL or missing references)
		//IL_c732: Unknown result type (might be due to invalid IL or missing references)
		//IL_c73e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8df: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_c900: Unknown result type (might be due to invalid IL or missing references)
		//IL_c902: Unknown result type (might be due to invalid IL or missing references)
		//IL_c907: Unknown result type (might be due to invalid IL or missing references)
		//IL_c916: Unknown result type (might be due to invalid IL or missing references)
		//IL_c922: Unknown result type (might be due to invalid IL or missing references)
		//IL_c928: Unknown result type (might be due to invalid IL or missing references)
		//IL_c92e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c95e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c96e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c97a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c980: Unknown result type (might be due to invalid IL or missing references)
		//IL_c986: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca44: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca59: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca61: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca66: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca71: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca83: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca89: Unknown result type (might be due to invalid IL or missing references)
		//IL_c77e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c784: Unknown result type (might be due to invalid IL or missing references)
		//IL_c799: Unknown result type (might be due to invalid IL or missing references)
		//IL_c79f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_c80a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c81a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c826: Unknown result type (might be due to invalid IL or missing references)
		//IL_c832: Unknown result type (might be due to invalid IL or missing references)
		//IL_d04a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d05d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d067: Unknown result type (might be due to invalid IL or missing references)
		//IL_d06c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d071: Unknown result type (might be due to invalid IL or missing references)
		//IL_d07c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d081: Unknown result type (might be due to invalid IL or missing references)
		//IL_d086: Unknown result type (might be due to invalid IL or missing references)
		//IL_d08b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d090: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_d102: Unknown result type (might be due to invalid IL or missing references)
		//IL_d174: Unknown result type (might be due to invalid IL or missing references)
		//IL_d179: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_d203: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_d1f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_d29b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_d50e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d513: Unknown result type (might be due to invalid IL or missing references)
		//IL_d51e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d529: Unknown result type (might be due to invalid IL or missing references)
		//IL_d533: Unknown result type (might be due to invalid IL or missing references)
		//IL_d538: Unknown result type (might be due to invalid IL or missing references)
		//IL_d57e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d58d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d592: Unknown result type (might be due to invalid IL or missing references)
		//IL_d597: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_d90a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d914: Unknown result type (might be due to invalid IL or missing references)
		//IL_d919: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_da5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_da73: Unknown result type (might be due to invalid IL or missing references)
		//IL_da7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_da82: Unknown result type (might be due to invalid IL or missing references)
		//IL_da87: Unknown result type (might be due to invalid IL or missing references)
		//IL_d81f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d82b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d840: Unknown result type (might be due to invalid IL or missing references)
		//IL_d846: Unknown result type (might be due to invalid IL or missing references)
		//IL_d848: Unknown result type (might be due to invalid IL or missing references)
		//IL_d852: Unknown result type (might be due to invalid IL or missing references)
		//IL_d85d: Unknown result type (might be due to invalid IL or missing references)
		//IL_d862: Unknown result type (might be due to invalid IL or missing references)
		//IL_d867: Unknown result type (might be due to invalid IL or missing references)
		//IL_d872: Unknown result type (might be due to invalid IL or missing references)
		//IL_d87e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d88a: Unknown result type (might be due to invalid IL or missing references)
		//IL_db0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_db13: Unknown result type (might be due to invalid IL or missing references)
		//IL_dad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dadd: Unknown result type (might be due to invalid IL or missing references)
		//IL_dae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_daed: Unknown result type (might be due to invalid IL or missing references)
		//IL_daf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_db2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_db34: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec77: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec88: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec94: Unknown result type (might be due to invalid IL or missing references)
		//IL_eca0: Unknown result type (might be due to invalid IL or missing references)
		//IL_db53: Unknown result type (might be due to invalid IL or missing references)
		//IL_db58: Unknown result type (might be due to invalid IL or missing references)
		//IL_db5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_db69: Unknown result type (might be due to invalid IL or missing references)
		//IL_db73: Unknown result type (might be due to invalid IL or missing references)
		//IL_db78: Unknown result type (might be due to invalid IL or missing references)
		//IL_dba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_dba9: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dbde: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc13: Unknown result type (might be due to invalid IL or missing references)
		//IL_d99c: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9df: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_da01: Unknown result type (might be due to invalid IL or missing references)
		//IL_da0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_d664: Unknown result type (might be due to invalid IL or missing references)
		//IL_d669: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_d708: Unknown result type (might be due to invalid IL or missing references)
		//IL_d70e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d710: Unknown result type (might be due to invalid IL or missing references)
		//IL_d71a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d725: Unknown result type (might be due to invalid IL or missing references)
		//IL_d72a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d739: Unknown result type (might be due to invalid IL or missing references)
		//IL_d745: Unknown result type (might be due to invalid IL or missing references)
		//IL_d750: Unknown result type (might be due to invalid IL or missing references)
		//IL_d768: Unknown result type (might be due to invalid IL or missing references)
		//IL_edec: Unknown result type (might be due to invalid IL or missing references)
		//IL_edf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_edfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee08: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee19: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee25: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee31: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd01: Unknown result type (might be due to invalid IL or missing references)
		//IL_ecf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed29: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed33: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed45: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed50: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed68: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed93: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed99: Unknown result type (might be due to invalid IL or missing references)
		//IL_eda4: Unknown result type (might be due to invalid IL or missing references)
		//IL_edaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_edbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcde: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd53: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd73: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_f503: Unknown result type (might be due to invalid IL or missing references)
		//IL_f51c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f522: Unknown result type (might be due to invalid IL or missing references)
		//IL_f52d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f539: Unknown result type (might be due to invalid IL or missing references)
		//IL_f545: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_eea4: Unknown result type (might be due to invalid IL or missing references)
		//IL_eeaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_eeb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_eeb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_eebc: Unknown result type (might be due to invalid IL or missing references)
		//IL_eec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_ddd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f27b: Unknown result type (might be due to invalid IL or missing references)
		//IL_de27: Unknown result type (might be due to invalid IL or missing references)
		//IL_de4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_de55: Unknown result type (might be due to invalid IL or missing references)
		//IL_de64: Unknown result type (might be due to invalid IL or missing references)
		//IL_de69: Unknown result type (might be due to invalid IL or missing references)
		//IL_de6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f29b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef58: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef64: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef70: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef75: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f02d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f033: Unknown result type (might be due to invalid IL or missing references)
		//IL_f03d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f042: Unknown result type (might be due to invalid IL or missing references)
		//IL_f047: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef99: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_efaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_efb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_efc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dead: Unknown result type (might be due to invalid IL or missing references)
		//IL_deb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_dec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_dec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_decc: Unknown result type (might be due to invalid IL or missing references)
		//IL_def4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f579: Unknown result type (might be due to invalid IL or missing references)
		//IL_f583: Unknown result type (might be due to invalid IL or missing references)
		//IL_f588: Unknown result type (might be due to invalid IL or missing references)
		//IL_f59c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f303: Unknown result type (might be due to invalid IL or missing references)
		//IL_f308: Unknown result type (might be due to invalid IL or missing references)
		//IL_f30e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f320: Unknown result type (might be due to invalid IL or missing references)
		//IL_f325: Unknown result type (might be due to invalid IL or missing references)
		//IL_f32a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f33b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f345: Unknown result type (might be due to invalid IL or missing references)
		//IL_f34a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f350: Unknown result type (might be due to invalid IL or missing references)
		//IL_f357: Unknown result type (might be due to invalid IL or missing references)
		//IL_f361: Unknown result type (might be due to invalid IL or missing references)
		//IL_f366: Unknown result type (might be due to invalid IL or missing references)
		//IL_f36b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f37c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f386: Unknown result type (might be due to invalid IL or missing references)
		//IL_f38b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f096: Unknown result type (might be due to invalid IL or missing references)
		//IL_f101: Unknown result type (might be due to invalid IL or missing references)
		//IL_efe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_efe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_eff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f000: Unknown result type (might be due to invalid IL or missing references)
		//IL_f00c: Unknown result type (might be due to invalid IL or missing references)
		//IL_df55: Unknown result type (might be due to invalid IL or missing references)
		//IL_df5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_df6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_df6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_df74: Unknown result type (might be due to invalid IL or missing references)
		//IL_df9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3be: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_f39a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f11d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f12f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f139: Unknown result type (might be due to invalid IL or missing references)
		//IL_f13e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f143: Unknown result type (might be due to invalid IL or missing references)
		//IL_f149: Unknown result type (might be due to invalid IL or missing references)
		//IL_f14f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f155: Unknown result type (might be due to invalid IL or missing references)
		//IL_f15a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f175: Unknown result type (might be due to invalid IL or missing references)
		//IL_f17b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f187: Unknown result type (might be due to invalid IL or missing references)
		//IL_f18c: Unknown result type (might be due to invalid IL or missing references)
		//IL_dffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_e003: Unknown result type (might be due to invalid IL or missing references)
		//IL_e009: Unknown result type (might be due to invalid IL or missing references)
		//IL_e00f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e019: Unknown result type (might be due to invalid IL or missing references)
		//IL_e01e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e039: Unknown result type (might be due to invalid IL or missing references)
		//IL_e052: Unknown result type (might be due to invalid IL or missing references)
		//IL_e05c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e061: Unknown result type (might be due to invalid IL or missing references)
		//IL_e068: Unknown result type (might be due to invalid IL or missing references)
		//IL_e06d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e080: Unknown result type (might be due to invalid IL or missing references)
		//IL_e08b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e090: Unknown result type (might be due to invalid IL or missing references)
		//IL_e096: Unknown result type (might be due to invalid IL or missing references)
		//IL_e09c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0af: Unknown result type (might be due to invalid IL or missing references)
		//IL_f62d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f633: Unknown result type (might be due to invalid IL or missing references)
		//IL_f639: Unknown result type (might be due to invalid IL or missing references)
		//IL_f64a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f64f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f65e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f66a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f675: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3db: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f403: Unknown result type (might be due to invalid IL or missing references)
		//IL_f745: Unknown result type (might be due to invalid IL or missing references)
		//IL_f76b: Unknown result type (might be due to invalid IL or missing references)
		//IL_f782: Unknown result type (might be due to invalid IL or missing references)
		//IL_f78c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f791: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0df: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_f832: Unknown result type (might be due to invalid IL or missing references)
		//IL_f838: Unknown result type (might be due to invalid IL or missing references)
		//IL_f843: Unknown result type (might be due to invalid IL or missing references)
		//IL_f84e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f85a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f200: Unknown result type (might be due to invalid IL or missing references)
		//IL_f206: Unknown result type (might be due to invalid IL or missing references)
		//IL_f211: Unknown result type (might be due to invalid IL or missing references)
		//IL_f21d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f229: Unknown result type (might be due to invalid IL or missing references)
		//IL_e119: Unknown result type (might be due to invalid IL or missing references)
		//IL_e11e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e124: Unknown result type (might be due to invalid IL or missing references)
		//IL_e129: Unknown result type (might be due to invalid IL or missing references)
		//IL_e148: Unknown result type (might be due to invalid IL or missing references)
		//IL_e14e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e159: Unknown result type (might be due to invalid IL or missing references)
		//IL_e170: Unknown result type (might be due to invalid IL or missing references)
		//IL_e18d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e192: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e1bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e401: Unknown result type (might be due to invalid IL or missing references)
		//IL_f922: Unknown result type (might be due to invalid IL or missing references)
		//IL_f94c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f952: Unknown result type (might be due to invalid IL or missing references)
		//IL_f957: Unknown result type (might be due to invalid IL or missing references)
		//IL_f95e: Unknown result type (might be due to invalid IL or missing references)
		//IL_f970: Unknown result type (might be due to invalid IL or missing references)
		//IL_f981: Unknown result type (might be due to invalid IL or missing references)
		//IL_f987: Unknown result type (might be due to invalid IL or missing references)
		//IL_f98c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f99f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_e215: Unknown result type (might be due to invalid IL or missing references)
		//IL_e220: Unknown result type (might be due to invalid IL or missing references)
		//IL_e225: Unknown result type (might be due to invalid IL or missing references)
		//IL_e317: Unknown result type (might be due to invalid IL or missing references)
		//IL_e322: Unknown result type (might be due to invalid IL or missing references)
		//IL_e327: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa75: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa86: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa91: Unknown result type (might be due to invalid IL or missing references)
		//IL_faa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_faac: Unknown result type (might be due to invalid IL or missing references)
		//IL_fab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa31: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa37: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa42: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa56: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_e305: Unknown result type (might be due to invalid IL or missing references)
		//IL_e30a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e30f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e333: Unknown result type (might be due to invalid IL or missing references)
		//IL_e339: Unknown result type (might be due to invalid IL or missing references)
		//IL_e33e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e343: Unknown result type (might be due to invalid IL or missing references)
		//IL_e34e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e35a: Unknown result type (might be due to invalid IL or missing references)
		//IL_e360: Unknown result type (might be due to invalid IL or missing references)
		//IL_e366: Unknown result type (might be due to invalid IL or missing references)
		//IL_fae0: Unknown result type (might be due to invalid IL or missing references)
		//IL_fae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_faf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb03: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb08: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb14: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb23: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb51: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb81: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb93: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbca: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbda: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbec: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_e45c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e461: Unknown result type (might be due to invalid IL or missing references)
		//IL_e46c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e471: Unknown result type (might be due to invalid IL or missing references)
		//IL_e476: Unknown result type (might be due to invalid IL or missing references)
		//IL_e47b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e480: Unknown result type (might be due to invalid IL or missing references)
		//IL_e486: Unknown result type (might be due to invalid IL or missing references)
		//IL_e48c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e49b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc27: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc48: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc53: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc88: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_fccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_fcdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd04: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd40: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd57: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd80: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd86: Unknown result type (might be due to invalid IL or missing references)
		//IL_fda1: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdac: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_e50b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e50d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e50e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e563: Unknown result type (might be due to invalid IL or missing references)
		//IL_e568: Unknown result type (might be due to invalid IL or missing references)
		//IL_e573: Unknown result type (might be due to invalid IL or missing references)
		//IL_e578: Unknown result type (might be due to invalid IL or missing references)
		//IL_e57d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e582: Unknown result type (might be due to invalid IL or missing references)
		//IL_e587: Unknown result type (might be due to invalid IL or missing references)
		//IL_e593: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e60c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e70f: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe60: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe66: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe82: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe99: Unknown result type (might be due to invalid IL or missing references)
		//IL_e76c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e771: Unknown result type (might be due to invalid IL or missing references)
		//IL_e777: Unknown result type (might be due to invalid IL or missing references)
		//IL_e77d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e787: Unknown result type (might be due to invalid IL or missing references)
		//IL_e78c: Unknown result type (might be due to invalid IL or missing references)
		//IL_fec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_fec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff00: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e692: Unknown result type (might be due to invalid IL or missing references)
		//IL_e81d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e822: Unknown result type (might be due to invalid IL or missing references)
		//IL_e828: Unknown result type (might be due to invalid IL or missing references)
		//IL_e82e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e838: Unknown result type (might be due to invalid IL or missing references)
		//IL_e83d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7df: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff93: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff99: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_fff1: Unknown result type (might be due to invalid IL or missing references)
		//IL_fffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_100b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_100ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_100ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_100e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_100e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_100eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_100f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10101: Unknown result type (might be due to invalid IL or missing references)
		//IL_1010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10118: Unknown result type (might be due to invalid IL or missing references)
		//IL_10219: Unknown result type (might be due to invalid IL or missing references)
		//IL_10224: Unknown result type (might be due to invalid IL or missing references)
		//IL_1022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10264: Unknown result type (might be due to invalid IL or missing references)
		//IL_1026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10279: Unknown result type (might be due to invalid IL or missing references)
		//IL_1028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10295: Unknown result type (might be due to invalid IL or missing references)
		//IL_e99b: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea06: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea17: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea22: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea34: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e90e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e913: Unknown result type (might be due to invalid IL or missing references)
		//IL_e918: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec14: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec20: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec26: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec31: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec57: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec61: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec66: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea70: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea76: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea80: Unknown result type (might be due to invalid IL or missing references)
		//IL_eaae: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb14: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb25: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb46: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb51: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb57: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb74: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb84: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb89: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb94: Unknown result type (might be due to invalid IL or missing references)
		//IL_eba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebab: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_102bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_102d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_102da: Unknown result type (might be due to invalid IL or missing references)
		//IL_102df: Unknown result type (might be due to invalid IL or missing references)
		//IL_102e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_102ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_102f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_102f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_102fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_10303: Unknown result type (might be due to invalid IL or missing references)
		//IL_1031f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10324: Unknown result type (might be due to invalid IL or missing references)
		//IL_10330: Unknown result type (might be due to invalid IL or missing references)
		//IL_1033a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1062a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1063d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10647: Unknown result type (might be due to invalid IL or missing references)
		//IL_1064c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10651: Unknown result type (might be due to invalid IL or missing references)
		//IL_1065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10661: Unknown result type (might be due to invalid IL or missing references)
		//IL_10666: Unknown result type (might be due to invalid IL or missing references)
		//IL_1066b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10670: Unknown result type (might be due to invalid IL or missing references)
		//IL_1068c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10691: Unknown result type (might be due to invalid IL or missing references)
		//IL_1069d: Unknown result type (might be due to invalid IL or missing references)
		//IL_106a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_106ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_109a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_109bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_109c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_109ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_109cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_109da: Unknown result type (might be due to invalid IL or missing references)
		//IL_109df: Unknown result type (might be due to invalid IL or missing references)
		//IL_109e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_109e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_109ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a18: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a53: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a59: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a64: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a80: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a85: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10aee: Unknown result type (might be due to invalid IL or missing references)
		//IL_10af3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10afe: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b40: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b60: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b66: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ba3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ba9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bce: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_109a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_109a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_109a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10374: Unknown result type (might be due to invalid IL or missing references)
		//IL_10379: Unknown result type (might be due to invalid IL or missing references)
		//IL_1038c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10396: Unknown result type (might be due to invalid IL or missing references)
		//IL_1039b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11298: Unknown result type (might be due to invalid IL or missing references)
		//IL_1129d: Unknown result type (might be due to invalid IL or missing references)
		//IL_112a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_112b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_112bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_112da: Unknown result type (might be due to invalid IL or missing references)
		//IL_112e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_112ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_11316: Unknown result type (might be due to invalid IL or missing references)
		//IL_11321: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10daa: Unknown result type (might be due to invalid IL or missing references)
		//IL_10db9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dca: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dda: Unknown result type (might be due to invalid IL or missing references)
		//IL_10de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10deb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_103a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_103b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_103b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_103ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_103d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_103d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11353: Unknown result type (might be due to invalid IL or missing references)
		//IL_11358: Unknown result type (might be due to invalid IL or missing references)
		//IL_1135d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11373: Unknown result type (might be due to invalid IL or missing references)
		//IL_11378: Unknown result type (might be due to invalid IL or missing references)
		//IL_11395: Unknown result type (might be due to invalid IL or missing references)
		//IL_113b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_113de: Unknown result type (might be due to invalid IL or missing references)
		//IL_113e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e11: Invalid comparison between Unknown and I4
		//IL_103e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_103f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_103f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10415: Unknown result type (might be due to invalid IL or missing references)
		//IL_1041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1141d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11422: Unknown result type (might be due to invalid IL or missing references)
		//IL_11427: Unknown result type (might be due to invalid IL or missing references)
		//IL_1143d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11442: Unknown result type (might be due to invalid IL or missing references)
		//IL_1145f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1147e: Unknown result type (might be due to invalid IL or missing references)
		//IL_114a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_114b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c02: Unknown result type (might be due to invalid IL or missing references)
		//IL_10741: Unknown result type (might be due to invalid IL or missing references)
		//IL_10752: Unknown result type (might be due to invalid IL or missing references)
		//IL_10757: Unknown result type (might be due to invalid IL or missing references)
		//IL_1076d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10777: Unknown result type (might be due to invalid IL or missing references)
		//IL_1077c: Unknown result type (might be due to invalid IL or missing references)
		//IL_106fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10712: Unknown result type (might be due to invalid IL or missing references)
		//IL_10725: Unknown result type (might be due to invalid IL or missing references)
		//IL_1072f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10734: Unknown result type (might be due to invalid IL or missing references)
		//IL_1044a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1044f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10564: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e23: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e25: Invalid comparison between Unknown and I4
		//IL_10c45: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c70: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c12: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c17: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1046a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1047d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10487: Unknown result type (might be due to invalid IL or missing references)
		//IL_1048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10491: Unknown result type (might be due to invalid IL or missing references)
		//IL_1049c: Unknown result type (might be due to invalid IL or missing references)
		//IL_104a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_104a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_104ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_104b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_104c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_104d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_104e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_104e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_104eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_104f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_104fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10500: Unknown result type (might be due to invalid IL or missing references)
		//IL_10505: Unknown result type (might be due to invalid IL or missing references)
		//IL_1050a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1051b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10521: Unknown result type (might be due to invalid IL or missing references)
		//IL_10527: Unknown result type (might be due to invalid IL or missing references)
		//IL_10584: Unknown result type (might be due to invalid IL or missing references)
		//IL_10597: Unknown result type (might be due to invalid IL or missing references)
		//IL_105a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_105a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_105ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_105b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_105bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_105c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_105c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_105ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_105db: Unknown result type (might be due to invalid IL or missing references)
		//IL_105e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_105e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e48: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e57: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e89: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ea1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ea7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eac: Unknown result type (might be due to invalid IL or missing references)
		//IL_10eb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ee1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c91: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cef: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d05: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d21: Unknown result type (might be due to invalid IL or missing references)
		//IL_11550: Unknown result type (might be due to invalid IL or missing references)
		//IL_11555: Unknown result type (might be due to invalid IL or missing references)
		//IL_1155c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11562: Unknown result type (might be due to invalid IL or missing references)
		//IL_11567: Unknown result type (might be due to invalid IL or missing references)
		//IL_1156d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11587: Unknown result type (might be due to invalid IL or missing references)
		//IL_1158c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11595: Unknown result type (might be due to invalid IL or missing references)
		//IL_1159a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1159f: Unknown result type (might be due to invalid IL or missing references)
		//IL_115b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_115b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_115bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_115d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_115d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_115f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11604: Unknown result type (might be due to invalid IL or missing references)
		//IL_1160e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11613: Unknown result type (might be due to invalid IL or missing references)
		//IL_11618: Unknown result type (might be due to invalid IL or missing references)
		//IL_1161d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1162d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11632: Unknown result type (might be due to invalid IL or missing references)
		//IL_1164f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11659: Unknown result type (might be due to invalid IL or missing references)
		//IL_1165f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1166a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11694: Unknown result type (might be due to invalid IL or missing references)
		//IL_116b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_116ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_116f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_116f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11707: Unknown result type (might be due to invalid IL or missing references)
		//IL_1170c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11729: Unknown result type (might be due to invalid IL or missing references)
		//IL_11736: Unknown result type (might be due to invalid IL or missing references)
		//IL_1173b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11765: Unknown result type (might be due to invalid IL or missing references)
		//IL_11770: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ef7: Invalid comparison between Unknown and I4
		//IL_107ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_107b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_108c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_108c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1297d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12982: Unknown result type (might be due to invalid IL or missing references)
		//IL_12987: Unknown result type (might be due to invalid IL or missing references)
		//IL_12999: Unknown result type (might be due to invalid IL or missing references)
		//IL_1299e: Unknown result type (might be due to invalid IL or missing references)
		//IL_129c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_129cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_129d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b64: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f06: Unknown result type (might be due to invalid IL or missing references)
		//IL_107cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_107df: Unknown result type (might be due to invalid IL or missing references)
		//IL_107e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_107ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_107f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_107fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_10803: Unknown result type (might be due to invalid IL or missing references)
		//IL_10808: Unknown result type (might be due to invalid IL or missing references)
		//IL_1080d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10812: Unknown result type (might be due to invalid IL or missing references)
		//IL_10826: Unknown result type (might be due to invalid IL or missing references)
		//IL_10839: Unknown result type (might be due to invalid IL or missing references)
		//IL_10843: Unknown result type (might be due to invalid IL or missing references)
		//IL_10848: Unknown result type (might be due to invalid IL or missing references)
		//IL_1084d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10858: Unknown result type (might be due to invalid IL or missing references)
		//IL_1085d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10862: Unknown result type (might be due to invalid IL or missing references)
		//IL_10867: Unknown result type (might be due to invalid IL or missing references)
		//IL_1086c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1087d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10883: Unknown result type (might be due to invalid IL or missing references)
		//IL_10889: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_108f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_10903: Unknown result type (might be due to invalid IL or missing references)
		//IL_10908: Unknown result type (might be due to invalid IL or missing references)
		//IL_1090d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10918: Unknown result type (might be due to invalid IL or missing references)
		//IL_1091d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10922: Unknown result type (might be due to invalid IL or missing references)
		//IL_10927: Unknown result type (might be due to invalid IL or missing references)
		//IL_1092c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1093d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10943: Unknown result type (might be due to invalid IL or missing references)
		//IL_10949: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f0b: Invalid comparison between Unknown and I4
		//IL_12a50: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12abe: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11830: Unknown result type (might be due to invalid IL or missing references)
		//IL_11835: Unknown result type (might be due to invalid IL or missing references)
		//IL_1183c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11842: Unknown result type (might be due to invalid IL or missing references)
		//IL_11847: Unknown result type (might be due to invalid IL or missing references)
		//IL_1184d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11867: Unknown result type (might be due to invalid IL or missing references)
		//IL_1186c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1187e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11883: Unknown result type (might be due to invalid IL or missing references)
		//IL_11888: Unknown result type (might be due to invalid IL or missing references)
		//IL_118a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_118a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_118ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_118b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_118d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_118df: Unknown result type (might be due to invalid IL or missing references)
		//IL_118f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11902: Unknown result type (might be due to invalid IL or missing references)
		//IL_11938: Unknown result type (might be due to invalid IL or missing references)
		//IL_1193d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11942: Unknown result type (might be due to invalid IL or missing references)
		//IL_1195b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11960: Unknown result type (might be due to invalid IL or missing references)
		//IL_1197d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1198a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1198f: Unknown result type (might be due to invalid IL or missing references)
		//IL_119a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_119b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11eda: Unknown result type (might be due to invalid IL or missing references)
		//IL_11eff: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f09: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c15: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c25: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_11119: Unknown result type (might be due to invalid IL or missing references)
		//IL_11129: Unknown result type (might be due to invalid IL or missing references)
		//IL_11135: Unknown result type (might be due to invalid IL or missing references)
		//IL_1113f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11162: Unknown result type (might be due to invalid IL or missing references)
		//IL_1116c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11177: Unknown result type (might be due to invalid IL or missing references)
		//IL_1118f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1119f: Unknown result type (might be due to invalid IL or missing references)
		//IL_111b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_111bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_111de: Unknown result type (might be due to invalid IL or missing references)
		//IL_111e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_111f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c45: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c95: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d84: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_11de2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ded: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e38: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cff: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d28: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fe4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_11005: Unknown result type (might be due to invalid IL or missing references)
		//IL_1100a: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12372: Unknown result type (might be due to invalid IL or missing references)
		//IL_12397: Unknown result type (might be due to invalid IL or missing references)
		//IL_123a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_123bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_123ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_12276: Unknown result type (might be due to invalid IL or missing references)
		//IL_1227b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12280: Unknown result type (might be due to invalid IL or missing references)
		//IL_12299: Unknown result type (might be due to invalid IL or missing references)
		//IL_1229e: Unknown result type (might be due to invalid IL or missing references)
		//IL_122c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_122e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_122f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12304: Unknown result type (might be due to invalid IL or missing references)
		//IL_1207d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12083: Unknown result type (might be due to invalid IL or missing references)
		//IL_12089: Unknown result type (might be due to invalid IL or missing references)
		//IL_1208f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12094: Unknown result type (might be due to invalid IL or missing references)
		//IL_12099: Unknown result type (might be due to invalid IL or missing references)
		//IL_120a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_120a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_120ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_12107: Unknown result type (might be due to invalid IL or missing references)
		//IL_1210c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12112: Unknown result type (might be due to invalid IL or missing references)
		//IL_12137: Unknown result type (might be due to invalid IL or missing references)
		//IL_12141: Unknown result type (might be due to invalid IL or missing references)
		//IL_12159: Unknown result type (might be due to invalid IL or missing references)
		//IL_12164: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_121c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_121cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_121d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_121d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_121ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_12209: Unknown result type (might be due to invalid IL or missing references)
		//IL_12221: Unknown result type (might be due to invalid IL or missing references)
		//IL_1222c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12014: Unknown result type (might be due to invalid IL or missing references)
		//IL_12019: Unknown result type (might be due to invalid IL or missing references)
		//IL_1102b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11039: Unknown result type (might be due to invalid IL or missing references)
		//IL_1103f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11041: Unknown result type (might be due to invalid IL or missing references)
		//IL_1104b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11050: Unknown result type (might be due to invalid IL or missing references)
		//IL_11060: Unknown result type (might be due to invalid IL or missing references)
		//IL_11066: Unknown result type (might be due to invalid IL or missing references)
		//IL_1106b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11070: Unknown result type (might be due to invalid IL or missing references)
		//IL_11076: Unknown result type (might be due to invalid IL or missing references)
		//IL_1107f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11089: Unknown result type (might be due to invalid IL or missing references)
		//IL_11095: Unknown result type (might be due to invalid IL or missing references)
		//IL_1109f: Unknown result type (might be due to invalid IL or missing references)
		//IL_110b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_110bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_12da7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dac: Unknown result type (might be due to invalid IL or missing references)
		//IL_12db1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dea: Unknown result type (might be due to invalid IL or missing references)
		//IL_12df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12072: Unknown result type (might be due to invalid IL or missing references)
		//IL_12050: Unknown result type (might be due to invalid IL or missing references)
		//IL_12060: Unknown result type (might be due to invalid IL or missing references)
		//IL_12065: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e32: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e38: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e90: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ea8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ead: Unknown result type (might be due to invalid IL or missing references)
		//IL_12eb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12eda: Unknown result type (might be due to invalid IL or missing references)
		//IL_12edf: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12efe: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f37: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f55: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f61: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f88: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fa2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fad: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fc0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fd6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fed: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ff2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13007: Unknown result type (might be due to invalid IL or missing references)
		//IL_1300d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13012: Unknown result type (might be due to invalid IL or missing references)
		//IL_1301b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13025: Unknown result type (might be due to invalid IL or missing references)
		//IL_13031: Unknown result type (might be due to invalid IL or missing references)
		//IL_1303b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13052: Unknown result type (might be due to invalid IL or missing references)
		//IL_13057: Unknown result type (might be due to invalid IL or missing references)
		//IL_12468: Unknown result type (might be due to invalid IL or missing references)
		//IL_1248d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12497: Unknown result type (might be due to invalid IL or missing references)
		//IL_124ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_124b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12077: Unknown result type (might be due to invalid IL or missing references)
		//IL_12569: Unknown result type (might be due to invalid IL or missing references)
		//IL_1258e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12598: Unknown result type (might be due to invalid IL or missing references)
		//IL_125ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_125b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_12792: Unknown result type (might be due to invalid IL or missing references)
		//IL_127b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_127cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_127e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_127f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13254: Unknown result type (might be due to invalid IL or missing references)
		//IL_13259: Unknown result type (might be due to invalid IL or missing references)
		//IL_1325e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13375: Unknown result type (might be due to invalid IL or missing references)
		//IL_1339e: Unknown result type (might be due to invalid IL or missing references)
		//IL_133a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_133c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_133d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13091: Unknown result type (might be due to invalid IL or missing references)
		//IL_13096: Unknown result type (might be due to invalid IL or missing references)
		//IL_1309b: Unknown result type (might be due to invalid IL or missing references)
		//IL_131b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_131db: Unknown result type (might be due to invalid IL or missing references)
		//IL_131e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_131fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1320f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d45: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_13da2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13454: Unknown result type (might be due to invalid IL or missing references)
		//IL_13459: Unknown result type (might be due to invalid IL or missing references)
		//IL_1345e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1261f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12624: Unknown result type (might be due to invalid IL or missing references)
		//IL_126a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_126c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_126d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_126e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12709: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e35: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e54: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e76: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b75: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b91: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_138bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_138c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_138d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_138d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_138df: Unknown result type (might be due to invalid IL or missing references)
		//IL_138f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_136b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_136be: Unknown result type (might be due to invalid IL or missing references)
		//IL_136c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12887: Unknown result type (might be due to invalid IL or missing references)
		//IL_1288c: Unknown result type (might be due to invalid IL or missing references)
		//IL_128e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1290a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12914: Unknown result type (might be due to invalid IL or missing references)
		//IL_1292c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12936: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_142ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_142d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_142d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_142df: Unknown result type (might be due to invalid IL or missing references)
		//IL_142fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_14311: Unknown result type (might be due to invalid IL or missing references)
		//IL_1431c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bca: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_13982: Unknown result type (might be due to invalid IL or missing references)
		//IL_13931: Unknown result type (might be due to invalid IL or missing references)
		//IL_13cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c44: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c72: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c94: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a14: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fec: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_14008: Unknown result type (might be due to invalid IL or missing references)
		//IL_1401f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1403d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a98: Unknown result type (might be due to invalid IL or missing references)
		//IL_13aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_13aca: Unknown result type (might be due to invalid IL or missing references)
		//IL_14087: Unknown result type (might be due to invalid IL or missing references)
		//IL_1408c: Unknown result type (might be due to invalid IL or missing references)
		//IL_14091: Unknown result type (might be due to invalid IL or missing references)
		//IL_140aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_140af: Unknown result type (might be due to invalid IL or missing references)
		//IL_140d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_140f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1410e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14119: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a49: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13801: Unknown result type (might be due to invalid IL or missing references)
		//IL_1382a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13834: Unknown result type (might be due to invalid IL or missing references)
		//IL_1384c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13857: Unknown result type (might be due to invalid IL or missing references)
		//IL_14503: Unknown result type (might be due to invalid IL or missing references)
		//IL_14508: Unknown result type (might be due to invalid IL or missing references)
		//IL_1450d: Unknown result type (might be due to invalid IL or missing references)
		//IL_143d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_143d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_143de: Unknown result type (might be due to invalid IL or missing references)
		//IL_143e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_143ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_143fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_143ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_14428: Unknown result type (might be due to invalid IL or missing references)
		//IL_1443a: Unknown result type (might be due to invalid IL or missing references)
		//IL_14444: Unknown result type (might be due to invalid IL or missing references)
		//IL_1445b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14474: Unknown result type (might be due to invalid IL or missing references)
		//IL_141c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_141cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_141d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_141fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14219: Unknown result type (might be due to invalid IL or missing references)
		//IL_14223: Unknown result type (might be due to invalid IL or missing references)
		//IL_1423a: Unknown result type (might be due to invalid IL or missing references)
		//IL_14245: Unknown result type (might be due to invalid IL or missing references)
		//IL_135d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13601: Unknown result type (might be due to invalid IL or missing references)
		//IL_1360b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13623: Unknown result type (might be due to invalid IL or missing references)
		//IL_13634: Unknown result type (might be due to invalid IL or missing references)
		//IL_149ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_149d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_149d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14745: Unknown result type (might be due to invalid IL or missing references)
		//IL_1474a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1474f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1464b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14674: Unknown result type (might be due to invalid IL or missing references)
		//IL_1467e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14696: Unknown result type (might be due to invalid IL or missing references)
		//IL_146a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b61: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_148f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1491b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14925: Unknown result type (might be due to invalid IL or missing references)
		//IL_1493d: Unknown result type (might be due to invalid IL or missing references)
		//IL_14948: Unknown result type (might be due to invalid IL or missing references)
		int num136 = 0;
		int num137 = 0;
		if (proj.type == 175)
		{
			num136 = 10;
		}
		if (proj.type == 392)
		{
			num136 = -2;
		}
		if (proj.type == 499)
		{
			num136 = 12;
		}
		if (proj.type == 765)
		{
			num136 = 22;
			num137 = -16;
		}
		if (proj.type == 966)
		{
			num136 = -26;
			num137 = -6;
		}
		if (proj.bobber)
		{
			num136 = 8;
		}
		if (proj.type == 519)
		{
			num136 = 6;
			num137 -= 6;
		}
		if (proj.type == 520)
		{
			num136 = 12;
		}
		if (proj.type == 492)
		{
			num137 -= 4;
			num136 += 5;
		}
		if (proj.type == 498)
		{
			num136 = 6;
		}
		if (proj.type == 489)
		{
			num136 = -2;
		}
		if (proj.type == 486)
		{
			num136 = -6;
		}
		if (proj.type == 525)
		{
			num136 = 5;
		}
		if (proj.type == 488)
		{
			num137 -= 8;
		}
		if (proj.type == 373)
		{
			num137 = -10;
			num136 = 6;
		}
		if (proj.type == 375)
		{
			num137 = -11;
			num136 = 12;
		}
		if (proj.type == 423)
		{
			num137 = -5;
		}
		if (proj.type == 346)
		{
			num136 = 4;
		}
		if (proj.type == 331)
		{
			num137 = -4;
		}
		if (proj.type == 254)
		{
			num136 = 3;
		}
		if (proj.type == 273)
		{
			num137 = 2;
		}
		if (proj.type == 335)
		{
			num136 = 6;
		}
		if (proj.type == 162)
		{
			num136 = 1;
			num137 = 1;
		}
		if (proj.type == 377)
		{
			num136 = -6;
		}
		if (proj.type == 353)
		{
			num136 = 36;
			num137 = -12;
		}
		if (proj.type == 324)
		{
			num136 = 22;
			num137 = -6;
		}
		if (proj.type == 266)
		{
			num136 = 10;
			num137 = -10;
		}
		if (proj.type == 319)
		{
			num136 = 10;
			num137 = -12;
		}
		if (proj.type == 315)
		{
			num136 = -13;
			num137 = -6;
		}
		if (proj.type == 313 && proj.height != 54)
		{
			num137 = -12;
			num136 = 20;
		}
		if (proj.type == 314)
		{
			num137 = -8;
			num136 = 0;
		}
		if (proj.type == 269)
		{
			num136 = 18;
			num137 = -14;
		}
		if (proj.type == 268)
		{
			num136 = 22;
			num137 = -2;
		}
		if (proj.type == 18)
		{
			num136 = 3;
			num137 = 3;
		}
		if (proj.type == 16)
		{
			num136 = 6;
		}
		if (proj.type == 17 || proj.type == 31)
		{
			num136 = 2;
		}
		if (proj.type == 25 || proj.type == 26 || proj.type == 35 || proj.type == 63 || proj.type == 154)
		{
			num136 = 6;
			num137 -= 6;
		}
		if (proj.type == 947 || proj.type == 948)
		{
			num136 = 4;
			num137 -= 4;
		}
		if (proj.type == 28 || proj.type == 37 || proj.type == 75)
		{
			num136 = 8;
		}
		if (proj.type == 29 || proj.type == 470 || proj.type == 637)
		{
			num136 = 11;
		}
		if (proj.type == 43)
		{
			num136 = 4;
		}
		if (proj.type == 208)
		{
			num136 = 2;
			num137 -= 12;
		}
		if (proj.type == 209)
		{
			num136 = 4;
			num137 -= 8;
		}
		if (proj.type == 210)
		{
			num136 = 2;
			num137 -= 22;
		}
		if (proj.type == 251)
		{
			num136 = 18;
			num137 -= 10;
		}
		if (proj.type == 163 || proj.type == 310 || proj.type == 1009 || proj.type == 1010 || proj.type == 1011 || proj.type == 1008)
		{
			num136 = 10;
		}
		if (proj.type == 69 || proj.type == 70)
		{
			num136 = 4;
			num137 = 4;
		}
		float num138 = (float)(TextureAssets.Projectile[proj.type].Width() - proj.width) * 0.5f + (float)proj.width * 0.5f;
		if (proj.type == 50 || proj.type == 53 || proj.type == 515 || proj.type == 870)
		{
			num137 = -8;
		}
		if (proj.type == 473)
		{
			num137 = -6;
			num136 = 2;
		}
		if (proj.type == 72 || proj.type == 86 || proj.type == 87)
		{
			num137 = -16;
			num136 = 8;
		}
		if (proj.type == 74)
		{
			num137 = -6;
		}
		if (proj.type == 99 || proj.type == 727 || proj.type == 1013 || proj.type == 1014)
		{
			num136 = 1;
		}
		if (proj.type == 655)
		{
			num136 = 1;
		}
		if (proj.type == 111)
		{
			num136 = 18;
			num137 = -16;
		}
		if (proj.type == 875)
		{
			num136 = 16;
			num137 = -16;
		}
		if (proj.type == 881)
		{
			num136 = 14;
			num137 = -8;
		}
		if (proj.type == 934)
		{
			num136 = 14;
			num137 = -20;
		}
		if (proj.type == 934)
		{
			num136 = 14;
			num137 = -20;
		}
		if (proj.type == 884)
		{
			num136 = 16;
			num137 = -12;
		}
		if (proj.type == 890)
		{
			num136 = 26;
			num137 = -9;
		}
		if (proj.type == 891)
		{
			num136 = 30;
			num137 = -12;
		}
		if (proj.type == 897)
		{
			num136 = 38;
			num137 = -13;
		}
		if (proj.type == 899)
		{
			num136 = 28;
			num137 = -12;
		}
		if (proj.type == 900)
		{
			num136 = 54;
			num137 = -30;
		}
		if (proj.type == 334)
		{
			num137 = -18;
			num136 = 8;
		}
		if (proj.type == 816)
		{
			num137 = -19;
			num136 = 6;
		}
		if (proj.type == 821)
		{
			num137 = -10;
			num136 = 6;
		}
		if (proj.type == 825)
		{
			num137 = -19;
			num136 = 14;
		}
		if (proj.type == 854)
		{
			num137 = -14;
			num136 = 10;
		}
		if (proj.type == 858)
		{
			num137 = -8;
			num136 = 16;
		}
		if (proj.type == 859)
		{
			num137 = -8;
			num136 = 8;
		}
		if (proj.type == 860)
		{
			num137 = -8;
			num136 = 34;
		}
		if (proj.type == 958)
		{
			num137 = -20;
			num136 = 48;
		}
		if (proj.type == 960)
		{
			num137 = -14;
			num136 = 24;
		}
		if (proj.type == 956)
		{
			num137 = -12;
			num136 = 16;
		}
		if (proj.type == 959)
		{
			num137 = -14 + ((proj.spriteDirection == -1) ? (-8) : 0);
			num136 = 40;
		}
		if (proj.type == 994)
		{
			num137 = -10;
			num136 = 18;
		}
		if (proj.type == 998)
		{
			num137 = -10;
			num136 = 14;
		}
		if (proj.type == 1003)
		{
			num137 = -18 + ((proj.spriteDirection == 1) ? 8 : 0);
			num136 = 22;
		}
		if (proj.type == 1004)
		{
			num137 = -18 + ((proj.spriteDirection == 1) ? 6 : 0);
			num136 = 26;
		}
		if (proj.type == 200)
		{
			num136 = 12;
			num137 = -12;
		}
		if (proj.type == 211)
		{
			num136 = 14;
			num137 = 0;
		}
		if (proj.type == 236)
		{
			num136 = 30;
			num137 = -14;
		}
		if (proj.type >= 191 && proj.type <= 194)
		{
			num136 = 26;
			num137 = ((proj.direction != 1) ? (-22) : (-10));
		}
		if (proj.type >= 390 && proj.type <= 392)
		{
			num137 = 4 * proj.direction;
		}
		if (proj.type == 112)
		{
			num136 = 14;
			num137 = -8 + 4 * proj.spriteDirection;
		}
		_ = proj.type;
		if (proj.type == 517 || proj.type == 681)
		{
			num136 = 6;
		}
		if (proj.type == 516)
		{
			num136 = 6;
		}
		if (proj.type == 127)
		{
			num136 = 8;
		}
		if (proj.type == 155)
		{
			num136 = 3;
			num137 = 3;
		}
		if (proj.type == 397)
		{
			num138 -= 1f;
			num136 = -2;
			num137 = -2;
		}
		if (proj.type == 398)
		{
			num136 = 8;
		}
		ProjectileLoader.DrawOffset(proj, ref num137, ref num136, ref num138);
		SpriteEffects dir = (SpriteEffects)0;
		if (proj.spriteDirection == -1)
		{
			dir = (SpriteEffects)1;
		}
		if (proj.type == 681 && proj.velocity.X > 0f)
		{
			dir = (SpriteEffects)(dir ^ 1);
		}
		if (proj.type == 221)
		{
			for (int num139 = 1; num139 < 10; num139++)
			{
				float num140 = proj.velocity.X * (float)num139 * 0.5f;
				float num141 = proj.velocity.Y * (float)num139 * 0.5f;
				Color alpha = proj.GetAlpha(projectileColor);
				float num142 = 0f;
				if (num139 == 1)
				{
					num142 = 0.9f;
				}
				if (num139 == 2)
				{
					num142 = 0.8f;
				}
				if (num139 == 3)
				{
					num142 = 0.7f;
				}
				if (num139 == 4)
				{
					num142 = 0.6f;
				}
				if (num139 == 5)
				{
					num142 = 0.5f;
				}
				if (num139 == 6)
				{
					num142 = 0.4f;
				}
				if (num139 == 7)
				{
					num142 = 0.3f;
				}
				if (num139 == 8)
				{
					num142 = 0.2f;
				}
				if (num139 == 9)
				{
					num142 = 0.1f;
				}
				((Color)(ref alpha)).R = (byte)((float)(int)((Color)(ref alpha)).R * num142);
				((Color)(ref alpha)).G = (byte)((float)(int)((Color)(ref alpha)).G * num142);
				((Color)(ref alpha)).B = (byte)((float)(int)((Color)(ref alpha)).B * num142);
				((Color)(ref alpha)).A = (byte)((float)(int)((Color)(ref alpha)).A * num142);
				int num143 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y11 = num143 * proj.frame;
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137 - num140, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num141), (Rectangle?)new Rectangle(0, y11, TextureAssets.Projectile[proj.type].Width(), num143), alpha, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
			}
		}
		Color val2 = default(Color);
		Vector2 val5 = default(Vector2);
		if (proj.type == 408 || proj.type == 435 || proj.type == 436 || proj.type == 438 || proj.type == 452 || proj.type == 454 || proj.type == 459 || proj.type == 462 || proj.type == 503 || proj.type == 532 || proj.type == 533 || proj.type == 573 || proj.type == 582 || proj.type == 585 || proj.type == 592 || proj.type == 601 || proj.type == 636 || proj.type == 638 || proj.type == 640 || proj.type == 639 || proj.type == 424 || proj.type == 425 || proj.type == 426 || proj.type == 660 || proj.type == 661 || proj.type == 671 || proj.type == 664 || proj.type == 666 || proj.type == 668 || proj.type == 675 || proj.type == 680 || proj.type == 682 || proj.type == 684 || proj.type == 686 || proj.type == 700 || proj.type == 706 || proj.type == 709 || proj.type == 710 || proj.type == 711 || proj.type == 261 || ProjectileID.Sets.IsAGolfBall[proj.type] || proj.type == 729 || proj.type == 732 || proj.type == 731 || proj.type == 755 || proj.type == 811 || proj.type == 814 || proj.type == 819 || proj.type == 864 || proj.type == 873 || proj.type == 872 || proj.type == 833 || proj.type == 834 || proj.type == 835 || proj.type == 818 || proj.type == 902 || proj.type == 894 || proj.type == 901 || proj.type == 909 || proj.type == 916 || proj.type == 931 || proj.type == 933 || proj.type == 964 || proj.type == 965 || proj.type == 977 || proj.type == 976 || proj.type == 1001)
		{
			Texture2D value109 = TextureAssets.Projectile[proj.type].Value;
			int num144 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
			int y12 = num144 * proj.frame;
			Rectangle rectangle23 = default(Rectangle);
			((Rectangle)(ref rectangle23))._002Ector(0, y12, value109.Width, num144);
			Vector2 origin30 = rectangle23.Size() / 2f;
			Vector2 zero = Vector2.Zero;
			float num145 = 0f;
			if (proj.type == 503)
			{
				origin30.Y = 70f;
			}
			if (proj.type == 686 || proj.type == 711)
			{
				origin30.Y = rectangle23.Height - 70;
			}
			if (proj.type == 438)
			{
				rectangle23.Y = 0;
			}
			if (proj.type == 452)
			{
				rectangle23.Y = 0;
			}
			if (proj.type == 408)
			{
				rectangle23.Y = num144;
			}
			if (proj.type == 636)
			{
				origin30.Y = 10f;
			}
			if (proj.type == 638)
			{
				origin30.Y = 2f;
			}
			if (proj.type == 640 || proj.type == 639 || proj.type == 710)
			{
				origin30.Y = 5f;
			}
			if (proj.type == 700)
			{
				origin30.X = ((proj.spriteDirection == 1) ? (rectangle23.Width - 20) : 20);
			}
			if (proj.type == 965 || proj.type == 964)
			{
				origin30.X = ((proj.spriteDirection == 1) ? (rectangle23.Width - 20) : 20);
			}
			if (proj.type == 872)
			{
				rectangle23.Width /= 2;
				origin30.X /= 2f;
			}
			if (proj.type == 933)
			{
				int num146 = (int)proj.ai[1];
				if (TextureAssets.Item.IndexInRange(num146))
				{
					instance.LoadItem(num146);
					value109 = TextureAssets.Item[num146].Value;
					rectangle23 = value109.Frame();
					origin30 = rectangle23.Size() / 2f;
					num145 = -(float)Math.PI / 4f * (float)proj.spriteDirection;
				}
			}
			if (proj.type == 833 && proj.frame != 8)
			{
				zero.Y += proj.height / 2;
				origin30 = rectangle23.Size() * new Vector2(0.5f, 1f);
				origin30.Y -= 4f;
				origin30.X -= 7 * ((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1).ToDirectionInt();
			}
			if ((proj.type == 834 || proj.type == 835) && proj.frame != 10)
			{
				zero.Y += proj.height / 2;
				origin30 = rectangle23.Size() * new Vector2(0.5f, 1f);
				origin30.Y -= 4f;
				origin30.X -= 2 * ((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1).ToDirectionInt();
			}
			int num147 = 8;
			int num148 = 2;
			int num149 = 1;
			float value115 = 1f;
			float num150 = 15f;
			float num151 = 0f;
			Rectangle value116 = rectangle23;
			UnifiedRandom unifiedRandom = null;
			if (proj.type == 909)
			{
				num149 = 5;
				num147 = 0;
				num148 = -1;
			}
			else if (proj.type == 503)
			{
				num147 = 9;
				num148 = 3;
				value115 = 0.5f;
			}
			else if (proj.type == 261)
			{
				num149 = 18;
				num147 = 0;
				num148 = -2;
				value115 = 1.3f;
			}
			else if (proj.type == 833 || proj.type == 834 || proj.type == 835)
			{
				num149 = 6;
				num147 = 0;
				num148 = -1;
				value115 = 1.5f;
			}
			else if (proj.type == 818)
			{
				num149 = 18;
				num147 = 0;
				num148 = -2;
				value115 = 1f;
			}
			else if (proj.type == 729)
			{
				num149 = 18;
				num147 = 0;
				num148 = -2;
				value115 = 1.3f;
			}
			else if (proj.type == 977)
			{
				num149 = 18;
				num147 = 0;
				num148 = -2;
				value115 = 1.3f;
			}
			else if (proj.type == 1001)
			{
				num149 = 10;
				num147 = 0;
				num148 = -2;
				value115 = 1.3f;
				dir = (SpriteEffects)((proj.spriteDirection != 1) ? 2 : 0);
			}
			else if (proj.type == 976)
			{
				num149 = 18;
				num147 = 0;
				num148 = -3;
				value115 = 1.3f;
				((Rectangle)(ref rectangle23))._002Ector(0, 20 * proj.frame, 32, 18);
				value116 = rectangle23;
				origin30 = rectangle23.Size() / 2f;
			}
			else if (proj.type == 686 || proj.type == 711)
			{
				num149 = 19;
				num147 = 0;
				num148 = -3;
				value115 = 0.5f;
			}
			else if (ProjectileID.Sets.IsAGolfBall[proj.type])
			{
				num149 = 0;
				num147 = 0;
				num148 = -1;
				value115 = 2f;
			}
			else if (proj.type == 671)
			{
				num149 = 5;
				num147 = 0;
				num148 = -1;
				value115 = 2.6f;
			}
			else if (proj.type == 811)
			{
				num149 = 5;
				num147 = 0;
				num148 = -1;
				value115 = 2.6f;
				projectileColor = Color.Lerp(projectileColor, Color.White, Utils.Remap(proj.ai[0], 0f, 15f, 1f, 0.3f));
			}
			else if (proj.type == 814)
			{
				num149 = 18;
				num147 = 0;
				num148 = -1;
				value115 = 1f;
				projectileColor = Color.Lerp(projectileColor, Color.White, 0.35f);
			}
			else if (proj.type == 755)
			{
				num149 = 5;
				num147 = 0;
				num148 = -1;
				value115 = 2.6f;
			}
			else if (proj.type == 700)
			{
				num147 = 5;
				num148 = 1;
				value115 = 2.6f;
			}
			else if (proj.type == 965 || proj.type == 964)
			{
				num147 = 5;
				num148 = 1;
				value115 = 2.6f;
			}
			else if (proj.type == 731)
			{
				num149 = 19;
				num147 = 0;
				num148 = -1;
				value115 = 0.5f;
			}
			else if (proj.type == 864)
			{
				num149 = 12;
				num147 = 0;
				num148 = -1;
				value115 = 1.4f;
				value116.Y += value116.Height;
			}
			else if (proj.type == 916)
			{
				num149 = 19;
				num147 = 0;
				num148 = -1;
				value115 = 1.4f;
				value116.Y += value116.Height;
				unifiedRandom = _tempSeededRandom;
				unifiedRandom.SetSeed(proj.timeLeft);
			}
			else if (proj.type == 873)
			{
				num149 = 39;
				num150 = 40f;
				num147 = 0;
				num148 = -1;
				value115 = 1.4f;
			}
			else if (proj.type == 931)
			{
				num149 = 19;
				num150 = 20f;
				num147 = 0;
				num148 = -1;
				value115 = 0.7f;
			}
			else if (proj.type == 933)
			{
				num149 = 60;
				num150 = 60f;
				num147 = 0;
				num148 = -15;
				value115 = 1f;
			}
			else if (proj.type == 872)
			{
				num149 = 79;
				num150 = 10f;
				num147 = 0;
				num148 = -1;
				value115 = 1f;
				value116.X += value116.Width;
			}
			else if (proj.type == 664 || proj.type == 666 || proj.type == 668)
			{
				num147 = 8;
				num148 = 2;
				value115 = 0.4f;
			}
			else if (proj.type == 582 || proj.type == 902)
			{
				if (proj.ai[2] == 1f)
				{
					value109 = TextureAssets.Extra[263].Value;
				}
				num147 = 10;
				num148 = 2;
				value115 = 0.7f;
				num151 = 0.2f;
			}
			else if (proj.type == 675)
			{
				num147 = 5;
				num148 = 1;
				value115 = 0.4f;
			}
			else if (proj.type == 638)
			{
				num147 = 5;
				num148 = 1;
				value115 = 1f;
			}
			else if (proj.type == 660)
			{
				num147 = 3;
				num148 = 1;
				value115 = 8f;
				((Rectangle)(ref rectangle23))._002Ector(38 * proj.frame, 0, 38, 38);
				value116 = rectangle23;
				origin30 = rectangle23.Size() / 2f;
			}
			else if (proj.type == 684)
			{
				num147 = 8;
				num148 = 1;
				value115 = 0.75f;
			}
			else if (proj.type == 639)
			{
				num147 = 10;
				num148 = 1;
				value115 = 1f;
			}
			else if (proj.type == 710)
			{
				num149 = 9;
				num147 = 0;
				num148 = -2;
				value115 = 0.5f;
			}
			else if (proj.type == 640)
			{
				num147 = 20;
				num148 = 1;
				value115 = 1f;
			}
			else if (proj.type == 436)
			{
				num148 = 2;
				value115 = 0.5f;
			}
			else if (proj.type == 424 || proj.type == 425 || proj.type == 426)
			{
				num147 = 10;
				num148 = 2;
				value115 = 0.6f;
			}
			else if (proj.type == 438)
			{
				num147 = 10;
				num148 = 2;
				value115 = 1f;
			}
			else if (proj.type == 452)
			{
				num147 = 10;
				num148 = 3;
				value115 = 0.5f;
			}
			else if (proj.type == 454)
			{
				num147 = 5;
				num148 = 1;
				value115 = 0.2f;
			}
			else if (proj.type == 462)
			{
				num147 = 7;
				num148 = 1;
				value115 = 0.2f;
			}
			else if (proj.type == 661)
			{
				num147 = 0;
				num148 = 1;
				value115 = 0.5f;
			}
			else if (proj.type == 706)
			{
				num149 = 9;
				num147 = 0;
				num148 = -2;
				value115 = 0.5f;
			}
			else if (proj.type == 585)
			{
				num147 = 7;
				num148 = 1;
				value115 = 0.2f;
			}
			else if (proj.type == 459)
			{
				num147 = (int)(proj.scale * 8f);
				num148 = num147 / 4;
				if (num148 < 1)
				{
					num148 = 1;
				}
				value115 = 0.3f;
			}
			else if (proj.type == 709)
			{
				num147 = 8;
				num148 = num147 / 4;
				if (num148 < 1)
				{
					num148 = 1;
				}
				value115 = 0.5f;
			}
			else if (proj.type == 532)
			{
				num147 = 10;
				num148 = 1;
				value115 = 0.7f;
				num151 = 0.2f;
			}
			else if (proj.type == 592)
			{
				num147 = 10;
				num148 = 2;
				value115 = 1f;
			}
			else if (proj.type == 601)
			{
				num147 = 8;
				num148 = 1;
				value115 = 0.3f;
			}
			else if (proj.type == 636)
			{
				num147 = 20;
				num148 = 3;
				value115 = 0.5f;
			}
			else if (proj.type == 680)
			{
				num147 = 9;
				num148 = 3;
				value115 = 0.5f;
			}
			else if (proj.type == 533)
			{
				if (proj.ai[0] >= 6f && proj.ai[0] <= 8f)
				{
					num147 = ((proj.ai[0] == 6f) ? 8 : 4);
					num148 = 1;
					if (proj.ai[0] != 7f)
					{
						num151 = 0.2f;
					}
				}
				else
				{
					num147 = (num148 = 0);
				}
			}
			Color value117 = default(Color);
			Color color109 = default(Color);
			for (int num152 = num149; (num148 > 0 && num152 < num147) || (num148 < 0 && num152 > num147); num152 += num148)
			{
				if (num152 >= proj.oldPos.Length)
				{
					continue;
				}
				Color color108 = projectileColor;
				if (proj.type == 408 || proj.type == 435 || proj.type == 682 || proj.type == 732 || proj.type == 731)
				{
					color108 = Color.Lerp(color108, Color.Blue, 0.5f);
				}
				else if (proj.type == 436)
				{
					color108 = Color.Lerp(color108, Color.LimeGreen, 0.5f);
				}
				else if (proj.type >= 424 && proj.type <= 426)
				{
					color108 = Color.Lerp(color108, Color.Red, 0.5f);
				}
				else if (proj.type == 640 || proj.type == 639)
				{
					((Color)(ref color108)).A = 127;
				}
				else if (proj.type == 671)
				{
					color108 = Color.Lerp(color108, Color.Purple, (float)num152 / (float)num147);
				}
				else if (proj.type == 811)
				{
					color108 = Color.Lerp(color108, Color.Crimson * 0.5f, (float)num152 / (float)num147);
				}
				else if (proj.type == 814)
				{
					color108 = Color.Lerp(color108, color108 * 0.5f, (float)num152 / (float)num147);
				}
				else if (proj.type == 261)
				{
					color108 = Color.Lerp(color108, new Color(60, 60, 60, 60), (float)num152 / (float)num147);
				}
				else if (ProjectileID.Sets.IsAGolfBall[proj.type])
				{
					color108 = Color.Lerp(color108, new Color(255, 230, 40, 20), (float)num152 / (float)num147);
				}
				color108 = proj.GetAlpha(color108);
				if (proj.type == 438)
				{
					((Color)(ref color108)).G = (byte)(((Color)(ref color108)).G / (byte)num152);
					((Color)(ref color108)).B = (byte)(((Color)(ref color108)).B / (byte)num152);
				}
				else if (proj.type == 755)
				{
					color108 = proj.AI_156_GetColor();
				}
				else if (proj.type == 873)
				{
					color108 = proj.AI_171_GetColor();
					((Color)(ref color108)).A = (byte)(((Color)(ref color108)).A / 2);
					color108 *= Utils.GetLerpValue(0f, 20f, proj.timeLeft, clamped: true);
				}
				else if (proj.type == 931)
				{
					color108 = proj.GetFairyQueenWeaponsColor(0.5f);
					color108 *= Utils.GetLerpValue(0f, 20f, proj.timeLeft, clamped: true);
				}
				else if (proj.type == 872)
				{
					color108 = proj.AI_173_GetColor();
					color108 *= 0.4f;
					((Color)(ref color108)).A = (byte)((float)(int)((Color)(ref color108)).A * 0.6f);
					if (num152 > 80)
					{
						color108 *= 0.15f * Utils.GetLerpValue(120f, 80f, num152, clamped: true);
					}
				}
				else if (proj.type == 864)
				{
					color108 = proj.GetFloatingDaggerMinionGlowColor();
					((Color)(ref color108)).A = (byte)(((Color)(ref color108)).A / 4);
				}
				else if (proj.type == 682)
				{
					((Color)(ref color108)).G = (byte)(((Color)(ref color108)).G / (byte)num152);
				}
				else if (proj.type == 686)
				{
					if (proj.oldPos[num152] == Vector2.Zero)
					{
						continue;
					}
					float num153 = (float)num152 / (float)num149;
					color108 = ((!(num153 < 0.5f)) ? Color.Lerp(Color.Purple, Color.Black, Utils.GetLerpValue(0.5f, 1f, num153)) : Color.Lerp(color108, Color.Purple, Utils.GetLerpValue(0f, 0.5f, num153)));
				}
				else if (proj.type == 711)
				{
					if (proj.oldPos[num152] == Vector2.Zero)
					{
						continue;
					}
					float num154 = (float)num152 / (float)num149;
					color108 = ((!(num154 < 0.5f)) ? Color.Lerp(new Color(128, 0, 255, 180), Color.Black, Utils.GetLerpValue(0.5f, 1f, num154)) : Color.Lerp(color108, new Color(128, 0, 255, 180), Utils.GetLerpValue(0f, 0.5f, num154)));
				}
				else if (proj.type == 684)
				{
					if (num152 == 1)
					{
						((Color)(ref color108)).B = (byte)(((Color)(ref color108)).B / 2);
						((Color)(ref color108)).G = (byte)(((Color)(ref color108)).G / 2);
						((Color)(ref color108)).A = (byte)(((Color)(ref color108)).A / 2);
					}
					((Color)(ref color108)).B = (byte)(((Color)(ref color108)).B / (byte)num152);
					((Color)(ref color108)).G = (byte)(((Color)(ref color108)).G / (byte)num152);
					((Color)(ref color108)).A = (byte)(((Color)(ref color108)).A / (byte)num152);
				}
				else if (proj.type == 706 || proj.type == 710)
				{
					((Color)(ref color108)).B = (byte)(((Color)(ref color108)).B / (byte)num152);
					((Color)(ref color108)).G = (byte)(((Color)(ref color108)).G / (byte)num152);
					((Color)(ref color108)).A = (byte)(((Color)(ref color108)).A / (byte)num152);
				}
				else if (proj.type == 818)
				{
					float num155 = 0.3f;
					float num156 = Utils.GetLerpValue(0f, num155, proj.ai[0], clamped: true) * Utils.GetLerpValue(1f, 1f - num155, proj.ai[0], clamped: true);
					Utils.GetLerpValue(0f, num148 * -3, num152, clamped: true);
					Utils.GetLerpValue(num149, num149 + num148 * 3, num152, clamped: true);
					((Color)(ref value117))._002Ector(255, 255, 255, 0);
					Color ourFavoriteColor = OurFavoriteColor;
					((Color)(ref ourFavoriteColor)).A = 0;
					ourFavoriteColor *= num156;
					color108 = Color.Lerp(ourFavoriteColor, value117, num156);
				}
				else if (proj.type == 833 || proj.type == 834 || proj.type == 835)
				{
					float lerpValue2 = Utils.GetLerpValue(0f, 6f, ((Vector2)(ref proj.velocity)).Length(), clamped: true);
					color108 = Color.Lerp(color108, Color.White, lerpValue2 * 0.5f);
					((Color)(ref color108)).A = 0;
					color108 *= lerpValue2;
				}
				else if (proj.type == 592)
				{
					((Color)(ref color108)).R = (byte)(((Color)(ref color108)).R / (byte)num152);
					((Color)(ref color108)).G = (byte)(((Color)(ref color108)).G / (byte)num152);
				}
				else if (proj.type == 640)
				{
					((Color)(ref color108)).R = (byte)(((Color)(ref color108)).R / (byte)num152);
					((Color)(ref color108)).A = (byte)(((Color)(ref color108)).A / (byte)num152);
				}
				else if (proj.type >= 424 && proj.type <= 426)
				{
					((Color)(ref color108)).B = (byte)(((Color)(ref color108)).B / (byte)num152);
					((Color)(ref color108)).G = (byte)(((Color)(ref color108)).G / (byte)num152);
					((Color)(ref color108)).A = (byte)(((Color)(ref color108)).A / (byte)num152);
				}
				else if (proj.type == 964 || proj.type == 965)
				{
					color108 = Color.Black * proj.Opacity;
				}
				float num157 = num147 - num152;
				if (num148 < 0)
				{
					num157 = num149 - num152;
				}
				color108 *= num157 / ((float)ProjectileID.Sets.TrailCacheLength[proj.type] * 1.5f);
				Vector2 vector117 = proj.oldPos[num152];
				float num158 = proj.rotation;
				SpriteEffects effects2 = dir;
				if (ProjectileID.Sets.TrailingMode[proj.type] == 2 || ProjectileID.Sets.TrailingMode[proj.type] == 3 || ProjectileID.Sets.TrailingMode[proj.type] == 4)
				{
					num158 = proj.oldRot[num152];
					effects2 = (SpriteEffects)(proj.oldSpriteDirection[num152] == -1);
				}
				if (vector117 == Vector2.Zero)
				{
					continue;
				}
				if (proj.type == 916)
				{
					value116.Y += value116.Height;
					value116.Y %= value116.Height * projFrames[proj.type];
					_ = num157 / ((float)ProjectileID.Sets.TrailCacheLength[proj.type] * 1.5f);
					((Color)(ref color109))._002Ector(0, 0, 0, 255);
					int num159 = unifiedRandom.Next(3);
					if (num159 == 2 || num159 == 1)
					{
						color109 = Color.Lerp(new Color(106, 90, 205, 127), Color.Black, 0.2f + 0.8f * unifiedRandom.NextFloat());
					}
					color108 = color109;
					float num160 = num157 / (float)ProjectileID.Sets.TrailCacheLength[proj.type];
					num160 = Utils.GetLerpValue(0f, (float)ProjectileID.Sets.TrailCacheLength[proj.type] * 0.75f, num157, clamped: true);
					color108 *= num160;
					vector117 += unifiedRandom.NextVector2Circular(8f, 8f);
				}
				if (proj.type == 976)
				{
					int num161 = value116.Height + 2;
					value116.Y += num161;
					value116.Y %= num161 * 7;
					Color val = color108;
					val2 = Lighting.GetColor((vector117 + zero + proj.Size / 2f).ToTileCoordinates());
					Vector3 val3 = ((Color)(ref val2)).ToVector3();
					color108 = val * (((Vector3)(ref val3)).Length() / 1.74f);
				}
				if (proj.type == 933)
				{
					float t = proj.localAI[0] - (float)num152;
					float num162 = Utils.GetLerpValue(0f, 20f, t, clamped: true) * Utils.GetLerpValue(68f, 60f, t, clamped: true);
					float lerpValue3 = Utils.GetLerpValue(0f, ProjectileID.Sets.TrailCacheLength[proj.type], num157, clamped: true);
					color108 = Color.White * lerpValue3 * proj.Opacity * num162;
				}
				Vector2 position27 = vector117 + zero + proj.Size / 2f - screenPosition + new Vector2(0f, proj.gfxOffY);
				EntitySpriteDraw(value109, position27, value116, color108, num158 + num145 + proj.rotation * num151 * (float)(num152 - 1) * (float)(-((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1).ToDirectionInt()), origin30, MathHelper.Lerp(proj.scale, value115, (float)num152 / num150), effects2);
			}
			if (proj.type == 661)
			{
				Color color110 = default(Color);
				((Color)(ref color110))._002Ector(120, 40, 222, 120);
				for (int num163 = 0; num163 < 4; num163++)
				{
					Texture2D value196 = TextureAssets.Extra[75].Value;
					Vector2 val4 = proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY);
					Vector2 spinningpoint12 = proj.rotation.ToRotationVector2();
					double radians = (float)Math.PI / 2f * (float)num163;
					val5 = default(Vector2);
					EntitySpriteDraw(value196, val4 + spinningpoint12.RotatedBy(radians, val5) * 4f, rectangle23, color110, proj.rotation, origin30, proj.scale, dir);
				}
			}
			if (proj.type == 864)
			{
				Color floatingDaggerMinionGlowColor = proj.GetFloatingDaggerMinionGlowColor();
				((Color)(ref floatingDaggerMinionGlowColor)).A = (byte)(((Color)(ref floatingDaggerMinionGlowColor)).A / 4);
				Rectangle value118 = rectangle23;
				value118.Y += value118.Height;
				for (int num164 = 0; num164 < 4; num164++)
				{
					Texture2D texture = value109;
					Vector2 val6 = proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY);
					Vector2 spinningpoint13 = proj.rotation.ToRotationVector2();
					double radians2 = (float)Math.PI / 2f * (float)num164;
					val5 = default(Vector2);
					EntitySpriteDraw(texture, val6 + spinningpoint13.RotatedBy(radians2, val5) * 2f, value118, floatingDaggerMinionGlowColor, proj.rotation, origin30, proj.scale, dir);
				}
			}
			if (proj.type == 873 || proj.type == 931)
			{
				Color color111 = proj.AI_171_GetColor() * 0.5f;
				((Color)(ref color111)).A = 0;
				if (proj.type == 931)
				{
					color111 = proj.GetFairyQueenWeaponsColor(0f);
				}
				Vector2 vector118 = proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY);
				EntitySpriteDraw(value109, vector118, rectangle23, color111, proj.rotation, origin30, proj.scale * 0.9f, dir);
				Texture2D value197 = TextureAssets.Extra[98].Value;
				Color color112 = color111;
				Vector2 origin31 = value197.Size() / 2f;
				Color color113 = color111 * 0.5f;
				float num165 = Utils.GetLerpValue(15f, 30f, proj.timeLeft, clamped: true) * Utils.GetLerpValue(240f, 200f, proj.timeLeft, clamped: true) * (1f + 0.2f * (float)Math.Cos(GlobalTimeWrappedHourly % 30f / 0.5f * ((float)Math.PI * 2f) * 3f)) * 0.8f;
				Vector2 vector119 = new Vector2(0.5f, 5f) * num165;
				Vector2 vector120 = new Vector2(0.5f, 2f) * num165;
				color112 *= num165;
				color113 *= num165;
				int num166 = 0;
				Vector2 position28 = vector118 + proj.velocity.SafeNormalize(Vector2.Zero) * MathHelper.Lerp(0.5f, 1f, proj.localAI[0] / 60f) * (float)num166;
				if (proj.type == 931)
				{
					vector119 *= 0.4f;
					vector120 *= 0.4f;
				}
				EntitySpriteDraw(value197, position28, null, color112, (float)Math.PI / 2f, origin31, vector119, dir);
				EntitySpriteDraw(value197, position28, null, color112, 0f, origin31, vector120, dir);
				EntitySpriteDraw(value197, position28, null, color113, (float)Math.PI / 2f, origin31, vector119 * 0.6f, dir);
				EntitySpriteDraw(value197, position28, null, color113, 0f, origin31, vector120 * 0.6f, dir);
			}
			if (proj.type == 755)
			{
				Color color114 = proj.AI_156_GetColor();
				((Color)(ref color114)).A = 120;
				for (int num167 = 0; num167 < 4; num167++)
				{
					Texture2D texture2 = value109;
					Vector2 val7 = proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY);
					Vector2 spinningpoint14 = proj.rotation.ToRotationVector2();
					double radians3 = (float)Math.PI / 2f * (float)num167;
					val5 = default(Vector2);
					EntitySpriteDraw(texture2, val7 + spinningpoint14.RotatedBy(radians3, val5) * 2f, rectangle23, color114, proj.rotation, origin30, proj.scale, dir);
				}
			}
			else if (proj.type == 684)
			{
				float x12 = (proj.localAI[0] * ((float)Math.PI * 2f) / 30f).ToRotationVector2().X;
				Color color115 = default(Color);
				((Color)(ref color115))._002Ector(220, 40, 30, 40);
				color115 *= 0.75f + 0.25f * x12;
				for (int num168 = 0; num168 < 8; num168++)
				{
					Texture2D texture3 = value109;
					Vector2 val8 = proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY);
					Vector2 spinningpoint15 = proj.rotation.ToRotationVector2();
					double radians4 = (float)Math.PI / 4f * (float)num168;
					val5 = default(Vector2);
					EntitySpriteDraw(texture3, val8 + spinningpoint15.RotatedBy(radians4, val5) * (4f + 1f * x12), rectangle23, color115, proj.rotation, origin30, proj.scale, dir);
				}
			}
			else if (ProjectileID.Sets.IsAGolfBall[proj.type])
			{
				Player player2 = player[proj.owner];
				bool flag27 = GolfHelper.IsPlayerHoldingClub(player2);
				bool flag28 = false;
				if (flag27)
				{
					flag28 |= player2.ownedProjectileCounts[722] > 0 && player2.itemAnimation >= player2.itemAnimationMax;
					flag28 |= player2.itemAnimation == 0;
					flag28 &= player2.velocity.Y == 0f;
				}
				Vector2 shotVector = MouseWorld - proj.Center;
				if (proj.owner == myPlayer && flag27 && flag28 && GolfHelper.IsGolfBallResting(proj) && GolfHelper.ValidateShot(proj, player2, ref shotVector))
				{
					projectileColor = Color.White;
					Projectile projectile = null;
					for (int num169 = 0; num169 < 1000; num169++)
					{
						Projectile projectile2 = Main.projectile[num169];
						if (projectile2.active && projectile2.owner == player2.whoAmI && projectile2.type == 722)
						{
							projectile = projectile2;
							break;
						}
					}
					if (projectile != null)
					{
						GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(projectile, proj);
						Vector2 impactVelocity = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
						if (((Vector2)(ref impactVelocity)).Length() > 0.05f)
						{
							GolfHelper.DrawPredictionLine(proj, impactVelocity, shotStrength.RelativeStrength, shotStrength.RoughLandResistance);
						}
					}
				}
				if (!GolfHelper.IsGolfBallResting(proj))
				{
					Color golfTrailColor = Projectile.GetGolfTrailColor(proj);
					float num170 = ((Vector2)(ref proj.velocity)).Length() / 16f;
					if (num170 > 1f)
					{
						num170 = 1f;
					}
					golfTrailColor *= num170;
					if (proj.oldPos[4] != Vector2.Zero)
					{
						projectileColor = Color.White;
						for (float num171 = 0f; num171 <= 1f; num171 += 0.04f)
						{
							EntitySpriteDraw(value109, Vector2.Lerp(proj.oldPos[4], proj.position, num171) + proj.Size / 2f - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, golfTrailColor * num171, proj.rotation, origin30, proj.scale * MathHelper.Lerp(0.7f, 1.5f, num171), dir);
						}
					}
					EntitySpriteDraw(value109, proj.position + proj.Size / 2f - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, golfTrailColor, proj.rotation, origin30, proj.scale * 1.5f, dir);
				}
			}
			if (proj.type == 964 || proj.type == 965)
			{
				Color color116 = Color.Violet;
				if (proj.type == 965)
				{
					color116 = Color.Lerp(Color.Red, Color.White, 0.5f);
				}
				Color color117 = color116 * 0.5f * proj.Opacity;
				float num172 = ((proj.type == 964) ? 60 : 30);
				for (int num173 = 0; num173 < 4; num173++)
				{
					Texture2D texture4 = value109;
					Vector2 val9 = proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY);
					Vector2 spinningpoint16 = proj.rotation.ToRotationVector2();
					double radians5 = proj.ai[0] / num172 * ((float)Math.PI * 2f) + (float)Math.PI / 2f * (float)num173;
					val5 = default(Vector2);
					EntitySpriteDraw(texture4, val9 + spinningpoint16.RotatedBy(radians5, val5) * 6f, rectangle23, color117, proj.rotation, origin30, proj.scale, dir);
				}
			}
			Color color118 = proj.GetAlpha(projectileColor);
			float num174 = proj.scale;
			float rotation23 = proj.rotation + num145;
			if (proj.type == 640)
			{
				color118 = Color.Transparent;
			}
			if (proj.type == 684)
			{
				((Color)(ref color118)).A = 127;
			}
			if (proj.type == 873)
			{
				((Color)(ref color118)).A = (byte)(((Color)(ref color118)).A / 2);
			}
			if (proj.type == 931)
			{
				((Color)(ref color118)).A = (byte)(((Color)(ref color118)).A / 2);
			}
			if (proj.type == 872)
			{
				color118 = new Color(255, 255, 255, 0) * proj.Opacity;
				num174 *= 0.9f;
			}
			if (proj.type == 818)
			{
				color118 = Color.Transparent;
			}
			if (proj.type == 916)
			{
				color118 = Color.Black;
			}
			if (proj.type == 964 || proj.type == 965)
			{
				color118 = Color.Black * proj.Opacity;
			}
			if (proj.type == 933)
			{
				float t2 = proj.localAI[0];
				float num175 = Utils.GetLerpValue(0f, 20f, t2, clamped: true) * Utils.GetLerpValue(68f, 60f, t2, clamped: true);
				color118 *= num175;
			}
			EntitySpriteDraw(value109, proj.Center + zero - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, color118, rotation23, origin30, num174, dir);
			if (proj.type == 894)
			{
				float num176 = Utils.WrappedLerp(0.6f, 1f, (float)((int)timeForVisualEffects % 70) / 70f);
				((Color)(ref val2))._002Ector(num176, num176, num176, 150f);
				EntitySpriteDraw(TextureAssets.GlowMask[282].Value, proj.Center + zero - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, val2, proj.rotation, origin30, proj.scale, dir);
			}
			if (proj.type == 503)
			{
				EntitySpriteDraw(TextureAssets.Extra[36].Value, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, Color.White, proj.localAI[0], origin30, proj.scale, dir);
			}
			else if (proj.type == 533)
			{
				EntitySpriteDraw(TextureAssets.GlowMask[128].Value, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, Color.White * 0.3f, proj.rotation, origin30, proj.scale, dir);
			}
			else if (proj.type == 261)
			{
				float num177 = 0.7f;
				float num178 = ((Vector2)(ref proj.velocity)).Length();
				if (num178 < 0.3f && proj.velocity.Y == 0f)
				{
					num177 = Utils.GetLerpValue(0.02f, 0.3f, num178, clamped: true) * 0.7f;
				}
				EntitySpriteDraw(TextureAssets.GlowMask[252].Value, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, Color.White * num177, proj.rotation, origin30, proj.scale, dir);
			}
			else if (proj.type == 601)
			{
				Color white2 = Color.White;
				((Color)(ref white2)).A = 0;
				EntitySpriteDraw(value109, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, white2, proj.rotation, origin30, proj.scale * 0.7f, dir);
			}
			else if (ProjectileID.Sets.IsAGolfBall[proj.type] && GolfHelper.IsGolfBallResting(proj) && GolfHelper.IsPlayerHoldingClub(LocalPlayer) && GolfHelper.IsGolfShotValid(proj, LocalPlayer) && proj.owner == myPlayer)
			{
				EntitySpriteDraw(TextureAssets.GolfBallOutline.Value, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, Color.White, proj.rotation, origin30, proj.scale, dir);
			}
			if (proj.type == 933)
			{
				float t3 = proj.localAI[0];
				float num179 = Utils.GetLerpValue(0f, 20f, t3, clamped: true) * Utils.GetLerpValue(68f, 60f, t3, clamped: true);
				EntitySpriteDraw(value109, proj.Center + zero - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle23, new Color(255, 255, 255, 127) * proj.Opacity * num179, rotation23, origin30, num174 * 1.25f, dir);
				FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)proj.ai[1]);
				Color trailColor = finalFractalProfile.trailColor;
				((Color)(ref trailColor)).A = (byte)(((Color)(ref trailColor)).A / 2);
				DrawPrettyStarSparkle(proj.Opacity, dir, proj.Center + zero - screenPosition + new Vector2(0f, proj.gfxOffY) + (proj.rotation - (float)Math.PI / 2f).ToRotationVector2() * finalFractalProfile.trailWidth, Color.White * num179, trailColor * num179, proj.localAI[0], 15f, 30f, 30f, 45f, 0f, new Vector2(5f, 2f), Vector2.One);
			}
		}
		else if (proj.type == 672)
		{
			Vector2 position29 = proj.Center - screenPosition;
			if (proj.localAI[1] == 0f)
			{
				position29.Y += 60f;
				float num180 = proj.localAI[0] / 120f;
				for (int num181 = 0; num181 < 4; num181++)
				{
					float value119 = num180 * 2f - (float)num181 / 3f;
					value119 = MathHelper.Clamp(value119, 0f, 1f);
					float num182 = 1f - MathHelper.Clamp((num180 - 0.8f) / 0.2f, 0f, 1f);
					EntitySpriteDraw(TextureAssets.MagicPixel.Value, position29, null, new Color(0.4f, 0.17f, 0.4f, 0f) * (value119 * num182) * 1.3f, 0f, new Vector2((float)TextureAssets.MagicPixel.Width() / 2f, (float)TextureAssets.MagicPixel.Height()), new Vector2((float)Math.Sqrt(value119) * 100f, value119 * 2f), (SpriteEffects)0);
				}
			}
			else if (proj.localAI[1] == 1f)
			{
				_ = proj.localAI[0] / 300f;
				float num183 = Math.Min(1f, proj.localAI[0] / 30f);
				int num184 = (int)(GlobalTimeWrappedHourly * 10f) % 8;
				DrawElderEye(spriteBatch, proj.Center, 1f, 1f, num184, Color.White * num183);
				DrawElderEye(spriteBatch, proj.Center, 1f, 1f, (num184 + 1) % 8, new Color(0.2f, 0.2f, 0.2f, 0f) * num183);
			}
			else if (proj.localAI[1] == 2f)
			{
				int num185 = (int)(GlobalTimeWrappedHourly * 10f) % 8;
				DrawElderEye(spriteBatch, proj.Center, 1f, 1f, num185, Color.White);
				DrawElderEye(spriteBatch, proj.Center, 1f, 1f, (num185 + 1) % 8, new Color(0.2f, 0.2f, 0.2f, 0f));
			}
		}
		else
		{
			if (proj.type == 713)
			{
				return;
			}
			if (proj.type == 754)
			{
				Texture2D value120 = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle24 = value120.Frame(5, 2, proj.frame);
				rectangle24.Width -= 2;
				rectangle24.Height -= 2;
				Vector2 origin32 = default(Vector2);
				((Vector2)(ref origin32))._002Ector((float)(rectangle24.Width / 2), 0f);
				float y13 = proj.position.Y;
				float num186 = proj.ai[0] + 8f + 2f - (float)rectangle24.Height + 2f;
				Color alpha12 = proj.GetAlpha(projectileColor);
				Vector2 top = proj.Top;
				if (proj.ai[1] == 2f)
				{
					rectangle24 = value120.Frame(5, 2, 4);
					rectangle24.Width -= 2;
					rectangle24.Height -= 2;
					((Vector2)(ref origin32))._002Ector((float)(rectangle24.Width / 2), 0f);
					alpha12 = proj.GetAlpha(Lighting.GetColor((int)(top.X + (float)(rectangle24.Width / 2)) / 16, (int)((num186 - 2f + (float)(rectangle24.Height / 2)) / 16f)));
					EntitySpriteDraw(value120, new Vector2(top.X, num186 - 2f) - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle24, alpha12, proj.rotation, origin32, proj.scale, dir);
					return;
				}
				for (float num187 = y13; num187 < num186; num187 += (float)rectangle24.Height)
				{
					Vector2 vector121 = top;
					vector121.Y = num187;
					Rectangle value121 = rectangle24;
					float num188 = num186 - num187;
					if (num188 < (float)value121.Height)
					{
						value121.Height = (int)num188;
					}
					alpha12 = proj.GetAlpha(Lighting.GetColor((int)(vector121.X + (float)(value121.Width / 2)) / 16, (int)((vector121.Y + (float)(value121.Height / 2)) / 16f)));
					EntitySpriteDraw(value120, vector121 - screenPosition + new Vector2(0f, proj.gfxOffY), value121, alpha12, proj.rotation, origin32, proj.scale, dir);
					if (rectangle24.Y == 0)
					{
						rectangle24.Y += rectangle24.Height + 2;
					}
				}
				rectangle24 = value120.Frame(5, 2, 4);
				rectangle24.Width -= 2;
				rectangle24.Height -= 2;
				((Vector2)(ref origin32))._002Ector((float)(rectangle24.Width / 2), 0f);
				alpha12 = proj.GetAlpha(Lighting.GetColor((int)(top.X + (float)(rectangle24.Width / 2)) / 16, (int)((num186 - 2f + (float)(rectangle24.Height / 2)) / 16f)));
				EntitySpriteDraw(value120, new Vector2(top.X, num186 - 2f) - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle24, alpha12, proj.rotation, origin32, proj.scale, dir);
				return;
			}
			if (proj.type == 12 || proj.type == 728 || proj.type == 955)
			{
				Texture2D value122 = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle25 = default(Rectangle);
				((Rectangle)(ref rectangle25))._002Ector(0, 0, value122.Width, value122.Height);
				Vector2 origin33 = rectangle25.Size() / 2f;
				Color alpha13 = proj.GetAlpha(projectileColor);
				Texture2D value123 = TextureAssets.Extra[91].Value;
				Rectangle value124 = value123.Frame();
				Vector2 origin10 = default(Vector2);
				((Vector2)(ref origin10))._002Ector((float)value124.Width / 2f, 10f);
				Vector2 vector122 = default(Vector2);
				((Vector2)(ref vector122))._002Ector(0f, proj.gfxOffY);
				Vector2 spinningpoint = default(Vector2);
				((Vector2)(ref spinningpoint))._002Ector(0f, -10f);
				float num189 = (float)timeForVisualEffects / 60f;
				Vector2 vector123 = proj.Center + proj.velocity;
				Color color119 = Color.Blue * 0.2f;
				Color color120 = Color.White * 0.5f;
				((Color)(ref color120)).A = 0;
				float num190 = 0f;
				if (tenthAnniversaryWorld)
				{
					color119 = Color.HotPink * 0.3f;
					color120 = Color.White * 0.75f;
					((Color)(ref color120)).A = 0;
					num190 = -0.1f;
				}
				if (proj.type == 728)
				{
					color119 = Color.Orange * 0.2f;
					color120 = Color.Gold * 0.5f;
					((Color)(ref color120)).A = 50;
					num190 = -0.2f;
				}
				Color color121 = color119;
				((Color)(ref color121)).A = 0;
				Color color122 = color119;
				((Color)(ref color122)).A = 0;
				Color color123 = color119;
				((Color)(ref color123)).A = 0;
				Vector2 val10 = vector123 - screenPosition + vector122;
				Vector2 spinningpoint17 = spinningpoint;
				double radians6 = (float)Math.PI * 2f * num189;
				val5 = default(Vector2);
				EntitySpriteDraw(value123, val10 + spinningpoint17.RotatedBy(radians6, val5), value124, color121, proj.velocity.ToRotation() + (float)Math.PI / 2f, origin10, 1.5f + num190, (SpriteEffects)0);
				Vector2 val11 = vector123 - screenPosition + vector122;
				Vector2 spinningpoint18 = spinningpoint;
				double radians7 = (float)Math.PI * 2f * num189 + (float)Math.PI * 2f / 3f;
				val5 = default(Vector2);
				EntitySpriteDraw(value123, val11 + spinningpoint18.RotatedBy(radians7, val5), value124, color122, proj.velocity.ToRotation() + (float)Math.PI / 2f, origin10, 1.1f + num190, (SpriteEffects)0);
				Vector2 val12 = vector123 - screenPosition + vector122;
				Vector2 spinningpoint19 = spinningpoint;
				double radians8 = (float)Math.PI * 2f * num189 + 4.1887903f;
				val5 = default(Vector2);
				EntitySpriteDraw(value123, val12 + spinningpoint19.RotatedBy(radians8, val5), value124, color123, proj.velocity.ToRotation() + (float)Math.PI / 2f, origin10, 1.3f + num190, (SpriteEffects)0);
				Vector2 vector124 = proj.Center - proj.velocity * 0.5f;
				for (float num191 = 0f; num191 < 1f; num191 += 0.5f)
				{
					float num192 = num189 % 0.5f / 0.5f;
					num192 = (num192 + num191) % 1f;
					float num193 = num192 * 2f;
					if (num193 > 1f)
					{
						num193 = 2f - num193;
					}
					EntitySpriteDraw(value123, vector124 - screenPosition + vector122, value124, color120 * num193, proj.velocity.ToRotation() + (float)Math.PI / 2f, origin10, 0.3f + num192 * 0.5f, (SpriteEffects)0);
				}
				EntitySpriteDraw(value122, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle25, alpha13, proj.rotation, origin33, proj.scale + 0.1f, dir);
				return;
			}
			if (proj.type == 756)
			{
				Texture2D value198 = TextureAssets.Projectile[proj.type].Value;
				Rectangle value125 = value198.Frame(1, 6, 0, proj.frame);
				Vector2 origin11 = default(Vector2);
				((Vector2)(ref origin11))._002Ector(16f, (float)(value125.Height / 2));
				Color alpha14 = proj.GetAlpha(projectileColor);
				Vector2 scale16 = default(Vector2);
				((Vector2)(ref scale16))._002Ector(proj.scale);
				float lerpValue4 = Utils.GetLerpValue(35f, 30f, proj.ai[0], clamped: true);
				scale16.Y *= lerpValue4;
				Vector4 vector125 = ((Color)(ref projectileColor)).ToVector4();
				val2 = new Color(67, 17, 17);
				Vector4 vector126 = ((Color)(ref val2)).ToVector4();
				vector126 *= vector125;
				EntitySpriteDraw(TextureAssets.Extra[98].Value, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY) - proj.velocity * proj.scale * 0.5f, null, proj.GetAlpha(new Color(vector126.X, vector126.Y, vector126.Z, vector126.W)) * 1f, proj.rotation + (float)Math.PI / 2f, TextureAssets.Extra[98].Value.Size() / 2f, proj.scale * 0.9f, dir);
				EntitySpriteDraw(value198, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), value125, alpha14, proj.rotation, origin11, scale16, dir);
				return;
			}
			if (proj.type == 961)
			{
				Texture2D value126 = TextureAssets.Projectile[proj.type].Value;
				Rectangle value127 = value126.Frame(1, 5, 0, proj.frame);
				Vector2 origin12 = default(Vector2);
				((Vector2)(ref origin12))._002Ector(16f, (float)(value127.Height / 2));
				Color alpha15 = proj.GetAlpha(projectileColor);
				Vector2 vector127 = default(Vector2);
				((Vector2)(ref vector127))._002Ector(proj.scale);
				float lerpValue5 = Utils.GetLerpValue(30f, 25f, proj.ai[0], clamped: true);
				vector127.Y *= lerpValue5;
				Vector4 vector128 = ((Color)(ref projectileColor)).ToVector4();
				val2 = new Color(67, 17, 17);
				Vector4 vector129 = ((Color)(ref val2)).ToVector4();
				vector129 *= vector128;
				EntitySpriteDraw(TextureAssets.Extra[98].Value, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY) - proj.velocity * proj.scale * 0.5f, null, proj.GetAlpha(new Color(vector129.X, vector129.Y, vector129.Z, vector129.W)) * 1f, proj.rotation + (float)Math.PI / 2f, TextureAssets.Extra[98].Value.Size() / 2f, proj.scale * 0.9f, dir);
				Color color124 = proj.GetAlpha(Color.White) * Utils.Remap(proj.ai[0], 0f, 20f, 0.5f, 0f);
				((Color)(ref color124)).A = 0;
				for (int num194 = 0; num194 < 4; num194++)
				{
					Vector2 val13 = proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY);
					Vector2 spinningpoint20 = proj.rotation.ToRotationVector2();
					double radians9 = (float)Math.PI / 2f * (float)num194;
					val5 = default(Vector2);
					EntitySpriteDraw(value126, val13 + spinningpoint20.RotatedBy(radians9, val5) * 2f * vector127, value127, color124, proj.rotation, origin12, vector127, dir);
				}
				EntitySpriteDraw(value126, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), value127, alpha15, proj.rotation, origin12, vector127, dir);
				return;
			}
			if (proj.type == 723 || proj.type == 726 || proj.type == 725 || proj.type == 724 || proj.type == 9)
			{
				Texture2D value128 = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle26 = default(Rectangle);
				((Rectangle)(ref rectangle26))._002Ector(0, 0, value128.Width, value128.Height);
				Vector2 origin13 = rectangle26.Size() / 2f;
				Color color125 = proj.GetAlpha(projectileColor);
				Texture2D value129 = TextureAssets.Extra[91].Value;
				Rectangle value130 = value129.Frame();
				Vector2 origin14 = default(Vector2);
				((Vector2)(ref origin14))._002Ector((float)value130.Width / 2f, 10f);
				_ = Color.White * 0.2f;
				Vector2 vector130 = default(Vector2);
				((Vector2)(ref vector130))._002Ector(0f, proj.gfxOffY);
				Vector2 spinningpoint4 = default(Vector2);
				((Vector2)(ref spinningpoint4))._002Ector(0f, -5f);
				float num195 = (float)timeForVisualEffects / 60f;
				Vector2 vector131 = proj.Center + proj.velocity;
				float num196 = 1.5f;
				float num197 = 1.1f;
				float num198 = 1.3f;
				Color color126 = Color.Blue * 0.1f;
				Color color127 = Color.White * 0.3f;
				((Color)(ref color127)).A = 0;
				byte a = 0;
				float num199 = 1f;
				bool flag29 = true;
				float num200 = proj.scale + 0.1f;
				if (proj.type == 726)
				{
					Color val14 = new Color(180, 20, 255);
					color126 = val14 * 0.3f;
					color127 = val14 * 0.3f;
					a = 60;
					float num201 = 0.6f;
					num196 -= num201;
					num197 -= num201;
					num198 -= num201;
				}
				if (proj.type == 725)
				{
					Color val15 = new Color(255, 80, 255);
					Color value131 = default(Color);
					((Color)(ref value131))._002Ector(255, 255, 0);
					color126 = Color.Lerp(val15, value131, 0.2f) * 0.3f;
					color127 = Color.Lerp(val15, value131, 0.8f) * 0.4f;
					a = 50;
					float num202 = 0.5f;
					num196 -= num202;
					num197 -= num202;
					num198 -= num202;
				}
				if (proj.type == 724)
				{
					Color.Lerp(Color.Black, Color.Orange, 0.75f);
					Color color128 = Color.Lerp(Color.Black, Color.Yellow, 0.5f);
					Color val16 = Color.Orange * 0.75f;
					color128 = Color.Yellow * 0.5f;
					color126 = Color.Lerp(val16, color128, 0.2f) * 0.3f;
					color127 = Color.Lerp(val16, color128, 0.8f) * 0.4f;
					a = 0;
					float num203 = 0.5f;
					num196 -= num203;
					num197 -= num203;
					num198 -= num203;
				}
				if (proj.type == 9)
				{
					num196 = 0.9f;
					num197 = 0f;
					num198 = 0f;
					flag29 = false;
					spinningpoint4 = Vector2.Zero;
					vector130 += proj.velocity.SafeNormalize(Vector2.Zero) * 8f;
					num199 *= 0.75f;
					vector131 -= proj.velocity;
					Color value132 = default(Color);
					((Color)(ref value132))._002Ector(194, 22, 134);
					value132 *= 0.75f;
					((Color)(ref value132)).A = (byte)(((Color)(ref value132)).A / 2);
					Color value133 = Color.Lerp(Color.Gold, Color.White, 0.5f);
					((Color)(ref value133)).A = (byte)(((Color)(ref value133)).A / 4);
					value133 *= 0.85f;
					value133 *= 0.75f;
					Color gold = Color.Gold;
					((Color)(ref gold)).A = 180;
					Color value134 = default(Color);
					((Color)(ref value134))._002Ector(194, 22, 134, 127);
					Color value135 = new Color(180, 20, 255) * 0.75f * 0.3f;
					Color value136 = new Color(255, 255, 255, 0) * 0.5f * 0.3f;
					float num204 = 0.5f;
					float num205 = proj.rotation * num204 % ((float)Math.PI * 2f);
					if (num205 < 0f)
					{
						num205 += (float)Math.PI * 2f;
					}
					num205 /= (float)Math.PI * 2f;
					float num206 = Utils.Remap(num205, 0.15f, 0.5f, 0f, 1f) * Utils.Remap(num205, 0.5f, 0.85f, 1f, 0f);
					num206 = 1f - num206;
					color125 = Color.Lerp(gold, value134, num206);
					color126 = Color.Lerp(value132, value135, num206);
					color127 = Color.Lerp(value133, value136, num206);
					num200 += num206 * 0.2f;
				}
				Color color129 = color126;
				Color color130 = color126;
				Color color131 = color126;
				if (flag29)
				{
					((Color)(ref color129)).A = a;
					((Color)(ref color130)).A = a;
					((Color)(ref color131)).A = a;
				}
				Vector2 val17 = vector131 - screenPosition + vector130;
				Vector2 spinningpoint21 = spinningpoint4;
				double radians10 = (float)Math.PI * 2f * num195;
				val5 = default(Vector2);
				EntitySpriteDraw(value129, val17 + spinningpoint21.RotatedBy(radians10, val5), value130, color129, proj.velocity.ToRotation() + (float)Math.PI / 2f, origin14, num196, (SpriteEffects)0);
				Vector2 val18 = vector131 - screenPosition + vector130;
				Vector2 spinningpoint22 = spinningpoint4;
				double radians11 = (float)Math.PI * 2f * num195 + (float)Math.PI * 2f / 3f;
				val5 = default(Vector2);
				EntitySpriteDraw(value129, val18 + spinningpoint22.RotatedBy(radians11, val5), value130, color130, proj.velocity.ToRotation() + (float)Math.PI / 2f, origin14, num197, (SpriteEffects)0);
				Vector2 val19 = vector131 - screenPosition + vector130;
				Vector2 spinningpoint23 = spinningpoint4;
				double radians12 = (float)Math.PI * 2f * num195 + 4.1887903f;
				val5 = default(Vector2);
				EntitySpriteDraw(value129, val19 + spinningpoint23.RotatedBy(radians12, val5), value130, color131, proj.velocity.ToRotation() + (float)Math.PI / 2f, origin14, num198, (SpriteEffects)0);
				Vector2 vector132 = proj.Center - proj.velocity * 0.5f;
				for (float num207 = 0f; num207 < 1f; num207 += 0.5f)
				{
					float num208 = num195 % 0.5f / 0.5f;
					num208 = (num208 + num207) % 1f;
					float num209 = num208 * 2f;
					if (num209 > 1f)
					{
						num209 = 2f - num209;
					}
					EntitySpriteDraw(value129, vector132 - screenPosition + vector130, value130, color127 * num209, proj.velocity.ToRotation() + (float)Math.PI / 2f, origin14, (0.5f + num208 * 0.5f) * num199, (SpriteEffects)0);
				}
				EntitySpriteDraw(value128, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), rectangle26, color125, proj.rotation, origin13, num200, dir);
				return;
			}
			if (proj.type == 674)
			{
				Texture2D value199 = TextureAssets.Extra[60].Value;
				Vector2 origin15 = default(Vector2);
				((Vector2)(ref origin15))._002Ector(66f, 86f);
				Vector2 position30 = proj.Center - screenPosition;
				Vector2 one = Vector2.One;
				one = new Vector2(4f, 1f) * 1.4f;
				Color color132 = default(Color);
				((Color)(ref color132))._002Ector(115, 0, 155, 0);
				Color color133 = default(Color);
				((Color)(ref color133))._002Ector(255, 180, 255, 0);
				float num210 = 0f;
				if (proj.ai[0] < 30f)
				{
					num210 = Utils.GetLerpValue(0f, 30f, proj.ai[0], clamped: true);
				}
				else if (proj.ai[0] < 40f)
				{
					num210 = 1f + Utils.GetLerpValue(30f, 40f, proj.ai[0], clamped: true);
				}
				Vector2 vector133 = default(Vector2);
				((Vector2)(ref vector133))._002Ector(1f, 1f);
				Vector2 vector134 = default(Vector2);
				((Vector2)(ref vector134))._002Ector(0.8f, 2f);
				if (num210 < 1f)
				{
					vector133.X *= num210;
				}
				one *= num210;
				if (num210 < 1f)
				{
					color132 *= num210;
					color133 *= num210;
				}
				if (num210 > 1.5f)
				{
					float lerpValue6 = Utils.GetLerpValue(2f, 1.5f, num210, clamped: true);
					color132 *= lerpValue6;
					color133 *= lerpValue6;
				}
				float num211 = 0.42f;
				color132 *= num211;
				color133 *= num211;
				EntitySpriteDraw(value199, position30, null, color132, 0f, origin15, one * vector133, (SpriteEffects)0);
				EntitySpriteDraw(value199, position30, null, color133, 0f, origin15, one * vector134, (SpriteEffects)0);
				EntitySpriteDraw(TextureAssets.Extra[59].Value, position30, null, color132, 0f, origin15, one * vector133 * new Vector2(1f, 0.3f), (SpriteEffects)0);
				return;
			}
			if (proj.type == 440 || proj.type == 449 || proj.type == 606)
			{
				Rectangle value137 = default(Rectangle);
				((Rectangle)(ref value137))._002Ector((int)screenPosition.X - 500, (int)screenPosition.Y - 500, screenWidth + 1000, screenHeight + 1000);
				Rectangle rect = proj.getRect();
				if (((Rectangle)(ref rect)).Intersects(value137))
				{
					Vector2 vector135 = default(Vector2);
					((Vector2)(ref vector135))._002Ector(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY);
					float num212 = 100f;
					float num213 = 3f;
					if (proj.type == 606)
					{
						num212 = 150f;
						num213 = 3f;
					}
					if (proj.ai[1] == 1f)
					{
						num212 = (int)proj.localAI[0];
					}
					for (int num214 = 1; num214 <= (int)proj.localAI[0]; num214++)
					{
						Vector2 vector136 = Vector2.Normalize(proj.velocity) * (float)num214 * num213;
						Color alpha16 = proj.GetAlpha(projectileColor);
						alpha16 *= (num212 - (float)num214) / num212;
						((Color)(ref alpha16)).A = 0;
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, vector135 - vector136, null, alpha16, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir);
					}
				}
				return;
			}
			if (proj.type == 85)
			{
				DrawProj_Flamethrower(proj);
				return;
			}
			if (proj.type == 687)
			{
				Vector2 center2 = proj.Center;
				center2 -= screenPosition;
				float num215 = 40f;
				float num216 = num215 * 2f;
				float num217 = (float)proj.frameCounter / num215;
				Texture2D value138 = TextureAssets.Projectile[proj.type].Value;
				Color transparent = Color.Transparent;
				Color color134 = default(Color);
				((Color)(ref color134))._002Ector(255, 255, 255, 0);
				Color color135 = default(Color);
				((Color)(ref color135))._002Ector(180, 30, 30, 200);
				Color color136 = default(Color);
				((Color)(ref color136))._002Ector(0, 0, 0, 30);
				ulong seed = 1uL;
				for (float num218 = 0f; num218 < 15f; num218 += 1f)
				{
					float num219 = Utils.RandomFloat(ref seed) * 0.25f - 0.125f;
					Vector2 vector137 = (proj.rotation + num219).ToRotationVector2();
					Vector2 value139 = center2 + vector137 * 400f;
					float num220 = num217 + num218 * (1f / 15f);
					int num221 = (int)(num220 / (1f / 15f));
					num220 %= 1f;
					if ((!(num220 > num217 % 1f) || !((float)proj.frameCounter < num215)) && (!(num220 < num217 % 1f) || !((float)proj.frameCounter >= num216 - num215)))
					{
						transparent = ((num220 < 0.1f) ? Color.Lerp(Color.Transparent, color134, Utils.GetLerpValue(0f, 0.1f, num220, clamped: true)) : ((num220 < 0.35f) ? color134 : ((num220 < 0.7f) ? Color.Lerp(color134, color135, Utils.GetLerpValue(0.35f, 0.7f, num220, clamped: true)) : ((num220 < 0.9f) ? Color.Lerp(color135, color136, Utils.GetLerpValue(0.7f, 0.9f, num220, clamped: true)) : ((!(num220 < 1f)) ? Color.Transparent : Color.Lerp(color136, Color.Transparent, Utils.GetLerpValue(0.9f, 1f, num220, clamped: true)))))));
						float num222 = 0.9f + num220 * 0.8f;
						num222 *= num222;
						num222 *= 0.8f;
						Vector2 position31 = Vector2.SmoothStep(center2, value139, num220);
						Rectangle rectangle27 = value138.Frame(1, 7, 0, (int)(num220 * 7f));
						EntitySpriteDraw(value138, position31, rectangle27, transparent, proj.rotation + (float)Math.PI * 2f * (num220 + GlobalTimeWrappedHourly * 1.2f) * 0.2f + (float)num221 * ((float)Math.PI * 2f / 5f), rectangle27.Size() / 2f, num222, (SpriteEffects)0);
					}
				}
				return;
			}
			if (proj.type == 651)
			{
				if (proj.owner != myPlayer)
				{
					return;
				}
				Player player3 = player[proj.owner];
				Point point = Utils.ToPoint(new Vector2(proj.ai[0], proj.ai[1]));
				Point point2 = proj.Center.ToTileCoordinates();
				Color color137 = default(Color);
				((Color)(ref color137))._002Ector(255, 255, 255, 0);
				Color color138 = default(Color);
				((Color)(ref color138))._002Ector(127, 127, 127, 0);
				int num223 = 1;
				float num224 = 0f;
				WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
				bool flag30 = toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Actuator);
				if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Red))
				{
					num224 += 1f;
					color138 = Color.Lerp(color138, Color.Red, 1f / num224);
				}
				if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Blue))
				{
					num224 += 1f;
					color138 = Color.Lerp(color138, Color.Blue, 1f / num224);
				}
				if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Green))
				{
					num224 += 1f;
					color138 = Color.Lerp(color138, new Color(0, 255, 0), 1f / num224);
				}
				if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Yellow))
				{
					num224 += 1f;
					color138 = Color.Lerp(color138, new Color(255, 255, 0), 1f / num224);
				}
				if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Cutter))
				{
					((Color)(ref color137))._002Ector(50, 50, 50, 255);
				}
				((Color)(ref color138)).A = 0;
				if (point == point2)
				{
					Vector2 position32 = point2.ToVector2() * 16f - screenPosition;
					Rectangle value140 = default(Rectangle);
					((Rectangle)(ref value140))._002Ector(0, 0, 16, 16);
					if (flag30)
					{
						EntitySpriteDraw(TextureAssets.WireUi[11].Value, position32, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position32, value140, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					value140.Y = 18;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position32, value140, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					return;
				}
				if (point.X == point2.X)
				{
					int num225 = point2.Y - point.Y;
					int num226 = Math.Sign(num225);
					Vector2 position33 = point.ToVector2() * 16f - screenPosition;
					Rectangle value141 = default(Rectangle);
					((Rectangle)(ref value141))._002Ector((num225 * num223 > 0) ? 72 : 18, 0, 16, 16);
					if (flag30)
					{
						EntitySpriteDraw(TextureAssets.WireUi[11].Value, position33, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position33, value141, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					value141.Y = 18;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position33, value141, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					for (int num227 = point.Y + num226; num227 != point2.Y; num227 += num226)
					{
						position33 = new Vector2((float)(point.X * 16), (float)(num227 * 16)) - screenPosition;
						value141.Y = 0;
						value141.X = 90;
						if (flag30)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position33, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position33, value141, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
						value141.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position33, value141, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
					position33 = point2.ToVector2() * 16f - screenPosition;
					((Rectangle)(ref value141))._002Ector((num225 * num223 > 0) ? 18 : 72, 0, 16, 16);
					if (flag30)
					{
						EntitySpriteDraw(TextureAssets.WireUi[11].Value, position33, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position33, value141, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					value141.Y = 18;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position33, value141, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					return;
				}
				if (point.Y == point2.Y)
				{
					int num228 = point2.X - point.X;
					int num229 = Math.Sign(num228);
					Vector2 position10 = point.ToVector2() * 16f - screenPosition;
					Rectangle value142 = default(Rectangle);
					((Rectangle)(ref value142))._002Ector((num228 > 0) ? 36 : 144, 0, 16, 16);
					if (flag30)
					{
						EntitySpriteDraw(TextureAssets.WireUi[11].Value, position10, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, value142, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					value142.Y = 18;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, value142, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					for (int num230 = point.X + num229; num230 != point2.X; num230 += num229)
					{
						position10 = new Vector2((float)(num230 * 16), (float)(point.Y * 16)) - screenPosition;
						value142.Y = 0;
						value142.X = 180;
						if (flag30)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position10, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, value142, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
						value142.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, value142, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
					position10 = point2.ToVector2() * 16f - screenPosition;
					((Rectangle)(ref value142))._002Ector((num228 > 0) ? 144 : 36, 0, 16, 16);
					if (flag30)
					{
						EntitySpriteDraw(TextureAssets.WireUi[11].Value, position10, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, value142, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					value142.Y = 18;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position10, value142, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					return;
				}
				Math.Abs(point.X - point2.X);
				Math.Abs(point.Y - point2.Y);
				int num231 = Math.Sign(point2.X - point.X);
				int num232 = Math.Sign(point2.Y - point.Y);
				Point p = default(Point);
				bool flag31 = false;
				bool flag32 = player3.direction == 1;
				int num233;
				int num234;
				int num235;
				if (flag32)
				{
					p.X = point.X;
					num233 = point.Y;
					num234 = point2.Y;
					num235 = num232;
				}
				else
				{
					p.Y = point.Y;
					num233 = point.X;
					num234 = point2.X;
					num235 = num231;
				}
				Vector2 position11 = point.ToVector2() * 16f - screenPosition;
				Rectangle value143 = default(Rectangle);
				((Rectangle)(ref value143))._002Ector(0, 0, 16, 16);
				if (!flag32)
				{
					value143.X = ((num235 > 0) ? 36 : 144);
				}
				else
				{
					value143.X = ((num235 > 0) ? 72 : 18);
				}
				if (flag30)
				{
					EntitySpriteDraw(TextureAssets.WireUi[11].Value, position11, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				}
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				value143.Y = 18;
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				for (int num236 = num233 + num235; num236 != num234; num236 += num235)
				{
					if (flag31)
					{
						break;
					}
					if (flag32)
					{
						p.Y = num236;
					}
					else
					{
						p.X = num236;
					}
					if (WorldGen.InWorld(p.X, p.Y, 1) && tile[p.X, p.Y] != null)
					{
						position11 = p.ToVector2() * 16f - screenPosition;
						value143.Y = 0;
						if (!flag32)
						{
							value143.X = 180;
						}
						else
						{
							value143.X = 90;
						}
						if (flag30)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position11, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
						value143.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
				}
				if (flag32)
				{
					p.Y = point2.Y;
					num233 = point.X;
					num234 = point2.X;
					num235 = num231;
				}
				else
				{
					p.X = point2.X;
					num233 = point.Y;
					num234 = point2.Y;
					num235 = num232;
				}
				position11 = p.ToVector2() * 16f - screenPosition;
				((Rectangle)(ref value143))._002Ector(0, 0, 16, 16);
				if (!flag32)
				{
					value143.X += ((num231 > 0) ? 144 : 36);
					value143.X += ((num232 * num223 > 0) ? 72 : 18);
				}
				else
				{
					value143.X += ((num231 > 0) ? 36 : 144);
					value143.X += ((num232 * num223 > 0) ? 18 : 72);
				}
				if (flag30)
				{
					EntitySpriteDraw(TextureAssets.WireUi[11].Value, position11, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				}
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				value143.Y = 18;
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				for (int num237 = num233 + num235; num237 != num234; num237 += num235)
				{
					if (flag31)
					{
						break;
					}
					if (!flag32)
					{
						p.Y = num237;
					}
					else
					{
						p.X = num237;
					}
					if (WorldGen.InWorld(p.X, p.Y, 1) && tile[p.X, p.Y] != null)
					{
						position11 = p.ToVector2() * 16f - screenPosition;
						value143.Y = 0;
						if (!flag32)
						{
							value143.X = 90;
						}
						else
						{
							value143.X = 180;
						}
						if (flag30)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position11, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
						value143.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
					}
				}
				position11 = point2.ToVector2() * 16f - screenPosition;
				((Rectangle)(ref value143))._002Ector(0, 0, 16, 16);
				if (!flag32)
				{
					value143.X += ((num232 * num223 > 0) ? 18 : 72);
				}
				else
				{
					value143.X += ((num231 > 0) ? 144 : 36);
				}
				if (flag30)
				{
					EntitySpriteDraw(TextureAssets.WireUi[11].Value, position11, null, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				}
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color138, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				value143.Y = 18;
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, position11, value143, color137, 0f, Vector2.Zero, 1f, (SpriteEffects)0);
				return;
			}
			if (proj.type == 586)
			{
				float num238 = 300f;
				if (proj.ai[0] >= 100f)
				{
					num238 = MathHelper.Lerp(300f, 600f, (proj.ai[0] - 100f) / 200f);
				}
				if (num238 > 600f)
				{
					num238 = 600f;
				}
				if (proj.ai[0] >= 500f)
				{
					num238 = MathHelper.Lerp(600f, 1200f, (proj.ai[0] - 500f) / 100f);
				}
				float rotation24 = proj.rotation;
				Texture2D value144 = TextureAssets.Projectile[proj.type].Value;
				int num239 = (int)(proj.ai[0] / 6f);
				Vector2 spinningpoint5 = default(Vector2);
				((Vector2)(ref spinningpoint5))._002Ector(0f, 0f - num238);
				for (int num240 = 0; (float)num240 < 10f; num240++)
				{
					Rectangle rectangle28 = value144.Frame(1, 5, 0, (num239 + num240) % 5);
					float num241 = rotation24 + (float)Math.PI / 5f * (float)num240;
					Vector2 spinningpoint24 = spinningpoint5;
					double radians13 = num241;
					val5 = default(Vector2);
					Vector2 vector138 = spinningpoint24.RotatedBy(radians13, val5) / 3f + proj.Center;
					Color alpha17 = proj.GetAlpha(Lighting.GetColor(vector138.ToTileCoordinates()));
					((Color)(ref alpha17)).A = (byte)(((Color)(ref alpha17)).A / 2);
					EntitySpriteDraw(value144, vector138 - screenPosition, rectangle28, alpha17, num241, rectangle28.Size() / 2f, proj.scale, (SpriteEffects)0);
				}
				for (int num242 = 0; (float)num242 < 20f; num242++)
				{
					Rectangle rectangle10 = value144.Frame(1, 5, 0, (num239 + num242) % 5);
					float num243 = 0f - rotation24 + (float)Math.PI / 10f * (float)num242;
					num243 *= 2f;
					Vector2 spinningpoint25 = spinningpoint5;
					double radians14 = num243;
					val5 = default(Vector2);
					Vector2 vector139 = spinningpoint25.RotatedBy(radians14, val5) + proj.Center;
					Color alpha18 = proj.GetAlpha(Lighting.GetColor(vector139.ToTileCoordinates()));
					((Color)(ref alpha18)).A = (byte)(((Color)(ref alpha18)).A / 2);
					EntitySpriteDraw(value144, vector139 - screenPosition, rectangle10, alpha18, num243, rectangle10.Size() / 2f, proj.scale, (SpriteEffects)0);
				}
				return;
			}
			if (proj.type == 536 || proj.type == 607)
			{
				Texture2D value145 = TextureAssets.Projectile[proj.type].Value;
				Vector2 position12 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				((Vector2)(ref val5))._002Ector(1f, ((Vector2)(ref proj.velocity)).Length() / (float)value145.Height);
				EntitySpriteDraw(value145, position12, null, proj.GetAlpha(projectileColor), proj.rotation, value145.Frame().Bottom(), val5, dir);
				return;
			}
			if (proj.type == 591)
			{
				Texture2D value146 = TextureAssets.Projectile[proj.type].Value;
				Vector2 position13 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Vector2 scale17 = default(Vector2);
				((Vector2)(ref scale17))._002Ector(1f, ((Vector2)(ref proj.velocity)).Length() / (float)value146.Height);
				LoadNPC(139);
				Texture2D value147 = TextureAssets.Npc[139].Value;
				bool num451 = proj.velocity.X >= 0f;
				float rotation25 = proj.velocity.ToRotation() + (float)Math.PI;
				SpriteEffects effects3 = (SpriteEffects)(num451 ? 2 : 0);
				float fromValue = 1f - proj.Opacity;
				float num244 = Utils.Remap(fromValue, 0f, 0.2f, 0f, 1f) * Utils.Remap(fromValue, 0.2f, 1f, 1f, 0f);
				EntitySpriteDraw(value147, position13, null, projectileColor * num244, rotation25, value147.Size() / 2f, 0.65f, effects3);
				Color color139 = new Color(255, 189, 163, 127) * num244;
				Color color140 = new Color(255, 21, 21, 127) * num244;
				Rectangle rectangle11 = value146.Frame(2);
				Vector2 origin16 = rectangle11.Bottom();
				EntitySpriteDraw(value146, position13, rectangle11, color139, proj.rotation, origin16, scale17, dir);
				rectangle11 = value146.Frame(2, 1, 1);
				EntitySpriteDraw(value146, position13, rectangle11, color140, proj.rotation, origin16, scale17, dir);
				return;
			}
			if (proj.type == 688 || proj.type == 689 || proj.type == 690)
			{
				Texture2D value148 = TextureAssets.Projectile[proj.type].Value;
				Vector2 position14 = proj.Top + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Rectangle rectangle12 = value148.Frame(1, projFrames[proj.type], 0, proj.frame);
				Vector2 origin17 = rectangle12.Size() * new Vector2(0.5f, 0f);
				Color color141 = Color.Lerp(proj.GetAlpha(projectileColor), Color.White, 0.5f);
				Color color142 = color141;
				((Color)(ref color142)).A = 127;
				Texture2D texture2D2 = null;
				Texture2D texture2D3 = null;
				switch (proj.type)
				{
				case 688:
					texture2D2 = TextureAssets.GlowMask[228].Value;
					texture2D3 = TextureAssets.Extra[86].Value;
					break;
				case 689:
					texture2D2 = TextureAssets.GlowMask[229].Value;
					texture2D3 = TextureAssets.Extra[87].Value;
					break;
				case 690:
					texture2D2 = TextureAssets.GlowMask[230].Value;
					texture2D3 = TextureAssets.Extra[88].Value;
					break;
				}
				EntitySpriteDraw(value148, position14, rectangle12, color141, proj.rotation, origin17, proj.scale, dir);
				if (texture2D2 != null)
				{
					EntitySpriteDraw(texture2D2, position14, rectangle12, color142, proj.rotation, origin17, proj.scale, dir);
				}
				if (texture2D3 != null)
				{
					Vector2 position15 = proj.Center + Vector2.UnitY * proj.gfxOffY - screenPosition;
					rectangle12 = texture2D3.Frame();
					origin17 = rectangle12.Size() * new Vector2(0.5f, 1f);
					origin17.Y -= 2f;
					EntitySpriteDraw(texture2D3, position15, rectangle12, color141, proj.rotation, origin17, proj.scale, dir);
				}
				return;
			}
			if (proj.type == 694 || proj.type == 695 || proj.type == 696)
			{
				Texture2D value200 = TextureAssets.Projectile[proj.type].Value;
				Vector2 position16 = proj.Bottom + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Rectangle rectangle13 = value200.Frame(1, projFrames[proj.type], 0, proj.frame);
				Vector2 origin18 = rectangle13.Size() * new Vector2(0.5f, 1f);
				origin18.Y -= 8f;
				if ((uint)(proj.type - 694) <= 1u)
				{
					origin18.X += 3f;
				}
				Color color143 = Color.Lerp(proj.GetAlpha(projectileColor), Color.White, 0f);
				EntitySpriteDraw(value200, position16, rectangle13, color143, proj.rotation, origin18, proj.scale, dir);
				EntitySpriteDraw(value200, position16, rectangle13, color143 * 0.3f, proj.rotation, origin18, proj.scale * 1.1f, dir);
				return;
			}
			if (proj.type == 409)
			{
				Texture2D value149 = TextureAssets.Projectile[proj.type].Value;
				int num245 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y14 = num245 * proj.frame;
				int num246 = 10;
				int num247 = 2;
				float value150 = 0.5f;
				for (int num248 = 1; num248 < num246; num248 += num247)
				{
					_ = ref proj.oldPos[num248];
					Color newColor = projectileColor;
					newColor = proj.GetAlpha(newColor);
					newColor *= (float)(num246 - num248) / 15f;
					_ = proj.oldPos[num248] - screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY);
					EntitySpriteDraw(value149, proj.oldPos[num248] + new Vector2((float)proj.width, (float)proj.height) / 2f - screenPosition + new Vector2(0f, proj.gfxOffY), (Rectangle?)new Rectangle(0, y14, value149.Width, num245), newColor, proj.rotation, new Vector2((float)value149.Width / 2f, (float)num245 / 2f), MathHelper.Lerp(proj.scale, value150, (float)num248 / 15f), dir, 0f);
				}
				EntitySpriteDraw(value149, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), (Rectangle?)new Rectangle(0, y14, value149.Width, num245), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value149.Width / 2f, (float)num245 / 2f), proj.scale, dir, 0f);
				return;
			}
			if (proj.type == 437)
			{
				Texture2D value151 = TextureAssets.Projectile[proj.type].Value;
				int num249 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y15 = num249 * proj.frame;
				int num250 = 10;
				int num251 = 2;
				float value152 = 0.2f;
				for (int num252 = 1; num252 < num250; num252 += num251)
				{
					_ = ref proj.oldPos[num252];
					Color newColor2 = projectileColor;
					newColor2 = proj.GetAlpha(newColor2);
					newColor2 *= (float)(num250 - num252) / 15f;
					_ = proj.oldPos[num252] - screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY);
					EntitySpriteDraw(value151, proj.oldPos[num252] + new Vector2((float)proj.width, (float)proj.height) / 2f - screenPosition + new Vector2(0f, proj.gfxOffY), (Rectangle?)new Rectangle(0, y15, value151.Width, num249), newColor2, proj.rotation, new Vector2((float)value151.Width / 2f, (float)num249 / 2f), MathHelper.Lerp(proj.scale, value152, (float)num252 / 15f), dir, 0f);
				}
				EntitySpriteDraw(value151, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), (Rectangle?)new Rectangle(0, y15, value151.Width, num249), Color.White, proj.rotation, new Vector2((float)value151.Width / 2f, (float)num249 / 2f), proj.scale + 0.2f, dir, 0f);
				EntitySpriteDraw(value151, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), (Rectangle?)new Rectangle(0, y15, value151.Width, num249), proj.GetAlpha(Color.White), proj.rotation, new Vector2((float)value151.Width / 2f, (float)num249 / 2f), proj.scale + 0.2f, dir, 0f);
				return;
			}
			if (proj.type == 384 || proj.type == 386)
			{
				Texture2D value153 = TextureAssets.Projectile[proj.type].Value;
				int num253 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y16 = num253 * proj.frame;
				EntitySpriteDraw(value153, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), (Rectangle?)new Rectangle(0, y16, value153.Width, num253), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value153.Width / 2f, (float)num253 / 2f), proj.scale, dir, 0f);
				return;
			}
			if (proj.type == 439 || proj.type == 460 || proj.type == 600 || proj.type == 615 || proj.type == 630 || proj.type == 633 || proj.type == 705 || proj.type == 714)
			{
				Texture2D value154 = TextureAssets.Projectile[proj.type].Value;
				if (player[proj.owner].gravDir == -1f)
				{
					if (proj.type == 705)
					{
						dir = (SpriteEffects)(dir | 2);
					}
					if (proj.type == 615 || proj.type == 714)
					{
						if (player[proj.owner].direction == 1)
						{
							dir = (SpriteEffects)2;
						}
						else if (player[proj.owner].direction == -1)
						{
							dir = (SpriteEffects)3;
						}
					}
					else if (proj.type == 600 || proj.type == 439)
					{
						if (player[proj.owner].direction == 1)
						{
							dir = (SpriteEffects)1;
						}
						else if (player[proj.owner].direction == -1)
						{
							dir = (SpriteEffects)0;
						}
					}
				}
				int num254 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y17 = num254 * proj.frame;
				Vector2 vector140 = (proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition).Floor();
				float num255 = 1f;
				if (player[proj.owner].shroomiteStealth && player[proj.owner].inventory[player[proj.owner].selectedItem].ranged)
				{
					float num256 = player[proj.owner].stealth;
					if ((double)num256 < 0.03)
					{
						num256 = 0.03f;
					}
					_ = (1f + num256 * 10f) / 11f;
					projectileColor *= num256;
					num255 = num256;
				}
				if (player[proj.owner].setVortex && player[proj.owner].inventory[player[proj.owner].selectedItem].ranged)
				{
					float num257 = player[proj.owner].stealth;
					if ((double)num257 < 0.03)
					{
						num257 = 0.03f;
					}
					_ = (1f + num257 * 10f) / 11f;
					projectileColor = projectileColor.MultiplyRGBA(new Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num257)));
					num255 = num257;
				}
				if (proj.type == 714)
				{
					y17 = 0;
					instance.LoadItem(3930);
					value154 = TextureAssets.Item[3930].Value;
				}
				EntitySpriteDraw(value154, vector140, (Rectangle?)new Rectangle(0, y17, value154.Width, num254), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value154.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
				if (proj.type == 439)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[35].Value, vector140, (Rectangle?)new Rectangle(0, y17, value154.Width, num254), new Color(255, 255, 255, 0) * num255, proj.rotation, new Vector2((float)value154.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
				}
				else if (proj.type == 714)
				{
					y17 = num254 * proj.frame;
					Color color144 = hslToRgb(proj.ai[0] / 90f % 1f, 1f, 0.5f);
					((Color)(ref color144)).A = 120;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, vector140, (Rectangle?)new Rectangle(0, y17, value154.Width, num254), color144 * num255, proj.rotation, new Vector2((float)value154.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
				}
				else if (proj.type == 615)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[192].Value, vector140, (Rectangle?)new Rectangle(0, y17, value154.Width, num254), new Color(255, 255, 255, 127) * num255, proj.rotation, new Vector2((float)value154.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
				}
				else if (proj.type == 630)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[200].Value, vector140, (Rectangle?)new Rectangle(0, y17, value154.Width, num254), new Color(255, 255, 255, 127) * num255, proj.rotation, new Vector2((float)value154.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
					if (proj.localAI[0] > 0f)
					{
						int frameY = 6 - (int)(proj.localAI[0] / 1f);
						value154 = TextureAssets.Extra[65].Value;
						EntitySpriteDraw(value154, vector140 + Vector2.Normalize(proj.velocity) * 2f, value154.Frame(1, 6, 0, frameY), new Color(255, 255, 255, 127) * num255, proj.rotation, new Vector2((float)(((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1) ? value154.Width : 0), (float)num254 / 2f - 2f), proj.scale, dir);
					}
				}
				else if (proj.type == 600)
				{
					Color portalColor = PortalHelper.GetPortalColor(proj.owner, (int)proj.ai[1]);
					((Color)(ref portalColor)).A = 70;
					EntitySpriteDraw(TextureAssets.GlowMask[173].Value, vector140, (Rectangle?)new Rectangle(0, y17, value154.Width, num254), portalColor, proj.rotation, new Vector2((float)value154.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
				}
				else if (proj.type == 460)
				{
					if (Math.Abs(proj.rotation - (float)Math.PI / 2f) > (float)Math.PI / 2f)
					{
						dir = (SpriteEffects)(dir | 2);
					}
					EntitySpriteDraw(TextureAssets.GlowMask[102].Value, vector140, (Rectangle?)new Rectangle(0, y17, value154.Width, num254), new Color(255, 255, 255, 0), proj.rotation - (float)Math.PI / 2f, new Vector2((float)value154.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
					if (proj.ai[0] > 180f && Main.projectile[(int)proj.ai[1]].type == 461)
					{
						DrawProj((int)proj.ai[1]);
					}
				}
				else if (proj.type == 633)
				{
					float num258 = (float)Math.Cos((float)Math.PI * 2f * (proj.ai[0] / 30f)) * 2f + 2f;
					if (proj.ai[0] > 120f)
					{
						num258 = 4f;
					}
					for (float num259 = 0f; num259 < 4f; num259 += 1f)
					{
						Texture2D texture5 = value154;
						Vector2 unitY = Vector2.UnitY;
						double radians15 = num259 * ((float)Math.PI * 2f) / 4f;
						val5 = default(Vector2);
						EntitySpriteDraw(texture5, vector140 + unitY.RotatedBy(radians15, val5) * num258, (Rectangle?)new Rectangle(0, y17, value154.Width, num254), proj.GetAlpha(projectileColor).MultiplyRGBA(new Color(255, 255, 255, 0)) * 0.03f, proj.rotation, new Vector2((float)value154.Width / 2f, (float)num254 / 2f), proj.scale, dir, 0f);
					}
				}
				return;
			}
			if (proj.type == 442)
			{
				Texture2D value155 = TextureAssets.Projectile[proj.type].Value;
				int num260 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y18 = num260 * proj.frame;
				Vector2 position17 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				EntitySpriteDraw(value155, position17, (Rectangle?)new Rectangle(0, y18, value155.Width, num260), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value155.Width / 2f, (float)num260 / 2f), proj.scale, dir, 0f);
				EntitySpriteDraw(TextureAssets.GlowMask[37].Value, position17, (Rectangle?)new Rectangle(0, y18, value155.Width, num260), new Color(255, 255, 255, 0) * (1f - (float)proj.alpha / 255f), proj.rotation, new Vector2((float)value155.Width / 2f, (float)num260 / 2f), proj.scale, dir, 0f);
				return;
			}
			if (proj.type == 447)
			{
				Texture2D value156 = TextureAssets.Projectile[proj.type].Value;
				Texture2D value157 = TextureAssets.Extra[4].Value;
				int num261 = value156.Height / projFrames[proj.type];
				int y19 = num261 * proj.frame;
				int num262 = value157.Height / projFrames[proj.type];
				int num263 = num262 * proj.frame;
				Rectangle value158 = default(Rectangle);
				((Rectangle)(ref value158))._002Ector(0, num263, value157.Width, num262);
				Vector2 vector141 = proj.position + new Vector2((float)proj.width, 0f) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				EntitySpriteDraw(TextureAssets.Extra[4].Value, vector141, value158, proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(value157.Width / 2), 0f), proj.scale, dir);
				int num264 = proj.height - num261 - 14;
				if (num264 < 0)
				{
					num264 = 0;
				}
				if (num264 > 0)
				{
					if (num263 == num262 * 3)
					{
						num263 = num262 * 2;
					}
					EntitySpriteDraw(TextureAssets.Extra[4].Value, vector141 + Vector2.UnitY * (float)(num262 - 1), (Rectangle?)new Rectangle(0, num263 + num262 - 1, value157.Width, 1), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(value157.Width / 2), 0f), new Vector2(1f, (float)num264), dir, 0f);
				}
				value158.Width = value156.Width;
				value158.Y = y19;
				EntitySpriteDraw(value156, vector141 + Vector2.UnitY * (float)(num262 - 1 + num264), value158, proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value156.Width / 2f, 0f), proj.scale, dir);
				return;
			}
			if (proj.type == 455)
			{
				if (proj.velocity == Vector2.Zero)
				{
					return;
				}
				Texture2D value159 = TextureAssets.Projectile[proj.type].Value;
				Texture2D value160 = TextureAssets.Extra[21].Value;
				Texture2D value161 = TextureAssets.Extra[22].Value;
				float num265 = proj.localAI[1];
				Color color145 = new Color(255, 255, 255, 0) * 0.9f;
				EntitySpriteDraw(value159, proj.Center - screenPosition, null, color145, proj.rotation, value159.Size() / 2f, proj.scale, (SpriteEffects)0);
				num265 -= (float)(value159.Height / 2 + value161.Height) * proj.scale;
				Vector2 center3 = proj.Center;
				center3 += proj.velocity * proj.scale * (float)value159.Height / 2f;
				if (num265 > 0f)
				{
					float num266 = 0f;
					Rectangle value162 = default(Rectangle);
					((Rectangle)(ref value162))._002Ector(0, 16 * (proj.timeLeft / 3 % 5), value160.Width, 16);
					while (num266 + 1f < num265)
					{
						if (num265 - num266 < (float)value162.Height)
						{
							value162.Height = (int)(num265 - num266);
						}
						EntitySpriteDraw(value160, center3 - screenPosition, value162, color145, proj.rotation, new Vector2((float)(value162.Width / 2), 0f), proj.scale, (SpriteEffects)0);
						num266 += (float)value162.Height * proj.scale;
						center3 += proj.velocity * (float)value162.Height * proj.scale;
						value162.Y += 16;
						if (value162.Y + value162.Height > value160.Height)
						{
							value162.Y = 0;
						}
					}
				}
				EntitySpriteDraw(value161, center3 - screenPosition, null, color145, proj.rotation, value161.Frame().Top(), proj.scale, (SpriteEffects)0);
				return;
			}
			if (proj.type == 461)
			{
				if (proj.velocity == Vector2.Zero)
				{
					return;
				}
				Texture2D value163 = TextureAssets.Projectile[proj.type].Value;
				float num267 = proj.localAI[1];
				Color color146 = new Color(255, 255, 255, 0) * 0.9f;
				Rectangle rectangle14 = default(Rectangle);
				((Rectangle)(ref rectangle14))._002Ector(0, 0, value163.Width, 22);
				Vector2 vector142 = default(Vector2);
				((Vector2)(ref vector142))._002Ector(0f, player[proj.owner].gfxOffY);
				EntitySpriteDraw(value163, proj.Center.Floor() - screenPosition + vector142, rectangle14, color146, proj.rotation, rectangle14.Size() / 2f, proj.scale, (SpriteEffects)0);
				num267 -= 33f * proj.scale;
				Vector2 vector143 = proj.Center.Floor();
				vector143 += proj.velocity * proj.scale * 10.5f;
				((Rectangle)(ref rectangle14))._002Ector(0, 25, value163.Width, 28);
				if (num267 > 0f)
				{
					float num268 = 0f;
					while (num268 + 1f < num267)
					{
						if (num267 - num268 < (float)rectangle14.Height)
						{
							rectangle14.Height = (int)(num267 - num268);
						}
						EntitySpriteDraw(value163, vector143 - screenPosition + vector142, rectangle14, color146, proj.rotation, new Vector2((float)(rectangle14.Width / 2), 0f), proj.scale, (SpriteEffects)0);
						num268 += (float)rectangle14.Height * proj.scale;
						vector143 += proj.velocity * (float)rectangle14.Height * proj.scale;
					}
				}
				EntitySpriteDraw(sourceRectangle: (Rectangle?)new Rectangle(0, 56, value163.Width, 22), texture: value163, position: vector143 - screenPosition + vector142, color: color146, rotation: proj.rotation, origin: value163.Frame().Top(), scale: proj.scale, effects: (SpriteEffects)0, worthless: 0f);
				return;
			}
			if (proj.type == 632)
			{
				if (!(proj.velocity == Vector2.Zero))
				{
					Texture2D value164 = TextureAssets.Projectile[proj.type].Value;
					float num269 = proj.localAI[1];
					float laserLuminance = 0.5f;
					float laserAlphaMultiplier = 0f;
					Color color147 = hslToRgb(proj.GetLastPrismHue(proj.ai[0], ref laserLuminance, ref laserAlphaMultiplier), 1f, laserLuminance);
					((Color)(ref color147)).A = (byte)((float)(int)((Color)(ref color147)).A * laserAlphaMultiplier);
					Vector2 vector144 = proj.Center.Floor();
					vector144 += proj.velocity * proj.scale * 10.5f;
					num269 -= proj.scale * 14.5f * proj.scale;
					Vector2 vector145 = default(Vector2);
					((Vector2)(ref vector145))._002Ector(proj.scale);
					DelegateMethods.f_1 = 1f;
					DelegateMethods.c_1 = color147 * 0.75f * proj.Opacity;
					_ = proj.oldPos[0] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
					Utils.DrawLaser(spriteBatch, value164, vector144 - screenPosition, vector144 + proj.velocity * num269 - screenPosition, vector145, DelegateMethods.RainbowLaserDraw);
					DelegateMethods.c_1 = new Color(255, 255, 255, 127) * 0.75f * proj.Opacity;
					Utils.DrawLaser(spriteBatch, value164, vector144 - screenPosition, vector144 + proj.velocity * num269 - screenPosition, vector145 / 2f, DelegateMethods.RainbowLaserDraw);
				}
				return;
			}
			if (proj.type == 642)
			{
				if (!(proj.velocity == Vector2.Zero))
				{
					Texture2D value165 = TextureAssets.Projectile[proj.type].Value;
					float num270 = proj.localAI[1];
					Color c_ = new Color(255, 255, 255, 127);
					Vector2 vector146 = proj.Center.Floor();
					num270 -= proj.scale * 10.5f;
					Vector2 vector147 = default(Vector2);
					((Vector2)(ref vector147))._002Ector(proj.scale);
					DelegateMethods.f_1 = 1f;
					DelegateMethods.c_1 = c_;
					DelegateMethods.i_1 = 54000 - (int)time / 2;
					_ = proj.oldPos[0] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
					Utils.DrawLaser(spriteBatch, value165, vector146 - screenPosition, vector146 + proj.velocity * num270 - screenPosition, vector147, DelegateMethods.TurretLaserDraw);
					DelegateMethods.c_1 = new Color(255, 255, 255, 127) * 0.75f * proj.Opacity;
					Utils.DrawLaser(spriteBatch, value165, vector146 - screenPosition, vector146 + proj.velocity * num270 - screenPosition, vector147 / 2f, DelegateMethods.TurretLaserDraw);
				}
				return;
			}
			if (proj.type == 611)
			{
				_ = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Texture2D value166 = TextureAssets.Projectile[proj.type].Value;
				Color alpha19 = proj.GetAlpha(projectileColor);
				if (proj.velocity == Vector2.Zero)
				{
					return;
				}
				float num271 = ((Vector2)(ref proj.velocity)).Length() + 16f;
				bool flag33 = num271 < 100f;
				Vector2 vector148 = Vector2.Normalize(proj.velocity);
				Rectangle rectangle15 = default(Rectangle);
				((Rectangle)(ref rectangle15))._002Ector(0, 2, value166.Width, 40);
				Vector2 vector149 = default(Vector2);
				((Vector2)(ref vector149))._002Ector(0f, player[proj.owner].gfxOffY);
				float rotation26 = proj.rotation + (float)Math.PI;
				EntitySpriteDraw(value166, proj.Center.Floor() - screenPosition + vector149, rectangle15, alpha19, rotation26, rectangle15.Size() / 2f - Vector2.UnitY * 4f, proj.scale, (SpriteEffects)0);
				num271 -= 40f * proj.scale;
				Vector2 vector150 = proj.Center.Floor();
				vector150 += vector148 * proj.scale * 24f;
				((Rectangle)(ref rectangle15))._002Ector(0, 68, value166.Width, 18);
				if (num271 > 0f)
				{
					float num272 = 0f;
					while (num272 + 1f < num271)
					{
						if (num271 - num272 < (float)rectangle15.Height)
						{
							rectangle15.Height = (int)(num271 - num272);
						}
						EntitySpriteDraw(value166, vector150 - screenPosition + vector149, rectangle15, alpha19, rotation26, new Vector2((float)(rectangle15.Width / 2), 0f), proj.scale, (SpriteEffects)0);
						num272 += (float)rectangle15.Height * proj.scale;
						vector150 += vector148 * (float)rectangle15.Height * proj.scale;
					}
				}
				Vector2 vector151 = vector150;
				vector150 = proj.Center.Floor();
				vector150 += vector148 * proj.scale * 24f;
				((Rectangle)(ref rectangle15))._002Ector(0, 46, value166.Width, 18);
				int num273 = 18;
				if (flag33)
				{
					num273 = 9;
				}
				float num274 = num271;
				if (num271 > 0f)
				{
					float num275 = 0f;
					float num276 = num274 / (float)num273;
					num275 += num276 * 0.25f;
					vector150 += vector148 * num276 * 0.25f;
					for (int num277 = 0; num277 < num273; num277++)
					{
						float num278 = num276;
						if (num277 == 0)
						{
							num278 *= 0.75f;
						}
						EntitySpriteDraw(value166, vector150 - screenPosition + vector149, rectangle15, alpha19, rotation26, new Vector2((float)(rectangle15.Width / 2), 0f), proj.scale, (SpriteEffects)0);
						num275 += num278;
						vector150 += vector148 * num278;
					}
				}
				EntitySpriteDraw(sourceRectangle: (Rectangle?)new Rectangle(0, 90, value166.Width, 48), texture: value166, position: vector151 - screenPosition + vector149, color: alpha19, rotation: rotation26, origin: value166.Frame().Top(), scale: proj.scale, effects: (SpriteEffects)0, worthless: 0f);
				return;
			}
			if (proj.type == 537)
			{
				if (proj.velocity == Vector2.Zero)
				{
					return;
				}
				Texture2D value167 = TextureAssets.Projectile[proj.type].Value;
				float num279 = proj.localAI[1];
				float fromValue2 = Utils.Remap(proj.localAI[0], 20f, 30f, 0f, 1f) * Utils.Remap(proj.localAI[0], 60f, 90f, 1f, 0f);
				float toMax = 1.5f;
				float num280 = Utils.Remap(fromValue2, 0f, 1f, 0.25f, toMax);
				Color color148 = new Color(255, 255, 255, 0) * 0.9f;
				Rectangle rectangle16 = default(Rectangle);
				((Rectangle)(ref rectangle16))._002Ector(0, 0, value167.Width, 22);
				Vector2 vector152 = default(Vector2);
				((Vector2)(ref vector152))._002Ector(0f, npc[(int)proj.ai[1]].gfxOffY);
				EntitySpriteDraw(value167, proj.Center.Floor() - screenPosition + vector152, rectangle16, color148, proj.rotation, rectangle16.Size() / 2f, num280, (SpriteEffects)0);
				num279 -= 33f * proj.scale;
				Vector2 vector153 = proj.Center.Floor();
				vector153 += proj.velocity * num280 * 10.5f;
				((Rectangle)(ref rectangle16))._002Ector(0, 25, value167.Width, 28);
				if (num279 > 0f)
				{
					float num281 = 0f;
					while (num281 + 1f < num279)
					{
						if (num279 - num281 < (float)rectangle16.Height)
						{
							rectangle16.Height = (int)(num279 - num281);
						}
						EntitySpriteDraw(value167, vector153 - screenPosition + vector152, rectangle16, color148, proj.rotation, new Vector2((float)(rectangle16.Width / 2), 0f), num280, (SpriteEffects)0);
						num281 += (float)rectangle16.Height * num280;
						vector153 += proj.velocity * (float)rectangle16.Height * num280;
					}
				}
				EntitySpriteDraw(sourceRectangle: (Rectangle?)new Rectangle(0, 56, value167.Width, 22), texture: value167, position: vector153 - screenPosition + vector152, color: color148, rotation: proj.rotation, origin: value167.Frame().Top(), scale: num280, effects: (SpriteEffects)0, worthless: 0f);
				return;
			}
			if (proj.type == 456)
			{
				Texture2D value201 = TextureAssets.Projectile[proj.type].Value;
				Texture2D value168 = TextureAssets.Extra[23].Value;
				Texture2D value169 = TextureAssets.Extra[24].Value;
				Vector2 vector154 = default(Vector2);
				((Vector2)(ref vector154))._002Ector(0f, 216f);
				Vector2 value170 = npc[(int)Math.Abs(proj.ai[0]) - 1].Center - proj.Center + vector154;
				float num282 = ((Vector2)(ref value170)).Length();
				Vector2 vector155 = Vector2.Normalize(value170);
				Rectangle rectangle17 = value201.Frame();
				rectangle17.Height /= 4;
				rectangle17.Y += proj.frame * rectangle17.Height;
				val2 = proj.GetAlpha(Color.Lerp(projectileColor, Color.White, 0.3f));
				EntitySpriteDraw(value201, proj.Center - screenPosition, rectangle17, val2, proj.rotation, rectangle17.Size() / 2f, proj.scale, (SpriteEffects)0);
				num282 -= (float)(rectangle17.Height / 2 + value169.Height) * proj.scale;
				Vector2 center4 = proj.Center;
				center4 += vector155 * proj.scale * (float)rectangle17.Height / 2f;
				if (num282 > 0f)
				{
					float num283 = 0f;
					Rectangle rectangle18 = default(Rectangle);
					((Rectangle)(ref rectangle18))._002Ector(0, 0, value168.Width, value168.Height);
					while (num283 + 1f < num282)
					{
						if (num282 - num283 < (float)rectangle18.Height)
						{
							rectangle18.Height = (int)(num282 - num283);
						}
						Point point3 = center4.ToTileCoordinates();
						Color color149 = Lighting.GetColor(point3.X, point3.Y);
						color149 = Color.Lerp(color149, Color.White, 0.3f);
						EntitySpriteDraw(value168, center4 - screenPosition, rectangle18, proj.GetAlpha(color149), proj.rotation, rectangle18.Bottom(), proj.scale, (SpriteEffects)0);
						num283 += (float)rectangle18.Height * proj.scale;
						center4 += vector155 * (float)rectangle18.Height * proj.scale;
					}
				}
				Point point4 = center4.ToTileCoordinates();
				Color color150 = Lighting.GetColor(point4.X, point4.Y);
				color150 = Color.Lerp(color150, Color.White, 0.3f);
				Rectangle value171 = value169.Frame();
				if (num282 < 0f)
				{
					value171.Height += (int)num282;
				}
				EntitySpriteDraw(value169, center4 - screenPosition, value171, color150, proj.rotation, new Vector2((float)value171.Width / 2f, (float)value171.Height), proj.scale, (SpriteEffects)0);
				return;
			}
			if (proj.type == 443)
			{
				Texture2D value172 = TextureAssets.Projectile[proj.type].Value;
				float num284 = 30f;
				float num285 = num284 * 4f;
				float num286 = (float)Math.PI * 2f * proj.ai[0] / num284;
				float num287 = (float)Math.PI * 2f * proj.ai[0] / num285;
				Vector2 unitY2 = Vector2.UnitY;
				double radians16 = num286;
				val5 = default(Vector2);
				Vector2 vector156 = -unitY2.RotatedBy(radians16, val5);
				float scale18 = 0.75f + vector156.Y * 0.25f;
				float scale19 = 0.8f - vector156.Y * 0.2f;
				int num288 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y20 = num288 * proj.frame;
				Vector2 position18 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				EntitySpriteDraw(value172, position18, (Rectangle?)new Rectangle(0, y20, value172.Width, num288), proj.GetAlpha(projectileColor), proj.rotation + num287, new Vector2((float)value172.Width / 2f, (float)num288 / 2f), scale18, dir, 0f);
				EntitySpriteDraw(value172, position18, (Rectangle?)new Rectangle(0, y20, value172.Width, num288), proj.GetAlpha(projectileColor), proj.rotation + ((float)Math.PI * 2f - num287), new Vector2((float)value172.Width / 2f, (float)num288 / 2f), scale19, dir, 0f);
				return;
			}
			if (proj.type == 656 || proj.type == 657)
			{
				float num289 = 900f;
				if (proj.type == 657)
				{
					num289 = 300f;
				}
				float num290 = 15f;
				float num291 = 15f;
				float num292 = proj.ai[0];
				float num293 = MathHelper.Clamp(num292 / 30f, 0f, 1f);
				if (num292 > num289 - 60f)
				{
					num293 = MathHelper.Lerp(1f, 0f, (num292 - (num289 - 60f)) / 60f);
				}
				Point point5 = proj.Center.ToTileCoordinates();
				Collision.ExpandVertically(point5.X, point5.Y, out var topY, out var bottomY, (int)num290, (int)num291);
				topY++;
				bottomY--;
				float num294 = 0.2f;
				Vector2 value173 = new Vector2((float)point5.X, (float)topY) * 16f + new Vector2(8f);
				Vector2 value174 = new Vector2((float)point5.X, (float)bottomY) * 16f + new Vector2(8f);
				Vector2.Lerp(value173, value174, 0.5f);
				Vector2 vector157 = default(Vector2);
				((Vector2)(ref vector157))._002Ector(0f, value174.Y - value173.Y);
				vector157.X = vector157.Y * num294;
				new Vector2(value173.X - vector157.X / 2f, value173.Y);
				Texture2D value175 = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle19 = value175.Frame();
				Vector2 origin19 = rectangle19.Size() / 2f;
				float num295 = -(float)Math.PI / 50f * num292;
				Vector2 unitY3 = Vector2.UnitY;
				double radians17 = num292 * 0.1f;
				val5 = default(Vector2);
				Vector2 spinningpoint6 = unitY3.RotatedBy(radians17, val5);
				float num296 = 0f;
				float num297 = 5.1f;
				Color value176 = default(Color);
				((Color)(ref value176))._002Ector(212, 192, 100);
				Vector2 vector158 = default(Vector2);
				for (float num298 = (int)value174.Y; num298 > (float)(int)value173.Y; num298 -= num297)
				{
					num296 += num297;
					float num299 = num296 / vector157.Y;
					float num300 = num296 * ((float)Math.PI * 2f) / -20f;
					float num301 = num299 - 0.15f;
					double radians18 = num300;
					val5 = default(Vector2);
					Vector2 position19 = spinningpoint6.RotatedBy(radians18, val5);
					((Vector2)(ref vector158))._002Ector(0f, num299 + 1f);
					vector158.X = vector158.Y * num294;
					Color color151 = Color.Lerp(Color.Transparent, value176, num299 * 2f);
					if (num299 > 0.5f)
					{
						color151 = Color.Lerp(Color.Transparent, value176, 2f - num299 * 2f);
					}
					((Color)(ref color151)).A = (byte)((float)(int)((Color)(ref color151)).A * 0.5f);
					color151 *= num293;
					position19 *= vector158 * 100f;
					position19.Y = 0f;
					position19.X = 0f;
					position19 += new Vector2(value174.X, num298) - screenPosition;
					EntitySpriteDraw(value175, position19, rectangle19, color151, num295 + num300, origin19, 1f + num301, (SpriteEffects)0);
				}
				return;
			}
			if (proj.type == 704)
			{
				float num302 = 300f;
				float num303 = proj.ai[0];
				float num304 = MathHelper.Clamp(num303 / 30f, 0f, 1f);
				if (num303 > num302 - 60f)
				{
					num304 = MathHelper.Lerp(1f, 0f, (num303 - (num302 - 60f)) / 60f);
				}
				float num305 = 0.2f;
				Vector2 top2 = proj.Top;
				Vector2 bottom = proj.Bottom;
				Vector2.Lerp(top2, bottom, 0.5f);
				Vector2 vector159 = default(Vector2);
				((Vector2)(ref vector159))._002Ector(0f, bottom.Y - top2.Y);
				vector159.X = vector159.Y * num305;
				new Vector2(top2.X - vector159.X / 2f, top2.Y);
				Texture2D value177 = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle20 = value177.Frame();
				Vector2 origin20 = rectangle20.Size() / 2f;
				float num306 = -(float)Math.PI / 20f * num303 * (float)((!(proj.velocity.X > 0f)) ? 1 : (-1));
				SpriteEffects effects4 = (SpriteEffects)((proj.velocity.X > 0f) ? 2 : 0);
				bool flag34 = proj.velocity.X > 0f;
				Vector2 unitY4 = Vector2.UnitY;
				double radians19 = num303 * 0.14f;
				val5 = default(Vector2);
				Vector2 spinningpoint7 = unitY4.RotatedBy(radians19, val5);
				float num307 = 0f;
				float num308 = 5.01f + num303 / 150f * -0.9f;
				if (num308 < 4.11f)
				{
					num308 = 4.11f;
				}
				Color value178 = default(Color);
				((Color)(ref value178))._002Ector(160, 140, 100, 127);
				Color color152 = default(Color);
				((Color)(ref color152))._002Ector(140, 160, 255, 127);
				float num309 = num303 % 60f;
				color152 = ((!(num309 < 30f)) ? (color152 * Utils.GetLerpValue(38f, 30f, num309, clamped: true)) : (color152 * Utils.GetLerpValue(22f, 30f, num309, clamped: true)));
				bool flag35 = color152 != Color.Transparent;
				Vector2 vector160 = default(Vector2);
				for (float num310 = (int)bottom.Y; num310 > (float)(int)top2.Y; num310 -= num308)
				{
					num307 += num308;
					float num311 = num307 / vector159.Y;
					float num312 = num307 * ((float)Math.PI * 2f) / -20f;
					if (flag34)
					{
						num312 *= -1f;
					}
					float num313 = num311 - 0.35f;
					double radians20 = num312;
					val5 = default(Vector2);
					Vector2 position20 = spinningpoint7.RotatedBy(radians20, val5);
					((Vector2)(ref vector160))._002Ector(0f, num311 + 1f);
					vector160.X = vector160.Y * num305;
					Color color153 = Color.Lerp(Color.Transparent, value178, num311 * 2f);
					if (num311 > 0.5f)
					{
						color153 = Color.Lerp(Color.Transparent, value178, 2f - num311 * 2f);
					}
					((Color)(ref color153)).A = (byte)((float)(int)((Color)(ref color153)).A * 0.5f);
					color153 *= num304;
					position20 *= vector160 * 100f;
					position20.Y = 0f;
					position20.X = 0f;
					position20 += new Vector2(bottom.X, num310) - screenPosition;
					if (flag35)
					{
						Color color154 = Color.Lerp(Color.Transparent, color152, num311 * 2f);
						if (num311 > 0.5f)
						{
							color154 = Color.Lerp(Color.Transparent, color152, 2f - num311 * 2f);
						}
						((Color)(ref color154)).A = (byte)((float)(int)((Color)(ref color154)).A * 0.5f);
						color154 *= num304;
						EntitySpriteDraw(value177, position20, rectangle20, color154, num306 + num312, origin20, (1f + num313) * 0.8f, effects4);
					}
					EntitySpriteDraw(value177, position20, rectangle20, color153, num306 + num312, origin20, 1f + num313, effects4);
				}
				return;
			}
			if (proj.type == 444 || proj.type == 446 || proj.type == 490 || proj.type == 464 || proj.type == 502 || proj.type == 538 || proj.type == 540 || proj.type == 579 || proj.type == 578 || proj.type == 813 || proj.type == 583 || proj.type == 584 || proj.type == 616 || proj.type == 617 || proj.type == 618 || proj.type == 641 || (proj.type >= 646 && proj.type <= 649) || proj.type == 653 || proj.type == 186 || proj.type == 662 || proj.type == 685 || proj.type == 673 || proj.type == 676 || proj.type == 697 || proj.type == 699 || proj.type == 707 || proj.type == 708 || proj.type == 719 || proj.type == 761 || proj.type == 762 || proj.type == 763 || proj.type == 772 || proj.type == 802 || proj.type == 842 || proj.type == 865 || proj.type == 921 || proj.type == 926 || proj.type == 757 || proj.type == 25 || proj.type == 35 || proj.type == 63 || proj.type == 154 || proj.type == 247 || proj.type == 26 || proj.type == 928 || proj.type == 16 || proj.type == 34 || proj.type == 79 || proj.type == 936 || proj.type == 937 || proj.type == 938 || proj.type == 939 || proj.type == 940 || proj.type == 941 || proj.type == 942 || proj.type == 943 || proj.type == 944 || proj.type == 945 || proj.type == 971 || proj.type == 975 || proj.type == 1000 || proj.type == 1012 || proj.type == 1018 || proj.type == 1020 || (((proj.type >= 776 && proj.type <= 801) || (proj.type >= 803 && proj.type <= 810)) && proj.type != 779 && proj.type != 783 && proj.type != 862 && proj.type != 863))
			{
				Vector2 vector161 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Texture2D value179 = TextureAssets.Projectile[proj.type].Value;
				Color color155 = proj.GetAlpha(projectileColor);
				Vector2 origin21 = new Vector2((float)value179.Width, (float)value179.Height) / 2f;
				float num314 = proj.rotation;
				Vector2 vector162 = Vector2.One * proj.scale;
				Rectangle? sourceRectangle5 = null;
				if (proj.type == 446)
				{
					origin21.Y = 4f;
				}
				if (proj.type == 1020)
				{
					origin21.Y = 14f;
				}
				if (proj.type == 865)
				{
					vector161 += new Vector2(1f, -1f);
					dir = (SpriteEffects)(proj.DirectionFrom(player[proj.owner].Center).SafeNormalize(Vector2.Zero).X > 0f);
				}
				if (proj.type == 16)
				{
					float lerpValue7 = Utils.GetLerpValue(0f, 8f, ((Vector2)(ref proj.velocity)).Length(), clamped: true);
					num314 *= lerpValue7;
					vector162 *= 0.6f;
					vector162.Y *= MathHelper.Lerp(1f, 0.8f, lerpValue7);
					vector162.X *= MathHelper.Lerp(1f, 1.5f, lerpValue7);
				}
				if (proj.type == 34)
				{
					float lerpValue8 = Utils.GetLerpValue(0f, 8f, ((Vector2)(ref proj.velocity)).Length(), clamped: true);
					num314 *= lerpValue8;
					vector162.X *= MathHelper.Lerp(1f, 0.8f, lerpValue8);
					num314 += -(float)Math.PI / 2f * lerpValue8;
					sourceRectangle5 = value179.Frame(1, projFrames[proj.type], 0, proj.frame);
					origin21 = sourceRectangle5.Value.Size() / 2f;
					vector161 -= proj.velocity * 1f;
					vector161 = proj.oldPos[0] + proj.Size / 2f - screenPosition - proj.velocity / 2f;
				}
				if (proj.type == 79)
				{
					num314 = 0f;
					vector162 *= Utils.GetLerpValue(32f, 0f, proj.position.Distance(proj.oldPos[12]), clamped: true);
					((Color)(ref color155))._002Ector(255, 255, 255, 0);
				}
				if (proj.type == 761 || proj.type == 762)
				{
					dir = (SpriteEffects)((proj.spriteDirection <= 0) ? 2 : 0);
				}
				if (proj.type == 662 || proj.type == 685)
				{
					((Vector2)(ref origin21))._002Ector(6f, 6f);
				}
				if (proj.type == 699 || proj.type == 708)
				{
					Player player4 = player[proj.owner];
					((Vector2)(ref origin21))._002Ector((proj.spriteDirection == 1) ? ((float)value179.Width - -8f) : (-8f), (player4.gravDir == 1f) ? (-8f) : ((float)value179.Height - -8f));
					if (player4.gravDir == -1f)
					{
						dir = (SpriteEffects)(dir | 2);
						num314 += (float)Math.PI / 2f * (float)(-proj.spriteDirection);
					}
				}
				if (proj.type == 938 || proj.type == 939 || proj.type == 940 || proj.type == 941 || proj.type == 942 || proj.type == 943 || proj.type == 944 || proj.type == 945)
				{
					num314 -= (float)Math.PI / 4f * (float)proj.spriteDirection;
				}
				if (proj.type == 502)
				{
					LoadProjectile(250);
					Texture2D value180 = TextureAssets.Projectile[250].Value;
					Vector2 origin22 = default(Vector2);
					((Vector2)(ref origin22))._002Ector((float)(value180.Width / 2), 0f);
					Vector2 vector163 = new Vector2((float)proj.width, (float)proj.height) / 2f;
					Color white3 = Color.White;
					((Color)(ref white3)).A = 127;
					Vector2 scale20 = default(Vector2);
					for (int num315 = proj.oldPos.Length - 1; num315 > 0; num315--)
					{
						Vector2 vector164 = proj.oldPos[num315] + vector163;
						if (!(vector164 == vector163))
						{
							Vector2 vector165 = proj.oldPos[num315 - 1] + vector163;
							float rotation27 = (vector165 - vector164).ToRotation() - (float)Math.PI / 2f;
							((Vector2)(ref scale20))._002Ector(1f, Vector2.Distance(vector164, vector165) / (float)value180.Height);
							Color color156 = white3 * (1f - (float)num315 / (float)proj.oldPos.Length);
							EntitySpriteDraw(value180, vector164 - screenPosition, null, color156, rotation27, origin22, scale20, dir);
						}
					}
				}
				else if (proj.type == 540 && proj.velocity != Vector2.Zero)
				{
					float num316 = 0f;
					if (proj.ai[0] >= 10f)
					{
						num316 = (proj.ai[0] - 10f) / 10f;
					}
					if (proj.ai[0] >= 20f)
					{
						num316 = (20f - proj.ai[0]) / 10f;
					}
					if (num316 > 1f)
					{
						num316 = 1f;
					}
					if (num316 < 0f)
					{
						num316 = 0f;
					}
					if (num316 != 0f)
					{
						Texture2D value181 = TextureAssets.Extra[47].Value;
						Vector2 origin23 = default(Vector2);
						((Vector2)(ref origin23))._002Ector((float)(value181.Width / 2), 0f);
						Color color157 = color155 * num316 * 0.7f;
						Vector2 position21 = proj.Center - screenPosition;
						Vector2 vector166 = proj.velocity.ToRotation().ToRotationVector2() * (float)value179.Width / 3f;
						vector166 = Vector2.Zero;
						position21 += vector166;
						float rotation28 = proj.velocity.ToRotation() - (float)Math.PI / 2f;
						Vector2 scale21 = default(Vector2);
						((Vector2)(ref scale21))._002Ector(1f, (((Vector2)(ref proj.velocity)).Length() - ((Vector2)(ref vector166)).Length() * 2f) / (float)value181.Height);
						EntitySpriteDraw(value181, position21, null, color157, rotation28, origin23, scale21, (SpriteEffects)0);
					}
				}
				if (proj.type == 578 || proj.type == 579 || proj.type == 641 || proj.type == 813)
				{
					Color color158 = color155 * 0.8f;
					((Color)(ref color158)).A = (byte)(((Color)(ref color158)).A / 2);
					Color color159 = Color.Lerp(color155, Color.Black, 0.5f);
					((Color)(ref color159)).A = ((Color)(ref color155)).A;
					float num317 = 0.95f + (proj.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
					color159 *= num317;
					float scale22 = 0.6f + proj.scale * 0.6f * num317;
					Texture2D value182 = TextureAssets.Extra[50].Value;
					bool flag36 = true;
					if (proj.type == 813)
					{
						flag36 = false;
						value182 = TextureAssets.Extra[131].Value;
					}
					Vector2 origin24 = value182.Size() / 2f;
					EntitySpriteDraw(value182, vector161, null, color159, 0f - num314 + 0.35f, origin24, scale22, (SpriteEffects)(dir ^ 1));
					EntitySpriteDraw(value182, vector161, null, color155, 0f - num314, origin24, proj.scale, (SpriteEffects)(dir ^ 1));
					if (flag36)
					{
						EntitySpriteDraw(value179, vector161, null, color158, (0f - num314) * 0.7f, origin21, proj.scale, (SpriteEffects)(dir ^ 1));
					}
					EntitySpriteDraw(value182, vector161, null, color155 * 0.8f, num314 * 0.5f, origin24, proj.scale * 0.9f, dir);
					((Color)(ref color155)).A = 0;
					if (proj.type == 813)
					{
						num314 = 0f;
					}
				}
				if (proj.type == 617)
				{
					Color color160 = color155 * 0.8f;
					((Color)(ref color160)).A = (byte)(((Color)(ref color160)).A / 2);
					Color color161 = Color.Lerp(color155, Color.Black, 0.5f);
					((Color)(ref color161)).A = ((Color)(ref color155)).A;
					float num318 = 0.95f + (proj.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
					color161 *= num318;
					float scale10 = 0.6f + proj.scale * 0.6f * num318;
					EntitySpriteDraw(TextureAssets.Extra[50].Value, vector161, null, color161, 0f - proj.rotation + 0.35f, origin21, scale10, (SpriteEffects)(dir ^ 1));
					EntitySpriteDraw(TextureAssets.Extra[50].Value, vector161, null, color155, 0f - proj.rotation, origin21, proj.scale, (SpriteEffects)(dir ^ 1));
					EntitySpriteDraw(value179, vector161, null, color160, (0f - proj.rotation) * 0.7f, origin21, proj.scale, (SpriteEffects)(dir ^ 1));
					EntitySpriteDraw(TextureAssets.Extra[50].Value, vector161, null, color155 * 0.8f, proj.rotation * 0.5f, origin21, proj.scale * 0.9f, dir);
					((Color)(ref color155)).A = 0;
				}
				if (proj.type == 757 || proj.type == 25 || proj.type == 35 || proj.type == 63 || proj.type == 154 || proj.type == 247 || proj.type == 26)
				{
					if (proj.ai[0] == 1f)
					{
						Color color162 = color155;
						((Color)(ref color162)).A = 127;
						color162 *= 0.5f;
						int num319 = (int)proj.ai[1];
						if (num319 > 5)
						{
							num319 = 5;
						}
						for (float num320 = 1f; num320 >= 0f; num320 -= 0.125f)
						{
							float num321 = 1f - num320;
							Vector2 vector167 = proj.velocity * (float)(-num319) * num320;
							EntitySpriteDraw(value179, vector161 + vector167, null, color162 * num321, num314, origin21, proj.scale * 1.15f * MathHelper.Lerp(0.5f, 1f, num321), dir);
						}
					}
				}
				else if (proj.type == 79)
				{
					Vector2 scale11 = vector162 * 1.4f;
					Vector2 spinningpoint26 = new Vector2(2f * scale11.X + (float)Math.Cos(GlobalTimeWrappedHourly * ((float)Math.PI * 2f)) * 0.4f, 0f);
					double radians21 = num314 + GlobalTimeWrappedHourly * ((float)Math.PI * 2f);
					val5 = default(Vector2);
					Vector2 spinningpoint8 = Utils.RotatedBy(spinningpoint26, radians21, val5);
					for (float num322 = 0f; num322 < 1f; num322 += 1f / 6f)
					{
						Color color163 = hslToRgb(num322, 1f, 0.5f) * 0.3f;
						((Color)(ref color163)).A = 0;
						Texture2D texture6 = value179;
						Vector2 val20 = vector161;
						double radians22 = num322 * ((float)Math.PI * 2f);
						val5 = default(Vector2);
						EntitySpriteDraw(texture6, val20 + spinningpoint8.RotatedBy(radians22, val5), null, color163, num314, origin21, scale11, dir);
					}
					EntitySpriteDraw(value179, vector161, null, color155, num314, origin21, vector162, dir);
				}
				if ((0 | ((proj.type == 464 && proj.ai[1] != 1f) ? 1 : 0)) == 0)
				{
					EntitySpriteDraw(value179, vector161, sourceRectangle5, color155, num314, origin21, vector162, dir);
				}
				if (proj.type == 464 && proj.ai[1] != 1f)
				{
					value179 = TextureAssets.Extra[35].Value;
					Rectangle rectangle21 = value179.Frame(1, 3);
					origin21 = rectangle21.Size() / 2f;
					Vector2 spinningpoint27 = new Vector2(0f, -720f);
					double radians23 = proj.velocity.ToRotation();
					val5 = default(Vector2);
					Vector2 val21 = Utils.RotatedBy(spinningpoint27, radians23, val5);
					float num323 = proj.ai[0] % 45f / 45f;
					Vector2 spinningpoint9 = val21 * num323;
					for (int num324 = 0; num324 < 6; num324++)
					{
						float num325 = (float)num324 * ((float)Math.PI * 2f) / 6f;
						Vector2 center6 = proj.Center;
						double radians24 = num325;
						val5 = default(Vector2);
						Vector2 vector168 = center6 + spinningpoint9.RotatedBy(radians24, val5);
						EntitySpriteDraw(value179, vector168 - screenPosition, rectangle21, color155, num325 + proj.velocity.ToRotation() + (float)Math.PI, origin21, proj.scale, dir);
						rectangle21.Y += rectangle21.Height;
						if (rectangle21.Y >= value179.Height)
						{
							rectangle21.Y = 0;
						}
					}
				}
				else if (proj.type == 490)
				{
					EntitySpriteDraw(TextureAssets.Extra[34].Value, vector161, null, color155, 0f - proj.rotation, TextureAssets.Extra[34].Value.Size() / 2f, proj.scale, dir);
					EntitySpriteDraw(value179, vector161, null, color155, proj.rotation, origin21, proj.scale * 0.42f, dir);
					EntitySpriteDraw(TextureAssets.Extra[34].Value, vector161, null, color155, 0f - proj.rotation, TextureAssets.Extra[34].Value.Size() / 2f, proj.scale * 0.42f, dir);
				}
				else if (proj.type == 616)
				{
					value179 = TextureAssets.GlowMask[193].Value;
					EntitySpriteDraw(value179, vector161, null, new Color(127, 127, 127, 0), proj.rotation, origin21, proj.scale, dir);
				}
				else if (proj.type >= 646 && proj.type <= 649)
				{
					value179 = TextureAssets.GlowMask[203 + proj.type - 646].Value;
					EntitySpriteDraw(value179, vector161, null, new Color(255, 255, 255, 127), proj.rotation, origin21, proj.scale, dir);
				}
				else if (proj.type == 699)
				{
					value179 = TextureAssets.GlowMask[231].Value;
					EntitySpriteDraw(value179, vector161, null, new Color(255, 255, 255, 127), num314, origin21, proj.scale, dir);
				}
				else if (proj.type == 707 || proj.type == 708)
				{
					float num326 = 0.5f;
					value179 = TextureAssets.GlowMask[232].Value;
					Rectangle value183 = value179.Frame(1, 3, 0, (int)(proj.ai[0] % 9f) / 3);
					if (proj.type == 708)
					{
						value183 = value179.Frame(1, 3, 0, player[proj.owner].itemAnimation % 9 / 3);
						num326 = 0.75f;
					}
					Color color164 = new Color(255, 255, 255, 127) * num326;
					Vector2 spinningpoint28 = new Vector2(2f, 0f);
					double radians25 = proj.rotation;
					val5 = default(Vector2);
					Vector2 spinningpoint10 = Utils.RotatedBy(spinningpoint28, radians25, val5);
					for (float num327 = 0f; num327 < 4f; num327 += 1f)
					{
						Texture2D texture7 = value179;
						Vector2 val22 = vector161;
						double radians26 = num327 * ((float)Math.PI / 2f);
						val5 = default(Vector2);
						EntitySpriteDraw(texture7, val22 + spinningpoint10.RotatedBy(radians26, val5), value183, color164 * 0.5f, proj.rotation, origin21, proj.scale, dir);
					}
					EntitySpriteDraw(value179, vector161, value183, color164, proj.rotation, origin21, proj.scale, dir);
				}
				else if (proj.type == 719)
				{
					float num328 = 0.3f;
					Color color165 = new Color(80, 80, 80, 255) * num328;
					float num329 = proj.scale * 1.5f;
					Vector2 spinningpoint29 = new Vector2(2f * num329, 0f);
					double radians27 = proj.rotation;
					val5 = default(Vector2);
					Vector2 spinningpoint11 = Utils.RotatedBy(spinningpoint29, radians27, val5);
					for (float num330 = 0f; num330 < 4f; num330 += 1f)
					{
						EntitySpriteDraw(value179, vector161 + -proj.velocity * num330 * 1.25f, null, color165 * 0.7f, proj.rotation, origin21, num329, dir);
					}
					for (float num331 = 0f; num331 < 3f; num331 += 1f)
					{
						Texture2D texture8 = value179;
						Vector2 val23 = vector161;
						double radians28 = num331 * ((float)Math.PI / 2f);
						val5 = default(Vector2);
						EntitySpriteDraw(texture8, val23 + spinningpoint11.RotatedBy(radians28, val5), null, color165 * 0.9f, proj.rotation, origin21, num329, dir);
					}
					EntitySpriteDraw(value179, vector161, null, color155, proj.rotation, origin21, proj.scale, dir);
				}
				else if (proj.type == 16)
				{
					Color color166 = default(Color);
					((Color)(ref color166))._002Ector(80, 80, 80, 0);
					Vector2 scale12 = vector162 + vector162 * (float)Math.Cos(GlobalTimeWrappedHourly * ((float)Math.PI * 2f)) * 0.4f;
					Vector2 spinningpoint30 = new Vector2(2f * scale12.X, 0f);
					double radians29 = num314;
					val5 = default(Vector2);
					Vector2 spinningpoint2 = Utils.RotatedBy(spinningpoint30, radians29, val5);
					for (float num332 = 0f; num332 < 1f; num332 += 0.25f)
					{
						Texture2D texture9 = value179;
						Vector2 val24 = vector161;
						double radians30 = num332 * ((float)Math.PI * 2f);
						val5 = default(Vector2);
						EntitySpriteDraw(texture9, val24 + spinningpoint2.RotatedBy(radians30, val5), null, color166, num314, origin21, scale12, dir);
					}
					EntitySpriteDraw(value179, vector161, null, color155, num314, origin21, vector162, dir);
				}
				else if (proj.type == 34)
				{
					float lerpValue9 = Utils.GetLerpValue(0f, 6f, proj.localAI[0], clamped: true);
					Color color167 = new Color(255, 255, 255, 127) * 0.75f;
					Vector2 scale13 = default(Vector2);
					((Vector2)(ref scale13))._002Ector(lerpValue9);
					Vector2 spinningpoint31 = new Vector2(4f * scale13.X, 0f);
					double radians31 = num314;
					val5 = default(Vector2);
					Vector2 spinningpoint3 = Utils.RotatedBy(spinningpoint31, radians31, val5);
					for (float num333 = 0f; num333 < 1f; num333 += 0.25f)
					{
						Texture2D texture10 = value179;
						Vector2 val25 = vector161;
						double radians32 = num333 * ((float)Math.PI * 2f);
						val5 = default(Vector2);
						EntitySpriteDraw(texture10, val25 + spinningpoint3.RotatedBy(radians32, val5), sourceRectangle5, color167, num314, origin21, scale13, dir);
					}
				}
				return;
			}
			if (proj.type == 465 || proj.type == 467 || proj.type == 468 || proj.type == 500 || proj.type == 518 || proj.type == 535 || proj.type == 539 || proj.type == 575 || proj.type == 574 || proj.type == 589 || proj.type == 590 || proj.type == 593 || proj.type == 602 || proj.type == 596 || proj.type == 612 || proj.type == 953 || proj.type == 613 || proj.type == 614 || proj.type == 623 || proj.type == 625 || proj.type == 626 || proj.type == 627 || proj.type == 628 || proj.type == 634 || proj.type == 635 || proj.type == 643 || proj.type == 644 || proj.type == 645 || proj.type == 650 || proj.type == 652 || proj.type == 658 || proj.type == 659 || proj.type == 663 || proj.type == 665 || proj.type == 667 || proj.type == 677 || proj.type == 678 || proj.type == 679 || proj.type == 691 || proj.type == 692 || proj.type == 693 || proj.type == 702 || proj.type == 703 || proj.type == 701 || proj.type == 712 || proj.type == 715 || proj.type == 716 || proj.type == 717 || proj.type == 718 || proj.type == 758 || proj.type == 759 || proj.type == 764 || proj.type == 779 || proj.type == 783 || proj.type == 773 || proj.type == 820 || proj.type == 831 || proj.type == 970 || proj.type == 836 || proj.type == 851 || proj.type == 855 || proj.type == 856 || proj.type == 857 || proj.type == 861 || proj.type == 862 || proj.type == 863 || proj.type == 866 || proj.type == 870 || proj.type == 882 || proj.type == 885 || proj.type == 889 || proj.type == 895 || proj.type == 896 || proj.type == 898 || proj.type == 903 || proj.type == 904 || proj.type == 905 || proj.type == 906 || proj.type == 908 || proj.type == 910 || proj.type == 911 || proj.type == 951 || proj.type == 957 || proj.type == 962 || proj.type == 963 || proj.type == 967 || proj.type == 968 || proj.type == 978 || proj.type == 995 || proj.type == 886 || proj.type == 892)
			{
				Vector2 vector169 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Texture2D texture2D4 = TextureAssets.Projectile[proj.type].Value;
				Rectangle rectangle22 = texture2D4.Frame(1, projFrames[proj.type], 0, proj.frame);
				if (proj.type == 963)
				{
					rectangle22 = texture2D4.Frame(4, projFrames[proj.type], 0, proj.frame);
				}
				if (proj.type == 957)
				{
					int horizontalFrames = 3;
					int frameX = proj.frame / projFrames[proj.type];
					int frameY2 = proj.frame % projFrames[proj.type];
					rectangle22 = texture2D4.Frame(horizontalFrames, projFrames[proj.type], frameX, frameY2);
				}
				if (proj.type == 962)
				{
					int verticalFrames = 4;
					int frameY3 = proj.frame / projFrames[proj.type];
					int frameX2 = proj.frame % projFrames[proj.type];
					rectangle22 = texture2D4.Frame(projFrames[proj.type], verticalFrames, frameX2, frameY3);
				}
				Color color168 = proj.GetAlpha(projectileColor);
				if (proj.type == 623 && CurrentDrawnEntityShader != 0)
				{
					((Color)(ref color168)).A = 127;
				}
				if (proj.type == 995)
				{
					Projectile.AI_192_GetJuminoFall(proj, out var timeSinceFall, out var fall);
					vector169.Y -= 4f;
					vector169.Y += fall;
					float amount = Utils.Remap(timeSinceFall, 0f, 10f, 1f, 0f);
					color168 = Color.Lerp(color168, Color.White * proj.Opacity, amount);
				}
				Vector2 origin25 = rectangle22.Size() / 2f;
				if (proj.type == 703)
				{
					rectangle22.Height -= 2;
				}
				if (proj.type == 957)
				{
					float num334 = (float)(Math.Cos((float)(int)mouseTextColor / 255f * ((float)Math.PI * 2f) * 2f) * 4.0);
					num334 *= Math.Max(0f, Math.Min(1f, proj.localAI[0] / 100f));
					float num335 = 0f;
					if (proj.frame > projFrames[proj.type] * 2)
					{
						switch (proj.frame % projFrames[proj.type])
						{
						case 5:
						case 11:
							num335 = 2f;
							break;
						case 6:
						case 10:
							num335 = 6f;
							break;
						case 7:
							num335 = 8f;
							break;
						case 8:
						case 9:
							num335 = 10f;
							break;
						}
					}
					vector169.Y += -2f + num334 + num335;
				}
				if (proj.type == 895 || proj.type == 896 || proj.type == 898 || proj.type == 963)
				{
					float num336 = 2f;
					if (proj.isAPreviewDummy)
					{
						num336 = 0.5f;
					}
					vector169.Y += 0f - num336 + (float)(Math.Cos((float)(int)mouseTextColor / 255f * ((float)Math.PI * 2f) * 2f) * (double)(num336 * 2f));
				}
				if (proj.type == 963 && proj.localAI[1] >= 0f)
				{
					float num337 = proj.localAI[1];
					float num338 = 1f - num337;
					Color color169 = proj.GetAlpha(new Color(255, 220, 220)) * num338 * num338 * 0.8f;
					((Color)(ref color169)).A = 0;
					short num339 = 536;
					LoadProjectile(num339);
					Texture2D value184 = TextureAssets.Projectile[num339].Value;
					Vector2 origin26 = value184.Size() * new Vector2(0.5f, 1f);
					float num340 = 9f;
					float num341 = proj.velocity.ToRotation();
					if (((Vector2)(ref proj.velocity)).Length() < 0.1f)
					{
						num341 = ((proj.direction == 1) ? 0f : ((float)Math.PI));
					}
					Vector2 value185 = (num341 + (float)Math.PI / 2f).ToRotationVector2();
					for (int num342 = 0; (float)num342 < num340; num342++)
					{
						float num343 = ((num342 % 2 != 0) ? 1 : (-1));
						float num344 = ((float)num342 + 1f) * num343 * 0.2f * (0.2f + 2f * num337) + num341 + (float)Math.PI / 2f;
						float num345 = Utils.Remap(Vector2.Dot(num344.ToRotationVector2(), value185), -1f, 1f, 0f, 1f);
						float num346 = proj.scale * (0.15f + 0.6f * (float)Math.Sin(GlobalTimeWrappedHourly + (float)num342 * 0.739f)) * num345;
						Vector2 val26 = vector169;
						Vector2 spinningpoint32 = proj.rotation.ToRotationVector2();
						double radians33 = (float)Math.PI * 2f * (1f / num340) * (float)num342 + GlobalTimeWrappedHourly;
						val5 = default(Vector2);
						EntitySpriteDraw(value184, val26 + spinningpoint32.RotatedBy(radians33, val5) * 4f * proj.scale, null, color169 * num345, num344, origin26, new Vector2(num346 * 1.5f, num346), (SpriteEffects)0);
					}
				}
				if (proj.type == 962)
				{
					float num347 = Utils.Remap(proj.ai[0], 0f, 30f, 1f, 0f);
					Color color170 = proj.GetAlpha(Color.White) * num347 * num347 * 0.3f;
					((Color)(ref color170)).A = 0;
					for (int num348 = 0; num348 < 4; num348++)
					{
						Texture2D texture11 = texture2D4;
						Vector2 val27 = vector169;
						Vector2 spinningpoint33 = proj.rotation.ToRotationVector2();
						double radians34 = (float)Math.PI / 2f * (float)num348;
						val5 = default(Vector2);
						EntitySpriteDraw(texture11, val27 + spinningpoint33.RotatedBy(radians34, val5) * 2f * proj.scale, rectangle22, color170, proj.rotation, origin25, proj.scale, dir);
					}
				}
				if (proj.type == 855)
				{
					float y21 = (GlobalTimeWrappedHourly % 6f / 6f * ((float)Math.PI * 2f)).ToRotationVector2().Y;
					float num349 = y21 * 0.3f + 0.7f;
					Color color171 = color168 * num349 * 0.3f;
					for (int num350 = 0; num350 < 4; num350++)
					{
						float x13 = 0f;
						float y22 = 0f;
						switch (num350)
						{
						case 0:
							x13 = 4f;
							break;
						case 1:
							x13 = -4f;
							break;
						case 2:
							y22 = 4f;
							break;
						case 3:
							y22 = -4f;
							break;
						}
						Vector2 spinningpoint34 = new Vector2(x13, y22);
						double radians35 = proj.rotation;
						val5 = default(Vector2);
						Vector2 vector170 = Utils.RotatedBy(spinningpoint34, radians35, val5) * y21;
						spriteBatch.Draw(texture2D4, vector169 + vector170, (Rectangle?)rectangle22, color171, proj.rotation, rectangle22.Size() / 2f, 1f, (SpriteEffects)0, 0f);
					}
				}
				else if (proj.type == 908)
				{
					PlayerTitaniumStormBuffTextureContent playerTitaniumStormBuff = TextureAssets.RenderTargets.PlayerTitaniumStormBuff;
					vector169 += (GlobalTimeWrappedHourly * 8f + (float)proj.whoAmI).ToRotationVector2() * 4f;
					playerTitaniumStormBuff.Request();
					if (playerTitaniumStormBuff.IsReady)
					{
						texture2D4 = (Texture2D)(object)playerTitaniumStormBuff.GetTarget();
					}
					rectangle22 = texture2D4.Frame(projFrames[proj.type], 1, proj.frame);
					origin25 = rectangle22.Size() / 2f;
				}
				else if (proj.type == 764)
				{
					DrawProjWithStarryTrail(proj, projectileColor, dir);
				}
				else if (proj.type == 856)
				{
					DrawProjWithStarryTrail(proj, projectileColor, dir);
				}
				else if (proj.type == 857)
				{
					DrawProjWithStarryTrail(proj, projectileColor, dir);
					color168 = Color.White * proj.Opacity * 0.9f;
					((Color)(ref color168)).A = (byte)(((Color)(ref color168)).A / 2);
					rectangle22 = texture2D4.Frame(15, 1, proj.frame);
					origin25 = rectangle22.Size() / 2f;
					DrawPrettyStarSparkle(proj.Opacity, dir, vector169, color168, proj.GetFirstFractalColor(), proj.localAI[0], 15f, 30f, 30f, 45f, 0f, new Vector2(5f, 2f), Vector2.One);
				}
				else if (proj.type == 539)
				{
					if (proj.ai[0] >= 210f)
					{
						float num351 = proj.ai[0] - 210f;
						num351 /= 20f;
						if (num351 > 1f)
						{
							num351 = 1f;
						}
						EntitySpriteDraw(TextureAssets.Extra[46].Value, vector169, null, new Color(255, 255, 255, 128) * num351, proj.rotation, new Vector2(17f, 22f), proj.scale, dir);
					}
				}
				else if (proj.type == 773)
				{
					origin25.Y = rectangle22.Height - 12;
				}
				else if (proj.type == 866)
				{
					origin25.X += 14f;
				}
				else if (proj.type == 759)
				{
					origin25.Y = rectangle22.Height - 2;
					origin25.X += (((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1) ? 1 : (-1));
				}
				else if (proj.type == 758)
				{
					vector169.Y += proj.height / 2;
					origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
					origin25.Y -= 4f;
				}
				else if (proj.type == 951)
				{
					vector169.Y += proj.height / 2;
					vector169.Y -= (float)rectangle22.Height * 0.5f;
					vector169.Y += 4f;
					origin25 = rectangle22.Size() * new Vector2(0.5f, 0.5f);
				}
				else if (proj.type == 833)
				{
					if (proj.frame != 8)
					{
						vector169.Y += proj.height / 2;
						origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
						origin25.Y -= 4f;
						origin25.X -= 7 * ((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1).ToDirectionInt();
					}
				}
				else if (proj.type == 834 || proj.type == 835)
				{
					if (proj.frame != 10)
					{
						vector169.Y += proj.height / 2;
						origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
						origin25.Y -= 4f;
						origin25.X -= 2 * ((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1).ToDirectionInt();
					}
				}
				else if (proj.type == 715 || proj.type == 716 || proj.type == 717 || proj.type == 718)
				{
					rectangle22 = texture2D4.Frame(3);
					origin25 = rectangle22.Size() / 2f;
					int num352 = (int)proj.ai[0];
					Vector2 origin27 = default(Vector2);
					((Vector2)(ref origin27))._002Ector((float)(rectangle22.Width / 2), 0f);
					Vector2 vector171 = proj.Size / 2f;
					Color celeb2Color = proj.GetCeleb2Color();
					((Color)(ref celeb2Color)).A = 127;
					celeb2Color *= 0.8f;
					Rectangle value186 = rectangle22;
					value186.X += value186.Width * 2;
					Vector2 scale14 = default(Vector2);
					for (int num353 = proj.oldPos.Length - 1; num353 > 0; num353--)
					{
						Vector2 vector172 = proj.oldPos[num353] + vector171;
						if (!(vector172 == vector171))
						{
							Vector2 value187 = proj.oldPos[num353 - 1] + vector171;
							float num354 = proj.oldRot[num353];
							((Vector2)(ref scale14))._002Ector(Vector2.Distance(vector172, value187) / (float)rectangle22.Width, 1f);
							Color color172 = celeb2Color * (1f - (float)num353 / (float)proj.oldPos.Length);
							switch (num352)
							{
							case 2:
							{
								Vector2 vector173 = num354.ToRotationVector2();
								int num355 = num353 + proj.timeLeft;
								if (num355 < 0)
								{
									num355 += 20 * (num355 / -20) + 20;
								}
								num355 %= 20;
								float num356 = 0f;
								scale14 *= 0.6f;
								switch (num355)
								{
								case 1:
									num356 = 1f;
									break;
								case 2:
									num356 = 2f;
									break;
								case 3:
									num356 = 3f;
									break;
								case 4:
									num356 = 2f;
									break;
								case 5:
									num356 = 1f;
									break;
								case 7:
									num356 = -1f;
									break;
								case 8:
									num356 = -2f;
									break;
								case 9:
									num356 = -3f;
									break;
								case 10:
									num356 = -2f;
									break;
								case 11:
									num356 = -1f;
									break;
								}
								vector172 += vector173 * num356 * 4f;
								break;
							}
							case 5:
								scale14 *= 0.5f;
								break;
							}
							EntitySpriteDraw(texture2D4, vector172 - screenPosition, value186, color172, num354, origin27, scale14, dir);
						}
					}
				}
				else if (proj.type == 663 || proj.type == 665 || proj.type == 667)
				{
					vector169 = proj.Bottom + Vector2.UnitY * proj.gfxOffY - screenPosition;
					origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
					origin25.Y -= 2f;
					origin25.Y -= 2f;
				}
				else if (proj.type == 691 || proj.type == 692 || proj.type == 693)
				{
					vector169 = proj.Bottom + Vector2.UnitY * proj.gfxOffY - screenPosition;
					origin25 = rectangle22.Size() * new Vector2(0.5f, 1f);
					origin25.Y -= 2f;
					origin25.Y -= 2f;
				}
				else if (proj.type == 677 || proj.type == 678 || proj.type == 679)
				{
					if (proj.spriteDirection == -1)
					{
						dir = (SpriteEffects)(dir ^ 3);
					}
					Texture2D value188 = TextureAssets.Extra[83].Value;
					if (proj.type == 678)
					{
						value188 = TextureAssets.Extra[84].Value;
					}
					if (proj.type == 679)
					{
						value188 = TextureAssets.Extra[85].Value;
					}
					Vector2 position22 = proj.Bottom + Vector2.UnitY * proj.gfxOffY - screenPosition;
					Vector2 origin28 = value188.Size() * new Vector2(0.5f, 1f);
					origin28.Y -= 2f;
					EntitySpriteDraw(value188, position22, null, color168, 0f, origin28, 1f, (SpriteEffects)(dir & 1));
					origin25.X += ((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1).ToDirectionInt();
					vector169.Y += 1f;
					vector169.Y += 2f;
					if (proj.type == 678)
					{
						vector169.Y += -4f;
					}
					if (proj.type == 679)
					{
						vector169.Y -= 2f;
						if (!((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)2))
						{
							origin25.Y += 4f;
						}
						else
						{
							origin25.Y -= 4f;
						}
						origin25.X += ((Enum)dir).HasFlag((Enum)(object)(SpriteEffects)1).ToDirectionInt() * 4;
					}
				}
				else if (proj.type == 602)
				{
					origin25.X = rectangle22.Width - 6;
					origin25.Y -= 1f;
					rectangle22.Height -= 2;
				}
				else if (proj.type == 589)
				{
					rectangle22 = texture2D4.Frame(5, 1, (int)proj.ai[1]);
					origin25 = rectangle22.Size() / 2f;
				}
				else if (proj.type == 590)
				{
					if (proj.ai[2] == 1f && proj.frame < 3)
					{
						proj.frame = 3;
					}
					rectangle22 = texture2D4.Frame(6, 1, proj.frame);
					origin25 = rectangle22.Size() / 2f;
				}
				else if (proj.type == 836)
				{
					rectangle22 = texture2D4.Frame(4, 1, proj.frame);
					origin25 = rectangle22.Size() / 2f;
				}
				else if (proj.type == 650 || proj.type == 882 || proj.type == 888 || proj.type == 894 || proj.type == 895 || proj.type == 896 || proj.type == 898 || proj.type == 901 || proj.type == 957)
				{
					origin25.Y -= 4f;
				}
				else if (proj.type == 623)
				{
					if (!gamePaused && proj.ai[0] == 2f)
					{
						vector169 += rand.NextVector2Circular(2f, 2f);
					}
					if (CurrentDrawnEntityShader == 0)
					{
						((Color)(ref color168)).A = (byte)(((Color)(ref color168)).A / 2);
					}
				}
				else if (proj.type >= 625 && proj.type <= 628)
				{
					((Color)(ref color168)).A = (byte)(((Color)(ref color168)).A / 2);
				}
				else if (proj.type == 644)
				{
					Color color173 = hslToRgb(proj.ai[0], 1f, 0.5f).MultiplyRGBA(new Color(255, 255, 255, 0));
					EntitySpriteDraw(texture2D4, vector169, rectangle22, color173, proj.rotation, origin25, proj.scale * 2f, dir);
					EntitySpriteDraw(texture2D4, vector169, rectangle22, color173, 0f, origin25, proj.scale * 2f, dir);
					if (proj.ai[1] != -1f && proj.Opacity > 0.3f)
					{
						Vector2 vector174 = Main.projectile[(int)proj.ai[1]].Center - proj.Center;
						Vector2 vector175 = default(Vector2);
						((Vector2)(ref vector175))._002Ector(1f, ((Vector2)(ref vector174)).Length() / (float)texture2D4.Height);
						float rotation29 = vector174.ToRotation() + (float)Math.PI / 2f;
						float value189 = MathHelper.Distance(30f, proj.localAI[1]) / 20f;
						value189 = MathHelper.Clamp(value189, 0f, 1f);
						if (value189 > 0f)
						{
							EntitySpriteDraw(texture2D4, vector169 + vector174 / 2f, rectangle22, color173 * value189, rotation29, origin25, vector175, dir);
							EntitySpriteDraw(texture2D4, vector169 + vector174 / 2f, rectangle22, color168 * value189, rotation29, origin25, vector175 / 2f, dir);
						}
					}
				}
				else if (proj.type == 658)
				{
					Color color100 = hslToRgb(0.136f, 1f, 0.5f).MultiplyRGBA(new Color(255, 255, 255, 0));
					EntitySpriteDraw(texture2D4, vector169, rectangle22, color100, 0f, origin25, new Vector2(1f, 5f) * proj.scale * 2f, dir);
				}
				EntitySpriteDraw(texture2D4, vector169, rectangle22, color168, proj.rotation, origin25, proj.scale, dir);
				if (proj.type == 896)
				{
					Texture2D value190 = TextureAssets.GlowMask[278].Value;
					Color color101 = default(Color);
					((Color)(ref color101))._002Ector(150, 150, 150, 100);
					for (int num357 = 0; num357 < 2; num357++)
					{
						Vector2 position23 = vector169 + new Vector2((float)rand.Next(-10, 11) * 0.1f, (float)rand.Next(-10, 11) * 0.1f);
						EntitySpriteDraw(value190, position23, rectangle22, color101, proj.rotation, origin25, proj.scale, dir);
					}
					EntitySpriteDraw(value190, vector169, rectangle22, Color.White, proj.rotation, origin25, proj.scale, dir);
				}
				if (proj.type == 889)
				{
					Texture2D value191 = TextureAssets.GlowMask[276].Value;
					Color color102 = Color.White * (float)(int)mouseTextColor;
					EntitySpriteDraw(value191, vector169, rectangle22, color102, proj.rotation, origin25, proj.scale, dir);
					if (!proj.isAPreviewDummy)
					{
						for (int num358 = 0; num358 < 4; num358++)
						{
							int num359 = 28;
							int num360 = 7 + num358;
							float num361 = 100f;
							bool flag37 = num360 == 8;
							Rectangle value192 = texture2D4.Frame(1, projFrames[proj.type], 0, num360);
							Vector2 value193 = vector169;
							Vector2 vector176 = vector169;
							SpriteEffects effects5 = (SpriteEffects)0;
							float num362 = 0f;
							float num363 = GlobalTimeWrappedHourly * 2f;
							switch (num358)
							{
							case 1:
								num363 += (float)Math.PI / 2f;
								break;
							case 2:
								num363 += (float)Math.PI;
								break;
							case 3:
								num363 += 4.712389f;
								break;
							}
							num363 *= 3f;
							num362 = num363;
							vector176 += num363.ToRotationVector2() * (float)num359;
							if (proj.localAI[0] == num361)
							{
								EntitySpriteDraw(texture2D4, vector176, value192, color168, num362, origin25, proj.scale, effects5);
								if (flag37)
								{
									EntitySpriteDraw(value191, vector176, value192, color102, num362, origin25, proj.scale, effects5);
								}
								continue;
							}
							Vector2 vector177 = new Vector2((float)num359, -16f) + proj.velocity * 1.5f;
							float num364 = 4f;
							float num365 = -0.35f;
							switch (num358)
							{
							case 1:
								vector177.X *= -1f;
								effects5 = (SpriteEffects)1;
								num365 = 0.35f;
								num364 = -3f;
								break;
							case 2:
								vector177.Y = 16f;
								num365 = 0.35f;
								num364 = 2f;
								break;
							case 3:
								vector177.X *= -1f;
								vector177.Y = 16f;
								effects5 = (SpriteEffects)1;
								num365 = -0.35f;
								num364 = -1f;
								break;
							}
							vector177 += (GlobalTimeWrappedHourly * num364).ToRotationVector2() * 4f;
							value193 += vector177;
							float num366 = proj.localAI[0] / num361;
							value193 = Vector2.Lerp(value193, vector176, num366);
							num362 = ((num366 > 0.5f) ? num363 : num365);
							EntitySpriteDraw(texture2D4, value193, value192, color168, num362, origin25, proj.scale, effects5);
							if (flag37)
							{
								EntitySpriteDraw(value191, value193, value192, color102, num362, origin25, proj.scale, effects5);
							}
						}
					}
				}
				if (proj.type == 885 && !proj.isAPreviewDummy)
				{
					for (int num367 = 0; num367 < 2; num367++)
					{
						SpriteEffects effects6 = (SpriteEffects)0;
						int num368 = -30;
						if (num367 == 1)
						{
							num368 = 30;
							effects6 = (SpriteEffects)1;
						}
						int num369 = (int)proj.localAI[0];
						if (proj.frame == 6)
						{
							num369 = 0;
						}
						else if (num367 == 1)
						{
							num369 = 2 - num369;
						}
						num369 += 7;
						Rectangle value194 = texture2D4.Frame(1, projFrames[proj.type], 0, num369);
						Vector2 position24 = vector169 + new Vector2((float)num368, 0f);
						Vector2 vector178 = (GlobalTimeWrappedHourly * 2f).ToRotationVector2() * 4f;
						vector178 += proj.velocity * -1.5f;
						Vector2 vector179 = (GlobalTimeWrappedHourly * 1f).ToRotationVector2() * 3f;
						position24 = ((num367 != 1) ? (position24 - vector178) : (position24 + (vector178 + vector179)));
						EntitySpriteDraw(texture2D4, position24, value194, color168, 0f, origin25, proj.scale, effects6);
					}
				}
				if (proj.type == 535)
				{
					for (int num370 = 0; num370 < 1000; num370++)
					{
						if (Main.projectile[num370].active && Main.projectile[num370].owner == proj.owner && Main.projectile[num370].type == 536)
						{
							DrawProj(num370);
						}
					}
				}
				else if (proj.type == 715 || proj.type == 716 || proj.type == 717 || proj.type == 718)
				{
					rectangle22.X += rectangle22.Width;
					Color celeb2Color2 = proj.GetCeleb2Color();
					((Color)(ref celeb2Color2)).A = 80;
					EntitySpriteDraw(texture2D4, vector169, rectangle22, celeb2Color2, proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 702)
				{
					Texture2D value195 = TextureAssets.Flames[5].Value;
					Vector2 origin29 = value195.Size() / 2f;
					Vector2 spinningpoint35 = new Vector2((float)(5 * proj.spriteDirection), -10f);
					double radians36 = proj.rotation;
					val5 = default(Vector2);
					Vector2 vector180 = Utils.RotatedBy(spinningpoint35, radians36, val5);
					ulong seed2 = (ulong)(proj.localAI[0] / 4f);
					Color color103 = default(Color);
					for (int num371 = 0; num371 < 5; num371++)
					{
						((Color)(ref color103))._002Ector(100, 100, 100, 0);
						float x14 = (float)Utils.RandomInt(ref seed2, -10, 11) * 0.15f;
						float y23 = (float)Utils.RandomInt(ref seed2, -10, 1) * 0.35f;
						EntitySpriteDraw(value195, vector169 + vector180 + new Vector2(x14, y23), null, color103, proj.rotation, origin29, 1f, dir);
					}
				}
				else if (proj.type == 663 || proj.type == 665 || proj.type == 667)
				{
					Texture2D value100 = TextureAssets.GlowMask[221].Value;
					switch (proj.type)
					{
					case 665:
						value100 = TextureAssets.GlowMask[222].Value;
						break;
					case 667:
						value100 = TextureAssets.GlowMask[223].Value;
						break;
					}
					float num372 = (proj.localAI[0] / 100f * ((float)Math.PI * 2f)).ToRotationVector2().X * 1f + 1f;
					Color color104 = new Color(140, 100, 40, 0) * (num372 / 4f + 0.5f) * 1f;
					for (float num373 = 0f; num373 < 4f; num373 += 1f)
					{
						EntitySpriteDraw(value100, vector169 + (num373 * ((float)Math.PI / 2f)).ToRotationVector2() * num372, rectangle22, color104, proj.rotation, origin25, proj.scale, dir);
					}
				}
				else if (proj.type == 644)
				{
					EntitySpriteDraw(texture2D4, vector169, rectangle22, color168, 0f, origin25, proj.scale, dir);
				}
				else if (proj.type == 963)
				{
					int num452 = player[proj.owner].ownedProjectileCounts[970] - 1;
					int num374 = (num452 + 3) % 3;
					int num375 = num452 / 3;
					Vector3 vector181 = rgbToHsl(new Color(250, 150, 180));
					((Vector3)(ref vector181))._002Ector(0f, 1f, 0.6f);
					if (num375 == 1)
					{
						vector181 = rgbToHsl(Color.HotPink);
						vector181.Z += 0.1f;
						vector181.X -= 0.05f;
					}
					vector181.X = (vector181.X - (float)num375 * 0.13f + 1f) % 1f;
					Color oldColor = hslToRgb(vector181);
					Color color105 = Lighting.GetColor((int)(proj.Center.X / 16f), (int)(proj.Center.Y / 16f), oldColor);
					rectangle22.X += rectangle22.Width * (1 + num374);
					EntitySpriteDraw(texture2D4, vector169, rectangle22, color105, proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 773 && ((Vector2)(ref proj.velocity)).Length() == 0f)
				{
					Texture2D value202 = TextureAssets.GlowMask[266].Value;
					val2 = Color.White * (float)(int)mouseTextColor;
					EntitySpriteDraw(value202, vector169, rectangle22, val2, proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 658)
				{
					EntitySpriteDraw(texture2D4, vector169, rectangle22, color168, 0f, origin25, new Vector2(1f, 8f) * proj.scale, dir);
				}
				else if (proj.type == 602)
				{
					texture2D4 = TextureAssets.Extra[60].Value;
					Color color106 = color168;
					((Color)(ref color106)).A = 0;
					color106 *= 0.3f;
					origin25 = texture2D4.Size() / 2f;
					EntitySpriteDraw(texture2D4, vector169, null, color106, proj.rotation - (float)Math.PI / 2f, origin25, proj.scale, dir);
					texture2D4 = TextureAssets.Extra[59].Value;
					color106 = color168;
					((Color)(ref color106)).A = 0;
					color106 *= 0.13f;
					origin25 = texture2D4.Size() / 2f;
					EntitySpriteDraw(texture2D4, vector169, null, color106, proj.rotation - (float)Math.PI / 2f, origin25, proj.scale * 0.9f, dir);
				}
				else if (proj.type == 539)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[140].Value, vector169, rectangle22, new Color(255, 255, 255, 0), proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 613)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[189].Value, vector169, rectangle22, new Color(128 - proj.alpha / 2, 128 - proj.alpha / 2, 128 - proj.alpha / 2, 0), proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 614)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[190].Value, vector169, rectangle22, new Color(128 - proj.alpha / 2, 128 - proj.alpha / 2, 128 - proj.alpha / 2, 0), proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 574)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[148].Value, vector169, rectangle22, new Color(255, 255, 255, 0), proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 691 || proj.type == 692 || proj.type == 693)
				{
					Texture2D value101 = TextureAssets.GlowMask[235].Value;
					switch (proj.type)
					{
					case 692:
						value101 = TextureAssets.GlowMask[236].Value;
						break;
					case 693:
						value101 = TextureAssets.GlowMask[237].Value;
						break;
					}
					EntitySpriteDraw(value101, vector169, rectangle22, new Color(255, 255, 255, 127), proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 590)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[168].Value, vector169, rectangle22, new Color(127 - proj.alpha / 2, 127 - proj.alpha / 2, 127 - proj.alpha / 2, 0), proj.rotation, origin25, proj.scale, dir);
				}
				else if (proj.type == 623 || (proj.type >= 625 && proj.type <= 628))
				{
					if (player[proj.owner].ghostFade != 0f)
					{
						float num376 = player[proj.owner].ghostFade * 5f;
						for (float num377 = 0f; num377 < 4f; num377 += 1f)
						{
							Texture2D texture12 = texture2D4;
							Vector2 val28 = vector169;
							Vector2 unitY5 = Vector2.UnitY;
							double radians37 = num377 * ((float)Math.PI * 2f) / 4f;
							val5 = default(Vector2);
							EntitySpriteDraw(texture12, val28 + unitY5.RotatedBy(radians37, val5) * num376, rectangle22, color168 * 0.1f, proj.rotation, origin25, proj.scale, dir);
						}
					}
					if (proj.type == 623 && proj.ai[0] == 2f && proj.frame >= 14)
					{
						DrawProj_StardustGuardianPunching(proj);
					}
				}
				else if (proj.type == 643)
				{
					float num378 = (float)Math.Cos((float)Math.PI * 2f * (proj.localAI[0] / 60f)) + 3f + 3f;
					for (float num379 = 0f; num379 < 4f; num379 += 1f)
					{
						Texture2D texture13 = texture2D4;
						Vector2 val29 = vector169;
						Vector2 unitY6 = Vector2.UnitY;
						double radians38 = num379 * ((float)Math.PI / 2f);
						val5 = default(Vector2);
						EntitySpriteDraw(texture13, val29 + unitY6.RotatedBy(radians38, val5) * num378, rectangle22, color168 * 0.2f, proj.rotation, origin25, proj.scale, dir);
					}
				}
				else if (proj.type == 650)
				{
					int num453 = (int)(proj.localAI[0] / ((float)Math.PI * 2f));
					float f = proj.localAI[0] % ((float)Math.PI * 2f) - (float)Math.PI;
					float num380 = (float)Math.IEEERemainder(proj.localAI[1], 1.0);
					if (num380 < 0f)
					{
						num380 += 1f;
					}
					int num381 = (int)Math.Floor(proj.localAI[1]);
					float num382 = 1f;
					float num383 = 5f;
					num382 = 1f + (float)num381 * 0.02f;
					if ((float)num453 == 1f)
					{
						num383 = 7f;
					}
					Vector2 vector182 = f.ToRotationVector2() * num380 * num383 * proj.scale;
					texture2D4 = TextureAssets.Extra[66].Value;
					EntitySpriteDraw(texture2D4, vector169 + vector182, null, color168, proj.rotation, texture2D4.Size() / 2f, num382, (SpriteEffects)0);
				}
				return;
			}
			if (proj.type == 466)
			{
				Vector2 end = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Texture2D value102 = TextureAssets.Extra[33].Value;
				proj.GetAlpha(projectileColor);
				Vector2 vector183 = new Vector2(proj.scale) / 2f;
				for (int num384 = 0; num384 < 3; num384++)
				{
					switch (num384)
					{
					case 0:
						vector183 = new Vector2(proj.scale) * 0.6f;
						DelegateMethods.c_1 = new Color(115, 204, 219, 0) * 0.5f;
						break;
					case 1:
						vector183 = new Vector2(proj.scale) * 0.4f;
						DelegateMethods.c_1 = new Color(113, 251, 255, 0) * 0.5f;
						break;
					default:
						vector183 = new Vector2(proj.scale) * 0.2f;
						DelegateMethods.c_1 = new Color(255, 255, 255, 0) * 0.5f;
						break;
					}
					DelegateMethods.f_1 = 1f;
					for (int num385 = proj.oldPos.Length - 1; num385 > 0; num385--)
					{
						if (!(proj.oldPos[num385] == Vector2.Zero))
						{
							Vector2 start = proj.oldPos[num385] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
							Vector2 end2 = proj.oldPos[num385 - 1] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
							Utils.DrawLaser(spriteBatch, value102, start, end2, vector183, DelegateMethods.LightningLaserDraw);
						}
					}
					if (proj.oldPos[0] != Vector2.Zero)
					{
						DelegateMethods.f_1 = 1f;
						Vector2 start2 = proj.oldPos[0] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
						Utils.DrawLaser(spriteBatch, value102, start2, end, vector183, DelegateMethods.LightningLaserDraw);
					}
				}
				return;
			}
			if (proj.type == 580)
			{
				Vector2 end3 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Texture2D value103 = TextureAssets.Extra[33].Value;
				proj.GetAlpha(projectileColor);
				Vector2 vector184 = new Vector2(proj.scale) / 2f;
				for (int num386 = 0; num386 < 2; num386++)
				{
					float num387 = ((proj.localAI[1] == -1f || proj.localAI[1] == 1f) ? (-0.2f) : 0f);
					if (num386 == 0)
					{
						vector184 = new Vector2(proj.scale) * (0.5f + num387);
						DelegateMethods.c_1 = new Color(115, 244, 219, 0) * 0.5f;
					}
					else
					{
						vector184 = new Vector2(proj.scale) * (0.3f + num387);
						DelegateMethods.c_1 = new Color(255, 255, 255, 0) * 0.5f;
					}
					DelegateMethods.f_1 = 1f;
					for (int num388 = proj.oldPos.Length - 1; num388 > 0; num388--)
					{
						if (!(proj.oldPos[num388] == Vector2.Zero))
						{
							Vector2 start3 = proj.oldPos[num388] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
							Vector2 end4 = proj.oldPos[num388 - 1] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
							Utils.DrawLaser(spriteBatch, value103, start3, end4, vector184, DelegateMethods.LightningLaserDraw);
						}
					}
					if (proj.oldPos[0] != Vector2.Zero)
					{
						DelegateMethods.f_1 = 1f;
						Vector2 start4 = proj.oldPos[0] + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
						Utils.DrawLaser(spriteBatch, value103, start4, end3, vector184, DelegateMethods.LightningLaserDraw);
					}
				}
				return;
			}
			if (proj.type == 445)
			{
				if (player[proj.owner].gravDir == -1f)
				{
					dir = (SpriteEffects)(dir | 2);
				}
				Vector2 vector185 = proj.position + new Vector2((float)proj.width, (float)proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Texture2D value104 = TextureAssets.Projectile[proj.type].Value;
				Color alpha2 = proj.GetAlpha(projectileColor);
				Vector2 vector186 = player[proj.owner].RotatedRelativePoint(mountedCenter) + Vector2.UnitY * player[proj.owner].gfxOffY;
				Vector2 vector100 = vector185 + screenPosition - vector186;
				Vector2 vector101 = Vector2.Normalize(vector100);
				float num389 = ((Vector2)(ref vector100)).Length();
				float num390 = vector100.ToRotation() + (float)Math.PI / 2f;
				float num391 = -5f;
				float num392 = num391 + 30f;
				new Vector2(2f, num389 - num392);
				Vector2 vector102 = Vector2.Lerp(vector185 + screenPosition, vector186 + vector101 * num392, 0.5f);
				Vector2 unitY7 = Vector2.UnitY;
				double radians39 = proj.localAI[0] / 60f * (float)Math.PI;
				val5 = default(Vector2);
				Vector2 vector103 = -unitY7.RotatedBy(radians39, val5);
				Vector2[] obj = new Vector2[4]
				{
					vector103,
					default(Vector2),
					default(Vector2),
					default(Vector2)
				};
				val5 = default(Vector2);
				obj[1] = vector103.RotatedBy(1.5707963705062866, val5);
				val5 = default(Vector2);
				obj[2] = vector103.RotatedBy(3.1415927410125732, val5);
				val5 = default(Vector2);
				obj[3] = vector103.RotatedBy(4.71238899230957, val5);
				Vector2[] array7 = (Vector2[])(object)obj;
				if (num389 > num392)
				{
					for (int num393 = 0; num393 < 2; num393++)
					{
						Color white4 = Color.White;
						if (num393 % 2 == 0)
						{
							white4 = Color.LimeGreen;
							((Color)(ref white4)).A = 128;
							white4 *= 0.5f;
						}
						else
						{
							white4 = Color.CornflowerBlue;
							((Color)(ref white4)).A = 128;
							white4 *= 0.5f;
						}
						Vector2 spinningpoint36 = new Vector2(array7[num393].X, 0f);
						double radians40 = num390;
						val5 = default(Vector2);
						Vector2 vector104 = Utils.RotatedBy(spinningpoint36, radians40, val5) * 4f;
						EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector102 - screenPosition + vector104, (Rectangle?)new Rectangle(0, 0, 1, 1), white4, num390, Vector2.One / 2f, new Vector2(2f, num389 - num392), dir, 0f);
					}
				}
				int type2 = player[proj.owner].inventory[player[proj.owner].selectedItem].type;
				instance.LoadItem(type2);
				Texture2D value105 = TextureAssets.Item[type2].Value;
				Color color107 = Lighting.GetColor((int)vector186.X / 16, (int)vector186.Y / 16);
				EntitySpriteDraw(value105, vector186 - screenPosition + vector101 * num391, null, color107, proj.rotation + (float)Math.PI / 2f + (((int)dir == 0 || (int)dir == 2) ? ((float)Math.PI) : 0f), new Vector2((float)(((int)dir != 0 && (int)dir != 2) ? value105.Width : 0), (float)value105.Height / 2f) + Vector2.UnitY * 1f, player[proj.owner].inventory[player[proj.owner].selectedItem].scale, dir);
				EntitySpriteDraw(TextureAssets.GlowMask[39].Value, vector186 - screenPosition + vector101 * num391, null, new Color(255, 255, 255, 0), proj.rotation + (float)Math.PI / 2f + (((int)dir == 0 || (int)dir == 2) ? ((float)Math.PI) : 0f), new Vector2((float)(((int)dir != 0 && (int)dir != 2) ? value105.Width : 0), (float)value105.Height / 2f) + Vector2.UnitY * 1f, player[proj.owner].inventory[player[proj.owner].selectedItem].scale, dir);
				if (num389 > num392)
				{
					for (int num394 = 2; num394 < 4; num394++)
					{
						Color white5 = Color.White;
						if (num394 % 2 == 0)
						{
							white5 = Color.LimeGreen;
							((Color)(ref white5)).A = 128;
							white5 *= 0.5f;
						}
						else
						{
							white5 = Color.CornflowerBlue;
							((Color)(ref white5)).A = 128;
							white5 *= 0.5f;
						}
						Vector2 spinningpoint37 = new Vector2(array7[num394].X, 0f);
						double radians41 = num390;
						val5 = default(Vector2);
						Vector2 vector105 = Utils.RotatedBy(spinningpoint37, radians41, val5) * 4f;
						EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector102 - screenPosition + vector105, (Rectangle?)new Rectangle(0, 0, 1, 1), white5, num390, Vector2.One / 2f, new Vector2(2f, num389 - num392), dir, 0f);
					}
				}
				float num395 = proj.localAI[0] / 60f;
				if (num395 > 0.5f)
				{
					num395 = 1f - num395;
				}
				EntitySpriteDraw(value104, vector185, null, alpha2 * num395 * 2f, proj.rotation, new Vector2((float)value104.Width, (float)value104.Height) / 2f, proj.scale, dir);
				EntitySpriteDraw(TextureAssets.GlowMask[40].Value, vector185, null, alpha2 * (0.5f - num395) * 2f, proj.rotation, new Vector2((float)value104.Width, (float)value104.Height) / 2f, proj.scale, dir);
				return;
			}
			if ((proj.type >= 393 && proj.type <= 395) || proj.type == 398 || proj.type == 423 || proj.type == 450)
			{
				Texture2D value106 = TextureAssets.Projectile[proj.type].Value;
				int num396 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y24 = num396 * proj.frame;
				EntitySpriteDraw(value106, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY - 2f), (Rectangle?)new Rectangle(0, y24, value106.Width, num396), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value106.Width / 2f, (float)num396 / 2f), proj.scale, dir, 0f);
				if (proj.type == 398)
				{
					value106 = TextureAssets.MiniMinotaur.Value;
					EntitySpriteDraw(value106, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY - 2f), (Rectangle?)new Rectangle(0, y24, value106.Width, num396), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2((float)value106.Width / 2f, (float)num396 / 2f), proj.scale, dir, 0f);
				}
				if (proj.type == 423)
				{
					value106 = TextureAssets.GlowMask[0].Value;
					EntitySpriteDraw(value106, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY - 2f), (Rectangle?)new Rectangle(0, y24, value106.Width, num396), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2((float)value106.Width / 2f, (float)num396 / 2f), proj.scale, dir, 0f);
				}
				return;
			}
			if (proj.type == 385)
			{
				Texture2D value107 = TextureAssets.Projectile[proj.type].Value;
				int num397 = value107.Height / projFrames[proj.type];
				int y25 = num397 * proj.frame;
				int num398 = 8;
				int num399 = 2;
				float value108 = 0.4f;
				for (int num400 = 1; num400 < num398; num400 += num399)
				{
					_ = ref proj.oldPos[num400];
					Color newColor3 = projectileColor;
					newColor3 = proj.GetAlpha(newColor3);
					newColor3 *= (float)(num398 - num400) / 15f;
					Color alpha3 = proj.GetAlpha(projectileColor);
					_ = proj.oldPos[num400] - screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY);
					EntitySpriteDraw(value107, proj.oldPos[num400] + new Vector2((float)proj.width, (float)proj.height) / 2f - screenPosition + new Vector2(0f, proj.gfxOffY), (Rectangle?)new Rectangle(0, y25, value107.Width, num397), Color.Lerp(alpha3, newColor3, 0.3f), proj.rotation, new Vector2((float)value107.Width / 2f, (float)num397 / 2f), MathHelper.Lerp(proj.scale, value108, (float)num400 / 15f), dir, 0f);
				}
				EntitySpriteDraw(value107, proj.Center - screenPosition + new Vector2(0f, proj.gfxOffY), (Rectangle?)new Rectangle(0, y25, value107.Width, num397), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value107.Width / 2f, (float)num397 / 2f), proj.scale, dir, 0f);
				return;
			}
			if (proj.type == 388)
			{
				Texture2D value110 = TextureAssets.Projectile[proj.type].Value;
				int num401 = value110.Height / projFrames[proj.type];
				int y26 = num401 * proj.frame;
				int num402 = 0;
				int num403 = 0;
				if (proj.ai[0] == 2f)
				{
					num402 = 10;
					num403 = 1;
				}
				else
				{
					num402 = 3;
					num403 = 1;
				}
				for (int num404 = 1; num404 < num402; num404 += num403)
				{
					_ = ref proj.oldPos[num404];
					Color newColor4 = projectileColor;
					newColor4 = proj.GetAlpha(newColor4);
					newColor4 *= (float)(num402 - num404) / 15f;
					Vector2 position25 = proj.oldPos[num404] - screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY);
					EntitySpriteDraw(value110, position25, (Rectangle?)new Rectangle(0, y26, value110.Width, num401), newColor4, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				EntitySpriteDraw(value110, proj.position - screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y26, value110.Width, num401), proj.GetAlpha(projectileColor), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				return;
			}
			if (projFrames[proj.type] > 1)
			{
				int num405 = TextureAssets.Projectile[proj.type].Height() / projFrames[proj.type];
				int y27 = num405 * proj.frame;
				if (proj.type == 111)
				{
					int r = ((Color)(ref player[proj.owner].shirtColor)).R;
					int g = ((Color)(ref player[proj.owner].shirtColor)).G;
					int b = ((Color)(ref player[proj.owner].shirtColor)).B;
					((Color)(ref val2))._002Ector((int)(byte)r, (int)(byte)g, (int)(byte)b);
					projectileColor = Lighting.GetColor((int)((double)proj.position.X + (double)proj.width * 0.5) / 16, (int)(((double)proj.position.Y + (double)proj.height * 0.5) / 16.0), val2);
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405), proj.GetAlpha(projectileColor), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
					return;
				}
				Color alpha4 = proj.GetAlpha(projectileColor);
				if (proj.type == 211 && CurrentDrawnEntityShader != 0)
				{
					((Color)(ref alpha4)).A = 127;
				}
				if (proj.type == 344)
				{
					float num406 = MathHelper.Min(60f, proj.ai[0]) / 2f;
					for (float num407 = 0.9f; num407 > 0f; num407 -= 0.25f)
					{
						Vector2 vector106 = num407 * (proj.velocity * 0.33f) * num406;
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) - vector106, (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), alpha4 * (1f - num407) * 0.75f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale * (0.4f + (1f - num407) * 0.6f), dir, 0f);
					}
				}
				if (proj.type == 920 || proj.type == 921)
				{
					for (float num408 = 0.25f; num408 < 1f; num408 += 0.5f)
					{
						Vector2 vector107 = num408 * proj.velocity * 4f;
						EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) - vector107, (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), alpha4 * (1f - num408) * 0.75f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
					}
				}
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), alpha4, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				if (proj.type == 966)
				{
					Vector2 vector108 = default(Vector2);
					((Vector2)(ref vector108))._002Ector(0f, -30f);
					vector108.Y += -1f + (float)(Math.Cos((float)(int)mouseTextColor / 255f * ((float)Math.PI * 2f) * 2f) * 2.0);
					Vector2 vector109 = default(Vector2);
					((Vector2)(ref vector109))._002Ector(-1f, -1f);
					float num409 = 3f;
					Vector2 vector110 = proj.Center + vector108;
					Vector2 vector111 = proj.Center;
					int num410 = (int)proj.ai[1];
					if (num410 >= 0)
					{
						if (npc[num410].active)
						{
							vector111 = npc[num410].Center;
						}
						else
						{
							num410 = -1;
						}
					}
					if (num410 <= -1)
					{
						Player player5 = player[proj.owner];
						vector111 = ((!player5.dead) ? player5.Center : (vector110 + new Vector2(2f, 0f)));
					}
					vector109 += (vector111 - vector110).SafeNormalize(Vector2.Zero) * num409;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) + vector108, (Rectangle?)new Rectangle(0, num405, TextureAssets.Projectile[proj.type].Width(), num405 - 1), alpha4, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) + vector108 + vector109, (Rectangle?)new Rectangle(0, num405 * 2, TextureAssets.Projectile[proj.type].Width(), num405 - 1), alpha4, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				ModProjectile modProjectile2 = proj.ModProjectile;
				if (modProjectile2 != null && ModContent.RequestIfExists(modProjectile2.GlowTexture, out Asset<Texture2D> glowTexture2, AssetRequestMode.ImmediateLoad))
				{
					EntitySpriteDraw(glowTexture2.Value, proj.position + screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				if (proj.type == 335)
				{
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), new Color(100, 100, 100, 0), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				if (proj.type == 897 || proj.type == 899)
				{
					int num411 = 279;
					if (proj.type == 899)
					{
						num411 = 281;
					}
					EntitySpriteDraw(TextureAssets.GlowMask[num411].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), Color.White, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				if (proj.type == 891)
				{
					float num412 = Utils.WrappedLerp(0.6f, 1f, (float)((int)timeForVisualEffects % 100) / 100f);
					((Color)(ref val2))._002Ector(num412, num412, num412, 150f);
					EntitySpriteDraw(TextureAssets.GlowMask[277].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), val2, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				if (proj.type == 595)
				{
					Player player6 = player[proj.owner];
					if (player6.active && player6.body == 208)
					{
						for (float num413 = 0f; num413 <= 1f; num413 += 0.2f)
						{
							Color underShirtColor = player6.underShirtColor;
							((Color)(ref underShirtColor)).A = (byte)(120f * (1f - num413 * 0.5f));
							EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), underShirtColor, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale * MathHelper.Lerp(0.8f, 1.3f, num413), dir, 0f);
						}
					}
				}
				if (proj.type == 387)
				{
					EntitySpriteDraw(TextureAssets.EyeLaserSmall.Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405), new Color(255, 255, 255, 0), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				if (proj.type != 525 && proj.type != 960)
				{
					return;
				}
				int num414 = TryInteractingWithMoneyTrough(proj);
				if (num414 == 0)
				{
					return;
				}
				int num415 = (((Color)(ref projectileColor)).R + ((Color)(ref projectileColor)).G + ((Color)(ref projectileColor)).B) / 3;
				if (num415 > 10)
				{
					int num416 = 94;
					if (proj.type == 960)
					{
						num416 = 244;
					}
					Color selectionGlowColor = Colors.GetSelectionGlowColor(num414 == 2, num415);
					EntitySpriteDraw(TextureAssets.Extra[num416].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, y27, TextureAssets.Projectile[proj.type].Width(), num405 - 1), selectionGlowColor, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), 1f, dir, 0f);
				}
				return;
			}
			if (proj.type == 383 || proj.type == 399)
			{
				Texture2D value111 = TextureAssets.Projectile[proj.type].Value;
				EntitySpriteDraw(value111, proj.Center - screenPosition, null, proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)value111.Width, (float)value111.Height) / 2f, proj.scale, dir);
				return;
			}
			if (proj.type == 157 || proj.type == 378)
			{
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + (float)(proj.width / 2), proj.position.Y - screenPosition.Y + (float)(proj.height / 2)), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(TextureAssets.Projectile[proj.type].Width() / 2), (float)(TextureAssets.Projectile[proj.type].Height() / 2)), proj.scale, dir, 0f);
				return;
			}
			if (proj.type == 306)
			{
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + (float)(proj.width / 2), proj.position.Y - screenPosition.Y + (float)(proj.height / 2)), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(TextureAssets.Projectile[proj.type].Width() / 2), (float)(TextureAssets.Projectile[proj.type].Height() / 2)), proj.scale, dir, 0f);
				return;
			}
			if (proj.type == 256)
			{
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + (float)(proj.width / 2), proj.position.Y - screenPosition.Y + (float)(proj.height / 2)), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)(TextureAssets.Projectile[proj.type].Width() / 2), (float)(TextureAssets.Projectile[proj.type].Height() / 2)), proj.scale, dir, 0f);
				return;
			}
			if (proj.aiStyle == 27)
			{
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + (float)(proj.width / 2), proj.position.Y - screenPosition.Y + (float)(proj.height / 2)), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)TextureAssets.Projectile[proj.type].Width(), 0f), proj.scale, dir, 0f);
				return;
			}
			if (proj.aiStyle == 19)
			{
				DrawProj_Spear(proj, ref projectileColor, ref dir);
				return;
			}
			if (proj.type == 451)
			{
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, proj.Center - screenPosition, null, proj.GetAlpha(projectileColor), proj.rotation, new Vector2((float)TextureAssets.Projectile[proj.type].Width(), 0f), proj.scale, dir);
				return;
			}
			if (proj.type == 434)
			{
				Vector2 vector112 = default(Vector2);
				((Vector2)(ref vector112))._002Ector(proj.ai[0], proj.ai[1]);
				Vector2 v = proj.position - vector112;
				float num417 = (float)Math.Sqrt(v.X * v.X + v.Y * v.Y);
				new Vector2(4f, num417);
				float rotation30 = v.ToRotation() + (float)Math.PI / 2f;
				Vector2 vector113 = Vector2.Lerp(proj.position, vector112, 0.5f);
				Color red = Color.Red;
				((Color)(ref red)).A = 0;
				Color white6 = Color.White;
				red *= proj.localAI[0];
				white6 *= proj.localAI[0];
				float num418 = (float)Math.Sqrt(proj.damage / 50);
				EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector113 - screenPosition, (Rectangle?)new Rectangle(0, 0, 1, 1), red, rotation30, Vector2.One / 2f, new Vector2(2f * num418, num417 + 8f), dir, 0f);
				EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector113 - screenPosition, (Rectangle?)new Rectangle(0, 0, 1, 1), red, rotation30, Vector2.One / 2f, new Vector2(4f * num418, num417), dir, 0f);
				EntitySpriteDraw(TextureAssets.MagicPixel.Value, vector113 - screenPosition, (Rectangle?)new Rectangle(0, 0, 1, 1), white6, rotation30, Vector2.One / 2f, new Vector2(2f * num418, num417), dir, 0f);
				return;
			}
			if (proj.type == 94 && proj.ai[1] > 6f)
			{
				for (int num419 = 0; num419 < 10; num419++)
				{
					Color alpha5 = proj.GetAlpha(projectileColor);
					float num420 = (float)(9 - num419) / 9f;
					((Color)(ref alpha5)).R = (byte)((float)(int)((Color)(ref alpha5)).R * num420);
					((Color)(ref alpha5)).G = (byte)((float)(int)((Color)(ref alpha5)).G * num420);
					((Color)(ref alpha5)).B = (byte)((float)(int)((Color)(ref alpha5)).B * num420);
					((Color)(ref alpha5)).A = (byte)((float)(int)((Color)(ref alpha5)).A * num420);
					float num421 = (float)(9 - num419) / 9f;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.oldPos[num419].X - screenPosition.X + num138 + (float)num137, proj.oldPos[num419].Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), alpha5, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), num421 * proj.scale, dir, 0f);
				}
			}
			if (proj.type == 301)
			{
				for (int num422 = 0; num422 < 10; num422++)
				{
					Color alpha6 = proj.GetAlpha(projectileColor);
					float num423 = (float)(9 - num422) / 9f;
					((Color)(ref alpha6)).R = (byte)((float)(int)((Color)(ref alpha6)).R * num423);
					((Color)(ref alpha6)).G = (byte)((float)(int)((Color)(ref alpha6)).G * num423);
					((Color)(ref alpha6)).B = (byte)((float)(int)((Color)(ref alpha6)).B * num423);
					((Color)(ref alpha6)).A = (byte)((float)(int)((Color)(ref alpha6)).A * num423);
					float num424 = (float)(9 - num422) / 9f;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.oldPos[num422].X - screenPosition.X + num138 + (float)num137, proj.oldPos[num422].Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), alpha6, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), num424 * proj.scale, dir, 0f);
				}
			}
			if (proj.type == 323 && proj.alpha == 0)
			{
				for (int num425 = 1; num425 < 8; num425++)
				{
					float num426 = proj.velocity.X * (float)num425;
					float num427 = proj.velocity.Y * (float)num425;
					Color alpha7 = proj.GetAlpha(projectileColor);
					float num428 = 0f;
					if (num425 == 1)
					{
						num428 = 0.7f;
					}
					if (num425 == 2)
					{
						num428 = 0.6f;
					}
					if (num425 == 3)
					{
						num428 = 0.5f;
					}
					if (num425 == 4)
					{
						num428 = 0.4f;
					}
					if (num425 == 5)
					{
						num428 = 0.3f;
					}
					if (num425 == 6)
					{
						num428 = 0.2f;
					}
					if (num425 == 7)
					{
						num428 = 0.1f;
					}
					((Color)(ref alpha7)).R = (byte)((float)(int)((Color)(ref alpha7)).R * num428);
					((Color)(ref alpha7)).G = (byte)((float)(int)((Color)(ref alpha7)).G * num428);
					((Color)(ref alpha7)).B = (byte)((float)(int)((Color)(ref alpha7)).B * num428);
					((Color)(ref alpha7)).A = (byte)((float)(int)((Color)(ref alpha7)).A * num428);
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137 - num426, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num427), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), alpha7, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), num428 + 0.2f, dir, 0f);
				}
			}
			if (proj.type == 117 && proj.ai[0] > 3f)
			{
				for (int num429 = 1; num429 < 5; num429++)
				{
					float num430 = proj.velocity.X * (float)num429;
					float num431 = proj.velocity.Y * (float)num429;
					Color alpha8 = proj.GetAlpha(projectileColor);
					float num432 = 0f;
					if (num429 == 1)
					{
						num432 = 0.4f;
					}
					if (num429 == 2)
					{
						num432 = 0.3f;
					}
					if (num429 == 3)
					{
						num432 = 0.2f;
					}
					if (num429 == 4)
					{
						num432 = 0.1f;
					}
					((Color)(ref alpha8)).R = (byte)((float)(int)((Color)(ref alpha8)).R * num432);
					((Color)(ref alpha8)).G = (byte)((float)(int)((Color)(ref alpha8)).G * num432);
					((Color)(ref alpha8)).B = (byte)((float)(int)((Color)(ref alpha8)).B * num432);
					((Color)(ref alpha8)).A = (byte)((float)(int)((Color)(ref alpha8)).A * num432);
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137 - num430, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num431), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), alpha8, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
			}
			if (proj.bobber)
			{
				if (proj.ai[1] > 0f && proj.ai[0] == 1f)
				{
					int num433 = (int)proj.ai[1];
					Vector2 center5 = proj.Center;
					float rotation31 = proj.rotation;
					Vector2 vector114 = center5;
					float num434 = polePosX - vector114.X;
					float num435 = polePosY - vector114.Y;
					rotation31 = (float)Math.Atan2(num435, num434);
					if (proj.velocity.X > 0f)
					{
						dir = (SpriteEffects)0;
						rotation31 = (float)Math.Atan2(num435, num434);
						rotation31 += 0.785f;
						if (proj.ai[1] == 2342f)
						{
							rotation31 -= 0.785f;
						}
					}
					else
					{
						dir = (SpriteEffects)1;
						rotation31 = (float)Math.Atan2(0f - num435, 0f - num434);
						rotation31 -= 0.785f;
						if (proj.ai[1] == 2342f)
						{
							rotation31 += 0.785f;
						}
					}
					instance.LoadItem(num433);
					Texture2D value112 = TextureAssets.Item[num433].Value;
					Rectangle value113 = value112.Frame();
					if (ItemID.Sets.IsFood[num433] && itemAnimations[num433] != null)
					{
						value113 = itemAnimations[num433].GetFrame(value112, 0);
					}
					EntitySpriteDraw(value112, new Vector2(center5.X - screenPosition.X, center5.Y - screenPosition.Y), value113, projectileColor, rotation31, new Vector2((float)(value113.Width / 2), (float)(value113.Height / 2)), proj.scale, dir);
				}
				else if (proj.ai[0] <= 1f)
				{
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), proj.GetAlpha(projectileColor), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
					if (proj.glowMask != -1)
					{
						Texture2D value114 = TextureAssets.GlowMask[proj.glowMask].Value;
						Color newColor5 = Color.White;
						if (proj.type == 993)
						{
							((Color)(ref newColor5))._002Ector(DiscoR, DiscoG, DiscoB);
						}
						EntitySpriteDraw(value114, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, value114.Width, value114.Height), proj.GetAlpha(newColor5), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
					}
				}
			}
			else
			{
				if (proj.ownerHitCheck && player[proj.owner].gravDir == -1f)
				{
					if (player[proj.owner].direction == 1)
					{
						dir = (SpriteEffects)1;
					}
					else if (player[proj.owner].direction == -1)
					{
						dir = (SpriteEffects)0;
					}
				}
				EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), proj.GetAlpha(projectileColor), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				if (proj.glowMask != -1)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[proj.glowMask].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				if (proj.type == 473)
				{
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), new Color(255, 255, 0, 0), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				if (proj.type >= 511 && proj.type <= 513)
				{
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), proj.GetAlpha(projectileColor) * 0.25f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale * (1f + proj.Opacity * 1.75f), dir, 0f);
				}
				ModProjectile modProjectile = proj.ModProjectile;
				if (modProjectile != null && ModContent.RequestIfExists(modProjectile.GlowTexture, out Asset<Texture2D> glowTexture, AssetRequestMode.AsyncLoad))
				{
					EntitySpriteDraw(glowTexture.Value, proj.position - screenPosition + new Vector2(num138 + (float)num137, (float)(proj.height / 2) + proj.gfxOffY), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), new Color(250, 250, 250, proj.alpha), proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
				if (proj.type == 312)
				{
					ulong seed3 = TileFrameSeed;
					Vector2 vector115 = default(Vector2);
					for (int num436 = 0; num436 < 4; num436++)
					{
						((Vector2)(ref vector115))._002Ector((float)Utils.RandomInt(ref seed3, -2, 3), (float)Utils.RandomInt(ref seed3, -2, 3));
						EntitySpriteDraw(TextureAssets.GlowMask[proj.glowMask].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY) + vector115, (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), new Color(255, 255, 255, 255) * 0.2f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
					}
				}
			}
			if (proj.type == 106)
			{
				Texture2D value203 = TextureAssets.LightDisc.Value;
				Vector2 position26 = default(Vector2);
				((Vector2)(ref position26))._002Ector(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2));
				EntitySpriteDraw(sourceRectangle: value203.Frame(), texture: value203, position: position26, color: new Color(200, 200, 200, 0), rotation: proj.rotation, origin: new Vector2(num138, (float)(proj.height / 2 + num136)), scale: proj.scale, effects: dir);
			}
			if (proj.type >= 326 && proj.type <= 328)
			{
				ulong seed4 = TileFrameSeed;
				Vector2 vector116 = default(Vector2);
				for (int num437 = 0; num437 < 4; num437++)
				{
					((Vector2)(ref vector116))._002Ector((float)Utils.RandomInt(ref seed4, -2, 3), (float)Utils.RandomInt(ref seed4, -2, 3));
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137, proj.position.Y - screenPosition.Y + (float)(proj.height / 2)) + vector116 - proj.velocity * 0.25f * (float)num437, (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), new Color(120, 120, 120, 60) * 1f, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale - (float)num437 * 0.2f, dir, 0f);
				}
			}
			if (proj.type == 554 || proj.type == 603)
			{
				for (int num438 = 1; num438 < 5; num438++)
				{
					float num439 = proj.velocity.X * (float)num438 * 0.5f;
					float num440 = proj.velocity.Y * (float)num438 * 0.5f;
					Color alpha9 = proj.GetAlpha(projectileColor);
					float num441 = 0f;
					if (num438 == 1)
					{
						num441 = 0.4f;
					}
					if (num438 == 2)
					{
						num441 = 0.3f;
					}
					if (num438 == 3)
					{
						num441 = 0.2f;
					}
					if (num438 == 4)
					{
						num441 = 0.1f;
					}
					((Color)(ref alpha9)).R = (byte)((float)(int)((Color)(ref alpha9)).R * num441);
					((Color)(ref alpha9)).G = (byte)((float)(int)((Color)(ref alpha9)).G * num441);
					((Color)(ref alpha9)).B = (byte)((float)(int)((Color)(ref alpha9)).B * num441);
					((Color)(ref alpha9)).A = (byte)((float)(int)((Color)(ref alpha9)).A * num441);
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137 - num439, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num440), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), alpha9, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
			}
			else if (proj.type == 604)
			{
				int num442 = (int)proj.ai[1] + 1;
				if (num442 > 7)
				{
					num442 = 7;
				}
				for (int num443 = 1; num443 < num442; num443++)
				{
					float num444 = proj.velocity.X * (float)num443 * 1.5f;
					float num445 = proj.velocity.Y * (float)num443 * 1.5f;
					Color alpha10 = proj.GetAlpha(projectileColor);
					float num446 = 0f;
					if (num443 == 1)
					{
						num446 = 0.4f;
					}
					if (num443 == 2)
					{
						num446 = 0.3f;
					}
					if (num443 == 3)
					{
						num446 = 0.2f;
					}
					if (num443 == 4)
					{
						num446 = 0.1f;
					}
					num446 = 0.4f - (float)num443 * 0.06f;
					num446 *= 1f - (float)proj.alpha / 255f;
					((Color)(ref alpha10)).R = (byte)((float)(int)((Color)(ref alpha10)).R * num446);
					((Color)(ref alpha10)).G = (byte)((float)(int)((Color)(ref alpha10)).G * num446);
					((Color)(ref alpha10)).B = (byte)((float)(int)((Color)(ref alpha10)).B * num446);
					((Color)(ref alpha10)).A = (byte)((float)(int)((Color)(ref alpha10)).A * num446 / 2f);
					float scale15 = proj.scale;
					scale15 -= (float)num443 * 0.1f;
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137 - num444, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num445), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), alpha10, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), scale15, dir, 0f);
				}
			}
			else
			{
				if (proj.type != 553)
				{
					return;
				}
				for (int num447 = 1; num447 < 5; num447++)
				{
					float num448 = proj.velocity.X * (float)num447 * 0.4f;
					float num449 = proj.velocity.Y * (float)num447 * 0.4f;
					Color alpha11 = proj.GetAlpha(projectileColor);
					float num450 = 0f;
					if (num447 == 1)
					{
						num450 = 0.4f;
					}
					if (num447 == 2)
					{
						num450 = 0.3f;
					}
					if (num447 == 3)
					{
						num450 = 0.2f;
					}
					if (num447 == 4)
					{
						num450 = 0.1f;
					}
					((Color)(ref alpha11)).R = (byte)((float)(int)((Color)(ref alpha11)).R * num450);
					((Color)(ref alpha11)).G = (byte)((float)(int)((Color)(ref alpha11)).G * num450);
					((Color)(ref alpha11)).B = (byte)((float)(int)((Color)(ref alpha11)).B * num450);
					((Color)(ref alpha11)).A = (byte)((float)(int)((Color)(ref alpha11)).A * num450);
					EntitySpriteDraw(TextureAssets.Projectile[proj.type].Value, new Vector2(proj.position.X - screenPosition.X + num138 + (float)num137 - num448, proj.position.Y - screenPosition.Y + (float)(proj.height / 2) + proj.gfxOffY - num449), (Rectangle?)new Rectangle(0, 0, TextureAssets.Projectile[proj.type].Width(), TextureAssets.Projectile[proj.type].Height()), alpha11, proj.rotation, new Vector2(num138, (float)(proj.height / 2 + num136)), proj.scale, dir, 0f);
				}
			}
		}
	}

	private static void DrawProj_Flamethrower(Projectile proj)
	{
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_0306: Unknown result type (might be due to invalid IL or missing references)
		//IL_0308: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03da: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0402: Unknown result type (might be due to invalid IL or missing references)
		//IL_0409: Unknown result type (might be due to invalid IL or missing references)
		//IL_040d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0417: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_0426: Unknown result type (might be due to invalid IL or missing references)
		//IL_0430: Unknown result type (might be due to invalid IL or missing references)
		//IL_0444: Unknown result type (might be due to invalid IL or missing references)
		//IL_0446: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_0458: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0464: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0483: Unknown result type (might be due to invalid IL or missing references)
		//IL_0486: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_049a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0503: Unknown result type (might be due to invalid IL or missing references)
		//IL_0510: Unknown result type (might be due to invalid IL or missing references)
		//IL_0512: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		bool flag = proj.ai[0] == 1f;
		float num = 60f;
		float num10 = 12f;
		float fromMax = num + num10;
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		_ = Color.Transparent;
		Color color = default(Color);
		((Color)(ref color))._002Ector(255, 80, 20, 200);
		Color color2 = default(Color);
		((Color)(ref color2))._002Ector(255, 255, 20, 70);
		Color color3 = Color.Lerp(new Color(255, 80, 20, 100), color2, 0.25f);
		Color color4 = default(Color);
		((Color)(ref color4))._002Ector(80, 80, 80, 100);
		float num11 = 0.35f;
		float num12 = 0.7f;
		float num13 = 0.85f;
		float num14 = ((proj.localAI[0] > num - 10f) ? 0.175f : 0.2f);
		if (flag)
		{
			((Color)(ref color))._002Ector(95, 120, 255, 200);
			((Color)(ref color2))._002Ector(50, 180, 255, 70);
			((Color)(ref color3))._002Ector(95, 160, 255, 100);
			((Color)(ref color4))._002Ector(33, 125, 202, 100);
		}
		int verticalFrames = 7;
		float num15 = Utils.Remap(proj.localAI[0], num, fromMax, 1f, 0f);
		float num2 = Math.Min(proj.localAI[0], 20f);
		float num3 = Utils.Remap(proj.localAI[0], 0f, fromMax, 0f, 1f);
		float num4 = Utils.Remap(num3, 0.2f, 0.5f, 0.25f, 1f);
		Rectangle rectangle = ((!flag) ? value.Frame(1, verticalFrames, 0, 3) : value.Frame(1, verticalFrames, 0, (int)Utils.Remap(num3, 0.5f, 1f, 3f, 5f)));
		if (!(num3 < 1f))
		{
			return;
		}
		for (int i = 0; i < 2; i++)
		{
			for (float num5 = 1f; num5 >= 0f; num5 -= num14)
			{
				Color val = ((num3 < 0.1f) ? Color.Lerp(Color.Transparent, color, Utils.GetLerpValue(0f, 0.1f, num3, clamped: true)) : ((num3 < 0.2f) ? Color.Lerp(color, color2, Utils.GetLerpValue(0.1f, 0.2f, num3, clamped: true)) : ((num3 < num11) ? color2 : ((num3 < num12) ? Color.Lerp(color2, color3, Utils.GetLerpValue(num11, num12, num3, clamped: true)) : ((num3 < num13) ? Color.Lerp(color3, color4, Utils.GetLerpValue(num12, num13, num3, clamped: true)) : ((!(num3 < 1f)) ? Color.Transparent : Color.Lerp(color4, Color.Transparent, Utils.GetLerpValue(num13, 1f, num3, clamped: true))))))));
				float num6 = (1f - num5) * Utils.Remap(num3, 0f, 0.2f, 0f, 1f);
				Vector2 vector = proj.Center - screenPosition + proj.velocity * (0f - num2) * num5;
				Color color5 = val * num6;
				Color color6 = color5;
				if (!flag)
				{
					((Color)(ref color6)).G = (byte)(((Color)(ref color6)).G / 2);
					((Color)(ref color6)).B = (byte)(((Color)(ref color6)).B / 2);
					((Color)(ref color6)).A = (byte)Math.Min((float)(int)((Color)(ref color5)).A + 80f * num6, 255f);
					Utils.Remap(proj.localAI[0], 20f, fromMax, 0f, 1f);
				}
				float num7 = 1f / num14 * (num5 + 1f);
				float num8 = proj.rotation + num5 * ((float)Math.PI / 2f) + GlobalTimeWrappedHourly * num7 * 2f;
				float num9 = proj.rotation - num5 * ((float)Math.PI / 2f) - GlobalTimeWrappedHourly * num7 * 2f;
				switch (i)
				{
				case 0:
					EntitySpriteDraw(value, vector + proj.velocity * (0f - num2) * num14 * 0.5f, rectangle, color6 * num15 * 0.25f, num8 + (float)Math.PI / 4f, rectangle.Size() / 2f, num4, (SpriteEffects)0);
					EntitySpriteDraw(value, vector, rectangle, color6 * num15, num9, rectangle.Size() / 2f, num4, (SpriteEffects)0);
					break;
				case 1:
					if (!flag)
					{
						EntitySpriteDraw(value, vector + proj.velocity * (0f - num2) * num14 * 0.2f, rectangle, color5 * num15 * 0.25f, num8 + (float)Math.PI / 2f, rectangle.Size() / 2f, num4 * 0.75f, (SpriteEffects)0);
						EntitySpriteDraw(value, vector, rectangle, color5 * num15, num9 + (float)Math.PI / 2f, rectangle.Size() / 2f, num4 * 0.75f, (SpriteEffects)0);
					}
					break;
				}
			}
		}
	}

	private static void DrawProj_Spear(Projectile proj, ref Color projectileColor, ref SpriteEffects dir)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_055a: Unknown result type (might be due to invalid IL or missing references)
		//IL_055c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0561: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_056e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0573: Unknown result type (might be due to invalid IL or missing references)
		//IL_0579: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0244: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_032e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0335: Unknown result type (might be due to invalid IL or missing references)
		//IL_033a: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_034e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_0389: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_039a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_0413: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_042b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0458: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_047e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0488: Unknown result type (might be due to invalid IL or missing references)
		//IL_048d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0491: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0504: Unknown result type (might be due to invalid IL or missing references)
		dir = (SpriteEffects)0;
		float num = (float)Math.Atan2(proj.velocity.Y, proj.velocity.X) + 2.355f;
		Asset<Texture2D> asset = TextureAssets.Projectile[proj.type];
		Player player = Main.player[proj.owner];
		Rectangle value = asset.Frame();
		Rectangle rect = proj.getRect();
		Vector2 vector = Vector2.Zero;
		if (player.direction > 0)
		{
			dir = (SpriteEffects)1;
			vector.X = asset.Width();
			num -= (float)Math.PI / 2f;
		}
		if (player.gravDir == -1f)
		{
			if (proj.direction == 1)
			{
				dir = (SpriteEffects)3;
				((Vector2)(ref vector))._002Ector((float)asset.Width(), (float)asset.Height());
				num -= (float)Math.PI / 2f;
			}
			else if (proj.direction == -1)
			{
				dir = (SpriteEffects)2;
				((Vector2)(ref vector))._002Ector(0f, (float)asset.Height());
				num += (float)Math.PI / 2f;
			}
		}
		Vector2.Lerp(vector, ((Rectangle)(ref value)).Center.ToVector2(), 0.25f);
		float num2 = 0f;
		Vector2 vector2 = proj.Center + new Vector2(0f, proj.gfxOffY);
		if (proj.AI_019_Spears_GetExtensionHitbox(out var extensionBox))
		{
			Vector2 value2 = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false);
			Vector2 val = extensionBox.Size();
			float num8 = ((Vector2)(ref val)).Length();
			val = proj.Hitbox.Size();
			float num3 = num8 / ((Vector2)(ref val)).Length();
			_ = new Color(255, 255, 255, 0) * 1f;
			float num4 = Utils.Remap(player.itemAnimation, player.itemAnimationMax, (float)player.itemAnimationMax / 3f, 0f, 1f);
			float num5 = Utils.Remap(num4, 0f, 0.3f, 0f, 1f) * Utils.Remap(num4, 0.3f, 1f, 1f, 0f);
			num5 = 1f - (1f - num5) * (1f - num5);
			Vector2 vector3 = ((Rectangle)(ref extensionBox)).Center.ToVector2() + new Vector2(0f, proj.gfxOffY);
			Vector2.Lerp(value2, vector3, 1.1f);
			Texture2D value3 = TextureAssets.Extra[98].Value;
			Vector2 origin = value3.Size() / 2f;
			Color color = new Color(255, 255, 255, 0) * 0.5f;
			switch (proj.type)
			{
			case 105:
				((Color)(ref color))._002Ector(255, 220, 80, 0);
				break;
			case 46:
				((Color)(ref color))._002Ector(180, 80, 255, 0);
				break;
			case 342:
				((Color)(ref color))._002Ector(80, 140, 255, 0);
				break;
			case 153:
				((Color)(ref color))._002Ector(255, 50, 30, 15);
				break;
			}
			float num6 = num - (float)Math.PI / 4f * (float)proj.spriteDirection;
			if (player.gravDir < 0f)
			{
				num6 -= (float)Math.PI / 2f * (float)proj.spriteDirection;
			}
			EntitySpriteDraw(value3, Vector2.Lerp(vector3, vector2, 0.5f) - screenPosition, null, color * num5, num6, origin, new Vector2(num5 * num3, num3) * proj.scale * num3, dir);
			EntitySpriteDraw(value3, Vector2.Lerp(vector3, vector2, 1f) - screenPosition, null, color * num5, num6, origin, new Vector2(num5 * num3, num3 * 1.5f) * proj.scale * num3, dir);
			EntitySpriteDraw(value3, Vector2.Lerp(value2, vector2, num4 * 1.5f - 0.5f) - screenPosition + new Vector2(0f, 2f), null, color * num5, num6, origin, new Vector2(num5 * num3 * 1f * num5, num3 * 2f * num5) * proj.scale * num3, dir);
			for (float num7 = 0.4f; num7 <= 1f; num7 += 0.1f)
			{
				Vector2 vector4 = Vector2.Lerp(value2, vector3, num7 + 0.2f);
				EntitySpriteDraw(value3, vector4 - screenPosition + new Vector2(0f, 2f), null, color * num5 * 0.75f * num7, num6, origin, new Vector2(num5 * num3 * 1f * num5, num3 * 2f * num5) * proj.scale * num3, dir);
			}
			((Rectangle)(ref extensionBox)).Offset((int)(0f - screenPosition.X), (int)(0f - screenPosition.Y));
		}
		EntitySpriteDraw(asset.Value, vector2 - screenPosition, value, proj.GetAlpha(projectileColor), num, vector, proj.scale, dir);
		((Rectangle)(ref rect)).Offset((int)(0f - screenPosition.X), (int)(0f - screenPosition.Y));
		spriteBatch.Draw(TextureAssets.MagicPixel.Value, rect, Color.White * num2);
	}

	private static void DrawPrettyStarSparkle(float opacity, SpriteEffects dir, Vector2 drawpos, Color drawColor, Color shineColor, float flareCounter, float fadeInStart, float fadeInEnd, float fadeOutStart, float fadeOutEnd, float rotation, Vector2 scale, Vector2 fatness)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Extra[98].Value;
		Color color = shineColor * opacity * 0.5f;
		((Color)(ref color)).A = 0;
		Vector2 origin = value.Size() / 2f;
		Color color2 = drawColor * 0.5f;
		float num = Utils.GetLerpValue(fadeInStart, fadeInEnd, flareCounter, clamped: true) * Utils.GetLerpValue(fadeOutEnd, fadeOutStart, flareCounter, clamped: true);
		Vector2 vector = new Vector2(fatness.X * 0.5f, scale.X) * num;
		Vector2 vector2 = new Vector2(fatness.Y * 0.5f, scale.Y) * num;
		color *= num;
		color2 *= num;
		EntitySpriteDraw(value, drawpos, null, color, (float)Math.PI / 2f + rotation, origin, vector, dir);
		EntitySpriteDraw(value, drawpos, null, color, 0f + rotation, origin, vector2, dir);
		EntitySpriteDraw(value, drawpos, null, color2, (float)Math.PI / 2f + rotation, origin, vector * 0.6f, dir);
		EntitySpriteDraw(value, drawpos, null, color2, 0f + rotation, origin, vector2 * 0.6f, dir);
	}

	private static void DrawProj_FlailChains(Projectile proj, Vector2 mountedCenter)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[proj.owner];
		Vector2 playerArmPosition = GetPlayerArmPosition(proj);
		playerArmPosition -= Vector2.UnitY * player.gfxOffY;
		Asset<Texture2D> asset = null;
		Rectangle? sourceRectangle = null;
		float num = 0f;
		switch (proj.type)
		{
		default:
			asset = TextureAssets.Chain3;
			break;
		case 25:
			asset = TextureAssets.Chain2;
			break;
		case 35:
			asset = TextureAssets.Chain6;
			break;
		case 63:
			asset = TextureAssets.Chain7;
			break;
		case 154:
			asset = TextureAssets.Chain13;
			break;
		case 247:
			asset = TextureAssets.Chain19;
			break;
		case 757:
			asset = TextureAssets.Extra[99];
			sourceRectangle = asset.Frame(1, 6);
			num = -2f;
			break;
		case 947:
			asset = TextureAssets.Chain41;
			break;
		case 948:
			asset = TextureAssets.Chain43;
			break;
		}
		Vector2 origin = (sourceRectangle.HasValue ? (sourceRectangle.Value.Size() / 2f) : (asset.Size() / 2f));
		Vector2 center = proj.Center;
		Vector2 v = playerArmPosition.MoveTowards(center, 4f) - center;
		Vector2 vector = v.SafeNormalize(Vector2.Zero);
		float num2 = (float)(sourceRectangle.HasValue ? sourceRectangle.Value.Height : asset.Height()) + num;
		float rotation = vector.ToRotation() + (float)Math.PI / 2f;
		int num3 = 0;
		float num4 = ((Vector2)(ref v)).Length() + num2 / 2f;
		int num5 = 0;
		while (num4 > 0f)
		{
			Color color = Lighting.GetColor((int)center.X / 16, (int)(center.Y / 16f));
			switch (proj.type)
			{
			case 757:
				sourceRectangle = asset.Frame(1, 6, 0, num3 % 6);
				break;
			case 948:
				if (num5 >= 6)
				{
					asset = (asset = TextureAssets.Chain41);
				}
				else if (num5 >= 4)
				{
					asset = (asset = TextureAssets.Chain42);
					byte b = 140;
					if (((Color)(ref color)).R < b)
					{
						((Color)(ref color)).R = b;
					}
					if (((Color)(ref color)).G < b)
					{
						((Color)(ref color)).G = b;
					}
					if (((Color)(ref color)).B < b)
					{
						((Color)(ref color)).B = b;
					}
				}
				else
				{
					color = Color.White;
				}
				num5++;
				break;
			}
			spriteBatch.Draw(asset.Value, center - screenPosition, sourceRectangle, color, rotation, origin, 1f, (SpriteEffects)0, 0f);
			center += vector * num2;
			num3++;
			num4 -= num2;
		}
	}

	private static void DrawProj_FlailChains_Old(Projectile proj, Vector2 mountedCenter)
	{
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_0295: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_034e: Unknown result type (might be due to invalid IL or missing references)
		//IL_035f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_038d: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_0439: Unknown result type (might be due to invalid IL or missing references)
		//IL_046a: Unknown result type (might be due to invalid IL or missing references)
		//IL_047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_059a: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_050a: Unknown result type (might be due to invalid IL or missing references)
		//IL_051b: Unknown result type (might be due to invalid IL or missing references)
		//IL_052c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_0551: Unknown result type (might be due to invalid IL or missing references)
		//IL_0576: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
		float num = mountedCenter.X - vector.X;
		float num2 = mountedCenter.Y - vector.Y;
		float rotation = (float)Math.Atan2(num2, num) - 1.57f;
		if (proj.alpha == 0)
		{
			int num3 = -1;
			if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
			{
				num3 = 1;
			}
			if (player[proj.owner].direction == 1)
			{
				player[proj.owner].itemRotation = (float)Math.Atan2(num2 * (float)num3, num * (float)num3);
			}
			else
			{
				player[proj.owner].itemRotation = (float)Math.Atan2(num2 * (float)num3, num * (float)num3);
			}
		}
		bool flag = true;
		int num4 = 0;
		int num5 = 25;
		if (proj.type == 757)
		{
			num5 = 12;
		}
		while (flag)
		{
			float num6 = (float)Math.Sqrt(num * num + num2 * num2);
			if (num6 < (float)num5)
			{
				flag = false;
			}
			else if (float.IsNaN(num6))
			{
				flag = false;
			}
			else
			{
				num6 = ((proj.type == 154 || proj.type == 247) ? (18f / num6) : ((proj.type != 757) ? (12f / num6) : (16f / num6)));
				num *= num6;
				num2 *= num6;
				vector.X += num;
				vector.Y += num2;
				num = mountedCenter.X - vector.X;
				num2 = mountedCenter.Y - vector.Y;
				Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
				if (proj.type == 25)
				{
					EntitySpriteDraw(TextureAssets.Chain2.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain2.Width(), TextureAssets.Chain2.Height()), color, rotation, new Vector2((float)TextureAssets.Chain2.Width() * 0.5f, (float)TextureAssets.Chain2.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				}
				else if (proj.type == 35)
				{
					EntitySpriteDraw(TextureAssets.Chain6.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain6.Width(), TextureAssets.Chain6.Height()), color, rotation, new Vector2((float)TextureAssets.Chain6.Width() * 0.5f, (float)TextureAssets.Chain6.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				}
				else if (proj.type == 757)
				{
					Texture2D value = TextureAssets.Extra[99].Value;
					Rectangle r = value.Frame(1, 6, 0, num4 % 6);
					EntitySpriteDraw(value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), value.Frame(1, 6, 0, num4 % 6), color, rotation, r.Size() / 2f, 1f, (SpriteEffects)0);
				}
				else if (proj.type == 247)
				{
					EntitySpriteDraw(TextureAssets.Chain19.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain19.Width(), TextureAssets.Chain19.Height()), color, rotation, new Vector2((float)TextureAssets.Chain19.Width() * 0.5f, (float)TextureAssets.Chain19.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				}
				else if (proj.type == 63)
				{
					EntitySpriteDraw(TextureAssets.Chain7.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain7.Width(), TextureAssets.Chain7.Height()), color, rotation, new Vector2((float)TextureAssets.Chain7.Width() * 0.5f, (float)TextureAssets.Chain7.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				}
				else if (proj.type == 154)
				{
					EntitySpriteDraw(TextureAssets.Chain13.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain13.Width(), TextureAssets.Chain13.Height()), color, rotation, new Vector2((float)TextureAssets.Chain13.Width() * 0.5f, (float)TextureAssets.Chain13.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				}
				else
				{
					EntitySpriteDraw(TextureAssets.Chain3.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain3.Width(), TextureAssets.Chain3.Height()), color, rotation, new Vector2((float)TextureAssets.Chain3.Width() * 0.5f, (float)TextureAssets.Chain3.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
				}
			}
			num4++;
		}
	}

	private static Color TryApplyingPlayerStringColor(int playerStringColor, Color stringColor)
	{
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (playerStringColor > 0)
		{
			stringColor = WorldGen.paintColor(playerStringColor);
			if (((Color)(ref stringColor)).R < 75)
			{
				((Color)(ref stringColor)).R = 75;
			}
			if (((Color)(ref stringColor)).G < 75)
			{
				((Color)(ref stringColor)).G = 75;
			}
			if (((Color)(ref stringColor)).B < 75)
			{
				((Color)(ref stringColor)).B = 75;
			}
			switch (playerStringColor)
			{
			case 13:
				((Color)(ref stringColor))._002Ector(20, 20, 20);
				break;
			case 0:
			case 14:
				((Color)(ref stringColor))._002Ector(200, 200, 200);
				break;
			case 28:
				((Color)(ref stringColor))._002Ector(163, 116, 91);
				break;
			case 27:
				((Color)(ref stringColor))._002Ector(DiscoR, DiscoG, DiscoB);
				break;
			}
			((Color)(ref stringColor)).A = (byte)((float)(int)((Color)(ref stringColor)).A * 0.4f);
		}
		return stringColor;
	}

	private static void DrawProj_FishingLine(Projectile proj, ref float polePosX, ref float polePosY, Vector2 mountedCenter)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_052c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0533: Unknown result type (might be due to invalid IL or missing references)
		//IL_0538: Unknown result type (might be due to invalid IL or missing references)
		//IL_053f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0549: Unknown result type (might be due to invalid IL or missing references)
		//IL_054e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0553: Unknown result type (might be due to invalid IL or missing references)
		//IL_056e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0591: Unknown result type (might be due to invalid IL or missing references)
		//IL_063d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0660: Unknown result type (might be due to invalid IL or missing references)
		//IL_0709: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0880: Unknown result type (might be due to invalid IL or missing references)
		//IL_088b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0899: Unknown result type (might be due to invalid IL or missing references)
		//IL_089a: Unknown result type (might be due to invalid IL or missing references)
		//IL_089f: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0907: Unknown result type (might be due to invalid IL or missing references)
		//IL_0911: Unknown result type (might be due to invalid IL or missing references)
		//IL_092b: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[proj.owner];
		polePosX = mountedCenter.X;
		polePosY = mountedCenter.Y;
		polePosY += player.gfxOffY;
		if (player.mount.Active && player.mount.Type == 52)
		{
			polePosX -= player.direction * 14;
			polePosY -= -10f;
		}
		int type = player.inventory[player.selectedItem].type;
		Color stringColor = default(Color);
		((Color)(ref stringColor))._002Ector(200, 200, 200, 100);
		if (type == 2294)
		{
			((Color)(ref stringColor))._002Ector(100, 180, 230, 100);
		}
		if (type == 2295)
		{
			((Color)(ref stringColor))._002Ector(250, 90, 70, 100);
		}
		if (type == 2293)
		{
			((Color)(ref stringColor))._002Ector(203, 190, 210, 100);
		}
		if (type == 2421)
		{
			((Color)(ref stringColor))._002Ector(183, 77, 112, 100);
		}
		if (type == 2422)
		{
			((Color)(ref stringColor))._002Ector(255, 226, 116, 100);
		}
		if (type == 4325)
		{
			((Color)(ref stringColor))._002Ector(200, 100, 100, 100);
		}
		if (type == 4442)
		{
			((Color)(ref stringColor))._002Ector(100, 100, 200, 100);
		}
		ProjectileLoader.ModifyFishingLine(proj, ref polePosX, ref polePosY, ref stringColor);
		stringColor = TryApplyingPlayerStringColor(Main.player[proj.owner].stringColor, stringColor);
		float gravDir = Main.player[proj.owner].gravDir;
		switch (type)
		{
		case 2289:
			polePosX += 43 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 36f * gravDir;
			break;
		case 2291:
			polePosX += 43 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 34f * gravDir;
			break;
		case 2292:
			polePosX += 46 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 34f * gravDir;
			break;
		case 2293:
			polePosX += 43 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 34f * gravDir;
			break;
		case 2294:
			polePosX += 43 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 30f * gravDir;
			break;
		case 2295:
			polePosX += 43 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 30f * gravDir;
			break;
		case 2296:
			polePosX += 43 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 30f * gravDir;
			break;
		case 2421:
			polePosX += 47 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 36f * gravDir;
			break;
		case 2422:
			polePosX += 47 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 32f * gravDir;
			break;
		case 4325:
			polePosX += 44 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 32f * gravDir;
			break;
		case 4442:
			polePosX += 44 * Main.player[proj.owner].direction;
			if (Main.player[proj.owner].direction < 0)
			{
				polePosX -= 13f;
			}
			polePosY -= 32f * gravDir;
			break;
		}
		if (gravDir == -1f)
		{
			polePosY -= 12f;
		}
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(polePosX, polePosY);
		vector = Main.player[proj.owner].RotatedRelativePoint(vector + new Vector2(8f)) - new Vector2(8f);
		float num = proj.position.X + (float)proj.width * 0.5f - vector.X;
		float num2 = proj.position.Y + (float)proj.height * 0.5f - vector.Y;
		Math.Sqrt(num * num + num2 * num2);
		float num3 = (float)Math.Atan2(num2, num) - 1.57f;
		bool flag = true;
		if (num == 0f && num2 == 0f)
		{
			flag = false;
		}
		else
		{
			float num4 = (float)Math.Sqrt(num * num + num2 * num2);
			num4 = 12f / num4;
			num *= num4;
			num2 *= num4;
			vector.X -= num;
			vector.Y -= num2;
			num = proj.position.X + (float)proj.width * 0.5f - vector.X;
			num2 = proj.position.Y + (float)proj.height * 0.5f - vector.Y;
		}
		while (flag)
		{
			float num5 = 12f;
			float num6 = (float)Math.Sqrt(num * num + num2 * num2);
			float num7 = num6;
			if (float.IsNaN(num6) || float.IsNaN(num7))
			{
				flag = false;
				continue;
			}
			if (num6 < 20f)
			{
				num5 = num6 - 8f;
				flag = false;
			}
			num6 = 12f / num6;
			num *= num6;
			num2 *= num6;
			vector.X += num;
			vector.Y += num2;
			num = proj.position.X + (float)proj.width * 0.5f - vector.X;
			num2 = proj.position.Y + (float)proj.height * 0.1f - vector.Y;
			if (num7 > 12f)
			{
				float num8 = 0.3f;
				float num9 = Math.Abs(proj.velocity.X) + Math.Abs(proj.velocity.Y);
				if (num9 > 16f)
				{
					num9 = 16f;
				}
				num9 = 1f - num9 / 16f;
				num8 *= num9;
				num9 = num7 / 80f;
				if (num9 > 1f)
				{
					num9 = 1f;
				}
				num8 *= num9;
				if (num8 < 0f)
				{
					num8 = 0f;
				}
				num9 = 1f - proj.localAI[0] / 100f;
				num8 *= num9;
				if (num2 > 0f)
				{
					num2 *= 1f + num8;
					num *= 1f - num8;
				}
				else
				{
					num9 = Math.Abs(proj.velocity.X) / 3f;
					if (num9 > 1f)
					{
						num9 = 1f;
					}
					num9 -= 0.5f;
					num8 *= num9;
					if (num8 > 0f)
					{
						num8 *= 2f;
					}
					num2 *= 1f + num8;
					num *= 1f - num8;
				}
			}
			num3 = (float)Math.Atan2(num2, num) - 1.57f;
			Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), stringColor);
			EntitySpriteDraw(TextureAssets.FishingLine.Value, new Vector2(vector.X - screenPosition.X + (float)TextureAssets.FishingLine.Width() * 0.5f, vector.Y - screenPosition.Y + (float)TextureAssets.FishingLine.Height() * 0.5f), (Rectangle?)new Rectangle(0, 0, TextureAssets.FishingLine.Width(), (int)num5), color, num3, new Vector2((float)TextureAssets.FishingLine.Width() * 0.5f, 0f), 1f, (SpriteEffects)0, 0f);
		}
	}

	private void DrawProj_StardustGuardianPunching(Projectile proj)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		if (!gamePaused)
		{
			int num = 6;
			Texture2D value = TextureAssets.Extra[46].Value;
			int num3 = 20;
			Vector2 vector = proj.Center - proj.rotation.ToRotationVector2() * (float)num3 * (float)proj.spriteDirection;
			Color color = default(Color);
			for (int i = 0; i < num; i++)
			{
				float num4 = rand.NextFloat();
				float num5 = Utils.GetLerpValue(0f, 0.3f, num4, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num4, clamped: true);
				float amount = Utils.GetLerpValue(0f, 0.3f, num4, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num4, clamped: true);
				float num6 = MathHelper.Lerp(0.6f, 1f, amount);
				((Color)(ref color))._002Ector(255, 255, 255, 127);
				color *= num5 * 0.5f;
				Vector2 origin = value.Size() / 2f;
				Color color2 = Color.White * num5;
				((Color)(ref color2)).A = (byte)(((Color)(ref color2)).A / 2);
				Color color3 = color2 * 0.5f;
				float num7 = 1f;
				float num8 = 1f + rand.NextFloat() * 0.5f;
				float num9 = rand.NextFloatDirection();
				Vector2 vector2 = new Vector2(0.8f) * num8 * num7 * num6;
				float num10 = 20f + MathHelper.Lerp(0f, 20f, num4) + num8 * 16f;
				float num2 = proj.rotation + ((proj.direction == 1) ? 0f : ((float)Math.PI)) + num9 * ((float)Math.PI * 2f) * 0.04f;
				float rotation = num2 + (float)Math.PI / 2f;
				Vector2 position = vector + num2.ToRotationVector2() * num10 + rand.NextVector2Circular(20f, 20f) - screenPosition;
				color *= num7;
				color3 *= num7;
				SpriteEffects effects = (SpriteEffects)0;
				spriteBatch.Draw(value, position, (Rectangle?)null, color, rotation, origin, vector2, effects, 0f);
				spriteBatch.Draw(value, position, (Rectangle?)null, color3, rotation, origin, vector2 * 0.8f, effects, 0f);
			}
		}
	}

	private void DrawProj_PiercingStarlight(Projectile proj)
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_029f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_032f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_033d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0401: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0407: Unknown result type (might be due to invalid IL or missing references)
		//IL_040c: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_0428: Unknown result type (might be due to invalid IL or missing references)
		//IL_042a: Unknown result type (might be due to invalid IL or missing references)
		//IL_042c: Unknown result type (might be due to invalid IL or missing references)
		//IL_043f: Unknown result type (might be due to invalid IL or missing references)
		//IL_044b: Unknown result type (might be due to invalid IL or missing references)
		//IL_044f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_0458: Unknown result type (might be due to invalid IL or missing references)
		//IL_045d: Unknown result type (might be due to invalid IL or missing references)
		float num = proj.ai[1];
		if (num == 0f)
		{
			num = 1f;
		}
		int num12 = (int)Math.Ceiling(3f * num);
		LoadProjectile(proj.type);
		LoadItem(4923);
		int num13 = 2;
		Vector2 vector = proj.Center - proj.rotation.ToRotationVector2() * (float)num13;
		for (int i = 0; i < 1; i++)
		{
			float num14 = rand.NextFloat();
			float num15 = Utils.GetLerpValue(0f, 0.3f, num14, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num14, clamped: true);
			Color color = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates())) * num15;
			Texture2D value = TextureAssets.Item[4923].Value;
			Vector2 origin = value.Size() / 2f;
			float num16 = rand.NextFloatDirection();
			float num17 = 8f + MathHelper.Lerp(0f, 20f, num14) + rand.NextFloat() * 6f;
			float num18 = proj.rotation + num16 * ((float)Math.PI * 2f) * 0.04f;
			float num19 = num18 + (float)Math.PI / 4f;
			Vector2 position = vector + num18.ToRotationVector2() * num17 + rand.NextVector2Circular(8f, 8f) - screenPosition;
			SpriteEffects spriteEffects = (SpriteEffects)0;
			if (proj.rotation < -(float)Math.PI / 2f || proj.rotation > (float)Math.PI / 2f)
			{
				num19 += (float)Math.PI / 2f;
				spriteEffects = (SpriteEffects)(spriteEffects | 1);
			}
			spriteBatch.Draw(value, position, (Rectangle?)null, color, num19, origin, 1f, spriteEffects, 0f);
		}
		for (int j = 0; j < num12; j++)
		{
			float num2 = rand.NextFloat();
			float num3 = Utils.GetLerpValue(0f, 0.3f, num2, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num2, clamped: true);
			float amount = Utils.GetLerpValue(0f, 0.3f, num2, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num2, clamped: true);
			float num4 = MathHelper.Lerp(0.6f, 1f, amount);
			Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0.25f, 0f, (rand.NextFloat() * 0.33f + GlobalTimeWrappedHourly) % 1f);
			Texture2D value2 = TextureAssets.Projectile[proj.type].Value;
			Color color2 = fairyQueenWeaponsColor;
			color2 *= num3 * 0.5f;
			Vector2 origin2 = value2.Size() / 2f;
			Color color3 = Color.White * num3;
			((Color)(ref color3)).A = (byte)(((Color)(ref color3)).A / 2);
			Color color4 = color3 * 0.5f;
			float num5 = 1f;
			float num6 = (num - 1f) / 2f;
			float num7 = rand.NextFloat() * 2f * num;
			num7 += num6;
			float num8 = rand.NextFloatDirection();
			Vector2 vector2 = new Vector2(2.8f + num7 * (1f + num6), 1f) * num5 * num4;
			float value3 = 50f * num;
			Vector2 vector3 = proj.rotation.ToRotationVector2() * (float)((j >= 1) ? 56 : 0);
			float num9 = 0.03f - (float)j * 0.012f;
			num9 /= num;
			float num10 = 30f + MathHelper.Lerp(0f, value3, num2) + num7 * 16f;
			float num11 = proj.rotation + num8 * ((float)Math.PI * 2f) * num9;
			float rotation = num11;
			Vector2 position2 = vector + num11.ToRotationVector2() * num10 + rand.NextVector2Circular(20f, 20f) + vector3 - screenPosition;
			color2 *= num5;
			color4 *= num5;
			SpriteEffects effects = (SpriteEffects)0;
			spriteBatch.Draw(value2, position2, (Rectangle?)null, color2, rotation, origin2, vector2, effects, 0f);
			spriteBatch.Draw(value2, position2, (Rectangle?)null, color4, rotation, origin2, vector2 * 0.6f, effects, 0f);
		}
	}

	private void DrawProj_FairyQueenLance(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0332: Unknown result type (might be due to invalid IL or missing references)
		//IL_0337: Unknown result type (might be due to invalid IL or missing references)
		//IL_0340: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0356: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		int num = 40;
		int num2 = 180 * num;
		num2 /= 2;
		Color color = proj.AI_171_GetColor();
		Color color2 = color;
		((Color)(ref color)).A = 0;
		((Color)(ref color2)).A = (byte)(((Color)(ref color2)).A / 2);
		Texture2D value = TextureAssets.Extra[178].Value;
		Vector2 origin = value.Frame().Size() * new Vector2(0f, 0.5f);
		Vector2 scale = default(Vector2);
		((Vector2)(ref scale))._002Ector((float)(num2 / value.Width), 2f);
		Vector2 scale2 = default(Vector2);
		((Vector2)(ref scale2))._002Ector((float)(num2 / value.Width) * 0.5f, 2f);
		Color color3 = color * Utils.GetLerpValue(60f, 55f, proj.localAI[0], clamped: true) * Utils.GetLerpValue(0f, 10f, proj.localAI[0], clamped: true);
		spriteBatch.Draw(value, vector, (Rectangle?)null, color3, proj.rotation, origin, scale2, (SpriteEffects)0, 0f);
		spriteBatch.Draw(value, vector, (Rectangle?)null, color3 * 0.3f, proj.rotation, origin, scale, (SpriteEffects)0, 0f);
		Texture2D value2 = TextureAssets.Projectile[proj.type].Value;
		Vector2 origin2 = value2.Frame().Size() / 2f;
		Color color4 = Color.White * Utils.GetLerpValue(0f, 20f, proj.localAI[0], clamped: true);
		((Color)(ref color4)).A = (byte)(((Color)(ref color4)).A / 2);
		float num3 = MathHelper.Lerp(0.7f, 1f, Utils.GetLerpValue(55f, 60f, proj.localAI[0], clamped: true));
		float lerpValue = Utils.GetLerpValue(10f, 60f, proj.localAI[0]);
		if (lerpValue > 0f)
		{
			float lerpValue2 = Utils.GetLerpValue(0f, 1f, ((Vector2)(ref proj.velocity)).Length(), clamped: true);
			for (float num4 = 1f; num4 > 0f; num4 -= 1f / 6f)
			{
				Vector2 vector2 = proj.rotation.ToRotationVector2() * -120f * num4 * lerpValue2;
				spriteBatch.Draw(value2, vector + vector2, (Rectangle?)null, color * lerpValue * (1f - num4), proj.rotation, origin2, num3, (SpriteEffects)0, 0f);
				spriteBatch.Draw(value2, vector + vector2, (Rectangle?)null, new Color(255, 255, 255, 0) * 0.15f * lerpValue * (1f - num4), proj.rotation, origin2, num3 * 0.85f, (SpriteEffects)0, 0f);
			}
			for (float num5 = 0f; num5 < 1f; num5 += 0.25f)
			{
				Vector2 vector3 = (num5 * ((float)Math.PI * 2f) + proj.rotation).ToRotationVector2() * 2f * num3;
				spriteBatch.Draw(value2, vector + vector3, (Rectangle?)null, color2 * lerpValue, proj.rotation, origin2, num3, (SpriteEffects)0, 0f);
			}
			spriteBatch.Draw(value2, vector, (Rectangle?)null, color2 * lerpValue, proj.rotation, origin2, num3 * 1.1f, (SpriteEffects)0, 0f);
		}
		spriteBatch.Draw(value2, vector, (Rectangle?)null, color4, proj.rotation, origin2, num3, (SpriteEffects)0, 0f);
	}

	private void DrawProj_FairyQueenRangedItemShot(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0f);
		Color fairyQueenWeaponsColor2 = proj.GetFairyQueenWeaponsColor(0.5f);
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Vector2 origin = value.Frame().Size() / 2f;
		Color color = Color.White * proj.Opacity;
		((Color)(ref color)).A = (byte)(((Color)(ref color)).A / 2);
		float num = MathHelper.Lerp(0.7f, 1f, Utils.GetLerpValue(0f, 5f, proj.ai[0], clamped: true));
		float opacity = proj.Opacity;
		if (opacity > 0f)
		{
			float lerpValue = Utils.GetLerpValue(0f, 1f, ((Vector2)(ref proj.velocity)).Length(), clamped: true);
			for (float num2 = 0f; num2 < 1f; num2 += 1f / 6f)
			{
				Vector2 vector2 = proj.rotation.ToRotationVector2() * -120f * num2 * lerpValue;
				spriteBatch.Draw(value, vector + vector2, (Rectangle?)null, fairyQueenWeaponsColor * opacity * (1f - num2), proj.rotation, origin, num, (SpriteEffects)0, 0f);
			}
			for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
			{
				Vector2 vector3 = (num3 * ((float)Math.PI * 2f) + proj.rotation).ToRotationVector2() * 4f * num;
				spriteBatch.Draw(value, vector + vector3, (Rectangle?)null, fairyQueenWeaponsColor2 * opacity, proj.rotation, origin, num, (SpriteEffects)0, 0f);
			}
		}
		spriteBatch.Draw(value, vector, (Rectangle?)null, color, proj.rotation, origin, num, (SpriteEffects)0, 0f);
	}

	private void DrawProj_EmpressBlade(Projectile proj, float hueOverride)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		CurrentDrawnEntityShader = -1;
		PrepareDrawnProjectileDrawing(proj);
		Vector2 vector = proj.Center - screenPosition;
		proj.GetFairyQueenWeaponsColor(0f, 0f, hueOverride);
		Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0.5f, 0f, hueOverride);
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Vector2 origin = value.Frame().Size() / 2f;
		Color color = Color.White * proj.Opacity;
		((Color)(ref color)).A = (byte)((float)(int)((Color)(ref color)).A * 0.7f);
		((Color)(ref fairyQueenWeaponsColor)).A = (byte)(((Color)(ref fairyQueenWeaponsColor)).A / 2);
		float scale = proj.scale;
		float num = proj.rotation - (float)Math.PI / 2f;
		float num2 = proj.Opacity * 0.3f;
		if (num2 > 0f)
		{
			float lerpValue = Utils.GetLerpValue(60f, 50f, proj.ai[0], clamped: true);
			float num3 = Utils.GetLerpValue(70f, 50f, proj.ai[0], clamped: true) * Utils.GetLerpValue(40f, 45f, proj.ai[0], clamped: true);
			for (float num4 = 0f; num4 < 1f; num4 += 1f / 6f)
			{
				Vector2 vector2 = num.ToRotationVector2() * -120f * num4 * lerpValue;
				EntitySpriteDraw(value, vector + vector2, null, fairyQueenWeaponsColor * num2 * (1f - num4) * num3, num, origin, scale * 1.5f, (SpriteEffects)0);
			}
			for (float num5 = 0f; num5 < 1f; num5 += 0.25f)
			{
				Vector2 vector3 = (num5 * ((float)Math.PI * 2f) + num).ToRotationVector2() * 4f * scale;
				EntitySpriteDraw(value, vector + vector3, null, fairyQueenWeaponsColor * num2, num, origin, scale, (SpriteEffects)0);
			}
		}
		EntitySpriteDraw(value, vector, null, color, num, origin, scale, (SpriteEffects)0);
		EntitySpriteDraw(value, vector, null, fairyQueenWeaponsColor * num2 * 0.5f, num, origin, scale, (SpriteEffects)0);
	}

	private void DrawProj_CoolWhipMinion(Projectile proj)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = proj.Center - screenPosition;
		Color color = Color.White * 0.5f;
		((Color)(ref color)).A = 0;
		Color color2 = color;
		((Color)(ref color2)).A = 127;
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Vector2 origin = value.Frame().Size() / 2f;
		Color color3 = Color.White * proj.Opacity;
		((Color)(ref color3)).A = (byte)(((Color)(ref color3)).A / 2);
		int num = 1;
		float opacity = proj.Opacity;
		if (opacity > 0f)
		{
			for (float num2 = 0f; num2 < 4f; num2 += 1f)
			{
				Vector2 vector2 = proj.velocity * (0f - num2);
				spriteBatch.Draw(value, vector + vector2, (Rectangle?)null, color * opacity * ((4f - num2) / 4f), proj.rotation, origin, (float)num, (SpriteEffects)0, 0f);
			}
			for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
			{
				Vector2 vector3 = (num3 * ((float)Math.PI * 2f) + proj.rotation).ToRotationVector2() * 4f * (float)num;
				spriteBatch.Draw(value, vector + vector3, (Rectangle?)null, color2 * opacity, proj.rotation, origin, (float)num, (SpriteEffects)0, 0f);
			}
		}
		spriteBatch.Draw(value, vector, (Rectangle?)null, color3, proj.rotation, origin, (float)num, (SpriteEffects)0, 0f);
	}

	private void DrawMurderAurora(Projectile proj)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cd: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Vector2 origin = value.Size() / 2f;
		float num = GlobalTimeWrappedHourly % 10f / 10f;
		Vector2 vector = proj.Center - screenPosition;
		float[] array = new float[15];
		float[] array2 = new float[15];
		float[] array3 = new float[15];
		float[] array4 = new float[15];
		float[] array5 = new float[15];
		float num2 = 0.5f;
		int num3 = 210;
		num2 = Utils.GetLerpValue(0f, 60f, proj.timeLeft, clamped: true) * Utils.GetLerpValue(num3, num3 - 60, proj.timeLeft, clamped: true);
		float amount = Utils.GetLerpValue(0f, 60f, proj.timeLeft, clamped: true) * Utils.GetLerpValue(num3, 90f, proj.timeLeft, clamped: true);
		amount = MathHelper.Lerp(0.2f, 0.5f, amount);
		float num9 = 800f / (float)value.Width;
		float num4 = num9 * 0.8f;
		float num5 = (num9 - num4) / 15f;
		float num6 = 30f;
		float num7 = 300f;
		Vector2 vector2 = default(Vector2);
		((Vector2)(ref vector2))._002Ector(3f, 6f);
		for (int i = 0; i < 15; i++)
		{
			_ = (float)(i + 1) / 50f;
			float num8 = (float)Math.Sin(num * ((float)Math.PI * 2f) + (float)Math.PI / 2f + (float)i / 2f);
			array[i] = num8 * (num7 - (float)i * 3f);
			array2[i] = (float)Math.Sin(num * ((float)Math.PI * 2f) * 2f + (float)Math.PI / 3f + (float)i) * num6;
			array2[i] -= (float)i * 3f;
			array3[i] = (float)i / 15f * 2f + num;
			array3[i] = (num8 * 0.5f + 0.5f) * 0.6f + num;
			array4[i] = (float)(1.0 - Math.Pow(1f * (float)i / 15f, 2.0));
			array5[i] = num4 + (float)(i + 1) * num5;
			array5[i] *= 0.3f;
			Color color = hslToRgb(array3[i] % 1f, 1f, 0.5f) * num2 * amount;
			((Color)(ref color)).A = (byte)(((Color)(ref color)).A / 4);
			float rotation = (float)Math.PI / 2f + num8 * ((float)Math.PI / 4f) * -0.3f + (float)Math.PI * (float)i;
			EntitySpriteDraw(value, vector + new Vector2(array[i], array2[i]), null, color, rotation, origin, new Vector2(array5[i], array5[i]) * vector2, (SpriteEffects)0);
		}
	}

	private void DrawWhip(Projectile proj)
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0237: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		List<Vector2> list = new List<Vector2>();
		Projectile.FillWhipControlPoints(proj, list);
		Texture2D value = TextureAssets.FishingLine.Value;
		Rectangle value2 = value.Frame();
		Vector2 origin = default(Vector2);
		((Vector2)(ref origin))._002Ector((float)(value2.Width / 2), 2f);
		Color originalColor = Color.White;
		switch (proj.type)
		{
		case 847:
			originalColor = Color.OrangeRed;
			break;
		case 849:
			originalColor = Color.SlateBlue;
			originalColor = Color.Black;
			break;
		case 848:
			originalColor = Color.DarkBlue;
			break;
		case 912:
			originalColor = Color.LightBlue;
			break;
		case 913:
			originalColor = Color.Firebrick;
			break;
		case 914:
			originalColor = Color.ForestGreen;
			break;
		case 915:
			originalColor = Color.White;
			break;
		case 952:
			originalColor = Color.Tan;
			break;
		}
		Vector2 vector = list[0];
		Vector2 scale = default(Vector2);
		for (int i = 0; i < list.Count - 1; i++)
		{
			Vector2 vector2 = list[i];
			Vector2 vector3 = list[i + 1] - vector2;
			float rotation = vector3.ToRotation() - (float)Math.PI / 2f;
			Color color = Lighting.GetColor(vector2.ToTileCoordinates(), originalColor);
			((Vector2)(ref scale))._002Ector(1f, (((Vector2)(ref vector3)).Length() + 2f) / (float)value2.Height);
			spriteBatch.Draw(value, vector - screenPosition, (Rectangle?)value2, color, rotation, origin, scale, (SpriteEffects)0, 0f);
			vector += vector3;
		}
		switch (proj.type)
		{
		case 847:
			vector = DrawWhip_WhipSword(proj, list);
			break;
		case 841:
			vector = DrawWhip_WhipBland(proj, list);
			break;
		case 848:
			vector = DrawWhip_WhipMace(proj, list);
			break;
		case 849:
			vector = DrawWhip_WhipScythe(proj, list);
			break;
		case 912:
			vector = DrawWhip_CoolWhip(proj, list);
			break;
		case 913:
			vector = DrawWhip_FireWhip(proj, list);
			break;
		case 914:
			vector = DrawWhip_ThornWhip(proj, list);
			break;
		case 915:
			vector = DrawWhip_RainbowWhip(proj, list);
			break;
		case 952:
			vector = DrawWhip_BoneWhip(proj, list);
			break;
		}
	}

	public static Vector2 DrawWhip_BoneWhip(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = true;
			Vector2 origin = vector;
			switch (i)
			{
			case 0:
				origin.Y -= 4f;
				break;
			case 19:
				rectangle.Y = height * 4;
				break;
			default:
				rectangle.Y = height * (1 + i % 3);
				break;
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color color = Lighting.GetColor(vector3.ToTileCoordinates());
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, color, rotation, origin, 1f, (SpriteEffects)0, 0f);
			}
			vector2 += vector4;
		}
		return vector2;
	}

	public static Vector2 DrawWhip_CoolWhip(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = true;
			Vector2 origin = vector;
			switch (i)
			{
			case 0:
				origin.Y -= 4f;
				break;
			case 3:
			case 5:
			case 7:
				rectangle.Y = height;
				break;
			case 9:
			case 11:
			case 13:
				rectangle.Y = height * 2;
				break;
			case 15:
			case 17:
				rectangle.Y = height * 3;
				break;
			case 19:
				rectangle.Y = height * 4;
				break;
			default:
				flag = false;
				break;
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color alpha = proj.GetAlpha(Lighting.GetColor(vector3.ToTileCoordinates()));
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, alpha, rotation, origin, 1f, (SpriteEffects)0, 0f);
			}
			vector2 += vector4;
		}
		return vector2;
	}

	public static Vector2 DrawWhip_FireWhip(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = true;
			Vector2 origin = vector;
			switch (i)
			{
			case 0:
				origin.Y -= 4f;
				break;
			case 3:
			case 5:
			case 7:
				rectangle.Y = height;
				break;
			case 9:
			case 11:
			case 13:
				rectangle.Y = height * 2;
				break;
			case 15:
			case 17:
				rectangle.Y = height * 3;
				break;
			case 19:
				rectangle.Y = height * 4;
				break;
			default:
				flag = false;
				break;
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color alpha = proj.GetAlpha(Lighting.GetColor(vector3.ToTileCoordinates()));
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, alpha, rotation, origin, 1f, (SpriteEffects)0, 0f);
			}
			vector2 += vector4;
		}
		return vector2;
	}

	public static Vector2 DrawWhip_RainbowWhip(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		float miscCounterNormalized = player[proj.owner].miscCounterNormalized;
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = true;
			Vector2 origin = vector;
			switch (i)
			{
			case 0:
				origin.Y -= 4f;
				break;
			case 39:
				rectangle.Y = height * 4;
				break;
			default:
				flag = i % 2 == 0;
				rectangle.Y = height * (1 + i % 3);
				break;
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				Color color = hslToRgb((miscCounterNormalized * 5f + (float)i * 0.05f) % 1f, 1f, 0.5f);
				Color color2 = color;
				float lerpValue = Utils.GetLerpValue(controlPoints.Count - 10, controlPoints.Count - 2, i, clamped: true);
				float num = MathHelper.Lerp(1f, 1f, lerpValue);
				((Color)(ref color2)).A = (byte)(((Color)(ref color2)).A / 2);
				((Color)(ref color2)).A = (byte)((float)(int)((Color)(ref color2)).A * lerpValue);
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color color3 = Lighting.GetColor(vector3.ToTileCoordinates());
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, Color.Lerp(color3, color2, 0.5f), rotation, origin, num, (SpriteEffects)0, 0f);
				((Color)(ref color2)).A = 0;
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, color2 * 0.1f, rotation, origin, num * 1.2f, (SpriteEffects)0, 0f);
				if (i == 39)
				{
					color2 = color;
					((Color)(ref color2)).A = 127;
					spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, color2 * 0.3f, rotation, origin, num * 1.4f, (SpriteEffects)0, 0f);
				}
			}
			vector2 += vector4;
		}
		return vector2;
	}

	public static Vector2 DrawWhip_ThornWhip(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = true;
			Vector2 origin = vector;
			float scale = 1f;
			switch (i)
			{
			case 0:
				origin.Y -= 4f;
				break;
			case 19:
				rectangle.Y = height * 4;
				scale = 1.1f;
				break;
			default:
				rectangle.Y = height * (1 + i % 3);
				scale = 0.8f;
				break;
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color color = Lighting.GetColor(vector3.ToTileCoordinates());
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, color, rotation, origin, scale, (SpriteEffects)0, 0f);
			}
			vector2 += vector4;
		}
		return vector2;
	}

	public static Vector2 DrawWhip_WhipSword(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = true;
			Vector2 origin = vector;
			switch (i)
			{
			case 0:
				origin.Y -= 4f;
				break;
			case 3:
			case 5:
			case 7:
				rectangle.Y = height;
				break;
			case 9:
			case 11:
			case 13:
				rectangle.Y = height * 2;
				break;
			case 15:
			case 17:
				rectangle.Y = height * 3;
				break;
			case 19:
				rectangle.Y = height * 4;
				break;
			default:
				flag = false;
				break;
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color color = Lighting.GetColor(vector3.ToTileCoordinates());
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, color, rotation, origin, 1f, (SpriteEffects)0, 0f);
			}
			vector2 += vector4;
		}
		return vector2;
	}

	public static Vector2 DrawWhip_WhipMace(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		SpriteEffects spriteEffects = (SpriteEffects)0;
		if (proj.spriteDirection == 1)
		{
			spriteEffects = (SpriteEffects)(spriteEffects ^ 1);
		}
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = false;
			Vector2 origin = vector;
			float scale = 1f;
			if (i == 0)
			{
				origin.Y -= 4f;
				flag = true;
			}
			else if (i % 2 == 0)
			{
				flag = true;
				int num = 1;
				if (i > 10)
				{
					num = 2;
				}
				if (i > 20)
				{
					num = 3;
				}
				rectangle.Y = height * num;
			}
			if (i == controlPoints.Count - 2)
			{
				flag = true;
				rectangle.Y = height * 4;
				scale = 1.3f;
				Projectile.GetWhipSettings(proj, out var timeToFlyOut, out var _, out var _);
				float t = proj.ai[0] / timeToFlyOut;
				float amount = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
				scale = MathHelper.Lerp(0.5f, 2f, amount);
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color color = Lighting.GetColor(vector3.ToTileCoordinates());
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, color, rotation, origin, scale, spriteEffects, 0f);
			}
			vector2 += vector4;
		}
		return vector2;
	}

	public static Vector2 DrawWhip_WhipScythe(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		SpriteEffects spriteEffects = (SpriteEffects)0;
		if (proj.spriteDirection == 1)
		{
			spriteEffects = (SpriteEffects)(spriteEffects ^ 1);
		}
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = false;
			Vector2 origin = vector;
			float scale = 1f;
			if (i == 0)
			{
				origin.Y -= 4f;
				flag = true;
			}
			else if (i % 2 == 0)
			{
				flag = true;
				int num = 1;
				if (i > 10)
				{
					num = 2;
				}
				if (i > 20)
				{
					num = 3;
				}
				rectangle.Y = height * num;
			}
			if (i == controlPoints.Count - 2)
			{
				flag = true;
				rectangle.Y = height * 4;
				scale = 1.3f;
				Projectile.GetWhipSettings(proj, out var timeToFlyOut, out var _, out var _);
				float t = proj.ai[0] / timeToFlyOut;
				float amount = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
				scale = MathHelper.Lerp(0.5f, 1.5f, amount);
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color color = Lighting.GetColor(vector3.ToTileCoordinates());
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, color, rotation, origin, scale, spriteEffects, 0f);
			}
			vector2 += vector4;
		}
		return vector2;
	}

	public static Vector2 DrawWhip_WhipBland(Projectile proj, List<Vector2> controlPoints)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		SpriteEffects spriteEffects = (SpriteEffects)0;
		if (proj.spriteDirection == 1)
		{
			spriteEffects = (SpriteEffects)(spriteEffects ^ 1);
		}
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Rectangle rectangle = value.Frame(1, 5);
		int height = rectangle.Height;
		rectangle.Height -= 2;
		Vector2 vector = rectangle.Size() / 2f;
		Vector2 vector2 = controlPoints[0];
		for (int i = 0; i < controlPoints.Count - 1; i++)
		{
			bool flag = false;
			Vector2 origin = vector;
			float scale = 1f;
			if (i == 0)
			{
				origin.Y -= 4f;
				flag = true;
			}
			else
			{
				flag = true;
				int num = 1;
				if (i > 10)
				{
					num = 2;
				}
				if (i > 20)
				{
					num = 3;
				}
				rectangle.Y = height * num;
			}
			if (i == controlPoints.Count - 2)
			{
				flag = true;
				rectangle.Y = height * 4;
				scale = 1.3f;
				Projectile.GetWhipSettings(proj, out var timeToFlyOut, out var _, out var _);
				float t = proj.ai[0] / timeToFlyOut;
				float amount = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
				scale = MathHelper.Lerp(0.5f, 1.5f, amount);
			}
			Vector2 vector3 = controlPoints[i];
			Vector2 vector4 = controlPoints[i + 1] - vector3;
			if (flag)
			{
				float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
				Color color = Lighting.GetColor(vector3.ToTileCoordinates());
				spriteBatch.Draw(value, vector2 - screenPosition, (Rectangle?)rectangle, color, rotation, origin, scale, spriteEffects, 0f);
			}
			vector2 += vector4;
		}
		return vector2;
	}

	private void DrawTwinsPet(Projectile proj)
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		SpriteEffects effects = (SpriteEffects)(proj.spriteDirection != 1);
		Rectangle rectangle = value.Frame(1, projFrames[proj.type], 0, proj.frame);
		Vector2 origin = rectangle.Size() / 2f;
		Vector2 val = proj.Center - screenPosition;
		Color alpha = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates()));
		float num = 18f;
		if (proj.isAPreviewDummy)
		{
			num = 8f;
		}
		Vector2 position = val + (GlobalTimeWrappedHourly * 2f).ToRotationVector2() * num;
		EntitySpriteDraw(value, position, rectangle, alpha, proj.rotation, origin, proj.scale, effects);
		position = val - (GlobalTimeWrappedHourly * 2f).ToRotationVector2() * num;
		rectangle = value.Frame(1, projFrames[proj.type], 0, proj.frame + 18);
		EntitySpriteDraw(value, position, rectangle, alpha, proj.rotation, origin, proj.scale, effects);
	}

	private void DrawMultisegmentPet(Projectile proj)
	{
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_0280: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Texture2D texture2D = null;
		if (proj.type == 887)
		{
			texture2D = TextureAssets.GlowMask[275].Value;
		}
		int num = 5;
		int num2 = 16;
		switch (proj.type)
		{
		case 883:
			num = 5;
			num2 = 16;
			break;
		case 887:
			num = 6;
			num2 = 16;
			break;
		case 893:
			num = 8;
			num2 = 20;
			break;
		}
		SpriteEffects effects = (SpriteEffects)(proj.spriteDirection != 1);
		Rectangle rectangle = value.Frame(1, projFrames[proj.type]);
		Vector2 origin = rectangle.Size() / 2f;
		Vector2 position = proj.Center - screenPosition;
		Color alpha = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates()));
		Color color = Color.White * ((float)(int)mouseTextColor / 255f);
		Vector2 vector = proj.Center;
		int num3 = 1;
		int num4 = projFrames[proj.type] - 1;
		for (int i = 1; i < num; i++)
		{
			int frameY = num3;
			if (i == num - 1)
			{
				frameY = num4;
			}
			else if (proj.type == 893 && i != 2 && i != 5)
			{
				frameY = 2;
			}
			Rectangle value2 = value.Frame(1, projFrames[proj.type], 0, frameY);
			Vector2 vector2 = proj.oldPos[i * 10] + proj.Size / 2f;
			float num5 = (vector - vector2).ToRotation();
			vector2 = vector - Utils.RotatedBy(new Vector2((float)num2, 0f), num5, Vector2.Zero);
			num5 = (vector - vector2).ToRotation() + (float)Math.PI / 2f;
			Vector2 position2 = vector2 - screenPosition;
			SpriteEffects effects2 = (SpriteEffects)(!(vector2.X < vector.X));
			vector = vector2;
			EntitySpriteDraw(value, position2, value2, proj.GetAlpha(Lighting.GetColor(vector2.ToTileCoordinates())), num5, origin, proj.scale, effects2);
			if (texture2D != null)
			{
				EntitySpriteDraw(texture2D, position2, value2, proj.GetAlpha(color), num5, origin, proj.scale, effects2);
			}
		}
		EntitySpriteDraw(value, position, rectangle, alpha, proj.rotation, origin, proj.scale, effects);
		if (texture2D != null)
		{
			EntitySpriteDraw(texture2D, position, rectangle, color, proj.rotation, origin, proj.scale, effects);
		}
	}

	private void DrawKite(Projectile proj)
	{
		//IL_054c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0565: Unknown result type (might be due to invalid IL or missing references)
		//IL_056a: Unknown result type (might be due to invalid IL or missing references)
		//IL_056c: Unknown result type (might be due to invalid IL or missing references)
		//IL_056e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0578: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0580: Unknown result type (might be due to invalid IL or missing references)
		//IL_0585: Unknown result type (might be due to invalid IL or missing references)
		//IL_058a: Unknown result type (might be due to invalid IL or missing references)
		//IL_058f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0592: Unknown result type (might be due to invalid IL or missing references)
		//IL_0597: Unknown result type (might be due to invalid IL or missing references)
		//IL_059c: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0601: Unknown result type (might be due to invalid IL or missing references)
		//IL_0603: Unknown result type (might be due to invalid IL or missing references)
		//IL_060d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0612: Unknown result type (might be due to invalid IL or missing references)
		//IL_0622: Unknown result type (might be due to invalid IL or missing references)
		//IL_0627: Unknown result type (might be due to invalid IL or missing references)
		//IL_062a: Unknown result type (might be due to invalid IL or missing references)
		//IL_062f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Unknown result type (might be due to invalid IL or missing references)
		//IL_0642: Unknown result type (might be due to invalid IL or missing references)
		//IL_0644: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_064b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0650: Unknown result type (might be due to invalid IL or missing references)
		//IL_0657: Unknown result type (might be due to invalid IL or missing references)
		//IL_065d: Unknown result type (might be due to invalid IL or missing references)
		//IL_065f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0661: Unknown result type (might be due to invalid IL or missing references)
		//IL_0663: Unknown result type (might be due to invalid IL or missing references)
		//IL_0665: Unknown result type (might be due to invalid IL or missing references)
		//IL_066a: Unknown result type (might be due to invalid IL or missing references)
		//IL_066d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0672: Unknown result type (might be due to invalid IL or missing references)
		//IL_0674: Unknown result type (might be due to invalid IL or missing references)
		//IL_0680: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06db: Unknown result type (might be due to invalid IL or missing references)
		//IL_06dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06df: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0900: Unknown result type (might be due to invalid IL or missing references)
		//IL_0925: Unknown result type (might be due to invalid IL or missing references)
		//IL_0933: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_074a: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0751: Unknown result type (might be due to invalid IL or missing references)
		//IL_0753: Unknown result type (might be due to invalid IL or missing references)
		//IL_0755: Unknown result type (might be due to invalid IL or missing references)
		//IL_075a: Unknown result type (might be due to invalid IL or missing references)
		//IL_075c: Unknown result type (might be due to invalid IL or missing references)
		//IL_075e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0760: Unknown result type (might be due to invalid IL or missing references)
		//IL_0765: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0893: Unknown result type (might be due to invalid IL or missing references)
		//IL_077a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0786: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0825: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c73: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c96: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf0: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		Texture2D value2 = TextureAssets.Extra[103].Value;
		int num = 15;
		float num12 = 0f;
		int num23 = 10;
		int num33 = 5;
		float num34 = 10f;
		float num35 = 0f;
		int num36 = -14;
		int num37 = -2;
		int num38 = -1;
		int num2 = -1;
		int num3 = 8;
		int num4 = 0;
		int num5 = 1;
		int num6 = 0;
		int num7 = 0;
		bool flag = true;
		bool flag2 = false;
		switch (proj.type)
		{
		case 771:
			value2 = TextureAssets.Extra[104].Value;
			num = 12;
			num4 = 12;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 12;
			num34 = 22f;
			num35 += (float)Math.PI / 8f * (float)proj.spriteDirection;
			num36 = -8;
			num37 = -6;
			num38 = 10;
			num2 = 8;
			num3 = 12;
			break;
		case 822:
			value2 = TextureAssets.Extra[132].Value;
			num = 7;
			num4 = 7;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 7;
			num34 = 22f;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num36 = -20;
			num37 = -6;
			num3 = 12;
			break;
		case 850:
			value2 = TextureAssets.Extra[147].Value;
			num = 8;
			num4 = 8;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 8;
			num34 = 22f;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num36 = -20;
			num37 = -38;
			num3 = 12;
			num6 = 6;
			num7 = 2;
			flag = false;
			break;
		case 823:
		case 846:
			value2 = TextureAssets.Extra[133].Value;
			if (proj.type == 846)
			{
				value2 = TextureAssets.Extra[146].Value;
			}
			num = 6;
			num4 = 6;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 6;
			num34 = 40f;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num36 = -16;
			num37 = -10;
			num3 = 30;
			break;
		case 827:
		case 844:
			value2 = TextureAssets.Extra[135].Value;
			if (proj.type == 844)
			{
				value2 = TextureAssets.Extra[144].Value;
			}
			num = 4;
			num4 = 3;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 16;
			num34 = 10f;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num37 = -4;
			num33 = 4;
			flag2 = true;
			break;
		case 828:
		case 829:
			value2 = TextureAssets.Extra[136].Value;
			if (proj.type == 829)
			{
				value2 = TextureAssets.Extra[137].Value;
			}
			num = 2;
			num4 = 1;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 6;
			num34 = 10f;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num3 = 10;
			num37 = -4;
			num5 = 3;
			flag = false;
			flag2 = true;
			break;
		case 852:
			value2 = TextureAssets.Extra[148].Value;
			num = 2;
			num4 = 1;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 6;
			num34 = 10f;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num3 = 10;
			num37 = -4;
			num5 = 4;
			flag = false;
			flag2 = true;
			break;
		case 830:
		case 838:
			value2 = TextureAssets.Extra[138].Value;
			if (proj.type == 838)
			{
				value2 = TextureAssets.Extra[139].Value;
			}
			num = 3;
			num4 = 3;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 3;
			num34 = 60f;
			num2 = 40;
			num38 = 3;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num3 = 50;
			num37 = -20;
			num6 = -10;
			break;
		case 843:
			value2 = TextureAssets.Extra[140].Value;
			num = 2;
			num4 = 2;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 2;
			num34 = 30f;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num3 = 20;
			num37 = -16;
			num6 = -10;
			break;
		case 845:
			value2 = TextureAssets.Extra[145].Value;
			num = 3;
			num4 = 3;
			num12 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
			num23 = 3;
			num34 = 42f;
			num2 = 50;
			num38 = 2;
			num35 += (float)Math.PI / 12f * (float)proj.spriteDirection;
			num3 = 30;
			num37 = -8;
			num6 = -10;
			break;
		case 824:
		case 826:
		case 839:
		case 840:
		case 853:
			num5 = 0;
			break;
		case 766:
		case 767:
		case 768:
		case 769:
		case 770:
			num4 = (proj.type - 766) * 3 + 3;
			break;
		}
		SpriteEffects effects = (SpriteEffects)(proj.spriteDirection != 1);
		Rectangle rectangle = value.Frame(projFrames[proj.type], 1, proj.frame);
		Vector2 origin = rectangle.Size() / 2f;
		Vector2 position = proj.Center - screenPosition;
		Color color = Lighting.GetColor(proj.Center.ToTileCoordinates());
		Color alpha = proj.GetAlpha(color);
		Texture2D value3 = TextureAssets.FishingLine.Value;
		Rectangle value4 = value3.Frame();
		Vector2 origin2 = default(Vector2);
		((Vector2)(ref origin2))._002Ector((float)(value4.Width / 2), 2f);
		Rectangle rectangle2 = value2.Frame(num);
		int width = rectangle2.Width;
		rectangle2.Width -= 2;
		Vector2 origin3 = rectangle2.Size() / 2f;
		rectangle2.X = width * (num - 1);
		Vector2 playerArmPosition = GetPlayerArmPosition(proj);
		Vector2 center = proj.Center;
		Vector2.Distance(center, playerArmPosition);
		float num8 = 12f;
		_ = (playerArmPosition - center).SafeNormalize(Vector2.Zero) * num8;
		Vector2 vector = playerArmPosition;
		Vector2 vector3 = center - vector;
		Vector2 velocity = proj.velocity;
		if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
		{
			Utils.Swap(ref velocity.X, ref velocity.Y);
		}
		float num9 = ((Vector2)(ref vector3)).Length();
		float num10 = 16f;
		float num11 = 80f;
		bool flag3 = true;
		if (num9 == 0f)
		{
			flag3 = false;
		}
		else
		{
			vector3 *= 12f / num9;
			vector -= vector3;
			vector3 = center - vector;
		}
		while (flag3)
		{
			float num13 = 12f;
			float num14 = ((Vector2)(ref vector3)).Length();
			float num15 = num14;
			if (float.IsNaN(num14) || num14 == 0f)
			{
				flag3 = false;
				continue;
			}
			if (num14 < 20f)
			{
				num13 = num14 - 8f;
				flag3 = false;
			}
			num14 = 12f / num14;
			vector3 *= num14;
			vector += vector3;
			vector3 = center - vector;
			if (num15 > 12f)
			{
				float num16 = 0.3f;
				float num17 = Math.Abs(velocity.X) + Math.Abs(velocity.Y);
				if (num17 > num10)
				{
					num17 = num10;
				}
				num17 = 1f - num17 / num10;
				num16 *= num17;
				num17 = num15 / num11;
				if (num17 > 1f)
				{
					num17 = 1f;
				}
				num16 *= num17;
				if (num16 < 0f)
				{
					num16 = 0f;
				}
				num17 = 1f;
				num16 *= num17;
				if (vector3.Y > 0f)
				{
					vector3.Y *= 1f + num16;
					vector3.X *= 1f - num16;
				}
				else
				{
					num17 = Math.Abs(velocity.X) / 3f;
					if (num17 > 1f)
					{
						num17 = 1f;
					}
					num17 -= 0.5f;
					num16 *= num17;
					if (num16 > 0f)
					{
						num16 *= 2f;
					}
					vector3.Y *= 1f + num16;
					vector3.X *= 1f - num16;
				}
			}
			float rotation = vector3.ToRotation() - (float)Math.PI / 2f;
			if (!flag3)
			{
				value4.Height = (int)num13;
			}
			Color color2 = Lighting.GetColor(center.ToTileCoordinates());
			EntitySpriteDraw(value3, vector - screenPosition, value4, color2, rotation, origin2, 1f, (SpriteEffects)0);
		}
		Vector2 vector4 = proj.Size / 2f;
		float num18 = Math.Abs(WindForVisuals);
		float num19 = MathHelper.Lerp(0.5f, 1f, num18);
		float num20 = num18;
		if (vector3.Y >= -0.02f && vector3.Y < 1f)
		{
			num20 = Utils.GetLerpValue(0.2f, 0.5f, num18, clamped: true);
		}
		int num21 = num33;
		int num22 = num23 + 1;
		for (int i = 0; i < num5; i++)
		{
			rectangle2.X = width * (num - 1);
			List<Vector2> list = new List<Vector2>();
			Vector2 vector5 = new Vector2(num19 * (float)num3 * (float)proj.spriteDirection, (float)Math.Sin(timeForVisualEffects / 300.0 * 6.2831854820251465) * num20) * 2f;
			float num24 = num36 + num6;
			float num25 = num37 + num7;
			switch (i)
			{
			case 1:
				vector5 = new Vector2(num19 * (float)num3 * (float)proj.spriteDirection, (float)Math.Sin(timeForVisualEffects / 300.0 * 6.2831854820251465) * num20 + 0.5f) * 2f;
				num24 -= 8f;
				num25 -= 8f;
				break;
			case 2:
				vector5 = new Vector2(num19 * (float)num3 * (float)proj.spriteDirection, (float)Math.Sin(timeForVisualEffects / 300.0 * 6.2831854820251465) * num20 + 1f) * 2f;
				num24 -= 4f;
				num25 -= 4f;
				break;
			case 3:
				vector5 = new Vector2(num19 * (float)num3 * (float)proj.spriteDirection, (float)Math.Sin(timeForVisualEffects / 300.0 * 6.2831854820251465) * num20 + 1.5f) * 2f;
				num24 -= 12f;
				num25 -= 12f;
				break;
			}
			Vector2 vector6 = proj.Center + Utils.RotatedBy(new Vector2(((float)rectangle.Width * 0.5f + num24) * (float)proj.spriteDirection, num25), proj.rotation + num35);
			list.Add(vector6);
			int num26 = num21;
			int num27 = 1;
			while (num26 < num22 * num21)
			{
				if (num38 != -1 && num38 == num27)
				{
					num34 = num2;
				}
				Vector2 vector7 = proj.oldPos[num26];
				if (vector7.X == 0f && vector7.Y == 0f)
				{
					list.Add(vector6);
				}
				else
				{
					vector7 += vector4 + Utils.RotatedBy(new Vector2(((float)rectangle.Width * 0.5f + num24) * (float)proj.oldSpriteDirection[num26], num25), proj.oldRot[num26] + num35);
					vector7 += vector5 * (float)(num27 + 1);
					Vector2 vector8 = vector6 - vector7;
					float num28 = ((Vector2)(ref vector8)).Length();
					if (num28 > num34)
					{
						vector8 *= num34 / num28;
					}
					vector7 = vector6 - vector8;
					list.Add(vector7);
					vector6 = vector7;
				}
				num26 += num21;
				num27++;
			}
			if (flag)
			{
				Rectangle value5 = value3.Frame();
				for (int num29 = list.Count - 2; num29 >= 0; num29--)
				{
					Vector2 vector9 = list[num29];
					Vector2 v = list[num29 + 1] - vector9;
					float num30 = ((Vector2)(ref v)).Length();
					if (!(num30 < 2f))
					{
						float rotation2 = v.ToRotation() - (float)Math.PI / 2f;
						EntitySpriteDraw(value3, vector9 - screenPosition, value5, alpha, rotation2, origin2, new Vector2(1f, num30 / (float)value5.Height), (SpriteEffects)0);
					}
				}
			}
			for (int num31 = list.Count - 2; num31 >= 0; num31--)
			{
				Vector2 vector10 = list[num31];
				Vector2 vector2 = list[num31 + 1];
				Vector2 v2 = vector2 - vector10;
				((Vector2)(ref v2)).Length();
				float rotation3 = v2.ToRotation() - (float)Math.PI / 2f + num12;
				EntitySpriteDraw(value2, vector2 - screenPosition, rectangle2, alpha, rotation3, origin3, proj.scale, effects);
				rectangle2.X -= width;
				if (rectangle2.X < 0)
				{
					int num32 = num4;
					if (flag2)
					{
						num32--;
					}
					rectangle2.X = num32 * width;
				}
			}
		}
		EntitySpriteDraw(value, position, rectangle, alpha, proj.rotation + num35, origin, proj.scale, effects);
	}

	public static Vector2 GetPlayerArmPosition(Projectile proj)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[proj.owner];
		Vector2 vector = OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
		if (player.direction != 1)
		{
			vector.X = (float)player.bodyFrame.Width - vector.X;
		}
		if (player.gravDir != 1f)
		{
			vector.Y = (float)player.bodyFrame.Height - vector.Y;
		}
		vector -= new Vector2((float)(player.bodyFrame.Width - player.width), (float)(player.bodyFrame.Height - 42)) / 2f;
		Vector2 pos = player.MountedCenter - new Vector2(20f, 42f) / 2f + vector + Vector2.UnitY * player.gfxOffY;
		if (player.mount.Active && player.mount.Type == 52)
		{
			pos.Y -= player.mount.PlayerOffsetHitbox;
			pos += new Vector2((float)(12 * player.direction), -12f);
		}
		return player.RotatedRelativePoint(pos);
	}

	private void DrawProjWithStarryTrail(Projectile proj, Color projectileColor, SpriteEffects dir)
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_029a: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_031b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0322: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_035c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_0384: Unknown result type (might be due to invalid IL or missing references)
		//IL_0389: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0412: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_0423: Unknown result type (might be due to invalid IL or missing references)
		//IL_043a: Unknown result type (might be due to invalid IL or missing references)
		//IL_043c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0441: Unknown result type (might be due to invalid IL or missing references)
		//IL_0446: Unknown result type (might be due to invalid IL or missing references)
		//IL_0448: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_0467: Unknown result type (might be due to invalid IL or missing references)
		//IL_046c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_0482: Unknown result type (might be due to invalid IL or missing references)
		//IL_0497: Unknown result type (might be due to invalid IL or missing references)
		//IL_049d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0504: Unknown result type (might be due to invalid IL or missing references)
		//IL_050b: Unknown result type (might be due to invalid IL or missing references)
		//IL_050f: Unknown result type (might be due to invalid IL or missing references)
		//IL_051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0600: Unknown result type (might be due to invalid IL or missing references)
		//IL_0602: Unknown result type (might be due to invalid IL or missing references)
		//IL_0604: Unknown result type (might be due to invalid IL or missing references)
		//IL_060b: Unknown result type (might be due to invalid IL or missing references)
		//IL_060e: Unknown result type (might be due to invalid IL or missing references)
		Color color = default(Color);
		((Color)(ref color))._002Ector(255, 255, 255, ((Color)(ref projectileColor)).A - proj.alpha);
		Vector2 vector = proj.velocity;
		Color color2 = Color.Blue * 0.1f;
		Vector2 spinningpoint = default(Vector2);
		((Vector2)(ref spinningpoint))._002Ector(0f, -4f);
		float num = 0f;
		float t = ((Vector2)(ref vector)).Length();
		float num2 = Utils.GetLerpValue(3f, 5f, t, clamped: true);
		bool flag = true;
		if (proj.type == 856 || proj.type == 857)
		{
			vector = proj.position - proj.oldPos[1];
			float num3 = ((Vector2)(ref vector)).Length();
			vector = ((num3 != 0f) ? (vector * (5f / num3)) : Vector2.UnitY);
			Vector2 origin = default(Vector2);
			((Vector2)(ref origin))._002Ector(proj.ai[0], proj.ai[1]);
			Vector2 center = player[proj.owner].Center;
			float lerpValue = Utils.GetLerpValue(0f, 120f, origin.Distance(center), clamped: true);
			float num4 = 90f;
			if (proj.type == 857)
			{
				num4 = 60f;
				flag = false;
			}
			float lerpValue2 = Utils.GetLerpValue(num4, num4 * (5f / 6f), proj.localAI[0], clamped: true);
			float lerpValue3 = Utils.GetLerpValue(0f, 120f, proj.Center.Distance(center), clamped: true);
			lerpValue *= lerpValue3;
			lerpValue2 *= Utils.GetLerpValue(0f, 15f, proj.localAI[0], clamped: true);
			color2 = Color.HotPink * 0.15f * (lerpValue2 * lerpValue);
			if (proj.type == 857)
			{
				color2 = proj.GetFirstFractalColor() * 0.15f * (lerpValue2 * lerpValue);
			}
			((Vector2)(ref spinningpoint))._002Ector(0f, -2f);
			float lerpValue4 = Utils.GetLerpValue(num4, num4 * (2f / 3f), proj.localAI[0], clamped: true);
			lerpValue4 *= Utils.GetLerpValue(0f, 20f, proj.localAI[0], clamped: true);
			num = -0.3f * (1f - lerpValue4);
			num += -1f * Utils.GetLerpValue(15f, 0f, proj.localAI[0], clamped: true);
			num *= lerpValue;
			num2 = lerpValue2 * lerpValue;
		}
		Vector2 val = proj.Center + vector;
		Texture2D value = TextureAssets.Projectile[proj.type].Value;
		_ = Utils.Size(new Rectangle(0, 0, value.Width, value.Height)) / 2f;
		Texture2D value2 = TextureAssets.Extra[91].Value;
		Rectangle value3 = value2.Frame();
		Vector2 origin2 = default(Vector2);
		((Vector2)(ref origin2))._002Ector((float)value3.Width / 2f, 10f);
		_ = Color.Cyan * 0.5f * num2;
		Vector2 vector2 = default(Vector2);
		((Vector2)(ref vector2))._002Ector(0f, proj.gfxOffY);
		float num5 = (float)timeForVisualEffects / 60f;
		Vector2 vector3 = val + vector * 0.5f;
		Color color3 = Color.White * 0.5f * num2;
		((Color)(ref color3)).A = 0;
		Color color4 = color2 * num2;
		((Color)(ref color4)).A = 0;
		Color color5 = color2 * num2;
		((Color)(ref color5)).A = 0;
		Color color6 = color2 * num2;
		((Color)(ref color6)).A = 0;
		float num6 = vector.ToRotation();
		EntitySpriteDraw(value2, vector3 - screenPosition + vector2 + spinningpoint.RotatedBy((float)Math.PI * 2f * num5), value3, color4, num6 + (float)Math.PI / 2f, origin2, 1.5f + num, (SpriteEffects)0);
		EntitySpriteDraw(value2, vector3 - screenPosition + vector2 + spinningpoint.RotatedBy((float)Math.PI * 2f * num5 + (float)Math.PI * 2f / 3f), value3, color5, num6 + (float)Math.PI / 2f, origin2, 1.1f + num, (SpriteEffects)0);
		EntitySpriteDraw(value2, vector3 - screenPosition + vector2 + spinningpoint.RotatedBy((float)Math.PI * 2f * num5 + 4.1887903f), value3, color6, num6 + (float)Math.PI / 2f, origin2, 1.3f + num, (SpriteEffects)0);
		Vector2 vector4 = val - vector * 0.5f;
		for (float num7 = 0f; num7 < 1f; num7 += 0.5f)
		{
			float num8 = num5 % 0.5f / 0.5f;
			num8 = (num8 + num7) % 1f;
			float num9 = num8 * 2f;
			if (num9 > 1f)
			{
				num9 = 2f - num9;
			}
			EntitySpriteDraw(value2, vector4 - screenPosition + vector2, value3, color3 * num9, num6 + (float)Math.PI / 2f, origin2, 0.3f + num8 * 0.5f, (SpriteEffects)0);
		}
		if (flag)
		{
			float rotation = proj.rotation + proj.localAI[1];
			_ = (float)timeForVisualEffects / 240f;
			_ = GlobalTimeWrappedHourly;
			float globalTimeWrappedHourly = GlobalTimeWrappedHourly;
			globalTimeWrappedHourly %= 5f;
			globalTimeWrappedHourly /= 2.5f;
			if (globalTimeWrappedHourly >= 1f)
			{
				globalTimeWrappedHourly = 2f - globalTimeWrappedHourly;
			}
			globalTimeWrappedHourly = globalTimeWrappedHourly * 0.5f + 0.5f;
			Vector2 position = proj.Center - screenPosition;
			instance.LoadItem(75);
			Texture2D value4 = TextureAssets.Item[75].Value;
			Rectangle rectangle = value4.Frame(1, 8);
			EntitySpriteDraw(origin: rectangle.Size() / 2f, texture: value4, position: position, sourceRectangle: rectangle, color: color, rotation: rotation, scale: proj.scale, effects: (SpriteEffects)0);
		}
	}

	private static int TryInteractingWithVoidLens(Projectile proj)
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		if (gamePaused || gameMenu)
		{
			return 0;
		}
		bool flag = !SmartCursorIsUsed && !PlayerInput.UsingGamepad;
		Player localPlayer = LocalPlayer;
		Point point = proj.Center.ToTileCoordinates();
		Vector2 compareSpot = localPlayer.Center;
		if (!localPlayer.IsProjectileInteractibleAndInInteractionRange(proj, ref compareSpot))
		{
			return 0;
		}
		Matrix matrix = Matrix.Invert(GameViewMatrix.ZoomMatrix);
		Vector2 val = ReverseGravitySupport(MouseScreen);
		Vector2.Transform(screenPosition, matrix);
		Vector2 v = Vector2.Transform(val, matrix) + screenPosition;
		Rectangle hitbox = proj.Hitbox;
		bool flag2 = ((Rectangle)(ref hitbox)).Contains(v.ToPoint());
		if (!((flag2 || SmartInteractProj == proj.whoAmI) & !localPlayer.lastMouseInterface))
		{
			if (!flag)
			{
				return 1;
			}
			return 0;
		}
		HasInteractibleObjectThatIsNotATile = true;
		if (flag2)
		{
			localPlayer.noThrow = 2;
			localPlayer.cursorItemIconEnabled = true;
			localPlayer.cursorItemIconID = 4131;
		}
		if (PlayerInput.UsingGamepad)
		{
			localPlayer.GamepadEnableGrappleCooldown();
		}
		if (mouseRight && mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
		{
			mouseRightRelease = false;
			localPlayer.tileInteractAttempted = true;
			localPlayer.tileInteractionHappened = true;
			localPlayer.releaseUseTile = false;
			if (localPlayer.chest == -5)
			{
				localPlayer.chest = -1;
				SoundEngine.PlaySound(in SoundID.Item130);
				Recipe.FindRecipes();
			}
			else if (localPlayer.disableVoidBag < 0)
			{
				localPlayer.chest = -5;
				for (int i = 0; i < 40; i++)
				{
					ItemSlot.SetGlow(i, -1f, chest: true);
				}
				localPlayer.voidLensChest.Set(proj);
				localPlayer.chestX = point.X;
				localPlayer.chestY = point.Y;
				localPlayer.SetTalkNPC(-1);
				SetNPCShopIndex(0);
				playerInventory = true;
				SoundEngine.PlaySound(in SoundID.Item130);
				Recipe.FindRecipes();
			}
		}
		if (!SmartCursorIsUsed && !PlayerInput.UsingGamepad)
		{
			return 0;
		}
		if (!flag)
		{
			return 2;
		}
		return 0;
	}

	private static int TryInteractingWithMoneyTrough(Projectile proj)
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		if (gamePaused || gameMenu)
		{
			return 0;
		}
		bool flag = !SmartCursorIsUsed && !PlayerInput.UsingGamepad;
		Player localPlayer = LocalPlayer;
		Point point = proj.Center.ToTileCoordinates();
		Vector2 compareSpot = localPlayer.Center;
		if (!localPlayer.IsProjectileInteractibleAndInInteractionRange(proj, ref compareSpot))
		{
			return 0;
		}
		Matrix matrix = Matrix.Invert(GameViewMatrix.ZoomMatrix);
		Vector2 val = ReverseGravitySupport(MouseScreen);
		Vector2.Transform(screenPosition, matrix);
		Vector2 v = Vector2.Transform(val, matrix) + screenPosition;
		Rectangle hitbox = proj.Hitbox;
		bool flag2 = ((Rectangle)(ref hitbox)).Contains(v.ToPoint());
		if (!((flag2 || SmartInteractProj == proj.whoAmI) & !localPlayer.lastMouseInterface))
		{
			if (!flag)
			{
				return 1;
			}
			return 0;
		}
		HasInteractibleObjectThatIsNotATile = true;
		if (flag2)
		{
			localPlayer.noThrow = 2;
			localPlayer.cursorItemIconEnabled = true;
			localPlayer.cursorItemIconID = 3213;
			if (proj.type == 960)
			{
				localPlayer.cursorItemIconID = 5098;
			}
		}
		if (PlayerInput.UsingGamepad)
		{
			localPlayer.GamepadEnableGrappleCooldown();
		}
		if (mouseRight && mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
		{
			mouseRightRelease = false;
			localPlayer.tileInteractAttempted = true;
			localPlayer.tileInteractionHappened = true;
			localPlayer.releaseUseTile = false;
			if (localPlayer.chest == -2)
			{
				localPlayer.chest = -1;
				PlayInteractiveProjectileOpenCloseSound(proj.type, open: false);
				Recipe.FindRecipes();
			}
			else
			{
				localPlayer.chest = -2;
				for (int i = 0; i < 40; i++)
				{
					ItemSlot.SetGlow(i, -1f, chest: true);
				}
				localPlayer.piggyBankProjTracker.Set(proj);
				localPlayer.chestX = point.X;
				localPlayer.chestY = point.Y;
				localPlayer.SetTalkNPC(-1);
				SetNPCShopIndex(0);
				playerInventory = true;
				PlayInteractiveProjectileOpenCloseSound(proj.type, open: true);
				Recipe.FindRecipes();
			}
		}
		if (!SmartCursorIsUsed && !PlayerInput.UsingGamepad)
		{
			return 0;
		}
		if (!flag)
		{
			return 2;
		}
		return 0;
	}

	public static void PlayInteractiveProjectileOpenCloseSound(int projType, bool open)
	{
		switch (projType)
		{
		case 525:
			SoundEngine.PlaySound(in SoundID.Item59);
			break;
		case 960:
		{
			SoundStyle style = (open ? SoundID.ChesterOpen : SoundID.ChesterClose);
			SoundEngine.PlaySound(in style);
			break;
		}
		}
	}

	public static void PrintTimedMessage(string message, params object[] arguments)
	{
		Console.WriteLine($"{(int)time} {string.Format(message, arguments)}");
	}

	private static void TryInteractingWithMoneyTrough2(Projectile proj)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		if (gamePaused && !gameMenu)
		{
			return;
		}
		Vector2 vector = proj.position - screenPosition;
		if (!((float)mouseX > vector.X) || !((float)mouseX < vector.X + (float)proj.width) || !((float)mouseY > vector.Y) || !((float)mouseY < vector.Y + (float)proj.height))
		{
			return;
		}
		int num = (int)(player[myPlayer].Center.X / 16f);
		int num2 = (int)(player[myPlayer].Center.Y / 16f);
		int num3 = (int)proj.Center.X / 16;
		int num4 = (int)proj.Center.Y / 16;
		int lastTileRangeX = player[myPlayer].lastTileRangeX;
		int lastTileRangeY = player[myPlayer].lastTileRangeY;
		if (num < num3 - lastTileRangeX || num > num3 + lastTileRangeX + 1 || num2 < num4 - lastTileRangeY || num2 > num4 + lastTileRangeY + 1)
		{
			return;
		}
		Player localPlayer = LocalPlayer;
		player[myPlayer].noThrow = 2;
		player[myPlayer].cursorItemIconEnabled = true;
		player[myPlayer].cursorItemIconID = 3213;
		if (PlayerInput.UsingGamepad)
		{
			player[myPlayer].GamepadEnableGrappleCooldown();
		}
		if (mouseRight && mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
		{
			mouseRightRelease = false;
			localPlayer.tileInteractAttempted = true;
			localPlayer.tileInteractionHappened = true;
			localPlayer.releaseUseTile = false;
			if (player[myPlayer].chest == -2)
			{
				SoundEngine.PlaySound(in SoundID.Item59);
				player[myPlayer].chest = -1;
				Recipe.FindRecipes();
				return;
			}
			player[myPlayer].piggyBankProjTracker.Set(proj);
			player[myPlayer].chest = -2;
			player[myPlayer].chestX = (int)(proj.Center.X / 16f);
			player[myPlayer].chestY = (int)(proj.Center.Y / 16f);
			player[myPlayer].SetTalkNPC(-1);
			SetNPCShopIndex(0);
			playerInventory = true;
			SoundEngine.PlaySound(in SoundID.Item59);
			Recipe.FindRecipes();
		}
	}

	public void PrepareDrawnProjectileDrawing(Projectile proj)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		CurrentDrawnEntity = proj;
		int projectileDesiredShader = GetProjectileDesiredShader(proj);
		Matrix value = Transform;
		if (proj.isAPreviewDummy)
		{
			value = UIScaleMatrix;
		}
		PrepareDrawnEntityDrawing(proj, projectileDesiredShader, value);
	}

	public void PrepareDrawnEntityDrawing(Entity entity, int intendedShader, Matrix? overrideMatrix)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		CurrentDrawnEntity = entity;
		Matrix transformMatrix = Transform;
		if (overrideMatrix.HasValue)
		{
			transformMatrix = overrideMatrix.Value;
		}
		if (intendedShader != 0)
		{
			if (CurrentDrawnEntityShader == 0 || CurrentDrawnEntityShader == -1)
			{
				spriteBatch.End();
				spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, ((Game)this).GraphicsDevice.RasterizerState, (Effect)null, transformMatrix);
			}
		}
		else if (CurrentDrawnEntityShader != 0 && CurrentDrawnEntityShader != -1)
		{
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, ((Game)this).GraphicsDevice.RasterizerState, (Effect)null, transformMatrix);
		}
		CurrentDrawnEntityShader = intendedShader;
	}

	public static void EntitySpriteDraw(Texture2D texture, Vector2 position, Rectangle? sourceRectangle, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects, float worthless = 0f)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		EntitySpriteDraw(texture, position, sourceRectangle, color, rotation, origin, new Vector2(scale), effects, worthless);
	}

	public static void EntitySpriteDraw(Texture2D texture, Vector2 position, Rectangle? sourceRectangle, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, float worthless = 0f)
	{
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		if (CurrentDrawnEntityShader > 0)
		{
			DrawData value = new DrawData(texture, position, sourceRectangle, color, rotation, origin, scale, effects, worthless);
			GameShaders.Armor.Apply(CurrentDrawnEntityShader, CurrentDrawnEntity, value);
			value.Draw(spriteBatch);
		}
		else
		{
			spriteBatch.Draw(texture, position, sourceRectangle, color, rotation, origin, scale, effects, worthless);
		}
	}

	public static void EntitySpriteDraw(DrawData data)
	{
		if (CurrentDrawnEntityShader > 0)
		{
			GameShaders.Armor.Apply(CurrentDrawnEntityShader, CurrentDrawnEntity, data);
			data.Draw(spriteBatch);
		}
		else
		{
			data.Draw(spriteBatch);
		}
	}

	public static Color buffColor(Color newColor, float R, float G, float B, float A)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		((Color)(ref newColor)).R = (byte)((float)(int)((Color)(ref newColor)).R * R);
		((Color)(ref newColor)).G = (byte)((float)(int)((Color)(ref newColor)).G * G);
		((Color)(ref newColor)).B = (byte)((float)(int)((Color)(ref newColor)).B * B);
		((Color)(ref newColor)).A = (byte)((float)(int)((Color)(ref newColor)).A * A);
		return newColor;
	}

	protected void CacheNPCDraws()
	{
		DrawCacheNPCsMoonMoon.Clear();
		DrawCacheNPCsOverPlayers.Clear();
		DrawCacheNPCProjectiles.Clear();
		DrawCacheNPCsBehindNonSolidTiles.Clear();
		for (int i = 0; i < 200; i++)
		{
			if (!npc[i].active)
			{
				continue;
			}
			if (npc[i].type == 398 && npc[i].ai[0] >= 0f)
			{
				int num = i;
				int num2 = -1;
				int num3 = -1;
				int num4 = -1;
				for (int j = 0; j < 200; j++)
				{
					if (npc[j].active && npc[j].ai[3] == (float)num)
					{
						if (num2 == -1 && npc[j].type == 397 && npc[j].ai[2] == 0f)
						{
							num2 = j;
						}
						if (num3 == -1 && npc[j].type == 397 && npc[j].ai[2] == 1f)
						{
							num3 = j;
						}
						if (num4 == -1 && npc[j].type == 396)
						{
							num4 = j;
						}
						if (num2 != -1 && num3 != -1 && num4 != -1)
						{
							break;
						}
					}
				}
				if (num2 != -1 && num3 != -1 && num4 != -1)
				{
					DrawCacheNPCsMoonMoon.Add(num);
					if (num2 != -1)
					{
						DrawCacheNPCsMoonMoon.Add(num2);
					}
					if (num3 != -1)
					{
						DrawCacheNPCsMoonMoon.Add(num3);
					}
					if (num4 != -1)
					{
						DrawCacheNPCsMoonMoon.Add(num4);
					}
				}
			}
			else if (npc[i].type == 421 && npc[i].ai[0] == 5f)
			{
				DrawCacheNPCsOverPlayers.Add(i);
			}
			else if (npc[i].type == 516 || npc[i].type == 519)
			{
				DrawCacheNPCProjectiles.Add(i);
			}
			else if (npc[i].type == 548)
			{
				DrawCacheNPCsBehindNonSolidTiles.Add(i);
			}
			NPCLoader.DrawBehind(npc[i], i);
		}
	}

	protected void CacheProjDraws()
	{
		DrawCacheProjsBehindNPCsAndTiles.Clear();
		DrawCacheProjsBehindNPCs.Clear();
		DrawCacheProjsBehindProjectiles.Clear();
		DrawCacheProjsOverWiresUI.Clear();
		DrawCacheProjsOverPlayers.Clear();
		DrawCacheFirstFractals.Clear();
		for (int i = 0; i < 1000; i++)
		{
			if (!projectile[i].active)
			{
				continue;
			}
			if (projectile[i].type == 857)
			{
				DrawCacheFirstFractals.Add(i);
			}
			if (projectile[i].type == 578 || projectile[i].type == 579 || projectile[i].type == 641 || projectile[i].type == 617 || projectile[i].type == 813)
			{
				DrawCacheProjsBehindNPCsAndTiles.Add(i);
			}
			if (projectile[i].type == 625 || projectile[i].type == 626 || projectile[i].type == 627 || projectile[i].type == 628 || projectile[i].type == 525 || projectile[i].type == 960 || projectile[i].type == 734 || projectile[i].type == 946 || (projectile[i].type == 908 && projectile[i].localAI[0] <= 0f))
			{
				DrawCacheProjsBehindProjectiles.Add(i);
			}
			if (projectile[i].type == 759 || (projectile[i].type == 908 && projectile[i].localAI[0] > 0f))
			{
				DrawCacheProjsOverPlayers.Add(i);
			}
			if (projectile[i].type == 651)
			{
				DrawCacheProjsOverWiresUI.Add(i);
			}
			if (projectile[i].type == 673 || projectile[i].type == 674 || projectile[i].type == 691 || projectile[i].type == 692 || projectile[i].type == 693 || projectile[i].type == 923)
			{
				DrawCacheProjsBehindNPCs.Add(i);
			}
			if (projectile[i].type == 636 || projectile[i].type == 598 || projectile[i].type == 971)
			{
				bool flag = true;
				if (projectile[i].ai[0] == 1f)
				{
					int num = (int)projectile[i].ai[1];
					if (num >= 0 && num < 200 && npc[num].active && npc[num].type != 492)
					{
						if (npc[num].behindTiles)
						{
							DrawCacheProjsBehindNPCsAndTiles.Add(i);
						}
						else
						{
							DrawCacheProjsBehindNPCs.Add(i);
						}
						flag = false;
					}
				}
				if (flag)
				{
					DrawCacheProjsBehindProjectiles.Add(i);
				}
			}
			ProjectileLoader.DrawBehind(projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles, DrawCacheProjsOverPlayers, DrawCacheProjsOverWiresUI);
		}
	}

	protected void DrawCachedNPCs(List<int> npcCache, bool behindTiles)
	{
		for (int i = 0; i < npcCache.Count; i++)
		{
			try
			{
				DrawNPC(npcCache[i], behindTiles);
			}
			catch
			{
				npc[npcCache[i]].active = false;
			}
		}
	}

	protected void DrawCachedProjs(List<int> projCache, bool startSpriteBatch = true)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		if (startSpriteBatch)
		{
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		}
		CurrentDrawnEntity = null;
		CurrentDrawnEntityShader = 0;
		for (int i = 0; i < projCache.Count; i++)
		{
			try
			{
				DrawProj(projCache[i]);
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
				projectile[projCache[i]].active = false;
			}
		}
		CurrentDrawnEntity = null;
		CurrentDrawnEntityShader = 0;
		if (startSpriteBatch)
		{
			spriteBatch.End();
		}
	}

	protected void DrawSuperSpecialProjectiles(List<int> projCache, bool startSpriteBatch = true)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		if (startSpriteBatch)
		{
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		}
		for (int i = 0; i < projCache.Count; i++)
		{
			try
			{
				int num = projCache[i];
				Projectile projectile = Main.projectile[num];
				int owner = projectile.owner;
				Player other = Main.player[owner];
				if (playerVisualClone[owner] == null)
				{
					playerVisualClone[owner] = new Player();
				}
				Player player = playerVisualClone[owner];
				player.CopyVisuals(other);
				player.isFirstFractalAfterImage = true;
				player.firstFractalAfterImageOpacity = projectile.Opacity * 1f;
				player.ResetEffects();
				player.ResetVisibleAccessories();
				player.UpdateDyes();
				player.DisplayDollUpdate();
				player.UpdateSocialShadow();
				player.itemAnimationMax = 60;
				player.itemAnimation = (int)projectile.localAI[0];
				player.itemRotation = projectile.velocity.ToRotation();
				player.heldProj = num;
				player.Center = projectile.Center - projectile.velocity.SafeNormalize(Vector2.Zero) * 42f;
				player.direction = ((projectile.velocity.X > 0f) ? 1 : (-1));
				player.itemRotation = (float)Math.Atan2(projectile.velocity.Y * (float)player.direction, projectile.velocity.X * (float)player.direction);
				player.velocity.Y = 0.01f;
				player.wingFrame = 2;
				player.PlayerFrame();
				player.socialIgnoreLight = true;
				PlayerRenderer.DrawPlayer(Camera, player, player.position, 0f, player.fullRotationOrigin);
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
				Main.projectile[projCache[i]].active = false;
			}
		}
		if (startSpriteBatch)
		{
			spriteBatch.End();
		}
	}

	protected void SortDrawCacheWorms()
	{
		SortBabyBirdProjectiles(DrawCacheProjsOverPlayers);
		SortStardustDragonProjectiles(DrawCacheProjsBehindProjectiles);
	}

	private void SortBabyBirdProjectiles(List<int> list)
	{
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		List<int> list2 = new List<int>();
		for (int num = list.Count - 1; num >= 0; num--)
		{
			int num2 = list[num];
			if (Main.projectile[num2].type == 759)
			{
				list2.Add(num2);
				list.RemoveAt(num);
				Projectile projectile = Main.projectile[num2];
				Player master = player[projectile.owner];
				int stackedIndex = (int)projectile.localAI[0];
				if (projectile.frame == projFrames[projectile.type] - 1)
				{
					projectile.Center = Projectile.AI_158_GetHomeLocation(master, stackedIndex);
					projectile.velocity = Vector2.Zero;
				}
			}
		}
		list.AddRange(list2);
		list2.Clear();
	}

	private void SortStardustDragonProjectiles(List<int> list)
	{
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		List<List<int>> list2 = new List<List<int>>();
		for (int i = 0; i < list.Count; i++)
		{
			int num = list[i];
			if (Main.projectile[num].type == 628)
			{
				list.Remove(num);
				List<int> list3 = new List<int>();
				list3.Insert(0, num);
				int byUUID = Projectile.GetByUUID(Main.projectile[num].owner, Main.projectile[num].ai[0]);
				while (byUUID >= 0 && !list3.Contains(byUUID) && Main.projectile[byUUID].active && Main.projectile[byUUID].type >= 625 && Main.projectile[byUUID].type <= 627)
				{
					list3.Add(byUUID);
					list.Remove(byUUID);
					byUUID = Projectile.GetByUUID(Main.projectile[byUUID].owner, Main.projectile[byUUID].ai[0]);
				}
				List<int> list4 = new List<int>();
				for (int num2 = list3.Count - 2; num2 >= 0; num2--)
				{
					list4.Add(list3[num2]);
				}
				list4.Add(list3[list3.Count - 1]);
				list2.Add(list4);
				i = -1;
			}
		}
		List<int> list5 = new List<int>(list);
		list2.Add(list5);
		list.Clear();
		for (int j = 0; j < list2.Count; j++)
		{
			for (int k = 0; k < list2[j].Count; k++)
			{
				list.Add(list2[j][k]);
			}
		}
		for (int l = 0; l < list.Count; l++)
		{
			Projectile projectile = Main.projectile[list[l]];
			int byUUID2 = Projectile.GetByUUID(projectile.owner, projectile.ai[0]);
			if (projectile.type < 626 || projectile.type > 628 || byUUID2 < 0 || !ProjectileID.Sets.StardustDragon[Main.projectile[byUUID2].type])
			{
				continue;
			}
			Vector2 vector = Main.projectile[byUUID2].Center - projectile.Center;
			if (vector != Vector2.Zero)
			{
				float num5 = Main.projectile[byUUID2].scale * 16f;
				float num3 = ((Vector2)(ref vector)).Length();
				float num4 = num5 - num3;
				if (num4 != 0f)
				{
					projectile.Center += Vector2.Normalize(vector) * (0f - num4);
				}
			}
		}
	}

	protected void DrawWoF()
	{
		if (wofNPCIndex < 0 || !npc[wofNPCIndex].active || npc[wofNPCIndex].life <= 0)
		{
			return;
		}
		for (int i = 0; i < 255; i++)
		{
			if (player[i].active && player[i].tongued && !player[i].dead)
			{
				DrawWOFTongueToPlayer(i);
			}
		}
		for (int j = 0; j < 200; j++)
		{
			if (npc[j].active && npc[j].aiStyle == 29)
			{
				DrawWOFRopeToTheHungry(j);
			}
		}
		DrawWOFBody();
	}

	private static void DrawWOFBody()
	{
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		int num = TextureAssets.Wof.Height() / 3;
		float num2 = wofDrawAreaTop;
		float num3 = wofDrawAreaBottom;
		num3 = screenPosition.Y + (float)screenHeight;
		float num4 = (int)((num2 - screenPosition.Y) / (float)num) + 1;
		if (num4 > 12f)
		{
			return;
		}
		float num5 = num4 * (float)num;
		if (num5 > 0f)
		{
			num2 -= num5;
		}
		float num6 = npc[wofNPCIndex].position.X;
		if (npc[wofNPCIndex].direction > 0)
		{
			num6 -= 80f;
		}
		SpriteEffects effects = (SpriteEffects)0;
		if (npc[wofNPCIndex].spriteDirection == 1)
		{
			effects = (SpriteEffects)1;
		}
		int num7 = wofDrawFrameIndex / 6 * num;
		if (!gamePaused && ++wofDrawFrameIndex >= 18)
		{
			wofDrawFrameIndex = 0;
		}
		float num8 = num3 - num2;
		for (int i = (int)num2; (float)i < num3; i += num)
		{
			num8 = num3 - (float)i;
			if (num8 > (float)num)
			{
				num8 = num;
			}
			for (int j = 0; (float)j < num8; j += 16)
			{
				int x = (int)(num6 + (float)(TextureAssets.Wof.Width() / 2)) / 16;
				int y = (i + j) / 16;
				spriteBatch.Draw(TextureAssets.Wof.Value, new Vector2(num6 - screenPosition.X, (float)(i + j) - screenPosition.Y), (Rectangle?)new Rectangle(0, num7 + j, TextureAssets.Wof.Width(), 16), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, effects, 0f);
			}
		}
	}

	private static void DrawWOFRopeToTheHungry(int i)
	{
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		float num = npc[wofNPCIndex].position.X + (float)(npc[wofNPCIndex].width / 2);
		float y = npc[wofNPCIndex].position.Y;
		float num2 = wofDrawAreaBottom - wofDrawAreaTop;
		bool flag = false;
		if (npc[i].frameCounter > 7.0)
		{
			flag = true;
		}
		y = (float)wofDrawAreaTop + num2 * npc[i].ai[0];
		float scale = npc[i].scale;
		float x = npc[i].Center.X;
		float y2 = npc[i].Bottom.Y - (float)npc[i].height * 0.5f * scale;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(x, y2);
		vector += npc[i].netOffset;
		float num3 = num - vector.X;
		float num4 = y - vector.Y;
		float rotation = (float)Math.Atan2(num4, num3) - 1.57f;
		bool flag2 = true;
		while (flag2)
		{
			SpriteEffects effects = (SpriteEffects)0;
			if (flag)
			{
				effects = (SpriteEffects)1;
				flag = false;
			}
			else
			{
				flag = true;
			}
			int height = 28;
			int num5 = (int)(40f * scale);
			float num6 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
			if (num6 < (float)num5)
			{
				height = (int)num6 - num5 + 28;
				flag2 = false;
			}
			num6 = 28f * scale / num6;
			num3 *= num6;
			num4 *= num6;
			vector.X += num3;
			vector.Y += num4;
			num3 = num - vector.X;
			num4 = y - vector.Y;
			Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
			spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain4.Width(), height), color, rotation, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), scale, effects, 0f);
		}
	}

	private static void DrawWOFTongueToPlayer(int i)
	{
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		float num = npc[wofNPCIndex].position.X + (float)(npc[wofNPCIndex].width / 2);
		float num2 = npc[wofNPCIndex].position.Y + (float)(npc[wofNPCIndex].height / 2);
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(player[i].position.X + (float)player[i].width * 0.5f, player[i].position.Y + (float)player[i].height * 0.5f);
		float num3 = num - vector.X;
		float num4 = num2 - vector.Y;
		float rotation = (float)Math.Atan2(num4, num3) - 1.57f;
		bool flag = true;
		while (flag)
		{
			float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
			if (num5 < 40f)
			{
				flag = false;
				continue;
			}
			num5 = (float)TextureAssets.Chain12.Height() / num5;
			num3 *= num5;
			num4 *= num5;
			vector.X += num3;
			vector.Y += num4;
			num3 = num - vector.X;
			num4 = num2 - vector.Y;
			Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
			spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chain12.Width(), TextureAssets.Chain12.Height()), color, rotation, new Vector2((float)TextureAssets.Chain12.Width() * 0.5f, (float)TextureAssets.Chain12.Height() * 0.5f), 1f, (SpriteEffects)0, 0f);
		}
	}

	public static Color quickAlpha(Color oldColor, float Alpha)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		Color result = oldColor;
		((Color)(ref result)).R = (byte)((float)(int)((Color)(ref result)).R * Alpha);
		((Color)(ref result)).G = (byte)((float)(int)((Color)(ref result)).G * Alpha);
		((Color)(ref result)).B = (byte)((float)(int)((Color)(ref result)).B * Alpha);
		((Color)(ref result)).A = (byte)((float)(int)((Color)(ref result)).A * Alpha);
		return result;
	}

	private void DrawItem_GetBasics(Item item, int slot, out Texture2D texture, out Rectangle frame, out Rectangle glowmaskFrame)
	{
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_0234: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		LoadItem(item.type);
		if (ItemID.Sets.AnimatesAsSoul[item.type] || ItemID.Sets.NebulaPickup[item.type])
		{
			DrawItem_AnimateSlot(slot, itemAnimations[item.type].TicksPerFrame, itemAnimations[item.type].FrameCount);
			texture = TextureAssets.Item[item.type].Value;
		}
		else if (ItemID.Sets.IsFood[item.type])
		{
			texture = TextureAssets.Item[item.type].Value;
		}
		else
		{
			switch (item.type)
			{
			case 5358:
			case 5359:
			case 5360:
			case 5361:
				LoadItem(5437);
				texture = TextureAssets.Item[5437].Value;
				break;
			case 71:
			case 72:
			case 73:
			case 74:
			{
				int num = item.type - 71;
				texture = TextureAssets.Coin[num].Value;
				DrawItem_AnimateSlot(slot, 6, 8);
				frame = (glowmaskFrame = _coinOnWorldAnimation.GetFrame(texture, itemFrameCounter[slot]));
				return;
			}
			case 3858:
				texture = TextureAssets.Item[item.type].Value;
				DrawItem_AnimateSlot(slot, 5, 3);
				frame = texture.Frame();
				glowmaskFrame = TextureAssets.GlowMask[233].Value.Frame(1, 3, 0, itemFrameCounter[slot] / 5);
				glowmaskFrame.Height -= 2;
				return;
			case 75:
				texture = TextureAssets.Item[item.type].Value;
				DrawItem_AnimateSlot(slot, itemAnimations[item.type].TicksPerFrame, itemAnimations[item.type].FrameCount * 2 - 1);
				break;
			default:
				texture = TextureAssets.Item[item.type].Value;
				break;
			}
		}
		if (itemAnimations[item.type] != null)
		{
			frame = (glowmaskFrame = itemAnimations[item.type].GetFrame(texture, itemFrameCounter[slot]));
		}
		else
		{
			frame = (glowmaskFrame = texture.Frame());
		}
	}

	private void DrawItem_AnimateSlot(int slot, int gameFramesPerSpriteFrame, int spriteFramesAmount)
	{
		if (++itemFrameCounter[slot] >= gameFramesPerSpriteFrame * spriteFramesAmount)
		{
			itemFrameCounter[slot] = 0;
		}
	}

	protected void DrawItem(Item item, int whoami)
	{
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_03af: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_027e: Unknown result type (might be due to invalid IL or missing references)
		//IL_052d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0539: Unknown result type (might be due to invalid IL or missing references)
		//IL_054c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0552: Unknown result type (might be due to invalid IL or missing references)
		//IL_0554: Unknown result type (might be due to invalid IL or missing references)
		//IL_055b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0560: Unknown result type (might be due to invalid IL or missing references)
		//IL_0565: Unknown result type (might be due to invalid IL or missing references)
		//IL_0576: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_089f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0882: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_070a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0711: Unknown result type (might be due to invalid IL or missing references)
		//IL_042f: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0454: Unknown result type (might be due to invalid IL or missing references)
		//IL_0456: Unknown result type (might be due to invalid IL or missing references)
		//IL_045d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0462: Unknown result type (might be due to invalid IL or missing references)
		//IL_0467: Unknown result type (might be due to invalid IL or missing references)
		//IL_047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0482: Unknown result type (might be due to invalid IL or missing references)
		//IL_092c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0931: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0916: Unknown result type (might be due to invalid IL or missing references)
		//IL_091d: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05df: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0609: Unknown result type (might be due to invalid IL or missing references)
		//IL_0610: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0322: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0943: Unknown result type (might be due to invalid IL or missing references)
		//IL_0945: Unknown result type (might be due to invalid IL or missing references)
		//IL_094c: Unknown result type (might be due to invalid IL or missing references)
		//IL_094e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0955: Unknown result type (might be due to invalid IL or missing references)
		//IL_0754: Unknown result type (might be due to invalid IL or missing references)
		//IL_0760: Unknown result type (might be due to invalid IL or missing references)
		//IL_0773: Unknown result type (might be due to invalid IL or missing references)
		//IL_0779: Unknown result type (might be due to invalid IL or missing references)
		//IL_077b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0782: Unknown result type (might be due to invalid IL or missing references)
		//IL_0787: Unknown result type (might be due to invalid IL or missing references)
		//IL_078c: Unknown result type (might be due to invalid IL or missing references)
		//IL_079a: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b60: Unknown result type (might be due to invalid IL or missing references)
		if (!item.active || item.IsAir)
		{
			return;
		}
		instance.LoadItem(item.type);
		DrawItem_GetBasics(item, whoami, out var texture, out var frame, out var glowmaskFrame);
		Vector2 vector = frame.Size() / 2f;
		Vector2 vector2 = default(Vector2);
		((Vector2)(ref vector2))._002Ector((float)(item.width / 2) - vector.X, (float)(item.height - frame.Height));
		Vector2 vector3 = item.position - screenPosition + vector + vector2;
		float num = item.velocity.X * 0.2f;
		if (item.shimmered)
		{
			num = 0f;
		}
		float scale = 1f;
		Color color = Lighting.GetColor(item.Center.ToTileCoordinates());
		Color currentColor = item.GetAlpha(color);
		if (item.shimmered)
		{
			((Color)(ref currentColor)).R = (byte)(255f * (1f - item.shimmerTime));
			((Color)(ref currentColor)).G = (byte)(255f * (1f - item.shimmerTime));
			((Color)(ref currentColor)).B = (byte)(255f * (1f - item.shimmerTime));
			((Color)(ref currentColor)).A = (byte)(255f * (1f - item.shimmerTime));
		}
		else if (item.shimmerTime > 0f)
		{
			((Color)(ref currentColor)).R = (byte)((float)(int)((Color)(ref currentColor)).R * (1f - item.shimmerTime));
			((Color)(ref currentColor)).G = (byte)((float)(int)((Color)(ref currentColor)).G * (1f - item.shimmerTime));
			((Color)(ref currentColor)).B = (byte)((float)(int)((Color)(ref currentColor)).B * (1f - item.shimmerTime));
			((Color)(ref currentColor)).A = (byte)((float)(int)((Color)(ref currentColor)).A * (1f - item.shimmerTime));
		}
		ItemSlot.GetItemLight(ref currentColor, ref scale, item);
		if (ItemLoader.PreDrawInWorld(item, spriteBatch, color, currentColor, ref num, ref scale, whoami))
		{
			int num5 = item.glowMask;
			if (!gamePaused && ((Game)this).IsActive && (item.IsACoin || item.type == 58 || item.type == 109) && ((Color)(ref color)).R > 60 && (float)rand.Next(500) - (Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) * 10f < (float)(((Color)(ref color)).R / 50))
			{
				int type = 43;
				Color newColor = Color.White;
				int alpha = 254;
				float scale2 = 0.5f;
				if (item.IsACoin)
				{
					newColor = default(Color);
					alpha = 0;
					scale2 = 1f;
				}
				switch (item.type)
				{
				case 71:
					type = 244;
					break;
				case 72:
					type = 245;
					break;
				case 73:
					type = 246;
					break;
				case 74:
					type = 247;
					break;
				}
				int num6 = Dust.NewDust(item.position, item.width, item.height, type, 0f, 0f, alpha, newColor, scale2);
				Dust obj = dust[num6];
				obj.velocity *= 0f;
			}
			if (ItemID.Sets.BossBag[item.type])
			{
				float num7 = (float)item.timeSinceItemSpawned / 240f + GlobalTimeWrappedHourly * 0.04f;
				float globalTimeWrappedHourly = GlobalTimeWrappedHourly;
				globalTimeWrappedHourly %= 4f;
				globalTimeWrappedHourly /= 2f;
				if (globalTimeWrappedHourly >= 1f)
				{
					globalTimeWrappedHourly = 2f - globalTimeWrappedHourly;
				}
				globalTimeWrappedHourly = globalTimeWrappedHourly * 0.5f + 0.5f;
				for (float num8 = 0f; num8 < 1f; num8 += 0.25f)
				{
					spriteBatch.Draw(texture, vector3 + Utils.RotatedBy(new Vector2(0f, 8f), (num8 + num7) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly, (Rectangle?)frame, new Color(90, 70, 255, 50), num, vector, scale, (SpriteEffects)0, 0f);
				}
				for (float num9 = 0f; num9 < 1f; num9 += 0.34f)
				{
					spriteBatch.Draw(texture, vector3 + Utils.RotatedBy(new Vector2(0f, 4f), (num9 + num7) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly, (Rectangle?)frame, new Color(140, 120, 255, 77), num, vector, scale, (SpriteEffects)0, 0f);
				}
			}
			else if (item.type == 75)
			{
				float num10 = (float)item.timeSinceItemSpawned / 240f + GlobalTimeWrappedHourly * 0.04f;
				float globalTimeWrappedHourly2 = GlobalTimeWrappedHourly;
				globalTimeWrappedHourly2 %= 5f;
				globalTimeWrappedHourly2 /= 2.5f;
				if (globalTimeWrappedHourly2 >= 1f)
				{
					globalTimeWrappedHourly2 = 2f - globalTimeWrappedHourly2;
				}
				globalTimeWrappedHourly2 = globalTimeWrappedHourly2 * 0.5f + 0.5f;
				for (float num11 = 0f; num11 < 1f; num11 += 0.25f)
				{
					spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector3 + Utils.RotatedBy(new Vector2(0f, 8f), (num11 + num10) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly2, (Rectangle?)frame, new Color(50, 50, 255, 50), num, vector, scale, (SpriteEffects)0, 0f);
				}
				for (float num12 = 0f; num12 < 1f; num12 += 0.34f)
				{
					spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector3 + Utils.RotatedBy(new Vector2(0f, 4f), (num12 + num10) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly2, (Rectangle?)frame, new Color(120, 120, 255, 127), num, vector, scale, (SpriteEffects)0, 0f);
				}
			}
			else if (item.type == 4143)
			{
				float num2 = (float)item.timeSinceItemSpawned / 240f + GlobalTimeWrappedHourly * 0.04f;
				float globalTimeWrappedHourly3 = GlobalTimeWrappedHourly;
				globalTimeWrappedHourly3 %= 5f;
				globalTimeWrappedHourly3 /= 2.5f;
				if (globalTimeWrappedHourly3 >= 1f)
				{
					globalTimeWrappedHourly3 = 2f - globalTimeWrappedHourly3;
				}
				globalTimeWrappedHourly3 = globalTimeWrappedHourly3 * 0.5f + 0.5f;
				for (float num3 = 0f; num3 < 1f; num3 += 0.34f)
				{
					spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector3 + Utils.RotatedBy(new Vector2(0f, 8f), (num3 + num2) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly3, (Rectangle?)frame, new Color(30, 30, 155, 60), num, vector, scale, (SpriteEffects)0, 0f);
				}
				for (float num4 = 0f; num4 < 1f; num4 += 0.34f)
				{
					spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector3 + Utils.RotatedBy(new Vector2(0f, 4f), (num4 + num2) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly3, (Rectangle?)frame, new Color(60, 60, 127, 57), num, vector, scale, (SpriteEffects)0, 0f);
				}
				spriteBatch.Draw(texture, vector3, (Rectangle?)frame, new Color(255, 255, 255, 128), num, vector, scale, (SpriteEffects)0, 0f);
			}
			if ((item.type >= 1522 && item.type <= 1527) || item.type == 3643)
			{
				currentColor = ((!(item.shimmerTime > 0f)) ? new Color(250, 250, 250, mouseTextColor / 2) : new Color((int)(250f * (1f - item.shimmerTime)), (int)(250f * (1f - item.shimmerTime)), (int)(250f * (1f - item.shimmerTime)), (int)((float)(mouseTextColor / 2) * (1f - item.shimmerTime))));
				scale = (float)(int)mouseTextColor / 1000f + 0.8f;
			}
			if (item.type == 3779)
			{
				num5 = -1;
			}
			spriteBatch.Draw(texture, vector3, (Rectangle?)frame, currentColor, num, vector, scale, (SpriteEffects)0, 0f);
			if (item.shimmered)
			{
				spriteBatch.Draw(texture, vector3, (Rectangle?)frame, new Color((int)((Color)(ref currentColor)).R, (int)((Color)(ref currentColor)).G, (int)((Color)(ref currentColor)).B, 0), num, vector, scale, (SpriteEffects)0, 0f);
			}
			if (item.color != Color.Transparent)
			{
				spriteBatch.Draw(texture, vector3, (Rectangle?)frame, item.GetColor(color), num, vector, scale, (SpriteEffects)0, 0f);
			}
			if (num5 != -1)
			{
				Color color2 = default(Color);
				((Color)(ref color2))._002Ector(250, 250, 250, item.alpha);
				if (item.type == 5146)
				{
					((Color)(ref color2))._002Ector(DiscoR, DiscoG, DiscoB);
				}
				spriteBatch.Draw(TextureAssets.GlowMask[num5].Value, vector3, (Rectangle?)frame, color2, num, vector, scale, (SpriteEffects)0, 0f);
			}
			if (ItemID.Sets.TrapSigned[item.type])
			{
				spriteBatch.Draw(TextureAssets.Wire.Value, vector3 + frame.Size().RotatedBy(num) * 0.45f * item.scale, (Rectangle?)new Rectangle(4, 58, 8, 8), currentColor, 0f, new Vector2(4f), 1f, (SpriteEffects)0, 0f);
			}
			if (item.type == 3858)
			{
				spriteBatch.Draw(TextureAssets.GlowMask[233].Value, vector3, (Rectangle?)glowmaskFrame, new Color(255, 255, 255, 63) * 0.75f, num, glowmaskFrame.Size() / 2f, scale, (SpriteEffects)0, 0f);
			}
			if (ItemID.Sets.DrawUnsafeIndicator[item.type])
			{
				Vector2 vector4 = new Vector2(-4f, -4f) * scale;
				Texture2D value = TextureAssets.Extra[258].Value;
				Rectangle rectangle = value.Frame();
				spriteBatch.Draw(value, vector3 + vector4 + frame.Size().RotatedBy(num) * 0.45f * item.scale, (Rectangle?)rectangle, currentColor, num, rectangle.Size() / 2f, 1f, (SpriteEffects)0, 0f);
			}
		}
		ItemLoader.PostDrawInWorld(item, spriteBatch, color, currentColor, num, scale, whoami);
	}

	public void DrawItems()
	{
		for (int i = 0; i < 400; i++)
		{
			DrawItem(item[i], i);
		}
	}

	protected void DrawRain()
	{
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		bool flag = ((Game)this).IsActive || netMode == 1;
		Rectangle value = default(Rectangle);
		((Rectangle)(ref value))._002Ector(0, 0, 2, 40);
		Texture2D value2 = TextureAssets.Rain.Value;
		Vector2 zero = Vector2.Zero;
		for (int i = 0; i < maxRain; i++)
		{
			Rain rain = Main.rain[i];
			if (!rain.active)
			{
				continue;
			}
			value.X = rain.type * 4;
			Color color = Lighting.GetColor((int)(rain.position.X + 4f) >> 4, (int)(rain.position.Y + 4f) >> 4) * 0.85f;
			if (shimmerAlpha > 0f)
			{
				color *= 1f - shimmerAlpha;
			}
			if (rain.waterStyle >= 15)
			{
				value2 = LoaderManager.Get<WaterStylesLoader>().Get(rain.waterStyle).GetRainTexture()
					.Value;
				if (value2 == null)
				{
					goto IL_012a;
				}
			}
			else
			{
				value2 = TextureAssets.Rain.Value;
			}
			spriteBatch.Draw(value2, rain.position - screenPosition, (Rectangle?)value, color, rain.rotation, zero, rain.scale, (SpriteEffects)0, 0f);
			goto IL_012a;
			IL_012a:
			if (flag)
			{
				rain.Update();
			}
		}
		TimeLogger.DetailedDrawTime(23);
	}

	protected void DrawDust()
	{
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0402: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040d: Unknown result type (might be due to invalid IL or missing references)
		//IL_041e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0425: Unknown result type (might be due to invalid IL or missing references)
		//IL_042c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0436: Unknown result type (might be due to invalid IL or missing references)
		//IL_043f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0902: Unknown result type (might be due to invalid IL or missing references)
		//IL_0907: Unknown result type (might be due to invalid IL or missing references)
		//IL_0934: Unknown result type (might be due to invalid IL or missing references)
		//IL_0939: Unknown result type (might be due to invalid IL or missing references)
		//IL_093d: Unknown result type (might be due to invalid IL or missing references)
		//IL_093f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0944: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_063a: Unknown result type (might be due to invalid IL or missing references)
		//IL_063e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0643: Unknown result type (might be due to invalid IL or missing references)
		//IL_0648: Unknown result type (might be due to invalid IL or missing references)
		//IL_064d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0652: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0708: Unknown result type (might be due to invalid IL or missing references)
		//IL_070a: Unknown result type (might be due to invalid IL or missing references)
		//IL_070f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0720: Unknown result type (might be due to invalid IL or missing references)
		//IL_0722: Unknown result type (might be due to invalid IL or missing references)
		//IL_0727: Unknown result type (might be due to invalid IL or missing references)
		//IL_072e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0738: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0501: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_0557: Unknown result type (might be due to invalid IL or missing references)
		//IL_055c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0560: Unknown result type (might be due to invalid IL or missing references)
		//IL_0562: Unknown result type (might be due to invalid IL or missing references)
		//IL_0567: Unknown result type (might be due to invalid IL or missing references)
		//IL_0578: Unknown result type (might be due to invalid IL or missing references)
		//IL_057a: Unknown result type (might be due to invalid IL or missing references)
		//IL_057f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_0590: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0803: Unknown result type (might be due to invalid IL or missing references)
		//IL_0808: Unknown result type (might be due to invalid IL or missing references)
		//IL_080d: Unknown result type (might be due to invalid IL or missing references)
		//IL_085e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0863: Unknown result type (might be due to invalid IL or missing references)
		//IL_0867: Unknown result type (might be due to invalid IL or missing references)
		//IL_0869: Unknown result type (might be due to invalid IL or missing references)
		//IL_086e: Unknown result type (might be due to invalid IL or missing references)
		//IL_087f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0881: Unknown result type (might be due to invalid IL or missing references)
		//IL_0886: Unknown result type (might be due to invalid IL or missing references)
		//IL_088d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0897: Unknown result type (might be due to invalid IL or missing references)
		//IL_08aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09be: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0985: Unknown result type (might be due to invalid IL or missing references)
		//IL_0987: Unknown result type (might be due to invalid IL or missing references)
		//IL_097c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a55: Unknown result type (might be due to invalid IL or missing references)
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector((int)screenPosition.X - 500, (int)screenPosition.Y - 50, screenWidth + 1000, screenHeight + 100);
		((Rectangle)(ref rectangle))._002Ector((int)screenPosition.X - 1000, (int)screenPosition.Y - 1050, screenWidth + 2000, screenHeight + 2100);
		Rectangle rectangle2 = rectangle;
		ArmorShaderData armorShaderData = null;
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, (Effect)null, Transform);
		Vector2 origin = default(Vector2);
		for (int i = 0; i < maxDustToDraw; i++)
		{
			Dust dust = Main.dust[i];
			if (!dust.active)
			{
				continue;
			}
			if ((dust.type >= 130 && dust.type <= 134) || (dust.type >= 219 && dust.type <= 223) || dust.type == 226 || dust.type == 278)
			{
				rectangle = rectangle2;
			}
			Rectangle val = new Rectangle((int)dust.position.X, (int)dust.position.Y, 4, 4);
			if (((Rectangle)(ref val)).Intersects(rectangle))
			{
				float scale = dust.GetVisualScale();
				if (dust.shader != armorShaderData)
				{
					spriteBatch.End();
					armorShaderData = dust.shader;
					if (armorShaderData == null)
					{
						spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, (Effect)null, Transform);
					}
					else
					{
						spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, (Effect)null, Transform);
						dust.shader.Apply(null);
					}
				}
				if (dust.type >= 130 && dust.type <= 134)
				{
					float num = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
					num *= 0.3f;
					num *= 10f;
					if (num > 10f)
					{
						num = 10f;
					}
					for (int j = 0; (float)j < num; j++)
					{
						Vector2 velocity = dust.velocity;
						Vector2 vector = dust.position - velocity * (float)j;
						float scale2 = dust.scale * (1f - (float)j / 10f);
						Color color = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
						color = dust.GetAlpha(color);
						spriteBatch.Draw(TextureAssets.Dust.Value, vector - screenPosition, (Rectangle?)dust.frame, color, dust.rotation, new Vector2(4f, 4f), scale2, (SpriteEffects)0, 0f);
					}
				}
				else if (dust.type == 278)
				{
					float num2 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
					num2 *= 0.3f;
					num2 *= 10f;
					if (num2 > 10f)
					{
						num2 = 10f;
					}
					((Vector2)(ref origin))._002Ector(4f, 4f);
					for (int k = 0; (float)k < num2; k++)
					{
						Vector2 velocity2 = dust.velocity;
						Vector2 vector2 = dust.position - velocity2 * (float)k;
						float scale3 = dust.scale * (1f - (float)k / 10f);
						Color color2 = Lighting.GetColor((int)(dust.position.X + 4f) / 16, (int)(dust.position.Y + 4f) / 16);
						color2 = dust.GetAlpha(color2);
						spriteBatch.Draw(TextureAssets.Dust.Value, vector2 - screenPosition, (Rectangle?)dust.frame, color2, dust.rotation, origin, scale3, (SpriteEffects)0, 0f);
					}
				}
				else if (dust.type >= 219 && dust.type <= 223 && dust.fadeIn == 0f)
				{
					float num3 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
					num3 *= 0.3f;
					num3 *= 10f;
					if (num3 > 10f)
					{
						num3 = 10f;
					}
					for (int l = 0; (float)l < num3; l++)
					{
						Vector2 velocity3 = dust.velocity;
						Vector2 vector3 = dust.position - velocity3 * (float)l;
						float scale4 = dust.scale * (1f - (float)l / 10f);
						Color color3 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
						color3 = dust.GetAlpha(color3);
						spriteBatch.Draw(TextureAssets.Dust.Value, vector3 - screenPosition, (Rectangle?)dust.frame, color3, dust.rotation, new Vector2(4f, 4f), scale4, (SpriteEffects)0, 0f);
					}
				}
				else if (dust.type == 264 && dust.fadeIn == 0f)
				{
					float num4 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
					num4 *= 10f;
					if (num4 > 10f)
					{
						num4 = 10f;
					}
					for (int m = 0; (float)m < num4; m++)
					{
						Vector2 velocity4 = dust.velocity;
						Vector2 vector4 = dust.position - velocity4 * (float)m;
						float scale5 = dust.scale * (1f - (float)m / 10f);
						Color color4 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
						color4 = dust.GetAlpha(color4) * 0.3f;
						spriteBatch.Draw(TextureAssets.Dust.Value, vector4 - screenPosition, (Rectangle?)dust.frame, color4, dust.rotation, new Vector2(5f), scale5, (SpriteEffects)0, 0f);
						color4 = dust.GetColor(color4);
						spriteBatch.Draw(TextureAssets.Dust.Value, vector4 - screenPosition, (Rectangle?)dust.frame, color4, dust.rotation, new Vector2(5f), scale5, (SpriteEffects)0, 0f);
					}
				}
				else if ((dust.type == 226 || dust.type == 272) && dust.fadeIn == 0f)
				{
					float num5 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
					num5 *= 0.3f;
					num5 *= 10f;
					if (num5 > 10f)
					{
						num5 = 10f;
					}
					for (int n = 0; (float)n < num5; n++)
					{
						Vector2 velocity5 = dust.velocity;
						Vector2 vector5 = dust.position - velocity5 * (float)n;
						float scale6 = dust.scale * (1f - (float)n / 10f);
						Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
						color5 = dust.GetAlpha(color5);
						spriteBatch.Draw(TextureAssets.Dust.Value, vector5 - screenPosition, (Rectangle?)dust.frame, color5, dust.rotation, new Vector2(4f, 4f), scale6, (SpriteEffects)0, 0f);
					}
				}
				Color newColor = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
				if (dust.type == 6 || dust.type == 15 || (dust.type >= 59 && dust.type <= 64))
				{
					newColor = Color.White;
				}
				newColor = dust.GetAlpha(newColor);
				if (dust.type == 213)
				{
					scale = 1f;
				}
				ModDust modDust = DustLoader.GetDust(dust.type);
				if (modDust != null)
				{
					if (modDust.PreDraw(dust))
					{
						modDust.Draw(dust, newColor, scale);
					}
					if (newColor == Color.Black)
					{
						dust.active = false;
					}
					continue;
				}
				spriteBatch.Draw(TextureAssets.Dust.Value, dust.position - screenPosition, (Rectangle?)dust.frame, newColor, dust.GetVisualRotation(), new Vector2(4f, 4f), scale, (SpriteEffects)0, 0f);
				if (((Color)(ref dust.color)).PackedValue != 0)
				{
					Color color6 = dust.GetColor(newColor);
					if (((Color)(ref color6)).PackedValue != 0)
					{
						spriteBatch.Draw(TextureAssets.Dust.Value, dust.position - screenPosition, (Rectangle?)dust.frame, color6, dust.GetVisualRotation(), new Vector2(4f, 4f), scale, (SpriteEffects)0, 0f);
					}
				}
				if (newColor == Color.Black)
				{
					dust.active = false;
				}
			}
			else
			{
				dust.active = false;
			}
		}
		spriteBatch.End();
		pixelShader.CurrentTechnique.Passes[0].Apply();
		TimeLogger.DetailedDrawTime(25);
	}

	private static void HelpText()
	{
		bool flag = false;
		if (player[myPlayer].ConsumedLifeCrystals > 0)
		{
			flag = true;
		}
		bool flag12 = false;
		if (player[myPlayer].ConsumedManaCrystals > 0)
		{
			flag12 = true;
		}
		bool flag23 = true;
		bool flag33 = false;
		bool flag34 = false;
		bool flag35 = false;
		bool flag36 = false;
		bool flag37 = false;
		bool flag38 = false;
		bool flag2 = false;
		bool flag3 = false;
		bool flag4 = false;
		bool flag5 = false;
		for (int i = 0; i < 58; i++)
		{
			if (player[myPlayer].inventory[i].pick > 0 && player[myPlayer].inventory[i].Name != "Copper Pickaxe")
			{
				flag23 = false;
			}
			if (player[myPlayer].inventory[i].axe > 0 && player[myPlayer].inventory[i].Name != "Copper Axe")
			{
				flag23 = false;
			}
			if (player[myPlayer].inventory[i].hammer > 0)
			{
				flag23 = false;
			}
			if (player[myPlayer].inventory[i].type == 11 || player[myPlayer].inventory[i].type == 12 || player[myPlayer].inventory[i].type == 13 || player[myPlayer].inventory[i].type == 14 || player[myPlayer].inventory[i].type == 699 || player[myPlayer].inventory[i].type == 700 || player[myPlayer].inventory[i].type == 701 || player[myPlayer].inventory[i].type == 702)
			{
				flag33 = true;
			}
			if (player[myPlayer].inventory[i].type == 19 || player[myPlayer].inventory[i].type == 20 || player[myPlayer].inventory[i].type == 21 || player[myPlayer].inventory[i].type == 22 || player[myPlayer].inventory[i].type == 703 || player[myPlayer].inventory[i].type == 704 || player[myPlayer].inventory[i].type == 705 || player[myPlayer].inventory[i].type == 706)
			{
				flag34 = true;
			}
			if (player[myPlayer].inventory[i].type == 75)
			{
				flag35 = true;
			}
			if (player[myPlayer].inventory[i].type == 38)
			{
				flag36 = true;
			}
			if (player[myPlayer].inventory[i].type == 68 || player[myPlayer].inventory[i].type == 70 || player[myPlayer].inventory[i].type == 1330 || player[myPlayer].inventory[i].type == 1331 || player[myPlayer].inventory[i].type == 67 || player[myPlayer].inventory[i].type == 2886)
			{
				flag37 = true;
			}
			if (player[myPlayer].inventory[i].type == 84 || player[myPlayer].inventory[i].type == 1236 || player[myPlayer].inventory[i].type == 1237 || player[myPlayer].inventory[i].type == 1238 || player[myPlayer].inventory[i].type == 1239 || player[myPlayer].inventory[i].type == 1240 || player[myPlayer].inventory[i].type == 1241 || player[myPlayer].inventory[i].type == 939 || player[myPlayer].inventory[i].type == 1273 || player[myPlayer].inventory[i].type == 2585 || player[myPlayer].inventory[i].type == 2360 || player[myPlayer].inventory[i].type == 185 || player[myPlayer].inventory[i].type == 1800 || player[myPlayer].inventory[i].type == 1915)
			{
				flag38 = true;
			}
			if (player[myPlayer].inventory[i].type == 3347)
			{
				flag2 = true;
			}
			if (player[myPlayer].inventory[i].type == 174)
			{
				flag3 = true;
			}
			if (player[myPlayer].inventory[i].type == 1141)
			{
				flag4 = true;
			}
			if (player[myPlayer].inventory[i].type == 1533 || player[myPlayer].inventory[i].type == 1534 || player[myPlayer].inventory[i].type == 1535 || player[myPlayer].inventory[i].type == 1536 || player[myPlayer].inventory[i].type == 1537 || player[myPlayer].inventory[i].type == 4714)
			{
				flag5 = true;
			}
		}
		bool flag6 = false;
		bool flag7 = false;
		bool flag8 = false;
		bool flag9 = false;
		bool flag10 = false;
		bool flag11 = false;
		bool flag13 = false;
		bool flag14 = false;
		bool flag15 = false;
		bool flag16 = false;
		bool flag17 = false;
		bool flag18 = false;
		bool flag19 = false;
		bool flag20 = false;
		bool flag21 = false;
		bool flag22 = false;
		bool flag24 = false;
		bool flag25 = false;
		bool flag26 = false;
		bool flag27 = false;
		bool flag28 = false;
		bool flag29 = false;
		bool flag30 = false;
		bool flag31 = false;
		bool flag32 = false;
		int num = 0;
		for (int j = 0; j < 200; j++)
		{
			if (npc[j].active)
			{
				if (npc[j].townNPC && npc[j].type != 37)
				{
					num++;
				}
				if (npc[j].type == 17)
				{
					flag6 = true;
				}
				if (npc[j].type == 18)
				{
					flag7 = true;
				}
				if (npc[j].type == 19)
				{
					flag9 = true;
				}
				if (npc[j].type == 20)
				{
					flag8 = true;
				}
				if (npc[j].type == 54)
				{
					flag15 = true;
				}
				if (npc[j].type == 124)
				{
					flag11 = true;
				}
				if (npc[j].type == 38)
				{
					flag10 = true;
				}
				if (npc[j].type == 108)
				{
					flag13 = true;
				}
				if (npc[j].type == 107)
				{
					flag14 = true;
				}
				if (npc[j].type == 228)
				{
					flag16 = true;
				}
				if (npc[j].type == 178)
				{
					flag17 = true;
				}
				if (npc[j].type == 209)
				{
					flag18 = true;
				}
				if (npc[j].type == 353)
				{
					flag19 = true;
				}
				if (npc[j].type == 633)
				{
					flag32 = true;
				}
				if (npc[j].type == 369)
				{
					flag20 = true;
				}
				if (npc[j].type == 441)
				{
					flag21 = true;
				}
				if (npc[j].type == 229)
				{
					flag22 = true;
				}
				if (npc[j].type == 207)
				{
					flag24 = true;
				}
				if (npc[j].type == 160)
				{
					flag25 = true;
				}
				if (npc[j].type == 588)
				{
					flag26 = true;
				}
				if (npc[j].type == 227)
				{
					flag27 = true;
				}
				if (npc[j].type == 208)
				{
					flag28 = true;
				}
				if (npc[j].type == 550)
				{
					flag29 = true;
				}
				if (npc[j].type == 368)
				{
					flag30 = true;
				}
				if (npc[j].type == 453)
				{
					flag31 = true;
				}
			}
		}
		object obj = Lang.CreateDialogSubstitutionObject();
		while (true)
		{
			helpText++;
			if (Language.Exists("GuideHelpText.Help_" + helpText))
			{
				LocalizedText text = Language.GetText("GuideHelpText.Help_" + helpText);
				if (text.CanFormatWith(obj))
				{
					npcChatText = text.FormatWith(obj);
					return;
				}
			}
			if (flag23)
			{
				if (helpText == 1)
				{
					npcChatText = Lang.dialog(177);
					return;
				}
				if (helpText == 2)
				{
					npcChatText = Lang.dialog(178);
					return;
				}
				if (helpText == 3)
				{
					npcChatText = Lang.dialog(179);
					return;
				}
				if (helpText == 4)
				{
					npcChatText = Lang.dialog(180);
					return;
				}
				if (helpText == 5)
				{
					npcChatText = Lang.dialog(181);
					return;
				}
				if (helpText == 6)
				{
					npcChatText = Lang.dialog(182);
					return;
				}
			}
			if (flag23 && !flag33 && !flag34 && helpText == 11)
			{
				npcChatText = Lang.dialog(183);
				return;
			}
			if (flag23 && flag33 && !flag34)
			{
				if (helpText == 21)
				{
					npcChatText = Lang.dialog(184);
					return;
				}
				if (helpText == 22)
				{
					npcChatText = Lang.dialog(185);
					return;
				}
			}
			if (flag23 && flag34)
			{
				if (helpText == 31)
				{
					npcChatText = Lang.dialog(186);
					return;
				}
				if (helpText == 32)
				{
					npcChatText = Lang.dialog(187);
					return;
				}
			}
			if (!flag && helpText == 41)
			{
				npcChatText = Lang.dialog(188);
				return;
			}
			if (!flag12 && helpText == 42)
			{
				npcChatText = Lang.dialog(189);
				return;
			}
			if (!flag12 && !flag35 && helpText == 43)
			{
				npcChatText = Lang.dialog(190);
				return;
			}
			if (!flag6 && !flag7)
			{
				if (helpText == 51)
				{
					npcChatText = Lang.dialog(191);
					return;
				}
				if (helpText == 52)
				{
					npcChatText = Lang.dialog(192);
					return;
				}
				if (helpText == 53)
				{
					npcChatText = Lang.dialog(193);
					return;
				}
				if (helpText == 54)
				{
					npcChatText = Lang.dialog(194);
					return;
				}
				if (helpText == 55)
				{
					npcChatText = Language.GetTextValue("GuideHelpText.Help_1065");
					return;
				}
			}
			if (!flag6 && helpText == 61)
			{
				npcChatText = Lang.dialog(195);
				return;
			}
			if (!flag7 && helpText == 62)
			{
				npcChatText = Lang.dialog(196);
				return;
			}
			if (!flag9 && helpText == 63)
			{
				npcChatText = Lang.dialog(197);
				return;
			}
			if (!flag8 && helpText == 64)
			{
				npcChatText = Lang.dialog(198);
				return;
			}
			if (!flag11 && helpText == 65 && NPC.downedBoss3)
			{
				npcChatText = Lang.dialog(199);
				return;
			}
			if (!flag15 && helpText == 66 && NPC.downedBoss3)
			{
				npcChatText = Lang.dialog(200);
				return;
			}
			if (!flag10 && helpText == 67)
			{
				npcChatText = Lang.dialog(201);
				return;
			}
			if (!flag14 && NPC.downedBoss2 && helpText == 68)
			{
				npcChatText = Lang.dialog(202);
				return;
			}
			if (!flag13 && hardMode && helpText == 69)
			{
				npcChatText = Lang.dialog(203);
				return;
			}
			if (!flag16 && helpText == 70 && NPC.downedBoss2)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1100");
				return;
			}
			if (!flag17 && helpText == 71 && hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1101");
				return;
			}
			if (!flag18 && helpText == 72 && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1102");
				return;
			}
			if (!flag19 && helpText == 73)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1103");
				return;
			}
			if (!flag20 && helpText == 74)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1104");
				return;
			}
			if (!flag21 && helpText == 75 && hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1105");
				return;
			}
			if (!flag22 && helpText == 76 && hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1106");
				return;
			}
			if (!flag24 && helpText == 77)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1107");
				return;
			}
			if (!flag25 && helpText == 78 && hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1108");
				return;
			}
			if (!flag26 && helpText == 79)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1109");
				return;
			}
			if (!flag27 && helpText == 80 && num >= 5)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1110");
				return;
			}
			if (!flag28 && helpText == 81 && num >= 11)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1111");
				return;
			}
			if (!flag29 && NPC.downedBoss2 && helpText == 82)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1112");
				return;
			}
			if (!flag30 && helpText == 83 && flag6)
			{
				npcChatText = Language.GetTextValueWith("GuideHelpTextSpecific.Help_1113", obj);
				return;
			}
			if (!flag31 && helpText == 84 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1114");
				return;
			}
			if (!flag32 && helpText == 85 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1115");
				return;
			}
			if (flag36 && !WorldGen.crimson && helpText == 100)
			{
				npcChatText = Lang.dialog(204);
				return;
			}
			if (flag37 && helpText == 101)
			{
				npcChatText = Lang.dialog(WorldGen.crimson ? 403 : 205);
				return;
			}
			if ((flag36 || flag37) && helpText == 102)
			{
				npcChatText = Lang.dialog(WorldGen.crimson ? 402 : 206);
				return;
			}
			if (flag36 && WorldGen.crimson && helpText == 103)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1159");
				return;
			}
			if (!flag38 && LocalPlayer.miscEquips[4].IsAir && helpText == 201 && !hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
			{
				npcChatText = Lang.dialog(207);
				return;
			}
			if (helpText == 202 && !hardMode && player[myPlayer].ConsumedLifeCrystals >= 2)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1120");
				return;
			}
			if (helpText == 203 && hardMode && NPC.downedMechBossAny)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1121");
				return;
			}
			if (helpText == 204 && !NPC.downedGoblins && player[myPlayer].ConsumedLifeCrystals >= 5 && WorldGen.shadowOrbSmashed)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1122");
				return;
			}
			if (helpText == 205 && hardMode && !NPC.downedPirates && player[myPlayer].ConsumedLifeCrystals >= 5)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1123");
				return;
			}
			if (helpText == 206 && hardMode && NPC.downedGolemBoss && !NPC.downedMartians)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1124");
				return;
			}
			if (helpText == 207 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3))
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1125");
				return;
			}
			if (helpText == 208 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1130");
				return;
			}
			if (helpText == 209 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1131");
				return;
			}
			if (helpText == 210 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1132");
				return;
			}
			if (helpText == 211 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1133");
				return;
			}
			if (helpText == 212 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1134");
				return;
			}
			if (helpText == 213 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1135");
				return;
			}
			if (helpText == 214 && !hardMode && (flag33 || flag34))
			{
				npcChatText = Language.GetTextValueWith("GuideHelpTextSpecific.Help_1136", obj);
				return;
			}
			if (helpText == 215 && LocalPlayer.anglerQuestsFinished < 1)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1137");
				return;
			}
			if (helpText == 216 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1138");
				return;
			}
			if (helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
			{
				npcChatText = Lang.dialog(208);
				return;
			}
			if (helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
			{
				npcChatText = Lang.dialog(209);
				return;
			}
			if (helpText == 1002 && !NPC.downedBoss2)
			{
				if (WorldGen.crimson)
				{
					npcChatText = Lang.dialog(331);
				}
				else
				{
					npcChatText = Lang.dialog(210);
				}
				return;
			}
			if (helpText == 1050 && !NPC.downedBoss1 && player[myPlayer].ConsumedLifeCrystals < 5)
			{
				npcChatText = Lang.dialog(211);
				return;
			}
			if (helpText == 1051 && !NPC.downedBoss1 && (int)player[myPlayer].statDefense <= 10)
			{
				npcChatText = Lang.dialog(212);
				return;
			}
			if (helpText == 1052 && !NPC.downedBoss1 && player[myPlayer].ConsumedLifeCrystals >= 5 && (int)player[myPlayer].statDefense > 10)
			{
				npcChatText = Lang.dialog(WorldGen.crimson ? 404 : 213);
				return;
			}
			if (helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && player[myPlayer].ConsumedLifeCrystals < 10)
			{
				npcChatText = Lang.dialog(214);
				return;
			}
			if (helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && !WorldGen.crimson && player[myPlayer].ConsumedLifeCrystals >= 10)
			{
				npcChatText = Lang.dialog(215);
				return;
			}
			if (helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && !WorldGen.crimson && player[myPlayer].ConsumedLifeCrystals >= 10)
			{
				npcChatText = Lang.dialog(216);
				return;
			}
			if (helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
			{
				npcChatText = Lang.dialog(217);
				return;
			}
			if (helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].ConsumedLifeCrystals < 15)
			{
				npcChatText = Lang.dialog(218);
				return;
			}
			if (helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].ConsumedLifeCrystals == 15)
			{
				npcChatText = Lang.dialog(219);
				return;
			}
			if (helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].ConsumedLifeCrystals == 15)
			{
				npcChatText = Lang.dialog(220);
				return;
			}
			if (helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].ConsumedLifeCrystals == 15)
			{
				npcChatText = Lang.dialog(221);
				return;
			}
			if (helpText == 1061 && hardMode && !NPC.downedPlantBoss)
			{
				npcChatText = Lang.dialog(WorldGen.crimson ? 401 : 222);
				return;
			}
			if (helpText == 1062 && hardMode && !NPC.downedPlantBoss)
			{
				npcChatText = Lang.dialog(223);
				return;
			}
			if (helpText == 1140 && NPC.downedBoss1 && !NPC.downedBoss2 && WorldGen.crimson && player[myPlayer].ConsumedLifeCrystals >= 10)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1140");
				return;
			}
			if (helpText == 1141 && NPC.downedBoss1 && !NPC.downedBoss2 && WorldGen.crimson && player[myPlayer].ConsumedLifeCrystals >= 10)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1141");
				return;
			}
			if (helpText == 1142 && NPC.downedBoss2 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1142");
				return;
			}
			if (helpText == 1143 && NPC.downedBoss2 && !NPC.downedQueenBee && player[myPlayer].ConsumedLifeCrystals >= 10)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1143");
				return;
			}
			if (helpText == 1144 && flag2)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1144");
				return;
			}
			if (helpText == 1145 && flag3 && !hardMode)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1145");
				return;
			}
			if (helpText == 1146 && hardMode && player[myPlayer].wingsLogic == 0 && !LocalPlayer.mount.Active && !NPC.downedPlantBoss)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1146");
				return;
			}
			if (helpText == 1147 && hardMode && WorldGen.SavedOreTiers.Adamantite == 111 && !NPC.downedMechBossAny)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1147");
				return;
			}
			if (helpText == 1148 && hardMode && WorldGen.SavedOreTiers.Adamantite == 223 && !NPC.downedMechBossAny)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1148");
				return;
			}
			if (helpText == 1149 && hardMode && NPC.downedMechBossAny && player[myPlayer].ConsumedLifeCrystals == 15 && player[myPlayer].ConsumedLifeFruit < 20)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1149");
				return;
			}
			if (helpText == 1150 && hardMode && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && !NPC.downedPlantBoss)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1150");
				return;
			}
			if (helpText == 1151 && hardMode && NPC.downedPlantBoss && !NPC.downedGolemBoss && flag4)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1151");
				return;
			}
			if (helpText == 1152 && hardMode && NPC.downedPlantBoss && !NPC.downedGolemBoss && !flag4)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1152");
				return;
			}
			if (helpText == 1153 && hardMode && flag5)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1153");
				return;
			}
			if (helpText == 1154 && hardMode && !NPC.downedFishron)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1154");
				return;
			}
			if (helpText == 1155 && hardMode && NPC.downedGolemBoss && !NPC.downedHalloweenTree && !NPC.downedHalloweenKing)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1155");
				return;
			}
			if (helpText == 1156 && hardMode && NPC.downedGolemBoss && !NPC.downedChristmasIceQueen && !NPC.downedChristmasTree && !NPC.downedChristmasSantank)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1156");
				return;
			}
			if (helpText == 1157 && hardMode && NPC.downedGolemBoss && NPC.AnyNPCs(437) && !NPC.downedMoonlord)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1157");
				return;
			}
			if (helpText == 1158 && hardMode && NPC.LunarApocalypseIsUp && !NPC.downedMoonlord)
			{
				npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1158");
				return;
			}
			if (helpText == 1159 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedDeerclops)
			{
				break;
			}
			if (helpText > 1200)
			{
				helpText = 0;
			}
		}
		npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1160");
	}

	protected void GUIChatDrawInner()
	{
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0504: Unknown result type (might be due to invalid IL or missing references)
		//IL_0530: Unknown result type (might be due to invalid IL or missing references)
		//IL_0546: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_056b: Unknown result type (might be due to invalid IL or missing references)
		//IL_055b: Unknown result type (might be due to invalid IL or missing references)
		//IL_057d: Unknown result type (might be due to invalid IL or missing references)
		//IL_057f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0597: Unknown result type (might be due to invalid IL or missing references)
		//IL_0599: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0602: Unknown result type (might be due to invalid IL or missing references)
		//IL_060f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0617: Unknown result type (might be due to invalid IL or missing references)
		//IL_0624: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_063c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_064f: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_068c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1507: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1551: Unknown result type (might be due to invalid IL or missing references)
		//IL_155b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1609: Unknown result type (might be due to invalid IL or missing references)
		if (player[myPlayer].talkNPC < 0 && player[myPlayer].sign == -1)
		{
			npcChatText = "";
			return;
		}
		Color color = default(Color);
		((Color)(ref color))._002Ector(200, 200, 200, 200);
		int num = (mouseTextColor * 2 + 255) / 3;
		Color color2 = default(Color);
		((Color)(ref color2))._002Ector(num, num, num, num);
		bool flag = InGameUI.CurrentState is UIVirtualKeyboard && PlayerInput.UsingGamepad;
		string textValue = npcChatText;
		bool num27 = player[myPlayer].talkNPC != -1 && CanDryadPlayStardewAnimation(LocalPlayer, npc[player[myPlayer].talkNPC]);
		if (player[myPlayer].talkNPC != -1 && npc[player[myPlayer].talkNPC].ai[0] == 24f && NPC.RerollDryadText == 2)
		{
			NPC.RerollDryadText = 1;
		}
		if (num27 && NPC.RerollDryadText == 1 && npc[player[myPlayer].talkNPC].ai[0] != 24f && player[myPlayer].talkNPC != -1 && npc[player[myPlayer].talkNPC].active && npc[player[myPlayer].talkNPC].type == 20)
		{
			NPC.RerollDryadText = 0;
			npcChatText = npc[player[myPlayer].talkNPC].GetChat();
			NPC.PreventJojaColaDialog = true;
		}
		if (num27 && !NPC.PreventJojaColaDialog)
		{
			textValue = Language.GetTextValue("StardewTalk.PlayerHasColaAndIsHoldingIt");
		}
		_ = player[myPlayer].talkNPC;
		_textDisplayCache.PrepareCache(textValue, color2);
		List<List<TextSnippet>> textLines = _textDisplayCache.TextLines;
		int amountOfLines = _textDisplayCache.AmountOfLines;
		bool flag2 = false;
		if (editSign)
		{
			textBlinkerCount++;
			if (textBlinkerCount >= 20)
			{
				if (textBlinkerState == 0)
				{
					textBlinkerState = 1;
				}
				else
				{
					textBlinkerState = 0;
				}
				textBlinkerCount = 0;
			}
			if (textBlinkerState == 1)
			{
				flag2 = true;
				textLines[amountOfLines - 1].Add(new TextSnippet("|", Color.White));
			}
			instance.DrawWindowsIMEPanel(new Vector2((float)(screenWidth / 2), 90f), 0.5f);
		}
		spriteBatch.Draw(TextureAssets.ChatBack.Value, new Vector2((float)(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2), 100f), (Rectangle?)new Rectangle(0, 0, TextureAssets.ChatBack.Width(), (amountOfLines + 1) * 30), color, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		spriteBatch.Draw(TextureAssets.ChatBack.Value, new Vector2((float)(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2), (float)(100 + (amountOfLines + 1) * 30)), (Rectangle?)new Rectangle(0, TextureAssets.ChatBack.Height() - 30, TextureAssets.ChatBack.Width(), 30), color, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		TextSnippet hoveredSnippet = null;
		for (int i = 0; i < amountOfLines; i++)
		{
			List<TextSnippet> text = textLines[i];
			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text.ToArray(), new Vector2((float)(170 + (screenWidth - 800) / 2), (float)(120 + i * 30)), 0f, color2, Color.Black, Vector2.Zero, Vector2.One, out var hoveredSnippetNum);
			if (hoveredSnippetNum > -1)
			{
				hoveredSnippet = text[hoveredSnippetNum];
			}
		}
		if (flag2)
		{
			textLines[amountOfLines - 1].RemoveAt(textLines[amountOfLines - 1].Count - 1);
		}
		if (hoveredSnippet != null)
		{
			hoveredSnippet.OnHover();
			if (mouseLeft && mouseLeftRelease)
			{
				hoveredSnippet.OnClick();
			}
		}
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2, 100, TextureAssets.ChatBack.Width(), (amountOfLines + 2) * 30);
		int num20 = 120 + amountOfLines * 30 + 30;
		num20 -= 235;
		UIVirtualKeyboard.ShouldHideText = !PlayerInput.SettingsForUI.ShowGamepadHints;
		if (!PlayerInput.UsingGamepad)
		{
			num20 = 9999;
		}
		UIVirtualKeyboard.OffsetDown = num20;
		if (npcChatCornerItem != 0)
		{
			Vector2 position = default(Vector2);
			((Vector2)(ref position))._002Ector((float)(screenWidth / 2 + TextureAssets.ChatBack.Width() / 2), (float)(100 + (amountOfLines + 1) * 30 + 30));
			position -= Vector2.One * 8f;
			Item item = new Item();
			item.netDefaults(npcChatCornerItem);
			float num21 = 1f;
			GetItemDrawFrame(item.type, out var itemTexture, out var rectangle2);
			if (rectangle2.Width > 32 || rectangle2.Height > 32)
			{
				num21 = ((rectangle2.Width <= rectangle2.Height) ? (32f / (float)rectangle2.Height) : (32f / (float)rectangle2.Width));
			}
			spriteBatch.Draw(itemTexture, position, (Rectangle?)rectangle2, item.GetAlpha(Color.White), 0f, rectangle2.Size(), num21, (SpriteEffects)0, 0f);
			if (item.color != default(Color))
			{
				spriteBatch.Draw(itemTexture, position, (Rectangle?)rectangle2, item.GetColor(item.color), 0f, rectangle2.Size(), num21, (SpriteEffects)0, 0f);
			}
			Rectangle val = new Rectangle((int)position.X - (int)((float)rectangle2.Width * num21), (int)position.Y - (int)((float)rectangle2.Height * num21), (int)((float)rectangle2.Width * num21), (int)((float)rectangle2.Height * num21));
			if (((Rectangle)(ref val)).Contains(new Point(mouseX, mouseY)))
			{
				cursorOverride = 2;
				if (mouseLeftRelease && mouseLeft)
				{
					if (!drawingPlayerChat)
					{
						OpenPlayerChat();
					}
					if (ChatManager.AddChatText(FontAssets.MouseText.Value, ItemTagHandler.GenerateTag(item), Vector2.One))
					{
						SoundEngine.PlaySound(12);
					}
				}
				MouseText(item.Name, -11, 0);
			}
		}
		num = mouseTextColor;
		((Color)(ref color2))._002Ector(num, (int)((double)num / 1.1), num / 2, num);
		string focusText = "";
		string focusText2 = "";
		int num22 = player[myPlayer].statLifeMax2 - player[myPlayer].statLife;
		for (int j = 0; j < Player.maxBuffs; j++)
		{
			int num23 = player[myPlayer].buffType[j];
			if (debuff[num23] && player[myPlayer].buffTime[j] > 60 && (num23 < 0 || !BuffID.Sets.NurseCannotRemoveDebuff[num23]))
			{
				num22 += 100;
			}
		}
		int health = LocalPlayer.statLifeMax2 - LocalPlayer.statLife;
		bool removeDebuffs = true;
		string reason = "";
		bool canHeal = true;
		if (NPC.downedGolemBoss)
		{
			num22 *= 200;
		}
		else if (NPC.downedPlantBoss)
		{
			num22 *= 150;
		}
		else if (NPC.downedMechBossAny)
		{
			num22 *= 100;
		}
		else if (hardMode)
		{
			num22 *= 60;
		}
		else if (NPC.downedBoss3 || NPC.downedQueenBee)
		{
			num22 *= 25;
		}
		else if (NPC.downedBoss2)
		{
			num22 *= 10;
		}
		else if (NPC.downedBoss1)
		{
			num22 *= 3;
		}
		if (expertMode)
		{
			num22 *= 2;
		}
		num22 = (int)((double)num22 * player[myPlayer].currentShoppingSettings.PriceAdjustment);
		string text2 = null;
		string text3 = null;
		if (player[myPlayer].sign > -1)
		{
			focusText = ((!editSign) ? Lang.inter[48].Value : Lang.inter[47].Value);
		}
		else if (npc[player[myPlayer].talkNPC].type == 20)
		{
			focusText = Lang.inter[28].Value;
			focusText2 = Lang.inter[49].Value;
			if (CanDryadPlayStardewAnimation(LocalPlayer, npc[player[myPlayer].talkNPC]))
			{
				focusText2 = Language.GetTextValue("StardewTalk.GiveColaButtonText");
			}
		}
		else if (NPCID.Sets.IsTownPet[npc[player[myPlayer].talkNPC].type])
		{
			focusText = Language.GetTextValue("UI.PetTheAnimal");
		}
		else if (npc[player[myPlayer].talkNPC].type == 207)
		{
			focusText = Lang.inter[28].Value;
			if (hardMode)
			{
				focusText2 = Lang.inter[107].Value;
			}
		}
		else if (npc[player[myPlayer].talkNPC].type == 453)
		{
			focusText = Lang.inter[28].Value;
		}
		else if (npc[player[myPlayer].talkNPC].type == 550)
		{
			focusText = Lang.inter[28].Value;
			focusText2 = Language.GetTextValue("UI.BartenderHelp");
		}
		else if (npc[player[myPlayer].talkNPC].type == 588)
		{
			focusText = Lang.inter[28].Value;
		}
		else if (npc[player[myPlayer].talkNPC].type == 633)
		{
			focusText = Lang.inter[28].Value;
		}
		else if (npc[player[myPlayer].talkNPC].type == 663)
		{
			focusText = Lang.inter[28].Value;
		}
		else if (npc[player[myPlayer].talkNPC].type == 353)
		{
			focusText = Lang.inter[28].Value;
			focusText2 = Language.GetTextValue("GameUI.HairStyle");
		}
		else if (npc[player[myPlayer].talkNPC].type == 368)
		{
			focusText = Lang.inter[28].Value;
		}
		else if (npc[player[myPlayer].talkNPC].type == 369)
		{
			focusText = Lang.inter[64].Value;
		}
		else if (npc[player[myPlayer].talkNPC].type == 208)
		{
			focusText = Lang.inter[28].Value;
			if (TOWMusicUnlocked)
			{
				focusText2 = Language.GetTextValue("GameUI.Music");
			}
		}
		else if (npc[player[myPlayer].talkNPC].type == 227)
		{
			focusText = Lang.inter[28].Value;
			focusText2 = Language.GetTextValue("GameUI.PainterDecor");
		}
		else if (npc[player[myPlayer].talkNPC].type == 17 || npc[player[myPlayer].talkNPC].type == 19 || npc[player[myPlayer].talkNPC].type == 38 || npc[player[myPlayer].talkNPC].type == 54 || npc[player[myPlayer].talkNPC].type == 107 || npc[player[myPlayer].talkNPC].type == 108 || npc[player[myPlayer].talkNPC].type == 124 || npc[player[myPlayer].talkNPC].type == 142 || npc[player[myPlayer].talkNPC].type == 160 || npc[player[myPlayer].talkNPC].type == 178 || npc[player[myPlayer].talkNPC].type == 207 || npc[player[myPlayer].talkNPC].type == 209 || npc[player[myPlayer].talkNPC].type == 228 || npc[player[myPlayer].talkNPC].type == 229)
		{
			focusText = Lang.inter[28].Value;
			if (npc[player[myPlayer].talkNPC].type == 107)
			{
				focusText2 = Lang.inter[19].Value;
			}
		}
		else if (npc[player[myPlayer].talkNPC].type == 37)
		{
			if (!IsItDay())
			{
				focusText = Lang.inter[50].Value;
			}
		}
		else if (npc[player[myPlayer].talkNPC].type == 22)
		{
			focusText = Lang.inter[51].Value;
			focusText2 = Lang.inter[25].Value;
		}
		else if (npc[player[myPlayer].talkNPC].type == 441)
		{
			if (player[myPlayer].taxMoney <= 0)
			{
				focusText = Lang.inter[89].Value;
			}
			else
			{
				string text4 = "";
				int num24 = 0;
				int num25 = 0;
				int num26 = 0;
				int num2 = 0;
				int taxMoney = player[myPlayer].taxMoney;
				taxMoney = (int)((double)taxMoney / player[myPlayer].currentShoppingSettings.PriceAdjustment);
				if (taxMoney < 0)
				{
					taxMoney = 0;
				}
				num22 = taxMoney;
				if (taxMoney >= 1000000)
				{
					num24 = taxMoney / 1000000;
					taxMoney -= num24 * 1000000;
				}
				if (taxMoney >= 10000)
				{
					num25 = taxMoney / 10000;
					taxMoney -= num25 * 10000;
				}
				if (taxMoney >= 100)
				{
					num26 = taxMoney / 100;
					taxMoney -= num26 * 100;
				}
				if (taxMoney >= 1)
				{
					num2 = taxMoney;
				}
				if (num24 > 0)
				{
					text4 = text4 + num24 + " " + Lang.inter[15].Value + " ";
				}
				if (num25 > 0)
				{
					text4 = text4 + num25 + " " + Lang.inter[16].Value + " ";
				}
				if (num26 > 0)
				{
					text4 = text4 + num26 + " " + Lang.inter[17].Value + " ";
				}
				if (num2 > 0)
				{
					text4 = text4 + num2 + " " + Lang.inter[18].Value + " ";
				}
				float num3 = (float)(int)mouseTextColor / 255f;
				if (num24 > 0)
				{
					((Color)(ref color2))._002Ector((int)(byte)(220f * num3), (int)(byte)(220f * num3), (int)(byte)(198f * num3), (int)mouseTextColor);
				}
				else if (num25 > 0)
				{
					((Color)(ref color2))._002Ector((int)(byte)(224f * num3), (int)(byte)(201f * num3), (int)(byte)(92f * num3), (int)mouseTextColor);
				}
				else if (num26 > 0)
				{
					((Color)(ref color2))._002Ector((int)(byte)(181f * num3), (int)(byte)(192f * num3), (int)(byte)(193f * num3), (int)mouseTextColor);
				}
				else if (num2 > 0)
				{
					((Color)(ref color2))._002Ector((int)(byte)(246f * num3), (int)(byte)(138f * num3), (int)(byte)(96f * num3), (int)mouseTextColor);
				}
				if (text4 == "")
				{
					focusText = Lang.inter[89].Value;
				}
				else
				{
					text4 = text4.Substring(0, text4.Length - 1);
					focusText = Lang.inter[89].Value + " (" + text4 + ")";
				}
				focusText = Lang.inter[89].Value;
				text3 = focusText;
				text2 = "";
				for (int k = 0; k < focusText.Length; k++)
				{
					text2 += " ";
				}
				focusText = focusText + text2 + "        ";
			}
		}
		else if (npc[player[myPlayer].talkNPC].type == 18)
		{
			string text5 = "";
			int num4 = 0;
			int num5 = 0;
			int num6 = 0;
			int num7 = 0;
			int num8 = num22;
			if (num8 > 0 && num8 < 1)
			{
				num8 = 1;
			}
			reason = Language.GetTextValue("tModLoader.DefaultNurseCantHealChat");
			canHeal = PlayerLoader.ModifyNurseHeal(player[myPlayer], LocalPlayer.TalkNPC, ref health, ref removeDebuffs, ref reason);
			PlayerLoader.ModifyNursePrice(player[myPlayer], LocalPlayer.TalkNPC, health, removeDebuffs, ref num8);
			if (num8 < 0)
			{
				num8 = 0;
			}
			num22 = num8;
			if (num8 >= 1000000)
			{
				num4 = num8 / 1000000;
				num8 -= num4 * 1000000;
			}
			if (num8 >= 10000)
			{
				num5 = num8 / 10000;
				num8 -= num5 * 10000;
			}
			if (num8 >= 100)
			{
				num6 = num8 / 100;
				num8 -= num6 * 100;
			}
			if (num8 >= 1)
			{
				num7 = num8;
			}
			if (num4 > 0)
			{
				text5 = text5 + num4 + " " + Lang.inter[15].Value + " ";
			}
			if (num5 > 0)
			{
				text5 = text5 + num5 + " " + Lang.inter[16].Value + " ";
			}
			if (num6 > 0)
			{
				text5 = text5 + num6 + " " + Lang.inter[17].Value + " ";
			}
			if (num7 > 0)
			{
				text5 = text5 + num7 + " " + Lang.inter[18].Value + " ";
			}
			float num9 = (float)(int)mouseTextColor / 255f;
			if (num4 > 0)
			{
				((Color)(ref color2))._002Ector((int)(byte)(220f * num9), (int)(byte)(220f * num9), (int)(byte)(198f * num9), (int)mouseTextColor);
			}
			else if (num5 > 0)
			{
				((Color)(ref color2))._002Ector((int)(byte)(224f * num9), (int)(byte)(201f * num9), (int)(byte)(92f * num9), (int)mouseTextColor);
			}
			else if (num6 > 0)
			{
				((Color)(ref color2))._002Ector((int)(byte)(181f * num9), (int)(byte)(192f * num9), (int)(byte)(193f * num9), (int)mouseTextColor);
			}
			else if (num7 > 0)
			{
				((Color)(ref color2))._002Ector((int)(byte)(246f * num9), (int)(byte)(138f * num9), (int)(byte)(96f * num9), (int)mouseTextColor);
			}
			if (text5 == "")
			{
				focusText = Lang.inter[54].Value;
			}
			else
			{
				text5 = text5.Substring(0, text5.Length - 1);
				focusText = Lang.inter[54].Value + " (" + text5 + ")";
			}
		}
		NPCLoader.SetChatButtons(ref focusText, ref focusText2);
		if (!flag)
		{
			DrawNPCChatButtons(num, color2, amountOfLines, focusText, focusText2);
			if (text2 != null)
			{
				float num10 = 130 + amountOfLines * 30;
				float num11 = 180 + (screenWidth - 800) / 2;
				num11 += ChatManager.GetStringSize(FontAssets.MouseText.Value, text3, new Vector2(0.9f)).X - 20f;
				int taxMoney2 = player[myPlayer].taxMoney;
				taxMoney2 = (int)((double)taxMoney2 / player[myPlayer].currentShoppingSettings.PriceAdjustment);
				ItemSlot.DrawMoney(spriteBatch, "", num11, num10 - 40f, Utils.CoinsSplit(taxMoney2), horizontal: true);
			}
		}
		if (PlayerInput.IgnoreMouseInterface)
		{
			return;
		}
		if (((Rectangle)(ref rectangle)).Contains(new Point(mouseX, mouseY)))
		{
			player[myPlayer].mouseInterface = true;
		}
		if (!mouseLeft || !mouseLeftRelease || !((Rectangle)(ref rectangle)).Contains(new Point(mouseX, mouseY)))
		{
			return;
		}
		mouseLeftRelease = false;
		player[myPlayer].releaseUseItem = false;
		player[myPlayer].mouseInterface = true;
		if (npcChatFocus1)
		{
			CloseNPCChatOrSign();
		}
		else if (npcChatFocus2)
		{
			if (player[myPlayer].sign != -1)
			{
				if (editSign)
				{
					SubmitSignText();
				}
				else
				{
					IngameFancyUI.OpenVirtualKeyboard(1);
				}
			}
			else if (NPCID.Sets.IsTownPet[npc[player[myPlayer].talkNPC].type])
			{
				player[myPlayer].PetAnimal(player[myPlayer].talkNPC);
			}
			else
			{
				if (!NPCLoader.PreChatButtonClicked(firstButton: true))
				{
					return;
				}
				NPCLoader.OnChatButtonClicked(firstButton: true);
				if (npc[player[myPlayer].talkNPC].type == 369)
				{
					npcChatCornerItem = 0;
					SoundEngine.PlaySound(12);
					bool flag3 = false;
					if (!anglerQuestFinished && !anglerWhoFinishedToday.Contains(player[myPlayer].name))
					{
						int num12 = player[myPlayer].FindItem(anglerQuestItemNetIDs[anglerQuest]);
						if (num12 != -1)
						{
							player[myPlayer].inventory[num12].stack--;
							if (player[myPlayer].inventory[num12].stack <= 0)
							{
								player[myPlayer].inventory[num12] = new Item();
							}
							flag3 = true;
							SoundEngine.PlaySound(24);
							player[myPlayer].anglerQuestsFinished++;
							player[myPlayer].GetAnglerReward(npc[player[myPlayer].talkNPC], anglerQuestItemNetIDs[anglerQuest]);
						}
					}
					npcChatText = Lang.AnglerQuestChat(flag3);
					if (flag3)
					{
						anglerQuestFinished = true;
						if (netMode == 1)
						{
							NetMessage.SendData(75);
						}
						else
						{
							anglerWhoFinishedToday.Add(player[myPlayer].name);
						}
						AchievementsHelper.HandleAnglerService();
					}
				}
				else if (npc[player[myPlayer].talkNPC].type == 17)
				{
					OpenShop(1);
				}
				else if (npc[player[myPlayer].talkNPC].type == 19)
				{
					OpenShop(2);
				}
				else if (npc[player[myPlayer].talkNPC].type == 124)
				{
					OpenShop(8);
				}
				else if (npc[player[myPlayer].talkNPC].type == 142)
				{
					OpenShop(9);
				}
				else if (npc[player[myPlayer].talkNPC].type == 37)
				{
					if (netMode == 0)
					{
						NPC.SpawnSkeletron(myPlayer);
					}
					else
					{
						NetMessage.SendData(51, -1, -1, null, myPlayer, 1f);
					}
					npcChatText = "";
				}
				else if (npc[player[myPlayer].talkNPC].type == 20)
				{
					OpenShop(3);
				}
				else if (npc[player[myPlayer].talkNPC].type == 38)
				{
					OpenShop(4);
				}
				else if (npc[player[myPlayer].talkNPC].type == 54)
				{
					OpenShop(5);
				}
				else if (npc[player[myPlayer].talkNPC].type == 107)
				{
					OpenShop(6);
				}
				else if (npc[player[myPlayer].talkNPC].type == 108)
				{
					OpenShop(7);
				}
				else if (npc[player[myPlayer].talkNPC].type == 160)
				{
					OpenShop(10);
				}
				else if (npc[player[myPlayer].talkNPC].type == 178)
				{
					OpenShop(11);
				}
				else if (npc[player[myPlayer].talkNPC].type == 207)
				{
					OpenShop(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 208)
				{
					OpenShop(13);
				}
				else if (npc[player[myPlayer].talkNPC].type == 209)
				{
					OpenShop(14);
				}
				else if (npc[player[myPlayer].talkNPC].type == 227)
				{
					OpenShop(15);
				}
				else if (npc[player[myPlayer].talkNPC].type == 228)
				{
					OpenShop(16);
				}
				else if (npc[player[myPlayer].talkNPC].type == 229)
				{
					OpenShop(17);
				}
				else if (npc[player[myPlayer].talkNPC].type == 353)
				{
					OpenShop(18);
				}
				else if (npc[player[myPlayer].talkNPC].type == 368)
				{
					OpenShop(19);
				}
				else if (npc[player[myPlayer].talkNPC].type == 453)
				{
					OpenShop(20);
				}
				else if (npc[player[myPlayer].talkNPC].type == 550)
				{
					OpenShop(21);
				}
				else if (npc[player[myPlayer].talkNPC].type == 588)
				{
					OpenShop(22);
				}
				else if (npc[player[myPlayer].talkNPC].type == 633)
				{
					OpenShop(23);
				}
				else if (npc[player[myPlayer].talkNPC].type == 663)
				{
					OpenShop(24);
				}
				else if (npc[player[myPlayer].talkNPC].type == 22)
				{
					SoundEngine.PlaySound(12);
					HelpText();
				}
				else if (npc[player[myPlayer].talkNPC].type == 441)
				{
					if (player[myPlayer].taxMoney > 0)
					{
						int taxMoney3 = player[myPlayer].taxMoney;
						taxMoney3 = (int)((double)taxMoney3 / player[myPlayer].currentShoppingSettings.PriceAdjustment);
						while (taxMoney3 > 0)
						{
							EntitySource_Gift source = new EntitySource_Gift(npc[player[myPlayer].talkNPC]);
							if (taxMoney3 > 1000000)
							{
								int num13 = taxMoney3 / 1000000;
								taxMoney3 -= 1000000 * num13;
								int number = Item.NewItem(source, (int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 74, num13);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number, 1f);
								}
								continue;
							}
							if (taxMoney3 > 10000)
							{
								int num14 = taxMoney3 / 10000;
								taxMoney3 -= 10000 * num14;
								int number2 = Item.NewItem(source, (int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 73, num14);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number2, 1f);
								}
								continue;
							}
							if (taxMoney3 > 100)
							{
								int num15 = taxMoney3 / 100;
								taxMoney3 -= 100 * num15;
								int number3 = Item.NewItem(source, (int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 72, num15);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number3, 1f);
								}
								continue;
							}
							int num16 = taxMoney3;
							if (num16 < 1)
							{
								num16 = 1;
							}
							taxMoney3 -= num16;
							int number4 = Item.NewItem(source, (int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 71, num16);
							if (netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number4, 1f);
							}
						}
						npcChatText = Lang.dialog(rand.Next(380, 382));
						player[myPlayer].taxMoney = 0;
					}
					else
					{
						npcChatText = Lang.dialog(rand.Next(390, 401));
					}
				}
				else
				{
					if (npc[player[myPlayer].talkNPC].type != 18)
					{
						return;
					}
					SoundEngine.PlaySound(12);
					if (num22 > 0)
					{
						if (!canHeal)
						{
							npcChatText = reason;
						}
						else if (player[myPlayer].BuyItem(num22))
						{
							AchievementsHelper.HandleNurseService(num22);
							SoundEngine.PlaySound(in SoundID.Item4);
							player[myPlayer].HealEffect(health);
							if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.25)
							{
								npcChatText = Lang.dialog(227);
							}
							else if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.5)
							{
								npcChatText = Lang.dialog(228);
							}
							else if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.75)
							{
								npcChatText = Lang.dialog(229);
							}
							else
							{
								npcChatText = Lang.dialog(230);
							}
							player[myPlayer].statLife += health;
							if (removeDebuffs)
							{
								for (int l = 0; l < Player.maxBuffs; l++)
								{
									int num17 = player[myPlayer].buffType[l];
									if (debuff[num17] && player[myPlayer].buffTime[l] > 0 && (num17 < 0 || !BuffID.Sets.NurseCannotRemoveDebuff[num17]))
									{
										player[myPlayer].DelBuff(l);
										l = -1;
									}
								}
							}
							PlayerLoader.PostNurseHeal(LocalPlayer, LocalPlayer.TalkNPC, health, removeDebuffs, num22);
						}
						else
						{
							int num28 = rand.Next(3);
							if (num28 == 0)
							{
								npcChatText = Lang.dialog(52);
							}
							if (num28 == 1)
							{
								npcChatText = Lang.dialog(53);
							}
							if (num28 == 2)
							{
								npcChatText = Lang.dialog(54);
							}
						}
					}
					else
					{
						int num18 = rand.Next(3);
						if (!ChildSafety.Disabled)
						{
							num18 = rand.Next(1, 3);
						}
						switch (num18)
						{
						case 0:
							npcChatText = Lang.dialog(55);
							break;
						case 1:
							npcChatText = Lang.dialog(56);
							break;
						case 2:
							npcChatText = Lang.dialog(57);
							break;
						}
					}
				}
			}
		}
		else if (npcChatFocus4)
		{
			npcChatCornerItem = 0;
			SoundEngine.PlaySound(12);
			npcChatText = player[myPlayer].currentShoppingSettings.HappinessReport;
		}
		else
		{
			if (!npcChatFocus3 || player[myPlayer].talkNPC < 0 || !NPCLoader.PreChatButtonClicked(firstButton: false))
			{
				return;
			}
			NPCLoader.OnChatButtonClicked(firstButton: false);
			if (npc[player[myPlayer].talkNPC].type == 20)
			{
				SoundEngine.PlaySound(12);
				npcChatText = Lang.GetDryadWorldStatusDialog(out var worldIsEntirelyPure);
				if (CanDryadPlayStardewAnimation(LocalPlayer, npc[player[myPlayer].talkNPC]))
				{
					NPC.PreventJojaColaDialog = true;
					NPC.RerollDryadText = 2;
					LocalPlayer.ConsumeItem(5275, reverseOrder: true);
					if (netMode == 1)
					{
						NetMessage.SendData(144);
					}
					else
					{
						NPC.HaveDryadDoStardewAnimation();
					}
					npcChatText = Language.GetTextValue("StardewTalk.PlayerGivesCola");
				}
				else if (worldIsEntirelyPure)
				{
					AchievementsHelper.HandleSpecialEvent(player[myPlayer], 27);
				}
			}
			if (npc[player[myPlayer].talkNPC].type == 208)
			{
				SoundEngine.PlaySound(12);
				npcChatText = Language.GetTextValue("PartyGirlSpecialText.Music" + rand.Next(1, 4));
				swapMusic = !swapMusic;
			}
			else if (npc[player[myPlayer].talkNPC].type == 22)
			{
				playerInventory = true;
				npcChatText = "";
				SoundEngine.PlaySound(12);
				InGuideCraftMenu = true;
				UILinkPointNavigator.GoToDefaultPage();
			}
			else if (npc[player[myPlayer].talkNPC].type == 107)
			{
				playerInventory = true;
				npcChatText = "";
				SoundEngine.PlaySound(12);
				InReforgeMenu = true;
				UILinkPointNavigator.GoToDefaultPage();
			}
			else if (npc[player[myPlayer].talkNPC].type == 353)
			{
				OpenHairWindow();
			}
			else if (npc[player[myPlayer].talkNPC].type == 207)
			{
				npcChatCornerItem = 0;
				SoundEngine.PlaySound(12);
				bool gotDye = false;
				int num19 = player[myPlayer].FindItem(ItemID.Sets.ExoticPlantsForDyeTrade);
				if (num19 != -1)
				{
					player[myPlayer].inventory[num19].stack--;
					if (player[myPlayer].inventory[num19].stack <= 0)
					{
						player[myPlayer].inventory[num19] = new Item();
					}
					gotDye = true;
					SoundEngine.PlaySound(24);
					player[myPlayer].GetDyeTraderReward(npc[player[myPlayer].talkNPC]);
				}
				npcChatText = Lang.DyeTraderQuestChat(gotDye);
			}
			else if (npc[player[myPlayer].talkNPC].type == 550)
			{
				SoundEngine.PlaySound(12);
				HelpText();
				npcChatText = Lang.BartenderHelpText(npc[player[myPlayer].talkNPC]);
			}
			else if (npc[player[myPlayer].talkNPC].type == 227)
			{
				OpenShop(25);
			}
		}
	}

	public static bool CanDryadPlayStardewAnimation(Player player, NPC npc)
	{
		Item heldItem = player.HeldItem;
		if (!heldItem.IsAir && heldItem.type == 5275)
		{
			return npc.ai[0] != 24f;
		}
		return false;
	}

	private void OpenShop(int shopIndex)
	{
		playerInventory = true;
		stackSplit = 9999;
		npcChatText = "";
		SetNPCShopIndex(1);
		shop[npcShop].SetupShop(shopIndex);
		SoundEngine.PlaySound(12);
	}

	public static void SetNPCShopIndex(int index)
	{
		npcShop = index;
	}

	private static void DrawNPCChatButtons(int superColor, Color chatColor, int numLines, string focusText, string focusText3)
	{
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0273: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0303: Unknown result type (might be due to invalid IL or missing references)
		//IL_0308: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_031f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_032f: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0355: Unknown result type (might be due to invalid IL or missing references)
		//IL_035c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_038d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0394: Unknown result type (might be due to invalid IL or missing references)
		//IL_039b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_0402: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_043a: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0443: Unknown result type (might be due to invalid IL or missing references)
		//IL_0494: Unknown result type (might be due to invalid IL or missing references)
		//IL_0496: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_049a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0556: Unknown result type (might be due to invalid IL or missing references)
		//IL_055d: Unknown result type (might be due to invalid IL or missing references)
		//IL_056d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0582: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_059b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0602: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_060b: Unknown result type (might be due to invalid IL or missing references)
		//IL_065c: Unknown result type (might be due to invalid IL or missing references)
		//IL_065e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0660: Unknown result type (might be due to invalid IL or missing references)
		//IL_0662: Unknown result type (might be due to invalid IL or missing references)
		//IL_066c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0671: Unknown result type (might be due to invalid IL or missing references)
		//IL_0676: Unknown result type (might be due to invalid IL or missing references)
		//IL_0683: Unknown result type (might be due to invalid IL or missing references)
		//IL_067f: Unknown result type (might be due to invalid IL or missing references)
		//IL_068d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0694: Unknown result type (might be due to invalid IL or missing references)
		//IL_0699: Unknown result type (might be due to invalid IL or missing references)
		//IL_069b: Unknown result type (might be due to invalid IL or missing references)
		//IL_069d: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c5: Unknown result type (might be due to invalid IL or missing references)
		float y = 130 + numLines * 30;
		int num = 180 + (screenWidth - 800) / 2;
		Vector2 vec = default(Vector2);
		((Vector2)(ref vec))._002Ector((float)mouseX, (float)mouseY);
		Player player = Main.player[myPlayer];
		Vector2 val = new Vector2((float)num, y);
		string text = focusText;
		DynamicSpriteFont value = FontAssets.MouseText.Value;
		Vector2 vector2 = val;
		Vector2 vector3 = default(Vector2);
		((Vector2)(ref vector3))._002Ector(0.9f);
		Vector2 stringSize = ChatManager.GetStringSize(value, text, vector3);
		Color baseColor = chatColor;
		_ = Color.Black;
		Vector2 vector4 = default(Vector2);
		((Vector2)(ref vector4))._002Ector(1f);
		Color brown = Color.Brown;
		float num2 = 1.2f;
		if (stringSize.X > 260f)
		{
			vector4.X *= 260f / stringSize.X;
		}
		if (vec.Between(vector2, vector2 + stringSize * vector3 * vector4.X) && !PlayerInput.IgnoreMouseInterface)
		{
			player.mouseInterface = true;
			player.releaseUseItem = false;
			vector3 *= num2;
			if (!npcChatFocus2)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus2 = true;
		}
		else
		{
			if (npcChatFocus2)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus2 = false;
		}
		ChatManager.DrawColorCodedStringWithShadow(spriteBatch, value, text, vector2 + stringSize * vector4 * 0.5f, baseColor, (!npcChatFocus2) ? Color.Black : brown, 0f, stringSize * 0.5f, vector3 * vector4);
		if (text.Length > 0)
		{
			UILinkPointNavigator.SetPosition(2500, vector2 + stringSize * 0.5f);
			UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsLeft = true;
		}
		Vector2 vector5 = default(Vector2);
		((Vector2)(ref vector5))._002Ector((float)num + stringSize.X * vector4.X + 30f, y);
		text = Lang.inter[52].Value;
		value = FontAssets.MouseText.Value;
		vector2 = vector5;
		((Vector2)(ref vector3))._002Ector(0.9f);
		stringSize = ChatManager.GetStringSize(value, text, vector3);
		((Color)(ref baseColor))._002Ector(superColor, (int)((double)superColor / 1.1), superColor / 2, superColor);
		((Vector2)(ref vector4))._002Ector(1f);
		if (vec.Between(vector2, vector2 + stringSize * vector3 * vector4.X) && !PlayerInput.IgnoreMouseInterface)
		{
			player.mouseInterface = true;
			player.releaseUseItem = false;
			vector3 *= num2;
			if (!npcChatFocus1)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus1 = true;
		}
		else
		{
			if (npcChatFocus1)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus1 = false;
		}
		ChatManager.DrawColorCodedStringWithShadow(spriteBatch, value, text, vector2 + stringSize * vector4 * 0.5f, baseColor, (!npcChatFocus1) ? Color.Black : brown, 0f, stringSize * 0.5f, vector3 * vector4);
		if (text.Length > 0)
		{
			UILinkPointNavigator.SetPosition(2501, vector2 + stringSize * 0.5f);
			UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsMiddle = true;
		}
		if (string.IsNullOrWhiteSpace(focusText3))
		{
			npcChatFocus3 = false;
			UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight = false;
		}
		else
		{
			Vector2 vector6 = default(Vector2);
			((Vector2)(ref vector6))._002Ector(vector5.X + stringSize.X * vector4.X + 30f, y);
			text = focusText3;
			value = FontAssets.MouseText.Value;
			vector2 = vector6;
			((Vector2)(ref vector3))._002Ector(0.9f);
			stringSize = ChatManager.GetStringSize(value, text, vector3);
			baseColor = chatColor;
			((Vector2)(ref vector4))._002Ector(1f);
			vector5.X = vector6.X;
			if (vec.Between(vector2, vector2 + stringSize * vector3 * vector4.X) && !PlayerInput.IgnoreMouseInterface)
			{
				player.mouseInterface = true;
				player.releaseUseItem = false;
				vector3 *= num2;
				if (!npcChatFocus3)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus3 = true;
			}
			else
			{
				if (npcChatFocus3)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus3 = false;
			}
			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, value, text, vector2 + stringSize * vector4 * 0.5f, baseColor, (!npcChatFocus3) ? Color.Black : brown, 0f, stringSize * 0.5f, vector3 * vector4);
			UILinkPointNavigator.SetPosition(2502, vector2 + stringSize * 0.5f);
			UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight = true;
		}
		if (remixWorld)
		{
			return;
		}
		if (Main.player[myPlayer].currentShoppingSettings.HappinessReport == "")
		{
			npcChatFocus4 = false;
			UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight2 = false;
			return;
		}
		string textValue = Language.GetTextValue("UI.NPCCheckHappiness");
		Vector2 val2 = new Vector2(vector5.X + stringSize.X * vector4.X + 30f, y);
		text = textValue;
		value = FontAssets.MouseText.Value;
		vector2 = val2;
		((Vector2)(ref vector3))._002Ector(0.9f);
		stringSize = ChatManager.GetStringSize(value, text, vector3);
		((Color)(ref baseColor))._002Ector(superColor, (int)((double)superColor / 1.1), superColor / 2, superColor);
		((Vector2)(ref vector4))._002Ector(1f);
		if (vec.Between(vector2, vector2 + stringSize * vector3 * vector4.X) && !PlayerInput.IgnoreMouseInterface)
		{
			player.mouseInterface = true;
			player.releaseUseItem = false;
			vector3 *= num2;
			if (!npcChatFocus4)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus4 = true;
		}
		else
		{
			if (npcChatFocus4)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus4 = false;
		}
		ChatManager.DrawColorCodedStringWithShadow(spriteBatch, value, text, vector2 + stringSize * vector4 * 0.5f, baseColor, (!npcChatFocus4) ? Color.Black : brown, 0f, stringSize * 0.5f, vector3 * vector4);
		UILinkPointNavigator.SetPosition(2503, vector2 + stringSize * 0.5f);
		UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight2 = true;
	}

	public static void CloseNPCChatOrSign()
	{
		player[myPlayer].sign = -1;
		editSign = false;
		player[myPlayer].SetTalkNPC(-1);
		npcChatCornerItem = 0;
		npcChatText = "";
		SoundEngine.PlaySound(11);
		player[myPlayer].releaseMount = false;
	}

	public static void SubmitSignText()
	{
		SoundEngine.PlaySound(12);
		int num = player[myPlayer].sign;
		Sign.TextSign(num, npcChatText);
		editSign = false;
		if (netMode == 1)
		{
			NetMessage.SendData(47, -1, -1, null, num);
		}
	}

	private int NPCBannerSorter(int npcIndex1, int npcIndex2)
	{
		return -npc[npcIndex1].housingCategory.CompareTo(npc[npcIndex2].housingCategory);
	}

	protected void DrawNPCHousesInWorld()
	{
		//IL_0273: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0356: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		//IL_036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0302: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_042f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0450: Unknown result type (might be due to invalid IL or missing references)
		//IL_045e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0488: Unknown result type (might be due to invalid IL or missing references)
		//IL_048f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04af: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fc: Unknown result type (might be due to invalid IL or missing references)
		_npcsWithBannersToDraw.Clear();
		_occupantsListToDrawNPCHouses.Clear();
		for (int i = 0; i < 200; i++)
		{
			if (npc[i].active && npc[i].townNPC && !npc[i].homeless && npc[i].homeTileX > 0 && npc[i].homeTileY > 0 && npc[i].type != 37)
			{
				_npcsWithBannersToDraw.Add(i);
			}
		}
		_npcsWithBannersToDraw.Sort(NPCBannerSorter);
		for (int j = 0; j < _npcsWithBannersToDraw.Count; j++)
		{
			int num = _npcsWithBannersToDraw[j];
			NPC nPC = npc[num];
			if (!nPC.active || !nPC.townNPC || nPC.homeless || nPC.homeTileX <= 0 || nPC.homeTileY <= 0 || nPC.type == 37)
			{
				continue;
			}
			int num6 = 0;
			int housingCategory = nPC.housingCategory;
			int homeTileX = nPC.homeTileX;
			int num7 = nPC.homeTileY - 1;
			WorldGen.TownManager.AddOccupantsToList(homeTileX, num7 + 1, _occupantsListToDrawNPCHouses);
			if (_occupantsListToDrawNPCHouses.Contains(nPC.type))
			{
				num6 = 1;
			}
			int num8 = 0;
			for (int num9 = _npcsWithBannersToDraw.Count - 1; num9 > j; num9--)
			{
				int num10 = _npcsWithBannersToDraw[num9];
				if (npc[num10].homeTileX == homeTileX && npc[num10].homeTileY == num7 + 1)
				{
					num8++;
				}
			}
			int num11 = num8 * 26;
			if (tile[homeTileX, num7] == null)
			{
				continue;
			}
			bool flag = false;
			while (!tile[homeTileX, num7].active() || !tileSolid[tile[homeTileX, num7].type])
			{
				num7--;
				if (num7 < 10)
				{
					break;
				}
				if (tile[homeTileX, num7] == null)
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				continue;
			}
			int num12 = 8;
			int num13 = 18;
			if (tile[homeTileX, num7].type == 19)
			{
				num13 -= 8;
			}
			num7++;
			int num2 = 0;
			float num3 = num7 * 16;
			num3 += (float)num11;
			SpriteEffects effects = (SpriteEffects)0;
			Texture2D value = TextureAssets.HouseBanner.Value;
			Rectangle value2 = value.Frame(2, 2);
			if (num6 > 0)
			{
				value2.X += value2.Width * num6;
			}
			if (housingCategory > 0)
			{
				value2.Y += value2.Height * housingCategory;
			}
			if (player[myPlayer].gravDir == -1f)
			{
				num3 -= screenPosition.Y;
				num3 = screenPosition.Y + (float)screenHeight - num3;
				num3 -= (float)value2.Height;
				effects = (SpriteEffects)2;
				num2 = 4;
			}
			spriteBatch.Draw(value, new Vector2((float)(homeTileX * 16 - (int)screenPosition.X + num12), num3 - (float)(int)screenPosition.Y + (float)num13 + (float)num2), (Rectangle?)value2, Lighting.GetColor(homeTileX, num7), 0f, new Vector2((float)(value2.Width / 2), (float)(value2.Height / 2)), 1f, effects, 0f);
			int headIndexSafe = TownNPCProfiles.GetHeadIndexSafe(nPC);
			float scale = 1f;
			float num4 = 0f;
			num4 = ((TextureAssets.NpcHead[headIndexSafe].Width() <= TextureAssets.NpcHead[headIndexSafe].Height()) ? ((float)TextureAssets.NpcHead[headIndexSafe].Height()) : ((float)TextureAssets.NpcHead[headIndexSafe].Width()));
			if (num4 > 24f)
			{
				scale = 24f / num4;
			}
			spriteBatch.Draw(TextureAssets.NpcHead[headIndexSafe].Value, new Vector2((float)(homeTileX * 16 - (int)screenPosition.X + num12), num3 - (float)(int)screenPosition.Y + (float)num13 + 2f), (Rectangle?)new Rectangle(0, 0, TextureAssets.NpcHead[headIndexSafe].Width(), TextureAssets.NpcHead[headIndexSafe].Height()), Lighting.GetColor(homeTileX, num7), 0f, new Vector2((float)(TextureAssets.NpcHead[headIndexSafe].Width() / 2), (float)(TextureAssets.NpcHead[headIndexSafe].Height() / 2)), scale, effects, 0f);
			homeTileX = homeTileX * 16 - (int)screenPosition.X + num12 - value2.Width / 2;
			num7 = (int)num3 - (int)screenPosition.Y + 4;
			int num5 = -8;
			if (mouseX >= homeTileX && mouseX <= homeTileX + value2.Width && mouseY >= num7 && mouseY <= num7 + value2.Height + num5)
			{
				string nPCHouseBannerText = Lang.GetNPCHouseBannerText(nPC, num6);
				MouseText(nPCHouseBannerText, 0, 0);
				if (mouseRightRelease && mouseRight)
				{
					mouseRightRelease = false;
					WorldGen.kickOut(num);
					SoundEngine.PlaySound(12);
				}
			}
		}
	}

	public void DrawWindowsIMEPanel(Vector2 position, float xAnchor = 0f)
	{
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		if (!Platform.Get<IImeService>().IsCandidateListVisible)
		{
			return;
		}
		List<string> list = new List<string>();
		for (uint num = 0u; num < Platform.Get<IImeService>().CandidateCount; num++)
		{
			string candidate = Platform.Get<IImeService>().GetCandidate(num);
			list.Add(candidate);
		}
		if (list.Count == 0)
		{
			return;
		}
		uint selectedCandidate = Platform.Get<IImeService>().SelectedCandidate;
		DynamicSpriteFont value = FontAssets.MouseText.Value;
		float num2 = 0.85f;
		float num3 = 14f;
		float num4 = 0f;
		int num5 = 32;
		num4 += num3;
		string text = "{0,2}: {1}";
		string text2 = "  ";
		for (int i = 0; i < list.Count; i++)
		{
			int num6 = i + 1;
			string text3 = text;
			if (i < list.Count - 1)
			{
				text3 += text2;
			}
			num4 += value.MeasureString(string.Format(text3, num6, list[i])).X * num2;
			num4 += num3;
		}
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(num4 * (0f - xAnchor), 0f);
		Utils.DrawSettings2Panel(spriteBatch, position + vector + new Vector2(0f, (float)(-num5)), num4, new Color(63, 65, 151, 255) * 0.785f);
		Vector2 pos = position + new Vector2(10f, (float)(-num5 / 2)) + vector;
		for (uint num7 = 0u; num7 < list.Count; num7++)
		{
			Color color = Color.Gray;
			if (num7 == selectedCandidate)
			{
				color = Color.White;
			}
			uint num8 = num7 + 1;
			string text4 = text;
			if (num7 < list.Count - 1)
			{
				text4 += text2;
			}
			string text5 = string.Format(text4, num8, list[(int)num7]);
			Vector2 vector2 = value.MeasureString(text5) * num2;
			Utils.DrawBorderString(spriteBatch, text5, pos, color, num2, 0f, 0.4f);
			pos.X += vector2.X + num3;
		}
	}

	public void HandleIME()
	{
		if (_imeToggle != PlayerInput.WritingText)
		{
			_imeToggle = PlayerInput.WritingText;
			if (_imeToggle)
			{
				Platform.Get<IImeService>().Enable();
			}
			else
			{
				Platform.Get<IImeService>().Disable();
			}
		}
	}

	protected void DrawPlayerChat()
	{
		//IL_039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_033a: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		TextSnippet[] array = null;
		if (drawingPlayerChat)
		{
			PlayerInput.WritingText = true;
		}
		HandleIME();
		if (drawingPlayerChat)
		{
			textBlinkerCount++;
			if (textBlinkerCount >= 20)
			{
				if (textBlinkerState == 0)
				{
					textBlinkerState = 1;
				}
				else
				{
					textBlinkerState = 0;
				}
				textBlinkerCount = 0;
			}
			string text = chatText;
			if (screenWidth > 800)
			{
				int num = screenWidth - 300;
				int num2 = 78;
				spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2((float)num2, (float)(screenHeight - 36)), (Rectangle?)new Rectangle(0, 0, TextureAssets.TextBack.Width() - 100, TextureAssets.TextBack.Height()), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
				num -= 400;
				num2 += 400;
				while (num > 0)
				{
					if (num > 300)
					{
						spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2((float)num2, (float)(screenHeight - 36)), (Rectangle?)new Rectangle(100, 0, TextureAssets.TextBack.Width() - 200, TextureAssets.TextBack.Height()), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
						num -= 300;
						num2 += 300;
					}
					else
					{
						spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2((float)num2, (float)(screenHeight - 36)), (Rectangle?)new Rectangle(TextureAssets.TextBack.Width() - num, 0, TextureAssets.TextBack.Width() - (TextureAssets.TextBack.Width() - num), TextureAssets.TextBack.Height()), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
						num = 0;
					}
				}
			}
			else
			{
				spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2(78f, (float)(screenHeight - 36)), (Rectangle?)new Rectangle(0, 0, TextureAssets.TextBack.Width(), TextureAssets.TextBack.Height()), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			int hoveredSnippet = -1;
			List<TextSnippet> list = ChatManager.ParseMessage(text, Color.White);
			string compositionString = Platform.Get<IImeService>().CompositionString;
			if (compositionString != null && compositionString.Length > 0)
			{
				list.Add(new TextSnippet(compositionString, new Color(255, 240, 20)));
			}
			if (textBlinkerState == 1)
			{
				list.Add(new TextSnippet("|", Color.White));
			}
			array = list.ToArray();
			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, array, new Vector2(88f, (float)(screenHeight - 30)), 0f, Vector2.Zero, Vector2.One, out hoveredSnippet);
			if (hoveredSnippet > -1)
			{
				array[hoveredSnippet].OnHover();
				if (mouseLeft && mouseLeftRelease)
				{
					array[hoveredSnippet].OnClick();
				}
			}
		}
		chatMonitor.DrawChat(drawingPlayerChat);
		if (drawingPlayerChat && array != null)
		{
			Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, array, Vector2.Zero);
			DrawWindowsIMEPanel(new Vector2(88f, (float)(screenHeight - 30)) + new Vector2(stringSize.X + 10f, -6f));
		}
		TimeLogger.DetailedDrawTime(10);
	}

	protected void DrawInventory()
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0300: Unknown result type (might be due to invalid IL or missing references)
		//IL_0306: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_040e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0413: Unknown result type (might be due to invalid IL or missing references)
		//IL_06da: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_060d: Unknown result type (might be due to invalid IL or missing references)
		//IL_061f: Unknown result type (might be due to invalid IL or missing references)
		//IL_062b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0631: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1257: Unknown result type (might be due to invalid IL or missing references)
		//IL_1259: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f94: Unknown result type (might be due to invalid IL or missing references)
		//IL_1497: Unknown result type (might be due to invalid IL or missing references)
		//IL_1499: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0966: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f86: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2fe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3014: Unknown result type (might be due to invalid IL or missing references)
		//IL_3020: Unknown result type (might be due to invalid IL or missing references)
		//IL_3026: Unknown result type (might be due to invalid IL or missing references)
		//IL_2068: Unknown result type (might be due to invalid IL or missing references)
		//IL_207b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1030: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_16db: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2142: Unknown result type (might be due to invalid IL or missing references)
		//IL_2149: Unknown result type (might be due to invalid IL or missing references)
		//IL_214f: Unknown result type (might be due to invalid IL or missing references)
		//IL_134b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1786: Unknown result type (might be due to invalid IL or missing references)
		//IL_1788: Unknown result type (might be due to invalid IL or missing references)
		//IL_170b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1730: Unknown result type (might be due to invalid IL or missing references)
		//IL_1759: Unknown result type (might be due to invalid IL or missing references)
		//IL_1766: Unknown result type (might be due to invalid IL or missing references)
		//IL_176d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1777: Unknown result type (might be due to invalid IL or missing references)
		//IL_177c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be6: Unknown result type (might be due to invalid IL or missing references)
		//IL_307e: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_31bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_31d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_31dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_31df: Unknown result type (might be due to invalid IL or missing references)
		//IL_31e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3216: Unknown result type (might be due to invalid IL or missing references)
		//IL_321d: Unknown result type (might be due to invalid IL or missing references)
		//IL_322f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3248: Unknown result type (might be due to invalid IL or missing references)
		//IL_3254: Unknown result type (might be due to invalid IL or missing references)
		//IL_325a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2204: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_3189: Unknown result type (might be due to invalid IL or missing references)
		//IL_3190: Unknown result type (might be due to invalid IL or missing references)
		//IL_3196: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f35: Unknown result type (might be due to invalid IL or missing references)
		//IL_120c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1211: Unknown result type (might be due to invalid IL or missing references)
		//IL_121b: Unknown result type (might be due to invalid IL or missing references)
		//IL_32b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_158c: Unknown result type (might be due to invalid IL or missing references)
		//IL_33bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_33c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b94: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1474: Unknown result type (might be due to invalid IL or missing references)
		//IL_147b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1481: Unknown result type (might be due to invalid IL or missing references)
		//IL_144e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1450: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c93: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ccc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cde: Unknown result type (might be due to invalid IL or missing references)
		//IL_3444: Unknown result type (might be due to invalid IL or missing references)
		//IL_3455: Unknown result type (might be due to invalid IL or missing references)
		//IL_345a: Unknown result type (might be due to invalid IL or missing references)
		//IL_345f: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_16be: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1691: Unknown result type (might be due to invalid IL or missing references)
		//IL_1693: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2663: Unknown result type (might be due to invalid IL or missing references)
		//IL_2668: Unknown result type (might be due to invalid IL or missing references)
		//IL_266a: Unknown result type (might be due to invalid IL or missing references)
		//IL_266f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2918: Unknown result type (might be due to invalid IL or missing references)
		//IL_2927: Unknown result type (might be due to invalid IL or missing references)
		//IL_293e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2948: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2edb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2eec: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f16: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b50: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b55: Unknown result type (might be due to invalid IL or missing references)
		//IL_3795: Unknown result type (might be due to invalid IL or missing references)
		//IL_353f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3934: Unknown result type (might be due to invalid IL or missing references)
		//IL_363d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3644: Unknown result type (might be due to invalid IL or missing references)
		//IL_364a: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2803: Unknown result type (might be due to invalid IL or missing references)
		//IL_2808: Unknown result type (might be due to invalid IL or missing references)
		//IL_283b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2842: Unknown result type (might be due to invalid IL or missing references)
		//IL_2848: Unknown result type (might be due to invalid IL or missing references)
		//IL_284f: Unknown result type (might be due to invalid IL or missing references)
		//IL_386f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3890: Unknown result type (might be due to invalid IL or missing references)
		//IL_389a: Unknown result type (might be due to invalid IL or missing references)
		//IL_38a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d01: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d32: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d41: Unknown result type (might be due to invalid IL or missing references)
		//IL_39f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a01: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a13: Unknown result type (might be due to invalid IL or missing references)
		//IL_2585: Unknown result type (might be due to invalid IL or missing references)
		//IL_2596: Unknown result type (might be due to invalid IL or missing references)
		//IL_259b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cc: Unknown result type (might be due to invalid IL or missing references)
		Recipe.GetThroughDelayedFindRecipes();
		if (ShouldPVPDraw)
		{
			DrawPVPIcons();
		}
		int num = 0;
		int num30 = 0;
		int num41 = screenWidth;
		int num51 = 0;
		int num61 = screenWidth;
		int num71 = 0;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)num, (float)num30);
		new Vector2((float)num41, (float)num51);
		new Vector2((float)num61, (float)num71);
		DrawBestiaryIcon(num, num30);
		DrawEmoteBubblesButton(num, num30);
		DrawTrashItemSlot(num, num30);
		spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[4].Value, new Vector2(40f, 0f) + vector, new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		inventoryScale = 0.85f;
		if (mouseX > 20 && mouseX < (int)(20f + 560f * inventoryScale) && mouseY > 20 && mouseY < (int)(20f + 280f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
		{
			player[myPlayer].mouseInterface = true;
		}
		for (int i = 0; i < 10; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				int num81 = (int)(20f + (float)(i * 56) * inventoryScale) + num;
				int num92 = (int)(20f + (float)(j * 56) * inventoryScale) + num30;
				int num103 = i + j * 10;
				new Color(100, 100, 100, 100);
				if (mouseX >= num81 && (float)mouseX <= (float)num81 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num92 && (float)mouseY <= (float)num92 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(player[myPlayer].inventory, 0, num103);
					if (player[myPlayer].inventoryChestStack[num103] && (player[myPlayer].inventory[num103].type == 0 || player[myPlayer].inventory[num103].stack == 0))
					{
						player[myPlayer].inventoryChestStack[num103] = false;
					}
					if (!player[myPlayer].inventoryChestStack[num103])
					{
						ItemSlot.LeftClick(player[myPlayer].inventory, 0, num103);
						ItemSlot.RightClick(player[myPlayer].inventory, 0, num103);
						if (mouseLeftRelease && mouseLeft)
						{
							Recipe.FindRecipes();
						}
					}
					ItemSlot.MouseHover(player[myPlayer].inventory, 0, num103);
				}
				ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 0, num103, new Vector2((float)num81, (float)num92));
			}
		}
		int activeToggles = BuilderToggleLoader.ActiveBuilderToggles();
		bool pushSideToolsUp = activeToggles / 12 != BuilderToggleLoader.BuilderTogglePage || activeToggles % 12 >= 10;
		if (!PlayerInput.UsingGamepad)
		{
			DrawHotbarLockIcon(num, num30, pushSideToolsUp);
		}
		ItemSlot.DrawRadialDpad(spriteBatch, new Vector2(20f) + new Vector2(56f * inventoryScale * 10f, 56f * inventoryScale * 5f) + new Vector2(26f, 70f) + vector);
		if (_achievementAdvisor.CanDrawAboveCoins)
		{
			int num2 = (int)(20f + 560f * inventoryScale) + num;
			int num13 = (int)(20f + 0f * inventoryScale) + num30;
			_achievementAdvisor.DrawOneAchievement(spriteBatch, new Vector2((float)num2, (float)num13) + new Vector2(5f), large: true);
		}
		if (mapEnabled)
		{
			bool flag = false;
			int num22 = num41 - 440;
			int num23 = 40 + num51;
			if (screenWidth < 940)
			{
				flag = true;
			}
			if (flag)
			{
				num22 = num61 - 40;
				num23 = num71 - 200;
			}
			int num24 = 0;
			for (int k = 0; k < 4; k++)
			{
				int num25 = 255;
				int num26 = num22 + k * 32 - num24;
				int num27 = num23;
				if (flag)
				{
					num26 = num22;
					num27 = num23 + k * 32 - num24;
				}
				int num28 = k;
				num25 = 120;
				if (k > 0 && mapStyle == k - 1)
				{
					num25 = 200;
				}
				if (mouseX >= num26 && mouseX <= num26 + 32 && mouseY >= num27 && mouseY <= num27 + 30 && !PlayerInput.IgnoreMouseInterface)
				{
					num25 = 255;
					num28 += 4;
					player[myPlayer].mouseInterface = true;
					if (mouseLeft && mouseLeftRelease)
					{
						if (k == 0)
						{
							playerInventory = false;
							player[myPlayer].SetTalkNPC(-1);
							npcChatCornerItem = 0;
							SoundEngine.PlaySound(10);
							mapFullscreenScale = 2.5f;
							mapFullscreen = true;
							resetMapFull = true;
						}
						if (k == 1)
						{
							mapStyle = 0;
							SoundEngine.PlaySound(12);
						}
						if (k == 2)
						{
							mapStyle = 1;
							SoundEngine.PlaySound(12);
						}
						if (k == 3)
						{
							mapStyle = 2;
							SoundEngine.PlaySound(12);
						}
					}
				}
				spriteBatch.Draw(TextureAssets.MapIcon[num28].Value, new Vector2((float)num26, (float)num27), (Rectangle?)new Rectangle(0, 0, TextureAssets.MapIcon[num28].Width(), TextureAssets.MapIcon[num28].Height()), new Color(num25, num25, num25, num25), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
		}
		if (armorHide)
		{
			armorAlpha -= 0.1f;
			if (armorAlpha < 0f)
			{
				armorAlpha = 0f;
			}
		}
		else
		{
			armorAlpha += 0.025f;
			if (armorAlpha > 1f)
			{
				armorAlpha = 1f;
			}
		}
		new Color((int)(byte)((float)(int)mouseTextColor * armorAlpha), (int)(byte)((float)(int)mouseTextColor * armorAlpha), (int)(byte)((float)(int)mouseTextColor * armorAlpha), (int)(byte)((float)(int)mouseTextColor * armorAlpha));
		armorHide = false;
		int num29 = 8 + player[myPlayer].GetAmountOfExtraAccessorySlotsToShow();
		int num31 = 174 + mH;
		int num32 = 950;
		_cannotDrawAccessoriesHorizontally = false;
		if (screenHeight < num32 && num29 >= 10)
		{
			num31 -= (int)(56f * inventoryScale * (float)(num29 - 9));
			_cannotDrawAccessoriesHorizontally = true;
		}
		int num33 = DrawPageIcons(num31 - 32);
		if (num33 > -1)
		{
			HoverItem = new Item();
			switch (num33)
			{
			case 1:
				hoverItemName = Lang.inter[80].Value;
				break;
			case 2:
				hoverItemName = Lang.inter[79].Value;
				break;
			case 3:
				hoverItemName = (CaptureModeDisabled ? Lang.inter[115].Value : Lang.inter[81].Value);
				break;
			}
		}
		if (EquipPage == 2)
		{
			Point value = default(Point);
			((Point)(ref value))._002Ector(mouseX, mouseY);
			Rectangle r = default(Rectangle);
			((Rectangle)(ref r))._002Ector(0, 0, (int)((float)TextureAssets.InventoryBack.Width() * inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * inventoryScale));
			Item[] inv = player[myPlayer].miscEquips;
			int num34 = screenWidth - 92;
			int num35 = mH + 174;
			Rectangle r2 = default(Rectangle);
			for (int l = 0; l < 2; l++)
			{
				switch (l)
				{
				case 0:
					inv = player[myPlayer].miscEquips;
					break;
				case 1:
					inv = player[myPlayer].miscDyes;
					break;
				}
				r.X = num34 + l * -47;
				for (int m = 0; m < 5; m++)
				{
					int context = 0;
					int num36 = -1;
					bool flag5 = false;
					switch (m)
					{
					case 0:
						context = 19;
						num36 = 0;
						break;
					case 1:
						context = 20;
						num36 = 1;
						break;
					case 2:
						context = 18;
						flag5 = player[myPlayer].unlockedSuperCart;
						break;
					case 3:
						context = 17;
						break;
					case 4:
						context = 16;
						break;
					}
					if (l == 1)
					{
						context = 33;
						num36 = -1;
						flag5 = false;
					}
					r.Y = num35 + m * 47;
					bool flag6 = false;
					Texture2D value2 = TextureAssets.InventoryTickOn.Value;
					((Rectangle)(ref r2))._002Ector(((Rectangle)(ref r)).Left + 34, ((Rectangle)(ref r)).Top - 2, value2.Width, value2.Height);
					int num37 = 0;
					if (num36 != -1)
					{
						if (player[myPlayer].hideMisc[num36])
						{
							value2 = TextureAssets.InventoryTickOff.Value;
						}
						if (((Rectangle)(ref r2)).Contains(value) && !PlayerInput.IgnoreMouseInterface)
						{
							player[myPlayer].mouseInterface = true;
							flag6 = true;
							if (mouseLeft && mouseLeftRelease)
							{
								if (num36 == 0)
								{
									player[myPlayer].TogglePet();
								}
								if (num36 == 1)
								{
									player[myPlayer].ToggleLight();
								}
								mouseLeftRelease = false;
								SoundEngine.PlaySound(12);
								if (netMode == 1)
								{
									NetMessage.SendData(4, -1, -1, null, myPlayer);
								}
							}
							num37 = ((!player[myPlayer].hideMisc[num36]) ? 1 : 2);
						}
					}
					if (flag5)
					{
						value2 = TextureAssets.Extra[255].Value;
						if (!player[myPlayer].enabledSuperCart)
						{
							value2 = TextureAssets.Extra[256].Value;
						}
						((Rectangle)(ref r2))._002Ector(r2.X + r2.Width / 2, r2.Y + r2.Height / 2, r2.Width, r2.Height);
						((Rectangle)(ref r2)).Offset(-r2.Width / 2, -r2.Height / 2);
						if (((Rectangle)(ref r2)).Contains(value) && !PlayerInput.IgnoreMouseInterface)
						{
							player[myPlayer].mouseInterface = true;
							flag6 = true;
							if (mouseLeft && mouseLeftRelease)
							{
								player[myPlayer].enabledSuperCart = !player[myPlayer].enabledSuperCart;
								mouseLeftRelease = false;
								SoundEngine.PlaySound(12);
								if (netMode == 1)
								{
									NetMessage.SendData(4, -1, -1, null, myPlayer);
								}
							}
							num37 = ((!player[myPlayer].enabledSuperCart) ? 1 : 2);
						}
					}
					if (((Rectangle)(ref r)).Contains(value) && !flag6 && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						armorHide = true;
						ItemSlot.Handle(inv, context, m);
					}
					ItemSlot.Draw(spriteBatch, inv, context, m, r.TopLeft());
					if (num36 != -1)
					{
						spriteBatch.Draw(value2, r2.TopLeft(), Color.White * 0.7f);
						if (num37 > 0)
						{
							HoverItem = new Item();
							hoverItemName = Lang.inter[58 + num37].Value;
						}
					}
					if (flag5)
					{
						spriteBatch.Draw(value2, r2.TopLeft(), Color.White);
						if (num37 > 0)
						{
							HoverItem = new Item();
							hoverItemName = Language.GetTextValue((num37 == 1) ? "GameUI.SuperCartDisabled" : "GameUI.SuperCartEnabled");
						}
					}
				}
			}
			num35 += 247;
			num34 += 8;
			int num38 = -1;
			int num39 = 0;
			int num40 = 3;
			int num42 = 260;
			if (screenHeight > 630 + num42 * (mapStyle == 1).ToInt())
			{
				num40++;
			}
			if (screenHeight > 680 + num42 * (mapStyle == 1).ToInt())
			{
				num40++;
			}
			if (screenHeight > 730 + num42 * (mapStyle == 1).ToInt())
			{
				num40++;
			}
			int num43 = 46;
			Point point = default(Point);
			for (int n = 0; n < Player.maxBuffs; n++)
			{
				if (player[myPlayer].buffType[n] != 0)
				{
					int num44 = num39 / num40;
					int num45 = num39 % num40;
					((Point)(ref point))._002Ector(num34 + num44 * -num43, num35 + num45 * num43);
					num38 = DrawBuffIcon(num38, n, point.X, point.Y);
					UILinkPointNavigator.SetPosition(9000 + num39, new Vector2((float)(point.X + 30), (float)(point.Y + 30)));
					num39++;
					if (buffAlpha[n] < 0.65f)
					{
						buffAlpha[n] = 0.65f;
					}
				}
			}
			UILinkPointNavigator.Shortcuts.BUFFS_DRAWN = num39;
			UILinkPointNavigator.Shortcuts.BUFFS_PER_COLUMN = num40;
			if (num38 >= 0)
			{
				int num46 = player[myPlayer].buffType[num38];
				if (num46 > 0)
				{
					string buffName = Lang.GetBuffName(num46);
					string buffTooltip = GetBuffTooltip(player[myPlayer], num46);
					if (num46 == 147)
					{
						bannerMouseOver = true;
					}
					int rare = 0;
					if (meleeBuff[num46])
					{
						rare = -10;
					}
					BuffLoader.ModifyBuffText(num46, ref buffName, ref buffTooltip, ref rare);
					MouseTextHackZoom(buffName, rare, 0, buffTooltip);
				}
			}
		}
		else if (EquipPage == 1)
		{
			DrawNPCHousesInUI();
		}
		else if (EquipPage == 0)
		{
			int num47 = 4;
			if (mouseX > screenWidth - 64 - 28 && mouseX < (int)((float)(screenWidth - 64 - 28) + 56f * inventoryScale) && mouseY > num31 && mouseY < (int)((float)num31 + 448f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
			}
			float num48 = inventoryScale;
			bool flag7 = false;
			int num49 = num29 - 1;
			bool flag8 = LocalPlayer.CanDemonHeartAccessoryBeShown();
			bool flag9 = LocalPlayer.CanMasterModeAccessoryBeShown();
			if (_settingsButtonIsPushedToSide)
			{
				num49--;
			}
			Color color = inventoryBack;
			Color color2 = default(Color);
			((Color)(ref color2))._002Ector(80, 80, 80, 80);
			DrawLoadoutButtons(num31, flag8, flag9);
			int num50 = -1;
			Rectangle rectangle = default(Rectangle);
			for (int num52 = 0; num52 < 3; num52++)
			{
				if ((num52 == 8 && !flag8) || (num52 == 9 && !flag9))
				{
					continue;
				}
				num50++;
				bool flag10 = LocalPlayer.IsItemSlotUnlockedAndUsable(num52);
				if (!flag10)
				{
					flag7 = true;
				}
				int num53 = screenWidth - 64 - 28;
				int num54 = (int)((float)num31 + (float)(num50 * 56) * inventoryScale);
				new Color(100, 100, 100, 100);
				int num55 = screenWidth - 58;
				int num56 = (int)((float)(num31 - 2) + (float)(num50 * 56) * inventoryScale);
				int context2 = 8;
				if (num52 > 2)
				{
					num54 += num47;
					num56 += num47;
					context2 = 10;
				}
				Texture2D value3 = TextureAssets.InventoryTickOn.Value;
				if (player[myPlayer].hideVisibleAccessory[num52])
				{
					value3 = TextureAssets.InventoryTickOff.Value;
				}
				((Rectangle)(ref rectangle))._002Ector(num55, num56, value3.Width, value3.Height);
				int num57 = 0;
				if (num52 > 2 && ((Rectangle)(ref rectangle)).Contains(new Point(mouseX, mouseY)) && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeft && mouseLeftRelease)
					{
						player[myPlayer].hideVisibleAccessory[num52] = !player[myPlayer].hideVisibleAccessory[num52];
						SoundEngine.PlaySound(12);
						if (netMode == 1)
						{
							NetMessage.SendData(4, -1, -1, null, myPlayer);
						}
					}
					num57 = ((!player[myPlayer].hideVisibleAccessory[num52]) ? 1 : 2);
				}
				else if (mouseX >= num53 && (float)mouseX <= (float)num53 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num54 && (float)mouseY <= (float)num54 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					armorHide = true;
					player[myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(player[myPlayer].armor, context2, num52);
					if (flag10 || mouseItem.IsAir)
					{
						ItemSlot.LeftClick(player[myPlayer].armor, context2, num52);
					}
					ItemSlot.MouseHover(player[myPlayer].armor, context2, num52);
				}
				if (flag7)
				{
					inventoryBack = color2;
				}
				ItemSlot.Draw(spriteBatch, player[myPlayer].armor, context2, num52, new Vector2((float)num53, (float)num54));
				if (num52 > 2)
				{
					spriteBatch.Draw(value3, new Vector2((float)num55, (float)num56), Color.White * 0.7f);
					if (num57 > 0)
					{
						HoverItem = new Item();
						hoverItemName = Lang.inter[58 + num57].Value;
					}
				}
			}
			inventoryBack = color;
			if (mouseX > screenWidth - 64 - 28 - 47 && mouseX < (int)((float)(screenWidth - 64 - 20 - 47) + 56f * inventoryScale) && mouseY > num31 && mouseY < (int)((float)num31 + 168f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
			}
			num50 = -1;
			for (int num58 = 10; num58 < 13; num58++)
			{
				if ((num58 == 18 && !flag8) || (num58 == 19 && !flag9))
				{
					continue;
				}
				num50++;
				bool num114 = LocalPlayer.IsItemSlotUnlockedAndUsable(num58);
				flag7 = !num114;
				bool flag11 = !num114 && !mouseItem.IsAir;
				int num59 = screenWidth - 64 - 28 - 47;
				int num60 = (int)((float)num31 + (float)(num50 * 56) * inventoryScale);
				new Color(100, 100, 100, 100);
				if (num58 > 12)
				{
					num60 += num47;
				}
				int context3 = 9;
				if (num58 > 12)
				{
					context3 = 11;
				}
				if (mouseX >= num59 && (float)mouseX <= (float)num59 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num60 && (float)mouseY <= (float)num60 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					armorHide = true;
					ItemSlot.OverrideHover(player[myPlayer].armor, context3, num58);
					if (!flag11)
					{
						ItemSlot.LeftClick(player[myPlayer].armor, context3, num58);
						ItemSlot.RightClick(player[myPlayer].armor, context3, num58);
					}
					ItemSlot.MouseHover(player[myPlayer].armor, context3, num58);
				}
				if (flag7)
				{
					inventoryBack = color2;
				}
				ItemSlot.Draw(spriteBatch, player[myPlayer].armor, context3, num58, new Vector2((float)num59, (float)num60));
			}
			inventoryBack = color;
			if (mouseX > screenWidth - 64 - 28 - 47 && mouseX < (int)((float)(screenWidth - 64 - 20 - 47) + 56f * inventoryScale) && mouseY > num31 && mouseY < (int)((float)num31 + 168f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
			}
			num50 = -1;
			for (int num62 = 0; num62 < 3; num62++)
			{
				if ((num62 == 8 && !flag8) || (num62 == 9 && !flag9))
				{
					continue;
				}
				num50++;
				bool num115 = LocalPlayer.IsItemSlotUnlockedAndUsable(num62);
				flag7 = !num115;
				bool flag12 = !num115 && !mouseItem.IsAir;
				int num63 = screenWidth - 64 - 28 - 47 - 47;
				int num64 = (int)((float)num31 + (float)(num50 * 56) * inventoryScale);
				new Color(100, 100, 100, 100);
				if (num62 > 2)
				{
					num64 += num47;
				}
				if (mouseX >= num63 && (float)mouseX <= (float)num63 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num64 && (float)mouseY <= (float)num64 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					armorHide = true;
					ItemSlot.OverrideHover(player[myPlayer].dye, 12, num62);
					if (!flag12)
					{
						if (mouseRightRelease && mouseRight)
						{
							ItemSlot.RightClick(player[myPlayer].dye, 12, num62);
						}
						ItemSlot.LeftClick(player[myPlayer].dye, 12, num62);
					}
					ItemSlot.MouseHover(player[myPlayer].dye, 12, num62);
				}
				if (flag7)
				{
					inventoryBack = color2;
				}
				ItemSlot.Draw(spriteBatch, player[myPlayer].dye, 12, num62, new Vector2((float)num63, (float)num64));
			}
			inventoryBack = color;
			Vector2 defPos = AccessorySlotLoader.DefenseIconPosition;
			DrawDefenseCounter((int)defPos.X, (int)defPos.Y);
			if (!_achievementAdvisor.CanDrawAboveCoins)
			{
				Vector2 achievePos = default(Vector2);
				((Vector2)(ref achievePos))._002Ector(defPos.X - 10f - 47f - 47f - 14f - 14f, defPos.Y - 56f * inventoryScale * 0.5f);
				_achievementAdvisor.DrawOneAchievement(spriteBatch, achievePos, large: false);
				UILinkPointNavigator.SetPosition(1570, achievePos + new Vector2(20f) * inventoryScale);
			}
			inventoryBack = color;
			inventoryScale = num48;
		}
		LoaderManager.Get<AccessorySlotLoader>().DrawAccSlots(num31);
		int num65 = (screenHeight - 600) / 2;
		int num66 = (int)((float)screenHeight / 600f * 250f);
		if (screenHeight < 700)
		{
			num65 = (screenHeight - 508) / 2;
			num66 = (int)((float)screenHeight / 600f * 200f);
		}
		else if (screenHeight < 850)
		{
			num66 = (int)((float)screenHeight / 600f * 225f);
		}
		if (craftingHide)
		{
			craftingAlpha -= 0.1f;
			if (craftingAlpha < 0f)
			{
				craftingAlpha = 0f;
			}
		}
		else
		{
			craftingAlpha += 0.025f;
			if (craftingAlpha > 1f)
			{
				craftingAlpha = 1f;
			}
		}
		Color color3 = default(Color);
		((Color)(ref color3))._002Ector((int)(byte)((float)(int)mouseTextColor * craftingAlpha), (int)(byte)((float)(int)mouseTextColor * craftingAlpha), (int)(byte)((float)(int)mouseTextColor * craftingAlpha), (int)(byte)((float)(int)mouseTextColor * craftingAlpha));
		craftingHide = false;
		if (InReforgeMenu)
		{
			if (mouseReforge)
			{
				if (reforgeScale < 1f)
				{
					reforgeScale += 0.02f;
				}
			}
			else if (reforgeScale > 1f)
			{
				reforgeScale -= 0.02f;
			}
			if (player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || InGuideCraftMenu)
			{
				InReforgeMenu = false;
				player[myPlayer].dropItemCheck();
				Recipe.FindRecipes();
			}
			else
			{
				int num67 = 50;
				int num68 = 270;
				string text = Lang.inter[46].Value + ": ";
				if (reforgeItem.type > 0)
				{
					int num69 = reforgeItem.value;
					num69 *= reforgeItem.stack;
					bool canApplyDiscount = true;
					if (ItemLoader.ReforgePrice(reforgeItem, ref num69, ref canApplyDiscount))
					{
						if (canApplyDiscount && LocalPlayer.discountAvailable)
						{
							num69 = (int)((double)num69 * 0.8);
						}
						num69 = (int)((double)num69 * player[myPlayer].currentShoppingSettings.PriceAdjustment);
						num69 /= 3;
					}
					string text2 = "";
					int num70 = 0;
					int num72 = 0;
					int num73 = 0;
					int num74 = 0;
					int num75 = num69;
					if (num75 < 1)
					{
						num75 = 1;
					}
					if (num75 >= 1000000)
					{
						num70 = num75 / 1000000;
						num75 -= num70 * 1000000;
					}
					if (num75 >= 10000)
					{
						num72 = num75 / 10000;
						num75 -= num72 * 10000;
					}
					if (num75 >= 100)
					{
						num73 = num75 / 100;
						num75 -= num73 * 100;
					}
					if (num75 >= 1)
					{
						num74 = num75;
					}
					if (num70 > 0)
					{
						text2 = text2 + "[c/" + Colors.AlphaDarken(Colors.CoinPlatinum).Hex3() + ":" + num70 + " " + Lang.inter[15].Value + "] ";
					}
					if (num72 > 0)
					{
						text2 = text2 + "[c/" + Colors.AlphaDarken(Colors.CoinGold).Hex3() + ":" + num72 + " " + Lang.inter[16].Value + "] ";
					}
					if (num73 > 0)
					{
						text2 = text2 + "[c/" + Colors.AlphaDarken(Colors.CoinSilver).Hex3() + ":" + num73 + " " + Lang.inter[17].Value + "] ";
					}
					if (num74 > 0)
					{
						text2 = text2 + "[c/" + Colors.AlphaDarken(Colors.CoinCopper).Hex3() + ":" + num74 + " " + Lang.inter[18].Value + "] ";
					}
					ItemSlot.DrawSavings(spriteBatch, num67 + 130, invBottom, horizontal: true);
					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text2, new Vector2((float)(num67 + 50) + FontAssets.MouseText.Value.MeasureString(text).X, (float)num68), Color.White, 0f, Vector2.Zero, Vector2.One);
					int num76 = num67 + 70;
					int num77 = num68 + 40;
					bool num116 = mouseX > num76 - 15 && mouseX < num76 + 15 && mouseY > num77 - 15 && mouseY < num77 + 15 && !PlayerInput.IgnoreMouseInterface;
					Texture2D value4 = TextureAssets.Reforge[0].Value;
					if (num116)
					{
						value4 = TextureAssets.Reforge[1].Value;
					}
					spriteBatch.Draw(value4, new Vector2((float)num76, (float)num77), (Rectangle?)null, Color.White, 0f, value4.Size() / 2f, reforgeScale, (SpriteEffects)0, 0f);
					UILinkPointNavigator.SetPosition(304, new Vector2((float)num76, (float)num77) + value4.Size() / 4f);
					if (num116)
					{
						hoverItemName = Lang.inter[19].Value;
						if (!mouseReforge)
						{
							SoundEngine.PlaySound(12);
						}
						mouseReforge = true;
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft && player[myPlayer].CanAfford(num69) && ItemLoader.CanReforge(reforgeItem))
						{
							player[myPlayer].BuyItem(num69);
							ItemLoader.PreReforge(reforgeItem);
							reforgeItem.ResetPrefix();
							reforgeItem.Prefix(-2);
							reforgeItem.position.X = player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(reforgeItem.width / 2);
							reforgeItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(reforgeItem.height / 2);
							ItemLoader.PostReforge(reforgeItem);
							PopupText.NewText(PopupTextContext.ItemReforge, reforgeItem, reforgeItem.stack, noStack: true);
							SoundEngine.PlaySound(in SoundID.Item37);
						}
					}
					else
					{
						mouseReforge = false;
					}
				}
				else
				{
					text = Lang.inter[20].Value;
				}
				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)(num67 + 50), (float)num68), new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, Vector2.Zero, Vector2.One);
				if (mouseX >= num67 && (float)mouseX <= (float)num67 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num68 && (float)mouseY <= (float)num68 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					craftingHide = true;
					ItemSlot.LeftClick(ref reforgeItem, 5);
					if (mouseLeftRelease && mouseLeft)
					{
						Recipe.FindRecipes();
					}
					ItemSlot.RightClick(ref reforgeItem, 5);
					ItemSlot.MouseHover(ref reforgeItem, 5);
				}
				ItemSlot.Draw(spriteBatch, ref reforgeItem, 5, new Vector2((float)num67, (float)num68));
			}
		}
		else if (InGuideCraftMenu)
		{
			if (player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || InReforgeMenu)
			{
				InGuideCraftMenu = false;
				player[myPlayer].dropItemCheck();
				Recipe.FindRecipes();
			}
			else
			{
				DrawGuideCraftText(num65, color3, out var inventoryX, out var inventoryY);
				new Color(100, 100, 100, 100);
				if (mouseX >= inventoryX && (float)mouseX <= (float)inventoryX + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= inventoryY && (float)mouseY <= (float)inventoryY + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					craftingHide = true;
					ItemSlot.OverrideHover(ref guideItem, 7);
					ItemSlot.LeftClick(ref guideItem, 7);
					if (mouseLeftRelease && mouseLeft)
					{
						Recipe.FindRecipes();
					}
					ItemSlot.RightClick(ref guideItem, 7);
					ItemSlot.MouseHover(ref guideItem, 7);
				}
				ItemSlot.Draw(spriteBatch, ref guideItem, 7, new Vector2((float)inventoryX, (float)inventoryY));
			}
		}
		CreativeMenu.Draw(spriteBatch);
		bool flag2 = CreativeMenu.Enabled && !CreativeMenu.Blocked;
		flag2 |= hidePlayerCraftingMenu;
		if (!InReforgeMenu && !LocalPlayer.tileEntityAnchor.InUse && !flag2)
		{
			UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
			UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
			if (numAvailableRecipes > 0)
			{
				spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[25].Value, new Vector2(76f, (float)(414 + num65)), color3, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			Color lightColor = default(Color);
			for (int num78 = 0; num78 < Recipe.maxRecipes; num78++)
			{
				inventoryScale = 100f / (Math.Abs(availableRecipeY[num78]) + 100f);
				if ((double)inventoryScale < 0.75)
				{
					inventoryScale = 0.75f;
				}
				if (recFastScroll)
				{
					inventoryScale = 0.75f;
				}
				if (availableRecipeY[num78] < (float)((num78 - focusRecipe) * 65))
				{
					if (availableRecipeY[num78] == 0f && !recFastScroll)
					{
						SoundEngine.PlaySound(12);
					}
					availableRecipeY[num78] += 6.5f;
					if (recFastScroll)
					{
						availableRecipeY[num78] += 130000f;
					}
					if (availableRecipeY[num78] > (float)((num78 - focusRecipe) * 65))
					{
						availableRecipeY[num78] = (num78 - focusRecipe) * 65;
					}
				}
				else if (availableRecipeY[num78] > (float)((num78 - focusRecipe) * 65))
				{
					if (availableRecipeY[num78] == 0f && !recFastScroll)
					{
						SoundEngine.PlaySound(12);
					}
					availableRecipeY[num78] -= 6.5f;
					if (recFastScroll)
					{
						availableRecipeY[num78] -= 130000f;
					}
					if (availableRecipeY[num78] < (float)((num78 - focusRecipe) * 65))
					{
						availableRecipeY[num78] = (num78 - focusRecipe) * 65;
					}
				}
				else
				{
					recFastScroll = false;
				}
				if (num78 >= numAvailableRecipes || Math.Abs(availableRecipeY[num78]) > (float)num66)
				{
					continue;
				}
				int num79 = (int)(46f - 26f * inventoryScale);
				int num80 = (int)(410f + availableRecipeY[num78] * inventoryScale - 30f * inventoryScale + (float)num65);
				double num82 = ((Color)(ref inventoryBack)).A + 50;
				double num83 = 255.0;
				if (Math.Abs(availableRecipeY[num78]) > (float)num66 - 100f)
				{
					num82 = (double)(150f * (100f - (Math.Abs(availableRecipeY[num78]) - ((float)num66 - 100f)))) * 0.01;
					num83 = (double)(255f * (100f - (Math.Abs(availableRecipeY[num78]) - ((float)num66 - 100f)))) * 0.01;
				}
				new Color((int)(byte)num82, (int)(byte)num82, (int)(byte)num82, (int)(byte)num82);
				((Color)(ref lightColor))._002Ector((int)(byte)num83, (int)(byte)num83, (int)(byte)num83, (int)(byte)num83);
				if (!LocalPlayer.creativeInterface && mouseX >= num79 && (float)mouseX <= (float)num79 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num80 && (float)mouseY <= (float)num80 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					HoverOverCraftingItemButton(num78);
				}
				if (numAvailableRecipes <= 0)
				{
					continue;
				}
				num82 -= 50.0;
				if (num82 < 0.0)
				{
					num82 = 0.0;
				}
				if (num78 == focusRecipe)
				{
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 0;
					if (PlayerInput.SettingsForUI.HighlightThingsForMouse)
					{
						ItemSlot.DrawGoldBGForCraftingMaterial = true;
					}
				}
				else
				{
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
				}
				Color val = inventoryBack;
				inventoryBack = new Color((int)(byte)num82, (int)(byte)num82, (int)(byte)num82, (int)(byte)num82);
				ItemSlot.Draw(spriteBatch, ref recipe[availableRecipe[num78]].createItem, 22, new Vector2((float)num79, (float)num80), lightColor);
				inventoryBack = val;
			}
			if (numAvailableRecipes > 0)
			{
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
				for (int num84 = 0; num84 < recipe[availableRecipe[focusRecipe]].requiredItem.Count; num84++)
				{
					if (recipe[availableRecipe[focusRecipe]].requiredItem[num84].type == 0)
					{
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentIngredientsCount = num84 + 1;
						break;
					}
					int num85 = 80 + num84 * 40;
					int num86 = 380 + num65;
					double num87 = ((Color)(ref inventoryBack)).A + 50;
					double num88 = 255.0;
					Color white = Color.White;
					Color white2 = Color.White;
					num87 = (float)(((Color)(ref inventoryBack)).A + 50) - Math.Abs(availableRecipeY[focusRecipe]) * 2f;
					num88 = 255f - Math.Abs(availableRecipeY[focusRecipe]) * 2f;
					if (num87 < 0.0)
					{
						num87 = 0.0;
					}
					if (num88 < 0.0)
					{
						num88 = 0.0;
					}
					((Color)(ref white)).R = (byte)num87;
					((Color)(ref white)).G = (byte)num87;
					((Color)(ref white)).B = (byte)num87;
					((Color)(ref white)).A = (byte)num87;
					((Color)(ref white2)).R = (byte)num88;
					((Color)(ref white2)).G = (byte)num88;
					((Color)(ref white2)).B = (byte)num88;
					((Color)(ref white2)).A = (byte)num88;
					inventoryScale = 0.6f;
					if (num87 == 0.0)
					{
						break;
					}
					if (mouseX >= num85 && (float)mouseX <= (float)num85 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num86 && (float)mouseY <= (float)num86 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						craftingHide = true;
						player[myPlayer].mouseInterface = true;
						SetRecipeMaterialDisplayName(num84);
					}
					num87 -= 50.0;
					if (num87 < 0.0)
					{
						num87 = 0.0;
					}
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 1 + num84;
					Color val2 = inventoryBack;
					inventoryBack = new Color((int)(byte)num87, (int)(byte)num87, (int)(byte)num87, (int)(byte)num87);
					Item tempItem = recipe[availableRecipe[focusRecipe]].requiredItem[num84];
					ItemSlot.Draw(spriteBatch, ref tempItem, 22, new Vector2((float)num85, (float)num86));
					inventoryBack = val2;
				}
			}
			if (numAvailableRecipes == 0)
			{
				recBigList = false;
			}
			else
			{
				int num89 = 94;
				int num90 = 450 + num65;
				if (InGuideCraftMenu)
				{
					num90 -= 150;
				}
				bool flag3 = mouseX > num89 - 15 && mouseX < num89 + 15 && mouseY > num90 - 15 && mouseY < num90 + 15 && !PlayerInput.IgnoreMouseInterface;
				int num91 = recBigList.ToInt() * 2 + flag3.ToInt();
				spriteBatch.Draw(TextureAssets.CraftToggle[num91].Value, new Vector2((float)num89, (float)num90), (Rectangle?)null, Color.White, 0f, TextureAssets.CraftToggle[num91].Value.Size() / 2f, 1f, (SpriteEffects)0, 0f);
				if (flag3)
				{
					MouseText(Language.GetTextValue("GameUI.CraftingWindow"), 0, 0);
					player[myPlayer].mouseInterface = true;
					if (mouseLeft && mouseLeftRelease)
					{
						if (!recBigList)
						{
							recBigList = true;
							SoundEngine.PlaySound(12);
						}
						else
						{
							recBigList = false;
							SoundEngine.PlaySound(12);
						}
					}
				}
			}
		}
		hidePlayerCraftingMenu = false;
		if (recBigList && !flag2)
		{
			UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
			UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
			int num93 = 42;
			if ((double)inventoryScale < 0.75)
			{
				inventoryScale = 0.75f;
			}
			int num94 = 340;
			int num95 = 310;
			int num96 = (screenWidth - num95 - 280) / num93;
			int num97 = (screenHeight - num94 - 20) / num93;
			UILinkPointNavigator.Shortcuts.CRAFT_IconsPerRow = num96;
			UILinkPointNavigator.Shortcuts.CRAFT_IconsPerColumn = num97;
			int num98 = 0;
			int num99 = 0;
			int num100 = num95;
			int num101 = num94;
			int num102 = num95 - 20;
			int num104 = num94 + 2;
			if (recStart > numAvailableRecipes - num96 * num97)
			{
				recStart = numAvailableRecipes - num96 * num97;
				if (recStart < 0)
				{
					recStart = 0;
				}
			}
			if (recStart > 0)
			{
				if (mouseX >= num102 && mouseX <= num102 + TextureAssets.CraftUpButton.Width() && mouseY >= num104 && mouseY <= num104 + TextureAssets.CraftUpButton.Height() && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						recStart -= num96;
						if (recStart < 0)
						{
							recStart = 0;
						}
						SoundEngine.PlaySound(12);
						mouseLeftRelease = false;
					}
				}
				spriteBatch.Draw(TextureAssets.CraftUpButton.Value, new Vector2((float)num102, (float)num104), (Rectangle?)new Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (recStart < numAvailableRecipes - num96 * num97)
			{
				num104 += 20;
				if (mouseX >= num102 && mouseX <= num102 + TextureAssets.CraftUpButton.Width() && mouseY >= num104 && mouseY <= num104 + TextureAssets.CraftUpButton.Height() && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						recStart += num96;
						SoundEngine.PlaySound(12);
						if (recStart > numAvailableRecipes - num96)
						{
							recStart = numAvailableRecipes - num96;
						}
						mouseLeftRelease = false;
					}
				}
				spriteBatch.Draw(TextureAssets.CraftDownButton.Value, new Vector2((float)num102, (float)num104), (Rectangle?)new Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			for (int num105 = recStart; num105 < Recipe.maxRecipes && num105 < numAvailableRecipes; num105++)
			{
				int num106 = num100;
				int num107 = num101;
				double num108 = ((Color)(ref inventoryBack)).A + 50;
				double num109 = 255.0;
				new Color((int)(byte)num108, (int)(byte)num108, (int)(byte)num108, (int)(byte)num108);
				new Color((int)(byte)num109, (int)(byte)num109, (int)(byte)num109, (int)(byte)num109);
				if (mouseX >= num106 && (float)mouseX <= (float)num106 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num107 && (float)mouseY <= (float)num107 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						focusRecipe = num105;
						recFastScroll = true;
						recBigList = false;
						SoundEngine.PlaySound(12);
						mouseLeftRelease = false;
						if (PlayerInput.UsingGamepadUI)
						{
							UILinkPointNavigator.ChangePage(9);
							LockCraftingForThisCraftClickDuration();
						}
					}
					craftingHide = true;
					HoverItem = recipe[availableRecipe[num105]].createItem.Clone();
					ItemSlot.MouseHover(22);
					hoverItemName = recipe[availableRecipe[num105]].createItem.Name;
					if (recipe[availableRecipe[num105]].createItem.stack > 1)
					{
						hoverItemName = hoverItemName + " (" + recipe[availableRecipe[num105]].createItem.stack + ")";
					}
				}
				if (numAvailableRecipes > 0)
				{
					num108 -= 50.0;
					if (num108 < 0.0)
					{
						num108 = 0.0;
					}
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = num105 - recStart;
					Color val3 = inventoryBack;
					inventoryBack = new Color((int)(byte)num108, (int)(byte)num108, (int)(byte)num108, (int)(byte)num108);
					ItemSlot.Draw(spriteBatch, ref recipe[availableRecipe[num105]].createItem, 22, new Vector2((float)num106, (float)num107));
					inventoryBack = val3;
				}
				num100 += num93;
				num98++;
				if (num98 >= num96)
				{
					num100 = num95;
					num101 += num93;
					num98 = 0;
					num99++;
					if (num99 >= num97)
					{
						break;
					}
				}
			}
		}
		Vector2 vector2 = FontAssets.MouseText.Value.MeasureString("Coins");
		Vector2 vector3 = FontAssets.MouseText.Value.MeasureString(Lang.inter[26].Value);
		float num110 = vector2.X / vector3.X;
		spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[26].Value, new Vector2(496f, 84f + (vector2.Y - vector2.Y * num110) / 2f), new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, default(Vector2), 0.75f * num110, (SpriteEffects)0, 0f);
		inventoryScale = 0.6f;
		for (int num111 = 0; num111 < 4; num111++)
		{
			int num112 = 497;
			int num113 = (int)(85f + (float)(num111 * 56) * inventoryScale + 20f);
			int slot = num111 + 50;
			new Color(100, 100, 100, 100);
			if (mouseX >= num112 && (float)mouseX <= (float)num112 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num113 && (float)mouseY <= (float)num113 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
				ItemSlot.OverrideHover(player[myPlayer].inventory, 1, slot);
				ItemSlot.LeftClick(player[myPlayer].inventory, 1, slot);
				ItemSlot.RightClick(player[myPlayer].inventory, 1, slot);
				if (mouseLeftRelease && mouseLeft)
				{
					Recipe.FindRecipes();
				}
				ItemSlot.MouseHover(player[myPlayer].inventory, 1, slot);
			}
			ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 1, slot, new Vector2((float)num112, (float)num113));
		}
		Vector2 vector4 = FontAssets.MouseText.Value.MeasureString("Ammo");
		Vector2 vector5 = FontAssets.MouseText.Value.MeasureString(Lang.inter[27].Value);
		float num3 = vector4.X / vector5.X;
		spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[27].Value, new Vector2(532f, 84f + (vector4.Y - vector4.Y * num3) / 2f), new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, default(Vector2), 0.75f * num3, (SpriteEffects)0, 0f);
		inventoryScale = 0.6f;
		for (int num4 = 0; num4 < 4; num4++)
		{
			int num5 = 534;
			int num6 = (int)(85f + (float)(num4 * 56) * inventoryScale + 20f);
			int slot2 = 54 + num4;
			new Color(100, 100, 100, 100);
			if (mouseX >= num5 && (float)mouseX <= (float)num5 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num6 && (float)mouseY <= (float)num6 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
				ItemSlot.OverrideHover(player[myPlayer].inventory, 2, slot2);
				ItemSlot.LeftClick(player[myPlayer].inventory, 2, slot2);
				ItemSlot.RightClick(player[myPlayer].inventory, 2, slot2);
				if (mouseLeftRelease && mouseLeft)
				{
					Recipe.FindRecipes();
				}
				ItemSlot.MouseHover(player[myPlayer].inventory, 2, slot2);
			}
			ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 2, slot2, new Vector2((float)num5, (float)num6));
		}
		if (npcShop > 0 && (!playerInventory || player[myPlayer].talkNPC == -1))
		{
			SetNPCShopIndex(0);
		}
		if (npcShop > 0 && !recBigList)
		{
			Utils.DrawBorderStringFourWay(spriteBatch, FontAssets.MouseText.Value, Lang.inter[28].Value, 504f, invBottom, Color.White * ((float)(int)mouseTextColor / 255f), Color.Black, Vector2.Zero);
			ItemSlot.DrawSavings(spriteBatch, 504f, invBottom);
			inventoryScale = 0.755f;
			if (mouseX > 73 && mouseX < (int)(73f + 560f * inventoryScale) && mouseY > invBottom && mouseY < (int)((float)invBottom + 224f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
			}
			for (int num7 = 0; num7 < 10; num7++)
			{
				for (int num8 = 0; num8 < 4; num8++)
				{
					int num9 = (int)(73f + (float)(num7 * 56) * inventoryScale);
					int num10 = (int)((float)invBottom + (float)(num8 * 56) * inventoryScale);
					int slot3 = num7 + num8 * 10;
					new Color(100, 100, 100, 100);
					if (mouseX >= num9 && (float)mouseX <= (float)num9 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num10 && (float)mouseY <= (float)num10 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						ItemSlot.OverrideHover(shop[npcShop].item, 15, slot3);
						player[myPlayer].mouseInterface = true;
						ItemSlot.LeftClick(shop[npcShop].item, 15, slot3);
						ItemSlot.RightClick(shop[npcShop].item, 15, slot3);
						ItemSlot.MouseHover(shop[npcShop].item, 15, slot3);
					}
					ItemSlot.Draw(spriteBatch, shop[npcShop].item, 15, slot3, new Vector2((float)num9, (float)num10));
				}
			}
		}
		if (player[myPlayer].chest > -1 && !tileContainer[tile[player[myPlayer].chestX, player[myPlayer].chestY].type])
		{
			player[myPlayer].chest = -1;
			Recipe.FindRecipes();
		}
		int offsetDown = 0;
		UIVirtualKeyboard.ShouldHideText = !PlayerInput.SettingsForUI.ShowGamepadHints;
		if (!PlayerInput.UsingGamepad)
		{
			offsetDown = 9999;
		}
		UIVirtualKeyboard.OffsetDown = offsetDown;
		ChestUI.Draw(spriteBatch);
		LocalPlayer.tileEntityAnchor.GetTileEntity()?.OnInventoryDraw(LocalPlayer, spriteBatch);
		if (player[myPlayer].chest == -1 && npcShop == 0)
		{
			int num11 = 0;
			int num12 = 498;
			int num14 = 244;
			int num15 = TextureAssets.ChestStack[num11].Width();
			int num16 = TextureAssets.ChestStack[num11].Height();
			UILinkPointNavigator.SetPosition(301, new Vector2((float)num12 + (float)num15 * 0.75f, (float)num14 + (float)num16 * 0.75f));
			if (mouseX >= num12 && mouseX <= num12 + num15 && mouseY >= num14 && mouseY <= num14 + num16 && !PlayerInput.IgnoreMouseInterface)
			{
				num11 = 1;
				if (!allChestStackHover)
				{
					SoundEngine.PlaySound(12);
					allChestStackHover = true;
				}
				if (mouseLeft && mouseLeftRelease)
				{
					mouseLeftRelease = false;
					player[myPlayer].QuickStackAllChests();
					Recipe.FindRecipes();
				}
				player[myPlayer].mouseInterface = true;
			}
			else if (allChestStackHover)
			{
				SoundEngine.PlaySound(12);
				allChestStackHover = false;
			}
			spriteBatch.Draw(TextureAssets.ChestStack[num11].Value, new Vector2((float)num12, (float)num14), (Rectangle?)new Rectangle(0, 0, TextureAssets.ChestStack[num11].Width(), TextureAssets.ChestStack[num11].Height()), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			if (!mouseText && num11 == 1)
			{
				MouseText(Language.GetTextValue("GameUI.QuickStackToNearby"), 0, 0);
			}
		}
		if (player[myPlayer].chest != -1 || npcShop != 0)
		{
			return;
		}
		int num17 = 0;
		int num18 = 534;
		int num19 = 244;
		int num20 = 30;
		int num21 = 30;
		UILinkPointNavigator.SetPosition(302, new Vector2((float)num18 + (float)num20 * 0.75f, (float)num19 + (float)num21 * 0.75f));
		bool flag4 = false;
		if (mouseX >= num18 && mouseX <= num18 + num20 && mouseY >= num19 && mouseY <= num19 + num21 && !PlayerInput.IgnoreMouseInterface)
		{
			num17 = 1;
			flag4 = true;
			player[myPlayer].mouseInterface = true;
			if (mouseLeft && mouseLeftRelease)
			{
				mouseLeftRelease = false;
				ItemSorting.SortInventory();
				Recipe.FindRecipes();
			}
		}
		if (flag4 != inventorySortMouseOver)
		{
			SoundEngine.PlaySound(12);
			inventorySortMouseOver = flag4;
		}
		Texture2D value5 = TextureAssets.InventorySort[inventorySortMouseOver ? 1 : 0].Value;
		spriteBatch.Draw(value5, new Vector2((float)num18, (float)num19), (Rectangle?)null, Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		if (!mouseText && num17 == 1)
		{
			MouseText(Language.GetTextValue("GameUI.SortInventory"), 0, 0);
		}
	}

	private static void DrawLoadoutButtons(int inventoryTop, bool demonHeartSlotAvailable, bool masterModeSlotAvailable)
	{
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		int num = 10;
		Player player = Main.player[myPlayer];
		if (!demonHeartSlotAvailable)
		{
			num--;
		}
		if (!masterModeSlotAvailable)
		{
			num--;
		}
		int x = screenWidth - 58 + 14;
		int num2 = (int)((float)(inventoryTop - 2) + 0f * inventoryScale);
		int num3 = (int)((float)(inventoryTop - 2) + (float)(num * 56) * inventoryScale);
		Texture2D value = TextureAssets.Extra[259].Value;
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector(x, num2 + 2, 4, num3 - num2);
		ItemSlot.GetLoadoutColor(player.CurrentLoadoutIndex);
		int num4 = player.Loadouts.Length;
		int num5 = 32;
		int num6 = 4;
		int num7 = -1;
		_ = FontAssets.ItemStack.Value;
		Rectangle rectangle2 = default(Rectangle);
		for (int i = 0; i < num4; i++)
		{
			((Rectangle)(ref rectangle2))._002Ector(rectangle.X + rectangle.Width, rectangle.Y + (num5 + num6) * i, 32, num5);
			Color loadoutColor = ItemSlot.GetLoadoutColor(i);
			_ = player.Loadouts[i];
			int frameX = ((i == player.CurrentLoadoutIndex) ? 1 : 0);
			bool flag = false;
			if (((Rectangle)(ref rectangle2)).Contains(MouseScreen.ToPoint()))
			{
				flag = true;
				loadoutColor = Color.Lerp(loadoutColor, Color.White, 0.8f);
				player.mouseInterface = true;
				if (!mouseText)
				{
					instance.MouseText(Language.GetTextValue("UI.Loadout" + (i + 1)), 0, 0);
					mouseText = true;
				}
				if (mouseLeft && mouseLeftRelease)
				{
					player.TrySwitchingLoadout(i);
				}
			}
			Rectangle rectangle3 = value.Frame(3, 3, frameX, i);
			spriteBatch.Draw(value, ((Rectangle)(ref rectangle2)).Center.ToVector2(), (Rectangle?)rectangle3, Color.White, 0f, rectangle3.Size() / 2f, 1f, (SpriteEffects)0, 0f);
			if (flag)
			{
				rectangle3 = value.Frame(3, 3, 2, i);
				spriteBatch.Draw(value, ((Rectangle)(ref rectangle2)).Center.ToVector2(), (Rectangle?)rectangle3, OurFavoriteColor, 0f, rectangle3.Size() / 2f, 1f, (SpriteEffects)0, 0f);
			}
			UILinkPointNavigator.SetPosition(312 + i, ((Rectangle)(ref rectangle2)).Center.ToVector2());
		}
		if (_lastHoveredLoadoutIndex != num7)
		{
			_lastHoveredLoadoutIndex = num7;
			SoundEngine.PlaySound(12);
		}
	}

	private void DrawNPCHousesInUI()
	{
		//IL_036c: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0405: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_049d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		UILinkPointNavigator.Shortcuts.NPCS_LastHovered = -2;
		if (mouseX > screenWidth - 64 - 28 && mouseX < (int)((float)(screenWidth - 64 - 28) + 56f * inventoryScale) && mouseY > 174 + mH && mouseY < (int)((float)(174 + mH) + 448f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
		{
			player[myPlayer].mouseInterface = true;
		}
		int num = 0;
		string text = "";
		int num3 = 0;
		int num4 = 0;
		_npcTypesThatAlreadyDrewAHead.Clear();
		for (int i = 0; i < _npcIndexWhoHoldsHeadIndex.Length; i++)
		{
			_npcIndexWhoHoldsHeadIndex[i] = -1;
		}
		for (int j = 0; j < 200; j++)
		{
			if (npc[j].active && !_npcTypesThatAlreadyDrewAHead.Contains(npc[j].type) && ((!(npc[j].ModNPC?.TownNPCStayingHomeless)) ?? true))
			{
				int headIndexSafe = TownNPCProfiles.GetHeadIndexSafe(npc[j]);
				if (headIndexSafe > 0 && !NPCHeadID.Sets.CannotBeDrawnInHousingUI[headIndexSafe] && _npcIndexWhoHoldsHeadIndex[headIndexSafe] == -1)
				{
					_npcIndexWhoHoldsHeadIndex[headIndexSafe] = j;
					_npcTypesThatAlreadyDrewAHead.Add(npc[j].type);
				}
			}
		}
		hidePVPIcons = false;
		int num5 = 0;
		int num6 = 0;
		UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn = 1;
		Color color = default(Color);
		for (int k = 0; k < TextureAssets.NpcHead.Length; k++)
		{
			if (k != 0 && _npcIndexWhoHoldsHeadIndex[k] == -1)
			{
				continue;
			}
			int num7 = _npcIndexWhoHoldsHeadIndex[k];
			int num8 = screenWidth - 64 - 28 + num4;
			int num9 = (int)((float)(174 + mH) + (float)(num * 56) * inventoryScale) + num3;
			((Color)(ref color))._002Ector(100, 100, 100, 100);
			if (num9 > screenHeight - 80)
			{
				num4 -= 48;
				num3 -= num9 - (174 + mH);
				num8 = screenWidth - 64 - 28 + num4;
				num9 = (int)((float)(174 + mH) + (float)(num * 56) * inventoryScale) + num3;
				UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn = num6;
				if (num4 <= -144)
				{
					hidePVPIcons = true;
				}
				num6 = 0;
			}
			if (mouseX >= num8 && (float)mouseX <= (float)num8 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num9 && (float)mouseY <= (float)num9 + (float)TextureAssets.InventoryBack.Height() * inventoryScale)
			{
				UILinkPointNavigator.Shortcuts.NPCS_LastHovered = num7;
				mouseText = true;
				text = ((k != 0) ? npc[num7].FullName : Lang.inter[8].Value);
				if (!PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft && !PlayerInput.UsingGamepadUI && mouseItem.type == 0)
					{
						SoundEngine.PlaySound(12);
						if (k == 0)
						{
							SetMouseNPC_ToHousingQuery();
						}
						else
						{
							SetMouseNPC(num7, npc[num7].type);
						}
						mouseLeftRelease = false;
					}
				}
			}
			UILinkPointNavigator.SetPosition(600 + num, new Vector2((float)num8, (float)num9) + TextureAssets.InventoryBack.Value.Size() * 0.75f);
			Texture2D value = TextureAssets.InventoryBack11.Value;
			Color white = inventoryBack;
			if (UILinkPointNavigator.CurrentPoint - 600 == num)
			{
				value = TextureAssets.InventoryBack14.Value;
				white = Color.White;
			}
			spriteBatch.Draw(value, new Vector2((float)num8, (float)num9), (Rectangle?)null, white, 0f, default(Vector2), inventoryScale, (SpriteEffects)0, 0f);
			color = Color.White;
			int num10 = k;
			float scale = 1f;
			float num2 = 0f;
			num2 = ((TextureAssets.NpcHead[num10].Width() <= TextureAssets.NpcHead[num10].Height()) ? ((float)TextureAssets.NpcHead[num10].Height()) : ((float)TextureAssets.NpcHead[num10].Width()));
			if (num2 > 36f)
			{
				scale = 36f / num2;
			}
			spriteBatch.Draw(TextureAssets.NpcHead[num10].Value, new Vector2((float)num8 + 26f * inventoryScale, (float)num9 + 26f * inventoryScale), (Rectangle?)null, color, 0f, new Vector2((float)(TextureAssets.NpcHead[num10].Width() / 2), (float)(TextureAssets.NpcHead[num10].Height() / 2)), scale, (SpriteEffects)0, 0f);
			num++;
			num5++;
			num6++;
		}
		UILinkPointNavigator.Shortcuts.NPCS_IconsTotal = num5;
		if (text != "" && mouseItem.type == 0)
		{
			MouseText(text, 0, 0);
		}
	}

	private static void DrawDefenseCounter(int inventoryX, int inventoryY)
	{
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)(inventoryX - 10 - 47 - 47 - 14), (float)inventoryY + (float)TextureAssets.InventoryBack.Height() * 0.5f);
		spriteBatch.Draw(TextureAssets.Extra[58].Value, vector, (Rectangle?)null, Color.White, 0f, TextureAssets.Extra[58].Value.Size() / 2f, inventoryScale, (SpriteEffects)0, 0f);
		Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(player[myPlayer].statDefense.ToString());
		ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, player[myPlayer].statDefense.ToString(), vector - vector2 * 0.5f * inventoryScale, Color.White, 0f, Vector2.Zero, new Vector2(inventoryScale));
		Rectangle val = Utils.CenteredRectangle(vector, TextureAssets.Extra[58].Value.Size());
		if (((Rectangle)(ref val)).Contains(new Point(mouseX, mouseY)) && !PlayerInput.IgnoreMouseInterface)
		{
			player[myPlayer].mouseInterface = true;
			Player.DefenseStat statDefense = player[myPlayer].statDefense;
			string value = statDefense.ToString() + " " + Lang.inter[10].Value;
			if (!string.IsNullOrEmpty(value))
			{
				hoverItemName = value;
			}
		}
		UILinkPointNavigator.SetPosition(1557, vector + TextureAssets.Extra[58].Value.Size() * inventoryScale / 4f);
	}

	private static void DrawGuideCraftText(int adjY, Color craftingTipColor, out int inventoryX, out int inventoryY)
	{
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0292: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0266: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		inventoryX = 73;
		inventoryY = 331;
		inventoryY += adjY;
		string text = null;
		_requiredObjecsForCraftingText.Clear();
		if (guideItem.IsAir)
		{
			text = Lang.inter[24].Value;
		}
		else
		{
			text = Lang.inter[21].Value + " " + guideItem.Name;
			Recipe recipe = Main.recipe[availableRecipe[focusRecipe]];
			for (int i = 0; i < recipe.requiredTile.Count; i++)
			{
				int num = recipe.requiredTile[i];
				if (num == -1)
				{
					break;
				}
				int requiredTileStyle = Recipe.GetRequiredTileStyle(num);
				string mapObjectName = Lang.GetMapObjectName(MapHelper.TileToLookup(num, requiredTileStyle));
				_requiredObjecsForCraftingText.Add(mapObjectName);
			}
			if (recipe.needWater)
			{
				_requiredObjecsForCraftingText.Add(Lang.inter[53].Value);
			}
			if (recipe.needHoney)
			{
				_requiredObjecsForCraftingText.Add(Lang.inter[58].Value);
			}
			if (recipe.needLava)
			{
				_requiredObjecsForCraftingText.Add(Lang.inter[56].Value);
			}
			if (recipe.needSnowBiome)
			{
				_requiredObjecsForCraftingText.Add(Lang.inter[123].Value);
			}
			if (recipe.needGraveyardBiome)
			{
				_requiredObjecsForCraftingText.Add(Lang.inter[124].Value);
			}
			_requiredObjecsForCraftingText.AddRange(recipe.Conditions.Select((Condition x) => x.Description.Value));
			if (_requiredObjecsForCraftingText.Count == 0)
			{
				string value = Lang.inter[23].Value;
				_requiredObjecsForCraftingText.Add(value);
			}
		}
		Color color = default(Color);
		((Color)(ref color))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor);
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)(inventoryX + 50), (float)(inventoryY + 12));
		DynamicSpriteFont value2 = FontAssets.MouseText.Value;
		if (_requiredObjecsForCraftingText.Count > 0)
		{
			vector.Y -= 14f;
			Vector2 position = vector + new Vector2(0f, 26f);
			Color color2 = color;
			string value3 = Lang.inter[22].Value;
			string text2 = string.Join(", ", _requiredObjecsForCraftingText);
			string text3 = value3 + " " + text2;
			spriteBatch.DrawString(value2, text3, position, color2, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
		}
		spriteBatch.DrawString(value2, text, vector, color, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
	}

	private static void DrawGuideCraftText_Old(int adjY, Color craftingTipColor, out int inventoryX, out int inventoryY)
	{
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0484: Unknown result type (might be due to invalid IL or missing references)
		//IL_049d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_027f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0292: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_042c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_043a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		inventoryX = 73;
		inventoryY = 331;
		inventoryY += adjY;
		int num = 0;
		int num4 = 0;
		inventoryX += num;
		inventoryY += num4;
		string text;
		if (guideItem.type > 0)
		{
			text = Lang.inter[21].Value + " " + guideItem.Name;
			spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[22].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118)), craftingTipColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			int num5 = focusRecipe;
			int num6 = 0;
			for (int i = 0; i < recipe[availableRecipe[num5]].requiredTile.Count; i++)
			{
				int num7 = (i + 1) * 26;
				if (recipe[availableRecipe[num5]].requiredTile[i] == -1)
				{
					if (i == 0 && !recipe[availableRecipe[num5]].needWater && !recipe[availableRecipe[num5]].needHoney && !recipe[availableRecipe[num5]].needLava && !recipe[availableRecipe[num5]].needSnowBiome && !recipe[availableRecipe[num5]].needGraveyardBiome)
					{
						spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[23].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num7)), craftingTipColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
					}
					break;
				}
				num6++;
				int num8 = recipe[availableRecipe[num5]].requiredTile[i];
				spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.GetMapObjectName(MapHelper.TileToLookup(num8, Recipe.GetRequiredTileStyle(num8))), new Vector2((float)inventoryX, (float)(inventoryY + 118 + num7)), craftingTipColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (recipe[availableRecipe[num5]].needWater)
			{
				int num9 = (num6 + 1) * 26;
				spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[53].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num9)), craftingTipColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (recipe[availableRecipe[num5]].needHoney)
			{
				int num10 = (num6 + 1) * 26;
				spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[58].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num10)), craftingTipColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (recipe[availableRecipe[num5]].needLava)
			{
				int num11 = (num6 + 1) * 26;
				spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[56].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num11)), craftingTipColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (recipe[availableRecipe[num5]].needSnowBiome)
			{
				int num2 = (num6 + 1) * 26;
				spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[123].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num2)), craftingTipColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (recipe[availableRecipe[num5]].needGraveyardBiome)
			{
				int num3 = (num6 + 1) * 26;
				spriteBatch.DrawString(FontAssets.MouseText.Value, Lang.inter[124].Value, new Vector2((float)inventoryX, (float)(inventoryY + 118 + num3)), craftingTipColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
		}
		else
		{
			text = Lang.inter[24].Value;
		}
		inventoryX -= num;
		inventoryY -= num4;
		spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2((float)(inventoryX + 50), (float)(inventoryY + 12)), new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
	}

	public static void LockCraftingForThisCraftClickDuration()
	{
		_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
	}

	private static void HoverOverCraftingItemButton(int recipeIndex)
	{
		Recipe recipe = Main.recipe[availableRecipe[recipeIndex]];
		player[myPlayer].mouseInterface = true;
		bool flag = (mouseLeftRelease && mouseLeft) || (mouseRightRelease && mouseRight);
		bool flag2 = mouseLeft || mouseRight;
		if (focusRecipe == recipeIndex && guideItem.IsAir)
		{
			bool flag3 = LocalPlayer.ItemTimeIsZero && LocalPlayer.itemAnimation == 0 && !player[myPlayer].HasLockedInventory() && !_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe;
			bool num = _currentRecipeBeingCrafted != -1 && _currentRecipeBeingCrafted != availableRecipe[recipeIndex];
			bool flag4 = _currentRecipeBeingCrafted != -1 && Main.recipe[_currentRecipeBeingCrafted].createItem.maxStack == 1;
			bool flag5 = num || flag4;
			if (flag2 && !flag5 && flag3 && stackSplit <= 1)
			{
				bool usingGamepad = PlayerInput.UsingGamepad;
				bool movedAnItemToAllowCrafting;
				bool num2 = TryAllowingToCraftRecipe(recipe, usingGamepad, out movedAnItemToAllowCrafting);
				if (movedAnItemToAllowCrafting)
				{
					_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
				}
				if (num2 && !movedAnItemToAllowCrafting)
				{
					if (_currentRecipeBeingCrafted == -1)
					{
						_currentRecipeBeingCrafted = availableRecipe[recipeIndex];
					}
					ItemSlot.RefreshStackSplitCooldown();
					CraftItem(recipe);
				}
			}
		}
		else if (flag)
		{
			focusRecipe = recipeIndex;
			stackSplit = 15;
			_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
		}
		craftingHide = true;
		HoverItem = recipe.createItem.Clone();
		ItemSlot.MouseHover(22);
		hoverItemName = recipe.createItem.Name;
		if (recipe.createItem.stack > 1)
		{
			hoverItemName = hoverItemName + " (" + recipe.createItem.stack + ")";
		}
		if (!flag2)
		{
			_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = false;
			_currentRecipeBeingCrafted = -1;
		}
	}

	private static bool TryAllowingToCraftRecipe(Recipe currentRecipe, bool tryFittingItemInInventoryToAllowCrafting, out bool movedAnItemToAllowCrafting)
	{
		movedAnItemToAllowCrafting = false;
		if (mouseItem.IsAir)
		{
			return true;
		}
		if (mouseItem.maxStack > 1 && mouseItem.AllowReforgeForStackableItem && mouseItem.prefix > 0)
		{
			return false;
		}
		if (mouseItem.IsTheSameAs(currentRecipe.createItem) && mouseItem.stack + currentRecipe.createItem.stack <= mouseItem.maxStack)
		{
			return true;
		}
		if (tryFittingItemInInventoryToAllowCrafting && LocalPlayer.ItemSpace(mouseItem).CanTakeItemToPersonalInventory)
		{
			mouseItem = LocalPlayer.GetItem(myPlayer, mouseItem, GetItemSettings.InventoryUIToInventorySettingsShowAsNew);
			if (mouseItem.IsAir)
			{
				movedAnItemToAllowCrafting = true;
				return true;
			}
			if (mouseItem.IsTheSameAs(currentRecipe.createItem) && mouseItem.stack + currentRecipe.createItem.stack <= mouseItem.maxStack)
			{
				movedAnItemToAllowCrafting = true;
				return true;
			}
		}
		return false;
	}

	private static void DrawTrashItemSlot(int pivotTopLeftX, int pivotTopLeftY)
	{
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		inventoryScale = 0.85f;
		int num = 448 + pivotTopLeftX;
		int num2 = 258 + pivotTopLeftY;
		if ((player[myPlayer].chest != -1 || npcShop > 0) && !recBigList)
		{
			num2 += 168;
			inventoryScale = 0.755f;
			num += 5;
		}
		else if ((player[myPlayer].chest == -1 || npcShop == -1) && trashSlotOffset != Point16.Zero)
		{
			num += trashSlotOffset.X;
			num2 += trashSlotOffset.Y;
			inventoryScale = 0.755f;
		}
		new Color(150, 150, 150, 150);
		if (mouseX >= num && (float)mouseX <= (float)num + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num2 && (float)mouseY <= (float)num2 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
		{
			player[myPlayer].mouseInterface = true;
			ItemSlot.LeftClick(ref player[myPlayer].trashItem, 6);
			if (mouseLeftRelease && mouseLeft)
			{
				Recipe.FindRecipes();
			}
			ItemSlot.MouseHover(ref player[myPlayer].trashItem, 6);
		}
		ItemSlot.Draw(spriteBatch, ref player[myPlayer].trashItem, 6, new Vector2((float)num, (float)num2));
	}

	private static void DrawEmoteBubblesButton(int pivotTopLeftX, int pivotTopLeftY)
	{
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		inventoryScale = 0.85f;
		int num = (int)((float)(450 + pivotTopLeftX) - 56f * inventoryScale);
		int num2 = 258 + pivotTopLeftY;
		int num3 = 244;
		int width = 30;
		int num4 = 30;
		num = 534;
		num2 = num3 + num4 + 4;
		if ((player[myPlayer].chest != -1 || npcShop > 0) && !recBigList)
		{
			num2 += 168;
			inventoryScale = 0.755f;
			num += 5;
			num3 += 24;
		}
		if (editChest)
		{
			num2 += 24;
		}
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector(num, num2, (int)((float)TextureAssets.InventoryBack.Width() * inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * inventoryScale));
		((Rectangle)(ref rectangle))._002Ector(num, num2, width, num4);
		bool flag = false;
		if (((Rectangle)(ref rectangle)).Contains(new Point(mouseX, mouseY)) && !PlayerInput.IgnoreMouseInterface)
		{
			player[myPlayer].mouseInterface = true;
			flag = true;
			if (mouseLeft && mouseLeftRelease)
			{
				player[myPlayer].SetTalkNPC(-1);
				npcChatCornerItem = 0;
				npcChatText = "";
				mouseLeftRelease = false;
				SoundEngine.PlaySound(12);
				IngameFancyUI.OpenUIState(new UIEmotesMenu());
			}
		}
		Texture2D value = TextureAssets.EmoteMenuButton.Value;
		Vector2 position = ((Rectangle)(ref rectangle)).Center.ToVector2();
		Rectangle rectangle2 = value.Frame(2, 1, flag ? 1 : 0);
		rectangle2.Width -= 2;
		rectangle2.Height -= 2;
		Vector2 origin = rectangle2.Size() / 2f;
		Color white = Color.White;
		spriteBatch.Draw(value, position, (Rectangle?)rectangle2, white, 0f, origin, 1f, (SpriteEffects)0, 0f);
		UILinkPointNavigator.SetPosition(309, position);
		if (!mouseText && flag)
		{
			instance.MouseText(Language.GetTextValue("GameUI.Emote"), 0, 0);
		}
	}

	private static void DrawBestiaryIcon(int pivotTopLeftX, int pivotTopLeftY)
	{
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		inventoryScale = 0.85f;
		int num = (int)((float)(450 + pivotTopLeftX) - 56f * inventoryScale * 2f);
		int num2 = 258 + pivotTopLeftY;
		int num3 = 244;
		int width = 30;
		int num4 = 30;
		num3 = 244;
		num = 498;
		num2 = num3 + num4 + 4;
		if ((player[myPlayer].chest != -1 || npcShop > 0) && !recBigList)
		{
			num2 += 168;
			inventoryScale = 0.755f;
			num += 5;
			num3 += 24;
		}
		if (editChest)
		{
			num2 += 24;
		}
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector(num, num2, (int)((float)TextureAssets.InventoryBack.Width() * inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * inventoryScale));
		((Rectangle)(ref rectangle))._002Ector(num, num2, width, num4);
		bool flag = false;
		if (((Rectangle)(ref rectangle)).Contains(new Point(mouseX, mouseY)) && !PlayerInput.IgnoreMouseInterface)
		{
			player[myPlayer].mouseInterface = true;
			flag = true;
			if (mouseLeft && mouseLeftRelease)
			{
				player[myPlayer].SetTalkNPC(-1);
				npcChatCornerItem = 0;
				npcChatText = "";
				mouseLeftRelease = false;
				SoundEngine.PlaySound(12);
				IngameFancyUI.OpenUIState(BestiaryUI);
				BestiaryUI.OnOpenPage();
			}
		}
		Texture2D value = TextureAssets.BestiaryMenuButton.Value;
		Vector2 position = ((Rectangle)(ref rectangle)).Center.ToVector2();
		Rectangle rectangle2 = value.Frame(2, 1, flag ? 1 : 0);
		rectangle2.Width -= 2;
		rectangle2.Height -= 2;
		Vector2 origin = rectangle2.Size() / 2f;
		Color white = Color.White;
		spriteBatch.Draw(value, position, (Rectangle?)rectangle2, white, 0f, origin, 1f, (SpriteEffects)0, 0f);
		UILinkPointNavigator.SetPosition(310, position);
		if (!mouseText && flag)
		{
			instance.MouseText(Language.GetTextValue("GameUI.Bestiary"), 0, 0);
		}
	}

	private static void SetRecipeMaterialDisplayName(int i)
	{
		HoverItem = recipe[availableRecipe[focusRecipe]].requiredItem[i].Clone();
		ItemSlot.MouseHover(22);
		hoverItemName = recipe[availableRecipe[focusRecipe]].requiredItem[i].Name;
		if (recipe[availableRecipe[focusRecipe]].ProcessGroupsForText(recipe[availableRecipe[focusRecipe]].requiredItem[i].type, out var theText))
		{
			HoverItem.SetNameOverride(theText);
		}
		if (recipe[availableRecipe[focusRecipe]].anyIronBar && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 22)
		{
			HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(22));
		}
		else if (recipe[availableRecipe[focusRecipe]].anyWood && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 9)
		{
			HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(9));
		}
		else if (recipe[availableRecipe[focusRecipe]].anySand && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 169)
		{
			HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(169));
		}
		else if (recipe[availableRecipe[focusRecipe]].anyFragment && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 3458)
		{
			HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.misc[51].Value);
		}
		else if (recipe[availableRecipe[focusRecipe]].anyPressurePlate && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 542)
		{
			HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.misc[38].Value);
		}
		if (recipe[availableRecipe[focusRecipe]].requiredItem[i].stack > 1)
		{
			hoverItemName = hoverItemName + " (" + recipe[availableRecipe[focusRecipe]].requiredItem[i].stack + ")";
		}
	}

	private void DrawHotbarLockIcon(int pivotTopLeftX, int pivotTopLeftY, bool pushSideToolsUp)
	{
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		int num = 21 + pivotTopLeftY;
		_ = player[myPlayer];
		if (pushSideToolsUp)
		{
			num = pivotTopLeftY;
		}
		float num2 = 0.9f;
		Texture2D value = TextureAssets.HbLock[(!player[myPlayer].hbLocked) ? 1u : 0u].Value;
		Rectangle value2 = value.Frame(2);
		bool flag = false;
		if (mouseX > pivotTopLeftX && (float)mouseX < (float)pivotTopLeftX + (float)value2.Width * num2 && mouseY > num && (float)mouseY < (float)num + (float)value2.Height * num2)
		{
			flag = true;
			player[myPlayer].mouseInterface = true;
			if (!player[myPlayer].hbLocked)
			{
				MouseText(Lang.inter[5].Value, 0, 0);
			}
			else
			{
				MouseText(Lang.inter[6].Value, 0, 0);
			}
			mouseText = true;
			if (mouseLeft && mouseLeftRelease)
			{
				SoundEngine.PlaySound(22);
				player[myPlayer].hbLocked = !player[myPlayer].hbLocked;
			}
		}
		spriteBatch.Draw(value, new Vector2((float)pivotTopLeftX, (float)num), (Rectangle?)value2, Color.White, 0f, default(Vector2), num2, (SpriteEffects)0, 0f);
		if (flag)
		{
			spriteBatch.Draw(value, new Vector2((float)pivotTopLeftX, (float)num), (Rectangle?)value.Frame(2, 1, 1), OurFavoriteColor, 0f, default(Vector2), num2, (SpriteEffects)0, 0f);
		}
	}

	public static void CraftItem(Recipe r)
	{
		if (mouseItem.stack <= 0 || ItemLoader.CanStack(mouseItem, r.createItem))
		{
			Item crafted = r.createItem.Clone();
			crafted.Prefix(-1);
			r.Create();
			RecipeLoader.OnCraft(crafted, r, mouseItem);
			if (mouseItem.stack > 0)
			{
				ItemLoader.StackItems(mouseItem, crafted, out var _);
			}
			else
			{
				mouseItem = crafted;
			}
			mouseItem.position.X = player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(mouseItem.width / 2);
			mouseItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(mouseItem.height / 2);
			PopupText.NewText(PopupTextContext.ItemCraft, mouseItem, r.createItem.stack);
			if (mouseItem.type > 0 || r.createItem.type > 0)
			{
				SoundEngine.PlaySound(7);
			}
		}
	}

	private static void DrawPVPIcons()
	{
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_036c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_0391: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03aa: Unknown result type (might be due to invalid IL or missing references)
		if (EquipPage == 1)
		{
			if (hidePVPIcons)
			{
				return;
			}
		}
		else
		{
			hidePVPIcons = false;
		}
		inventoryScale = 0.6f;
		int num = (int)(52f * inventoryScale);
		int num2 = 707 - num * 4 + screenWidth - 800;
		int num3 = 114 + mH + num * 2 + num / 2 - 12;
		if (EquipPage == 2)
		{
			num2 += num + num / 2;
		}
		int num4 = (player[myPlayer].hostile ? 2 : 0);
		if (mouseX > num2 - 7 && mouseX < num2 + 25 && mouseY > num3 - 2 && mouseY < num3 + 37 && !PlayerInput.IgnoreMouseInterface)
		{
			player[myPlayer].mouseInterface = true;
			if (teamCooldown == 0)
			{
				num4++;
			}
			if (mouseLeft && mouseLeftRelease && teamCooldown == 0)
			{
				teamCooldown = teamCooldownLen;
				SoundEngine.PlaySound(12);
				player[myPlayer].hostile = !player[myPlayer].hostile;
				NetMessage.SendData(30, -1, -1, null, myPlayer);
			}
		}
		Rectangle rectangle = TextureAssets.Pvp[0].Frame(4, 6);
		((Rectangle)(ref rectangle)).Location = new Point(rectangle.Width * num4, rectangle.Height * player[myPlayer].team);
		rectangle.Width -= 2;
		rectangle.Height--;
		spriteBatch.Draw(TextureAssets.Pvp[0].Value, new Vector2((float)(num2 - 10), (float)num3), (Rectangle?)rectangle, Color.White, 0f, Vector2.Zero, Vector2.One, (SpriteEffects)0, 0f);
		UILinkPointNavigator.SetPosition(1550, new Vector2((float)(num2 - 10), (float)num3) + rectangle.Size() * 0.75f);
		num3 += 60;
		num2 -= 10;
		rectangle = TextureAssets.Pvp[1].Frame(6);
		Rectangle r = rectangle;
		for (int i = 0; i < 6; i++)
		{
			((Rectangle)(ref r)).Location = new Point(num2 + i % 2 * 20, num3 + i / 2 * 20);
			rectangle.X = rectangle.Width * i;
			bool flag = false;
			if (((Rectangle)(ref r)).Contains(MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
				if (teamCooldown == 0)
				{
					flag = true;
				}
				if (mouseLeft && mouseLeftRelease && player[myPlayer].team != i && teamCooldown == 0)
				{
					if (!player[myPlayer].TeamChangeAllowed())
					{
						NewText(Lang.misc[84].Value, byte.MaxValue, 240, 20);
					}
					else
					{
						teamCooldown = teamCooldownLen;
						SoundEngine.PlaySound(12);
						player[myPlayer].team = i;
						NetMessage.SendData(45, -1, -1, null, myPlayer);
					}
				}
			}
			r.Width = rectangle.Width - 2;
			if (flag)
			{
				spriteBatch.Draw(TextureAssets.Pvp[2].Value, ((Rectangle)(ref r)).Location.ToVector2() + new Vector2(-2f), Color.White);
			}
			Rectangle value = rectangle;
			value.Width -= 2;
			spriteBatch.Draw(TextureAssets.Pvp[1].Value, ((Rectangle)(ref r)).Location.ToVector2(), (Rectangle?)value, Color.White);
			UILinkPointNavigator.SetPosition(1550 + i + 1, ((Rectangle)(ref r)).Location.ToVector2() + r.Size() * 0.75f);
		}
	}

	private static int DrawPageIcons(int yPos)
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_0281: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		int num = -1;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)(screenWidth - 162), (float)yPos);
		vector.X += 82f;
		Texture2D value = TextureAssets.EquipPage[(EquipPage == 2) ? 3 : 2].Value;
		if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2((float)mouseX, (float)mouseY), Vector2.One) && (mouseItem.stack < 1 || mouseItem.dye > 0))
		{
			num = 2;
		}
		if (num == 2)
		{
			spriteBatch.Draw(TextureAssets.EquipPage[6].Value, vector, (Rectangle?)null, OurFavoriteColor, 0f, new Vector2(2f), 0.9f, (SpriteEffects)0, 0f);
		}
		spriteBatch.Draw(value, vector, (Rectangle?)null, Color.White, 0f, Vector2.Zero, 0.9f, (SpriteEffects)0, 0f);
		UILinkPointNavigator.SetPosition(305, vector + value.Size() * 0.75f);
		vector.X -= 48f;
		value = TextureAssets.EquipPage[(EquipPage == 1) ? 5 : 4].Value;
		if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2((float)mouseX, (float)mouseY), Vector2.One) && mouseItem.stack < 1)
		{
			num = 1;
		}
		if (num == 1)
		{
			spriteBatch.Draw(TextureAssets.EquipPage[7].Value, vector, (Rectangle?)null, OurFavoriteColor, 0f, new Vector2(2f), 0.9f, (SpriteEffects)0, 0f);
		}
		spriteBatch.Draw(value, vector, (Rectangle?)null, Color.White, 0f, Vector2.Zero, 0.9f, (SpriteEffects)0, 0f);
		UILinkPointNavigator.SetPosition(306, vector + value.Size() * 0.75f);
		vector.X -= 48f;
		value = TextureAssets.EquipPage[(EquipPage == 3) ? 10 : 8].Value;
		if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2((float)mouseX, (float)mouseY), Vector2.One) && mouseItem.stack < 1)
		{
			num = 3;
		}
		if (num == 3 && !CaptureModeDisabled)
		{
			spriteBatch.Draw(TextureAssets.EquipPage[9].Value, vector, (Rectangle?)null, OurFavoriteColor, 0f, Vector2.Zero, 0.9f, (SpriteEffects)0, 0f);
		}
		spriteBatch.Draw(value, vector, (Rectangle?)null, CaptureModeDisabled ? Color.Red : Color.White, 0f, Vector2.Zero, 0.9f, (SpriteEffects)0, 0f);
		UILinkPointNavigator.SetPosition(307, vector + value.Size() * 0.75f);
		if (num != -1)
		{
			player[myPlayer].mouseInterface = true;
			if (mouseLeft && mouseLeftRelease)
			{
				bool flag = true;
				if (num == 3)
				{
					if (CaptureModeDisabled)
					{
						flag = false;
					}
					else if (PlayerInput.UsingGamepad)
					{
						CaptureInterface.QuickScreenshot();
					}
					else
					{
						CaptureManager.Instance.Active = true;
						blockMouse = true;
					}
				}
				else if (EquipPageSelected != num)
				{
					EquipPageSelected = num;
				}
				else
				{
					EquipPageSelected = 0;
				}
				if (flag)
				{
					SoundEngine.PlaySound(10);
				}
			}
		}
		ItemSlot.SelectEquipPage(mouseItem);
		if (EquipPage == -1)
		{
			EquipPage = EquipPageSelected;
		}
		return num;
	}

	public void DrawMouseOver()
	{
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0505: Unknown result type (might be due to invalid IL or missing references)
		//IL_050f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0514: Unknown result type (might be due to invalid IL or missing references)
		//IL_0519: Unknown result type (might be due to invalid IL or missing references)
		//IL_0536: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_052a: Unknown result type (might be due to invalid IL or missing references)
		//IL_052f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_0558: Unknown result type (might be due to invalid IL or missing references)
		//IL_0591: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Unknown result type (might be due to invalid IL or missing references)
		//IL_059d: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05db: Unknown result type (might be due to invalid IL or missing references)
		//IL_05eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0622: Unknown result type (might be due to invalid IL or missing references)
		//IL_0629: Unknown result type (might be due to invalid IL or missing references)
		//IL_0637: Unknown result type (might be due to invalid IL or missing references)
		//IL_0639: Unknown result type (might be due to invalid IL or missing references)
		//IL_063e: Unknown result type (might be due to invalid IL or missing references)
		PlayerInput.SetZoom_Unscaled();
		PlayerInput.SetZoom_MouseInWorld();
		Rectangle mouseRectangle = default(Rectangle);
		((Rectangle)(ref mouseRectangle))._002Ector((int)((float)mouseX + screenPosition.X), (int)((float)mouseY + screenPosition.Y), 1, 1);
		if (player[myPlayer].gravDir == -1f)
		{
			mouseRectangle.Y = (int)screenPosition.Y + screenHeight - mouseY;
		}
		PlayerInput.SetZoom_UI();
		if (!LocalPlayer.ghost)
		{
			ResourceSetsManager.TryToHoverOverResources();
		}
		AchievementAdvisor.DrawMouseHover();
		IngameOptions.MouseOver();
		IngameFancyUI.MouseOver();
		if (!mouseText)
		{
			Rectangle value = default(Rectangle);
			for (int i = 0; i < 400; i++)
			{
				if (!item[i].active)
				{
					continue;
				}
				Rectangle drawHitbox = Item.GetDrawHitbox(item[i].type, null);
				Vector2 bottom = item[i].Bottom;
				((Rectangle)(ref value))._002Ector((int)(bottom.X - (float)drawHitbox.Width * 0.5f), (int)(bottom.Y - (float)drawHitbox.Height), drawHitbox.Width, drawHitbox.Height);
				if (((Rectangle)(ref mouseRectangle)).Intersects(value))
				{
					player[myPlayer].cursorItemIconEnabled = false;
					string text = item[i].AffixName();
					if (item[i].stack > 1)
					{
						text = text + " (" + item[i].stack + ")";
					}
					if (item[i].playerIndexTheItemIsReservedFor < 255 && showItemOwner)
					{
						text = text + " <" + player[item[i].playerIndexTheItemIsReservedFor].name + ">";
					}
					rare = item[i].rare;
					if (item[i].expert)
					{
						rare = -12;
					}
					if (item[i].master)
					{
						rare = -13;
					}
					MouseTextHackZoom(text, rare, 0);
					mouseText = true;
					break;
				}
			}
		}
		Rectangle value2 = default(Rectangle);
		for (int j = 0; j < 255; j++)
		{
			if (!player[j].active || myPlayer == j || player[j].dead || player[j].ShouldNotDraw || !((double)player[j].stealth > 0.5))
			{
				continue;
			}
			((Rectangle)(ref value2))._002Ector((int)((double)player[j].position.X + (double)player[j].width * 0.5 - 16.0), (int)(player[j].position.Y + (float)player[j].height - 48f), 32, 48);
			if (!mouseText && ((Rectangle)(ref mouseRectangle)).Intersects(value2))
			{
				player[myPlayer].cursorItemIconEnabled = false;
				int num = player[j].statLife;
				if (num < 0)
				{
					num = 0;
				}
				string text2 = player[j].name + ": " + num + "/" + player[j].statLifeMax2;
				if (player[j].hostile)
				{
					text2 = text2 + " " + Language.GetTextValue("Game.PvPFlag");
				}
				MouseTextHackZoom(text2, 0, player[j].difficulty);
				mouseText = true;
			}
		}
		HoveringOverAnNPC = false;
		if (!mouseText)
		{
			HoverOverNPCs(mouseRectangle);
		}
		if (!mouseText && signHover != -1 && sign[signHover] != null && !player[myPlayer].mouseInterface && !string.IsNullOrWhiteSpace(sign[signHover].text))
		{
			int lineAmount;
			string[] array = Utils.WordwrapString(sign[signHover].text, FontAssets.MouseText.Value, 460, 10, out lineAmount);
			lineAmount++;
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, (BlendState)null, (SamplerState)null, (DepthStencilState)null, (RasterizerState)null, (Effect)null, _uiScaleMatrix);
			PlayerInput.SetZoom_UI();
			int num2 = screenWidth;
			int num3 = screenHeight;
			int num4 = mouseX;
			int num5 = mouseY;
			PlayerInput.SetZoom_UI();
			PlayerInput.SetZoom_Test();
			float num6 = 0f;
			for (int k = 0; k < lineAmount; k++)
			{
				float x = FontAssets.MouseText.Value.MeasureString(array[k]).X;
				if (num6 < x)
				{
					num6 = x;
				}
			}
			if (num6 > 460f)
			{
				num6 = 460f;
			}
			bool settingsEnabled_OpaqueBoxBehindTooltips = SettingsEnabled_OpaqueBoxBehindTooltips;
			Vector2 vector = new Vector2((float)num4, (float)num5) + new Vector2(16f);
			if (settingsEnabled_OpaqueBoxBehindTooltips)
			{
				vector += new Vector2(8f, 2f);
			}
			if (vector.Y > (float)(num3 - 30 * lineAmount))
			{
				vector.Y = num3 - 30 * lineAmount;
			}
			if (vector.X > (float)num2 - num6)
			{
				vector.X = (float)num2 - num6;
			}
			Color color = default(Color);
			((Color)(ref color))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor);
			if (settingsEnabled_OpaqueBoxBehindTooltips)
			{
				color = Color.Lerp(color, Color.White, 1f);
				int num7 = 10;
				int num8 = 5;
				Utils.DrawInvBG(spriteBatch, new Rectangle((int)vector.X - num7, (int)vector.Y - num8, (int)num6 + num7 * 2, 30 * lineAmount + num8 + num8 / 2), new Color(23, 25, 81, 255) * 0.925f * 0.85f);
			}
			for (int l = 0; l < lineAmount; l++)
			{
				Utils.DrawBorderStringFourWay(spriteBatch, FontAssets.MouseText.Value, array[l], vector.X, vector.Y + (float)(l * 30), color, Color.Black, Vector2.Zero);
			}
			mouseText = true;
		}
		PlayerInput.SetZoom_UI();
	}

	private void HoverOverNPCs(Rectangle mouseRectangle)
	{
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0555: Unknown result type (might be due to invalid IL or missing references)
		//IL_055a: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0537: Unknown result type (might be due to invalid IL or missing references)
		//IL_053d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0542: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_051b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0521: Unknown result type (might be due to invalid IL or missing references)
		//IL_0526: Unknown result type (might be due to invalid IL or missing references)
		//IL_052b: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[myPlayer];
		Rectangle value = default(Rectangle);
		Rectangle rectangle = default(Rectangle);
		Rectangle value2 = default(Rectangle);
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = npc[i];
			if (!nPC.ShowNameOnHover || !(nPC.active & (nPC.shimmerTransparency == 0f || nPC.CanApplyHunterPotionEffects())))
			{
				continue;
			}
			int type = nPC.type;
			LoadNPC(type);
			nPC.position += nPC.netOffset;
			((Rectangle)(ref value))._002Ector((int)nPC.Bottom.X - nPC.frame.Width / 2, (int)nPC.Bottom.Y - nPC.frame.Height, nPC.frame.Width, nPC.frame.Height);
			if (nPC.type >= 87 && nPC.type <= 92)
			{
				((Rectangle)(ref value))._002Ector((int)((double)nPC.position.X + (double)nPC.width * 0.5 - 32.0), (int)((double)nPC.position.Y + (double)nPC.height * 0.5 - 32.0), 64, 64);
			}
			NPCLoader.ModifyHoverBoundingBox(nPC, ref value);
			bool flag = ((Rectangle)(ref mouseRectangle)).Intersects(value);
			bool flag2 = flag || (SmartInteractShowingGenuine && SmartInteractNPC == i);
			if (flag2 && ((nPC.type != 85 && nPC.type != 341 && nPC.type != 629 && nPC.aiStyle != 87) || nPC.ai[0] != 0f) && nPC.type != 488)
			{
				if (nPC.type == 685)
				{
					player.cursorItemIconEnabled = true;
					player.cursorItemIconID = 327;
					player.cursorItemIconText = "";
					player.noThrow = 2;
					if (!player.dead)
					{
						PlayerInput.SetZoom_MouseInWorld();
						if (mouseRight && npcChatRelease)
						{
							npcChatRelease = false;
							if (PlayerInput.UsingGamepad)
							{
								player.releaseInventory = false;
							}
							if (player.talkNPC != i && !player.tileInteractionHappened && TryFreeingElderSlime(i))
							{
								NPC.TransformElderSlime(i);
								SoundEngine.PlaySound(22);
							}
						}
					}
				}
				else
				{
					bool flag3 = SmartInteractShowingGenuine && SmartInteractNPC == i;
					bool vanillaCanChat = false;
					if (nPC.townNPC || nPC.type == 105 || nPC.type == 106 || nPC.type == 123 || nPC.type == 354 || nPC.type == 376 || nPC.type == 579 || nPC.type == 453 || nPC.type == 589)
					{
						vanillaCanChat = true;
					}
					if (NPCLoader.CanChat(nPC) ?? vanillaCanChat)
					{
						((Rectangle)(ref rectangle))._002Ector((int)(player.position.X + (float)(player.width / 2) - (float)(Player.tileRangeX * 16)), (int)(player.position.Y + (float)(player.height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
						((Rectangle)(ref value2))._002Ector((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height);
						if (((Rectangle)(ref rectangle)).Intersects(value2))
						{
							flag3 = true;
						}
					}
					if (player.ownedProjectileCounts[651] > 0)
					{
						flag3 = false;
					}
					if (flag3 && !player.dead)
					{
						PlayerInput.SetZoom_MouseInWorld();
						HoveringOverAnNPC = true;
						currentNPCShowingChatBubble = i;
						if (mouseRight && npcChatRelease)
						{
							npcChatRelease = false;
							if (PlayerInput.UsingGamepad)
							{
								player.releaseInventory = false;
							}
							if (player.talkNPC != i && !player.tileInteractionHappened)
							{
								CancelHairWindow();
								SetNPCShopIndex(0);
								InGuideCraftMenu = false;
								player.dropItemCheck();
								npcChatCornerItem = 0;
								player.sign = -1;
								editSign = false;
								player.SetTalkNPC(i);
								playerInventory = false;
								player.chest = -1;
								Recipe.FindRecipes();
								npcChatText = nPC.GetChat();
								SoundEngine.PlaySound(24);
							}
						}
					}
					if (flag && !player.mouseInterface)
					{
						player.cursorItemIconEnabled = false;
						string text = nPC.GivenOrTypeName;
						int num = i;
						if (nPC.realLife >= 0)
						{
							num = nPC.realLife;
						}
						if (npc[num].lifeMax > 1 && !npc[num].dontTakeDamage)
						{
							text = text + ": " + npc[num].life + "/" + npc[num].lifeMax;
						}
						MouseTextHackZoom(text);
						mouseText = true;
						nPC.position -= nPC.netOffset;
						break;
					}
					if (flag2)
					{
						nPC.position -= nPC.netOffset;
						break;
					}
				}
			}
			nPC.position -= nPC.netOffset;
		}
	}

	private static bool TryFreeingElderSlime(int npcIndex)
	{
		Player player = Main.player[myPlayer];
		short type = 327;
		bool inVoidBag = false;
		int num = player.FindItemInInventoryOrOpenVoidBag(type, out inVoidBag);
		if (num == -1)
		{
			return false;
		}
		Item item = null;
		item = ((!inVoidBag) ? player.inventory[num] : player.bank4.item[num]);
		if (--item.stack <= 0)
		{
			item.TurnToAir();
		}
		Recipe.FindRecipes();
		return true;
	}

	private static void DrawNPCChatBubble(int i)
	{
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		int num = -(npc[i].width / 2 + 8);
		float num2 = npc[i].position.Y - (float)TextureAssets.Chat.Height() - (float)(int)screenPosition.Y;
		if (npc[i].type == 637 && npc[i].ai[0] == 5f)
		{
			num2 -= 18f;
		}
		SpriteEffects spriteEffects = (SpriteEffects)0;
		if (npc[i].spriteDirection == -1)
		{
			spriteEffects = (SpriteEffects)1;
			num = npc[i].width / 2 + 8;
		}
		if (player[myPlayer].gravDir != 1f)
		{
			spriteEffects = (SpriteEffects)(spriteEffects | 2);
			num2 = (float)screenHeight - num2 - (float)TextureAssets.Chat.Height();
		}
		Vector2 position = default(Vector2);
		((Vector2)(ref position))._002Ector(npc[i].position.X + (float)(npc[i].width / 2) - screenPosition.X - (float)(TextureAssets.Chat.Width() / 2) - (float)num, num2);
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, (BlendState)null, SamplerState.PointClamp, (DepthStencilState)null, (RasterizerState)null, (Effect)null, GameViewMatrix.ZoomMatrix);
		PlayerInput.SetZoom_UI();
		spriteBatch.Draw(TextureAssets.Chat.Value, position, (Rectangle?)new Rectangle(0, 0, TextureAssets.Chat.Width(), TextureAssets.Chat.Height()), new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, default(Vector2), 1f, spriteEffects, 0f);
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, (BlendState)null, (SamplerState)null, (DepthStencilState)null, (RasterizerState)null, (Effect)null, _uiScaleMatrix);
	}

	public void GUIBarsDraw()
	{
		if (ignoreErrors)
		{
			try
			{
				GUIBarsDrawInner();
				return;
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
				return;
			}
		}
		GUIBarsDrawInner();
	}

	protected void GUIBarsDrawInner()
	{
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		ResourceSetsManager.Draw();
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, UIScaleMatrix);
		DrawInterface_Resources_Breath();
		DrawInterface_Resources_ClearBuffs();
		if (!ingameOptionsWindow && !playerInventory && !inFancyUI)
		{
			DrawInterface_Resources_Buffs();
		}
	}

	public static void DrawInterface_Resources_ClearBuffs()
	{
		buffString = "";
		bannerMouseOver = false;
		if (!recBigList)
		{
			recStart = 0;
		}
	}

	public void DrawInterface_Resources_Buffs()
	{
		recBigList = false;
		int num = -1;
		int num2 = 11;
		for (int i = 0; i < Player.maxBuffs; i++)
		{
			if (player[myPlayer].buffType[i] > 0)
			{
				_ = player[myPlayer].buffType[i];
				int x = 32 + i * 38;
				int num3 = 76;
				int num4 = i;
				while (num4 >= num2)
				{
					num4 -= num2;
					x = 32 + num4 * 38;
					num3 += 50;
				}
				num = DrawBuffIcon(num, i, x, num3);
			}
			else
			{
				buffAlpha[i] = 0.4f;
			}
		}
		if (num < 0)
		{
			return;
		}
		int num5 = player[myPlayer].buffType[num];
		if (num5 > 0)
		{
			string buffName = Lang.GetBuffName(num5);
			string buffTooltip = GetBuffTooltip(player[myPlayer], num5);
			if (num5 == 147)
			{
				bannerMouseOver = true;
			}
			int rare = 0;
			if (meleeBuff[num5])
			{
				rare = -10;
			}
			BuffLoader.ModifyBuffText(num5, ref buffName, ref buffTooltip, ref rare);
			MouseTextHackZoom(buffName, rare, 0, buffTooltip);
		}
	}

	public static string GetBuffTooltip(Player player, int buffType)
	{
		string text = Lang.GetBuffDescription(buffType);
		switch (buffType)
		{
		case 26:
			if (expertMode)
			{
				text = Language.GetTextValue("BuffDescription.WellFed_Expert");
			}
			break;
		case 206:
			if (expertMode)
			{
				text = Language.GetTextValue("BuffDescription.WellFed2_Expert");
			}
			break;
		case 207:
			if (expertMode)
			{
				text = Language.GetTextValue("BuffDescription.WellFed3_Expert");
			}
			break;
		case 94:
			text = text + ((int)(player.manaSickReduction * 100f) + 1) + "%";
			break;
		}
		return text;
	}

	/// <summary>
	/// Checks if the buff at index <paramref name="buffSlotOnPlayer" /> is allowed to draw a "remaining time" text, and sets <paramref name="buffTimeValue" /> to it.
	/// <para>Check <paramref name="buffTimeValue" /> &gt; 2 afterwards if you want to mirror text draw logic.</para>
	/// </summary>
	/// <param name="buffSlotOnPlayer">The index for buffType and buffTime</param>
	/// <param name="buffTimeValue">The "remaining time" in ticks</param>
	/// <returns><see langword="true" /> if <paramref name="buffTimeValue" /> is set, otherwise <see langword="false" /></returns>
	public static bool TryGetBuffTime(int buffSlotOnPlayer, out int buffTimeValue)
	{
		int num = player[myPlayer].buffType[buffSlotOnPlayer];
		buffTimeValue = 0;
		if (!vanityPet[num] && !lightPet[num] && !buffNoTimeDisplay[num] && (!player[myPlayer].honeyWet || num != 48) && (!player[myPlayer].wet || !expertMode || num != 46))
		{
			buffTimeValue = player[myPlayer].buffTime[buffSlotOnPlayer];
			return true;
		}
		return false;
	}

	/// <summary>
	/// Draws the buff icon corresponding to the buff in Main.LocalPlayer.buffType[<paramref name="buffSlotOnPlayer" />].
	/// <para>Calls TML hooks related to drawing and clicking.</para>
	/// <para>Has two exclusive contexts: Below the accessory slots (Main.EquipPage == 2), and regular under-the-inventory.</para>
	/// </summary>
	/// <param name="drawBuffText">The return from a previous DrawBuffIcon call, -1 if first drawn buff</param>
	/// <param name="buffSlotOnPlayer">The index for buffType and buffTime</param>
	/// <param name="x">Top-left draw position on the x-axis</param>
	/// <param name="y">Top-left draw position on the y-axis</param>
	/// <returns>The index of the currently mouseovered buff icon, equal to <paramref name="buffSlotOnPlayer" /> if it's currently mouseovered, -1 otherwise</returns>
	public static int DrawBuffIcon(int drawBuffText, int buffSlotOnPlayer, int x, int y)
	{
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		int num = player[myPlayer].buffType[buffSlotOnPlayer];
		if (num == 0)
		{
			return drawBuffText;
		}
		Color color = default(Color);
		((Color)(ref color))._002Ector(buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer]);
		Asset<Texture2D> obj = TextureAssets.Buff[num];
		Texture2D texture = obj.Value;
		Vector2 drawPosition = default(Vector2);
		((Vector2)(ref drawPosition))._002Ector((float)x, (float)y);
		int width = obj.Width();
		int height = obj.Height();
		Vector2 textPosition = default(Vector2);
		((Vector2)(ref textPosition))._002Ector((float)x, (float)(y + height));
		Rectangle sourceRectangle = default(Rectangle);
		((Rectangle)(ref sourceRectangle))._002Ector(0, 0, width, height);
		Rectangle mouseRectangle = default(Rectangle);
		((Rectangle)(ref mouseRectangle))._002Ector(x, y, width, height);
		Color drawColor = color;
		BuffDrawParams drawParams = new BuffDrawParams(texture, drawPosition, textPosition, sourceRectangle, mouseRectangle, drawColor);
		bool num2 = !BuffLoader.PreDraw(spriteBatch, num, buffSlotOnPlayer, ref drawParams);
		BuffDrawParams buffDrawParams = drawParams;
		(texture, drawPosition, textPosition, sourceRectangle, mouseRectangle, drawColor) = (BuffDrawParams)(ref buffDrawParams);
		if (!num2)
		{
			spriteBatch.Draw(texture, drawPosition, (Rectangle?)sourceRectangle, drawColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		BuffLoader.PostDraw(spriteBatch, num, buffSlotOnPlayer, drawParams);
		if (TryGetBuffTime(buffSlotOnPlayer, out var buffTimeValue) && buffTimeValue > 2)
		{
			string text = Lang.LocalizedDuration(new TimeSpan(0, 0, buffTimeValue / 60), abbreviated: true, showAllAvailableUnits: false);
			spriteBatch.DrawString(FontAssets.ItemStack.Value, text, textPosition, color, 0f, default(Vector2), 0.8f, (SpriteEffects)0, 0f);
		}
		if (((Rectangle)(ref mouseRectangle)).Contains(new Point(mouseX, mouseY)))
		{
			drawBuffText = buffSlotOnPlayer;
			buffAlpha[buffSlotOnPlayer] += 0.1f;
			bool flag = mouseRight && mouseRightRelease;
			if (PlayerInput.UsingGamepad)
			{
				flag = mouseLeft && mouseLeftRelease && playerInventory;
				if (playerInventory)
				{
					player[myPlayer].mouseInterface = true;
				}
			}
			else
			{
				player[myPlayer].mouseInterface = true;
			}
			if (flag)
			{
				flag &= BuffLoader.RightClick(num, buffSlotOnPlayer);
			}
			if (flag)
			{
				TryRemovingBuff(buffSlotOnPlayer, num);
			}
		}
		else
		{
			buffAlpha[buffSlotOnPlayer] -= 0.05f;
		}
		if (buffAlpha[buffSlotOnPlayer] > 1f)
		{
			buffAlpha[buffSlotOnPlayer] = 1f;
		}
		else if ((double)buffAlpha[buffSlotOnPlayer] < 0.4)
		{
			buffAlpha[buffSlotOnPlayer] = 0.4f;
		}
		if (PlayerInput.UsingGamepad && !playerInventory)
		{
			drawBuffText = -1;
		}
		return drawBuffText;
	}

	/// <summary>
	/// Calls Player.DelBuff with index i after checking Main.debuff of buff type b. Will toggle Player.hideMisc for pet and light pet.
	/// </summary>
	/// <param name="i">The index for buffType and buffTime</param>
	/// <param name="b">The buff type</param>
	public static void TryRemovingBuff(int i, int b)
	{
		bool flag = false;
		if (!debuff[b] && b != 60 && b != 151)
		{
			if (player[myPlayer].mount.Active && player[myPlayer].mount.CheckBuff(b))
			{
				player[myPlayer].mount.Dismount(player[myPlayer]);
				flag = true;
			}
			TryRemovingBuff_CheckBuffHideMisc(0, b);
			TryRemovingBuff_CheckBuffHideMisc(1, b);
			SoundEngine.PlaySound(12);
			if (!flag)
			{
				player[myPlayer].DelBuff(i);
			}
		}
	}

	public static void TryRemovingBuff_CheckBuffHideMisc(int slot, int buffID)
	{
		if (!player[myPlayer].hideMisc[slot])
		{
			bool flag = player[myPlayer].miscEquips[slot].buffType == buffID;
			if (!flag && (buffID == 102 || buffID == 101))
			{
				flag = player[myPlayer].miscEquips[slot].buffType == 27;
			}
			if (flag)
			{
				player[myPlayer].hideMisc[slot] = true;
			}
		}
	}

	private static void DrawInterface_Resources_Breath()
	{
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0472: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		if (player[myPlayer].dead)
		{
			return;
		}
		if (player[myPlayer].lavaTime < player[myPlayer].lavaMax && player[myPlayer].lavaWet)
		{
			flag = true;
		}
		else if (player[myPlayer].lavaTime < player[myPlayer].lavaMax && player[myPlayer].breath == player[myPlayer].breathMax)
		{
			flag = true;
		}
		Vector2 vector = player[myPlayer].Top + new Vector2(0f, player[myPlayer].gfxOffY);
		if (playerInventory && screenHeight < 1000)
		{
			vector.Y += player[myPlayer].height - 20;
		}
		vector = Vector2.Transform(vector - screenPosition, GameViewMatrix.ZoomMatrix);
		if (!playerInventory || screenHeight >= 1000)
		{
			vector.Y -= 100f;
		}
		vector /= UIScale;
		if (ingameOptionsWindow || InGameUI.IsVisible)
		{
			((Vector2)(ref vector))._002Ector((float)(screenWidth / 2), (float)(screenHeight / 2 + 236));
			if (InGameUI.IsVisible)
			{
				vector.Y = screenHeight - 64;
			}
		}
		if (player[myPlayer].breath < player[myPlayer].breathMax && !player[myPlayer].ghost && !flag)
		{
			_ = player[myPlayer].breathMax / 20;
			int num = 20;
			for (int i = 1; i < player[myPlayer].breathMax / num + 1; i++)
			{
				int num5 = 255;
				float num6 = 1f;
				if (player[myPlayer].breath >= i * num)
				{
					num5 = 255;
				}
				else
				{
					float num7 = (float)(player[myPlayer].breath - (i - 1) * num) / (float)num;
					num5 = (int)(30f + 225f * num7);
					if (num5 < 30)
					{
						num5 = 30;
					}
					num6 = num7 / 4f + 0.75f;
					if ((double)num6 < 0.75)
					{
						num6 = 0.75f;
					}
				}
				int num8 = 0;
				int num9 = 0;
				if (i > 10)
				{
					num8 -= 260;
					num9 += 26;
				}
				spriteBatch.Draw(TextureAssets.Bubble.Value, vector + new Vector2((float)(26 * (i - 1) + num8) - 125f, 32f + ((float)TextureAssets.Bubble.Height() - (float)TextureAssets.Bubble.Height() * num6) / 2f + (float)num9), (Rectangle?)new Rectangle(0, 0, TextureAssets.Bubble.Width(), TextureAssets.Bubble.Height()), new Color(num5, num5, num5, num5), 0f, default(Vector2), num6, (SpriteEffects)0, 0f);
			}
		}
		if (!(player[myPlayer].lavaTime < player[myPlayer].lavaMax && !player[myPlayer].ghost && flag))
		{
			return;
		}
		int num10 = player[myPlayer].lavaMax / 10;
		_ = player[myPlayer].breathMax / num10;
		for (int j = 1; j < player[myPlayer].lavaMax / num10 + 1; j++)
		{
			int num11 = 255;
			float num12 = 1f;
			if (player[myPlayer].lavaTime >= j * num10)
			{
				num11 = 255;
			}
			else
			{
				float num2 = (float)(player[myPlayer].lavaTime - (j - 1) * num10) / (float)num10;
				num11 = (int)(30f + 225f * num2);
				if (num11 < 30)
				{
					num11 = 30;
				}
				num12 = num2 / 4f + 0.75f;
				if ((double)num12 < 0.75)
				{
					num12 = 0.75f;
				}
			}
			int num3 = 0;
			int num4 = 0;
			if (j > 10)
			{
				num3 -= 260;
				num4 += 26;
			}
			spriteBatch.Draw(TextureAssets.Flame.Value, vector + new Vector2((float)(26 * (j - 1) + num3) - 125f, 32f + ((float)TextureAssets.Flame.Height() - (float)TextureAssets.Flame.Height() * num12) / 2f + (float)num4), (Rectangle?)new Rectangle(0, 0, TextureAssets.Bubble.Width(), TextureAssets.Bubble.Height()), new Color(num11, num11, num11, num11), 0f, default(Vector2), num12, (SpriteEffects)0, 0f);
		}
	}

	private static void DrawInterface_Resources_GolfPower()
	{
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		Projectile projectile = null;
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile2 = Main.projectile[i];
			if (projectile2.active && projectile2.owner == myPlayer && projectile2.type == 722)
			{
				projectile = projectile2;
				break;
			}
		}
		if (projectile == null)
		{
			return;
		}
		Projectile projectile3 = GolfHelper.FindGolfBallForHelper(projectile);
		if (projectile3 != null)
		{
			float relativeStrength = GolfHelper.CalculateShotStrength(projectile, projectile3).RelativeStrength;
			if (!(relativeStrength < 0.001f))
			{
				Vector2 position = LocalPlayer.Bottom - Camera.ScaledPosition;
				position *= GameViewMatrix.Zoom;
				position /= UIScale;
				position.X -= 27f;
				position.Y += 14f;
				spriteBatch.Draw(TextureAssets.GolfSwingBarPanel.Value, position, (Rectangle?)null, Color.White);
				spriteBatch.Draw(TextureAssets.GolfSwingBarFill.Value, position, (Rectangle?)new Rectangle(0, 0, (int)(54f * relativeStrength), 14), Color.White);
			}
		}
	}

	private static void DrawInterface_GolfBallIndicator()
	{
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02db: Unknown result type (might be due to invalid IL or missing references)
		//IL_030a: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0318: Unknown result type (might be due to invalid IL or missing references)
		//IL_031f: Unknown result type (might be due to invalid IL or missing references)
		if (!Item.IsAGolfingItem(LocalPlayer.HeldItem))
		{
			return;
		}
		Projectile lastHitBall = LocalGolfState.GetLastHitBall();
		if (lastHitBall != null && GolfHelper.IsGolfBallResting(lastHitBall))
		{
			Vector2 vector = lastHitBall.Top - Camera.ScaledPosition;
			vector *= GameViewMatrix.Zoom;
			vector /= UIScale;
			Vector2 val = LocalPlayer.position - lastHitBall.position;
			float num = MathHelper.Clamp((((Vector2)(ref val)).Length() - 150f) / 50f, 0f, 1f);
			Vector2 vector2 = Vector2.Clamp(vector, new Vector2(20f), Camera.UnscaledSize - new Vector2(20f));
			float num2 = 0f;
			if (vector2 != vector)
			{
				num2 = (vector2 - vector).ToRotation() + (float)Math.PI / 2f;
			}
			vector2 -= (num2 + (float)Math.PI / 2f).ToRotationVector2() * (((float)Math.Sin(GlobalTimeWrappedHourly * 4f) * 0.5f + 0.5f) * 5f + 14f);
			Texture2D value = TextureAssets.GolfBallArrow.Value;
			Rectangle rectangle = value.Frame(2);
			Vector2 origin = rectangle.Size() * new Vector2(0.5f, 1f);
			Rectangle value2 = value.Frame(2, 1, 1);
			spriteBatch.Draw(TextureAssets.GolfBallArrowShadow.Value, vector2 + new Vector2(-4f, 4f) * 1.5f, (Rectangle?)rectangle, Color.White * num, num2, origin, 1.5f, (SpriteEffects)0, 0f);
			float amount = (float)Math.Sin(GlobalTimeWrappedHourly * 4f) * 0.5f + 0.5f;
			for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
			{
				spriteBatch.Draw(value, vector2 + ((float)Math.PI * 2f * num3 + num2).ToRotationVector2() * MathHelper.Lerp(2f, 2f, amount), (Rectangle?)value2, Color.Black * num * MathHelper.Lerp(1f, 1f, amount), num2, origin, 1.5f, (SpriteEffects)0, 0f);
			}
			for (float num4 = 0f; num4 < 1f; num4 += 0.25f)
			{
				spriteBatch.Draw(value, vector2 + ((float)Math.PI * 2f * num4 + num2).ToRotationVector2() * MathHelper.Lerp(0f, 0f, amount), (Rectangle?)value2, Color.White * num * MathHelper.Lerp(0.8f, 0.8f, amount), num2, origin, 1.5f, (SpriteEffects)0, 0f);
			}
			spriteBatch.Draw(value, vector2, (Rectangle?)rectangle, mouseColor * num, num2, origin, 1.5f, (SpriteEffects)0, 0f);
		}
	}

	protected void GUIHotbarDrawInner()
	{
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_044c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		if (playerInventory || player[myPlayer].ghost)
		{
			return;
		}
		string text = Lang.inter[37].Value;
		if (player[myPlayer].inventory[player[myPlayer].selectedItem].Name != null && player[myPlayer].inventory[player[myPlayer].selectedItem].Name != "")
		{
			text = player[myPlayer].inventory[player[myPlayer].selectedItem].AffixName();
		}
		Vector2 position = default(Vector2);
		((Vector2)(ref position))._002Ector(236f - (FontAssets.MouseText.Value.MeasureString(text) / 2f).X, 0f);
		spriteBatch.DrawString(FontAssets.MouseText.Value, text, position, new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		int num = 20;
		Color lightColor = default(Color);
		for (int i = 0; i < 10; i++)
		{
			if (i == player[myPlayer].selectedItem)
			{
				if (hotbarScale[i] < 1f)
				{
					hotbarScale[i] += 0.05f;
				}
			}
			else if ((double)hotbarScale[i] > 0.75)
			{
				hotbarScale[i] -= 0.05f;
			}
			float num2 = hotbarScale[i];
			int num3 = (int)(20f + 22f * (1f - num2));
			int a = (int)(75f + 150f * num2);
			((Color)(ref lightColor))._002Ector(255, 255, 255, a);
			if (!player[myPlayer].hbLocked && !PlayerInput.IgnoreMouseInterface && mouseX >= num && (float)mouseX <= (float)num + (float)TextureAssets.InventoryBack.Width() * hotbarScale[i] && mouseY >= num3 && (float)mouseY <= (float)num3 + (float)TextureAssets.InventoryBack.Height() * hotbarScale[i] && !player[myPlayer].channel)
			{
				player[myPlayer].mouseInterface = true;
				player[myPlayer].cursorItemIconEnabled = false;
				if (mouseLeft && !player[myPlayer].hbLocked && !blockMouse)
				{
					player[myPlayer].changeItem = i;
				}
				hoverItemName = player[myPlayer].inventory[i].AffixName();
				if (player[myPlayer].inventory[i].stack > 1)
				{
					hoverItemName = hoverItemName + " (" + player[myPlayer].inventory[i].stack + ")";
				}
				rare = player[myPlayer].inventory[i].rare;
			}
			float num6 = inventoryScale;
			inventoryScale = num2;
			ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, i, new Vector2((float)num, (float)num3), lightColor);
			inventoryScale = num6;
			num += (int)((float)TextureAssets.InventoryBack.Width() * hotbarScale[i]) + 4;
		}
		int selectedItem = player[myPlayer].selectedItem;
		if (selectedItem >= 10 && (selectedItem != 58 || mouseItem.type > 0))
		{
			float num4 = 1f;
			int num5 = (int)(20f + 22f * (1f - num4));
			int a2 = (int)(75f + 150f * num4);
			Color lightColor2 = default(Color);
			((Color)(ref lightColor2))._002Ector(255, 255, 255, a2);
			float num7 = inventoryScale;
			inventoryScale = num4;
			ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, selectedItem, new Vector2((float)num, (float)num5), lightColor2);
			inventoryScale = num7;
		}
	}

	public static void OpenHairWindow()
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		hBar = -1f;
		lBar = -1f;
		sBar = -1f;
		playerInventory = false;
		npcChatText = "";
		oldHairStyle = player[myPlayer].hair;
		oldHairColor = player[myPlayer].hairColor;
		hairWindow = true;
		SoundEngine.PlaySound(10);
	}

	public static void CancelHairWindow()
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		if (hairWindow)
		{
			player[myPlayer].hair = oldHairStyle;
			player[myPlayer].hairColor = oldHairColor;
			hairWindow = false;
			if (player[myPlayer].talkNPC > -1 && npc[player[myPlayer].talkNPC].type == 353)
			{
				player[myPlayer].SetTalkNPC(-1);
			}
			SoundEngine.PlaySound(11);
		}
	}

	public static void BuyHairWindow()
	{
		SoundEngine.PlaySound(18);
		hairWindow = false;
		player[myPlayer].SetTalkNPC(-1);
		npcChatCornerItem = 0;
		NetMessage.SendData(4, -1, -1, null, myPlayer);
	}

	public static int UnlockedMaxHair()
	{
		int num = 154;
		if (NPC.downedMartians)
		{
			num += 10;
		}
		if (NPC.downedMartians && NPC.downedMoonlord)
		{
			num++;
		}
		return num;
	}

	protected void DrawHairWindow()
	{
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_0410: Unknown result type (might be due to invalid IL or missing references)
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_046e: Unknown result type (might be due to invalid IL or missing references)
		//IL_047e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0701: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0974: Unknown result type (might be due to invalid IL or missing references)
		//IL_0979: Unknown result type (might be due to invalid IL or missing references)
		//IL_097b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0982: Unknown result type (might be due to invalid IL or missing references)
		//IL_0987: Unknown result type (might be due to invalid IL or missing references)
		//IL_0994: Unknown result type (might be due to invalid IL or missing references)
		//IL_0999: Unknown result type (might be due to invalid IL or missing references)
		//IL_099b: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0852: Unknown result type (might be due to invalid IL or missing references)
		//IL_085d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0865: Unknown result type (might be due to invalid IL or missing references)
		//IL_086a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0871: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_083a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0833: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_083c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fca: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_103a: Unknown result type (might be due to invalid IL or missing references)
		//IL_103f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1178: Unknown result type (might be due to invalid IL or missing references)
		//IL_117d: Unknown result type (might be due to invalid IL or missing references)
		//IL_118d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1192: Unknown result type (might be due to invalid IL or missing references)
		//IL_11da: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_129f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_122b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1246: Unknown result type (might be due to invalid IL or missing references)
		//IL_1264: Unknown result type (might be due to invalid IL or missing references)
		//IL_1270: Unknown result type (might be due to invalid IL or missing references)
		//IL_1276: Unknown result type (might be due to invalid IL or missing references)
		//IL_1434: Unknown result type (might be due to invalid IL or missing references)
		//IL_144a: Unknown result type (might be due to invalid IL or missing references)
		//IL_145f: Unknown result type (might be due to invalid IL or missing references)
		//IL_146b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1471: Unknown result type (might be due to invalid IL or missing references)
		//IL_149e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_14de: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1511: Unknown result type (might be due to invalid IL or missing references)
		//IL_1527: Unknown result type (might be due to invalid IL or missing references)
		//IL_153c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1548: Unknown result type (might be due to invalid IL or missing references)
		//IL_154e: Unknown result type (might be due to invalid IL or missing references)
		//IL_156e: Unknown result type (might be due to invalid IL or missing references)
		//IL_157e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1583: Unknown result type (might be due to invalid IL or missing references)
		//IL_1588: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a3: Unknown result type (might be due to invalid IL or missing references)
		if (npcChatText != "" || playerInventory || player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || InGuideCraftMenu)
		{
			CancelHairWindow();
			return;
		}
		if (!hairstylesUpdatedForThisInteraction)
		{
			hairstylesUpdatedForThisInteraction = true;
			Hairstyles.UpdateUnlocks();
		}
		int count = Hairstyles.AvailableHairstyles.Count;
		int num = screenHeight / 2 + 60;
		int num12 = screenWidth / 2 - TextureAssets.HairStyleBack.Width() / 2;
		int num23 = num + 42;
		int num28 = num12 + 22;
		int num29 = num12 + 234;
		int num30 = num + 18;
		selColor = player[myPlayer].hairColor;
		spriteBatch.Draw(TextureAssets.HairStyleBack.Value, new Vector2((float)num12, (float)num), (Rectangle?)new Rectangle(0, 0, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		Rectangle val = new Rectangle(num12, num, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height());
		if (((Rectangle)(ref val)).Contains(MouseScreen.ToPoint()))
		{
			int num31 = PlayerInput.ScrollWheelDelta / 120;
			num31 = -num31;
			int num32 = Math.Sign(num31);
			while (num31 != 0)
			{
				if (num31 < 0)
				{
					hairStart -= 5;
					SoundEngine.PlaySound(12);
				}
				else
				{
					hairStart += 5;
					SoundEngine.PlaySound(12);
				}
				num31 -= num32;
			}
		}
		if (mouseX > num12 && mouseX < num12 + TextureAssets.HairStyleBack.Width() && mouseY > num && mouseY < num + TextureAssets.HairStyleBack.Height())
		{
			player[myPlayer].mouseInterface = true;
		}
		int num33 = num29 - 18;
		int num2 = num30 + 74;
		if (hairStart > 1)
		{
			if (mouseX >= num33 && mouseX <= num33 + TextureAssets.CraftUpButton.Width() && mouseY >= num2 && mouseY <= num2 + TextureAssets.CraftUpButton.Height())
			{
				player[myPlayer].mouseInterface = true;
				if (mouseLeftRelease && mouseLeft)
				{
					hairStart -= 15;
					SoundEngine.PlaySound(12);
				}
			}
			spriteBatch.Draw(TextureAssets.ScrollLeftButton.Value, new Vector2((float)num33, (float)num2), (Rectangle?)new Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		if (hairStart + 15 < count)
		{
			num33 += 296;
			if (mouseX >= num33 && mouseX <= num33 + TextureAssets.CraftUpButton.Width() && mouseY >= num2 && mouseY <= num2 + TextureAssets.CraftUpButton.Height())
			{
				player[myPlayer].mouseInterface = true;
				if (mouseLeftRelease && mouseLeft)
				{
					hairStart += 15;
					SoundEngine.PlaySound(12);
				}
			}
			spriteBatch.Draw(TextureAssets.ScrollRightButton.Value, new Vector2((float)num33, (float)num2), (Rectangle?)new Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		if (hairStart + 15 >= count)
		{
			hairStart = count - 15;
		}
		if (hairStart < 0)
		{
			hairStart = 0;
		}
		int num3 = 0;
		if (oldHairStyle != player[myPlayer].hair)
		{
			num3 += 100000;
		}
		if (oldHairColor != player[myPlayer].hairColor)
		{
			num3 += 20000;
		}
		num3 = (int)((double)num3 * player[myPlayer].currentShoppingSettings.PriceAdjustment);
		num3 = (int)Math.Round((float)num3 / 10000f) * 10000;
		string text = "";
		string text2 = "";
		int num4 = 0;
		int num5 = 0;
		int num6 = 0;
		int num7 = 0;
		int num8 = num3;
		if (num8 < 0)
		{
			num8 = 0;
		}
		num3 = num8;
		if (num8 >= 1000000)
		{
			num4 = num8 / 1000000;
			num8 -= num4 * 1000000;
		}
		if (num8 >= 10000)
		{
			num5 = num8 / 10000;
			num8 -= num5 * 10000;
		}
		if (num8 >= 100)
		{
			num6 = num8 / 100;
			num8 -= num6 * 100;
		}
		if (num8 >= 1)
		{
			num7 = num8;
		}
		if (num4 > 0)
		{
			text2 = text2 + num4 + " " + Lang.inter[15].Value + " ";
		}
		if (num5 > 0)
		{
			text2 = text2 + num5 + " " + Lang.inter[16].Value + " ";
		}
		if (num6 > 0)
		{
			text2 = text2 + num6 + " " + Lang.inter[17].Value + " ";
		}
		if (num7 > 0)
		{
			text2 = text2 + num7 + " " + Lang.inter[18].Value + " ";
		}
		text = Language.GetTextValue("GameUI.BuyWithValue", text2);
		if (num3 == 0)
		{
			text = Language.GetTextValue("GameUI.Buy");
		}
		int num9 = (mouseTextColor * 2 + 255) / 3;
		Color color = default(Color);
		((Color)(ref color))._002Ector(num9, (int)((double)num9 / 1.1), num9 / 2, num9);
		float scale = 0.9f;
		string text3 = text;
		int num10 = num12 + 18;
		int num11 = num + 156;
		bool flag = false;
		if (num3 > 0)
		{
			ItemSlot.DrawSavings(spriteBatch, num10, num11 - 70, horizontal: true);
		}
		if (num3 > 0 && mouseX > num10 && (float)mouseX < (float)num10 + FontAssets.MouseText.Value.MeasureString(text3).X && mouseY > num11 && (float)mouseY < (float)num11 + FontAssets.MouseText.Value.MeasureString(text3).Y)
		{
			flag = true;
			scale = 1.1f;
			if (!npcChatFocus1)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus1 = true;
			player[myPlayer].releaseUseItem = false;
		}
		else
		{
			if (npcChatFocus1)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus1 = false;
		}
		Vector2 vector = FontAssets.MouseText.Value.MeasureString(text3);
		vector *= 0.5f;
		UILinkPointNavigator.SetPosition(2603, new Vector2((float)num10, (float)num11) + vector);
		for (int i = 0; i < 5; i++)
		{
			int num13 = num10;
			int num14 = num11;
			Color color2 = Color.Black;
			if (flag)
			{
				color2 = Color.Brown;
			}
			if (i == 0)
			{
				num13 -= 2;
			}
			if (i == 1)
			{
				num13 += 2;
			}
			if (i == 2)
			{
				num14 -= 2;
			}
			if (i == 3)
			{
				num14 += 2;
			}
			if (i == 4)
			{
				color2 = (Color)((num3 != 0) ? color : new Color(100, 100, 100));
			}
			spriteBatch.DrawString(FontAssets.MouseText.Value, text3, new Vector2((float)num13 + vector.X, (float)num14 + vector.Y), color2, 0f, vector, scale, (SpriteEffects)0, 0f);
		}
		scale = 0.9f;
		string textValue = Language.GetTextValue("GameUI.Cancel");
		num10 += 130;
		flag = false;
		if (mouseX > num10 && (float)mouseX < (float)num10 + FontAssets.MouseText.Value.MeasureString(textValue).X && mouseY > num11 && (float)mouseY < (float)num11 + FontAssets.MouseText.Value.MeasureString(textValue).Y)
		{
			flag = true;
			scale = 1.1f;
			if (!npcChatFocus2)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus2 = true;
			player[myPlayer].releaseUseItem = false;
		}
		else
		{
			if (npcChatFocus2)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus2 = false;
		}
		vector = FontAssets.MouseText.Value.MeasureString(textValue);
		vector *= 0.5f;
		UILinkPointNavigator.SetPosition(2604, new Vector2((float)num10, (float)num11) + vector);
		for (int j = 0; j < 5; j++)
		{
			int num15 = num10;
			int num16 = num11;
			Color color3 = Color.Black;
			if (flag)
			{
				color3 = Color.Brown;
			}
			if (j == 0)
			{
				num15 -= 2;
			}
			if (j == 1)
			{
				num15 += 2;
			}
			if (j == 2)
			{
				num16 -= 2;
			}
			if (j == 3)
			{
				num16 += 2;
			}
			if (j == 4)
			{
				color3 = color;
			}
			spriteBatch.DrawString(FontAssets.MouseText.Value, textValue, new Vector2((float)num15 + vector.X, (float)num16 + vector.Y), color3, 0f, vector, scale, (SpriteEffects)0, 0f);
		}
		if (mouseLeft && mouseLeftRelease)
		{
			if (npcChatFocus1)
			{
				if (player[myPlayer].BuyItem(num3))
				{
					BuyHairWindow();
					return;
				}
			}
			else if (npcChatFocus2)
			{
				CancelHairWindow();
				return;
			}
		}
		if (!mouseLeft)
		{
			grabColorSlider = 0;
			blockMouse = false;
		}
		int num17 = 167;
		Vector3 val2 = rgbToHsl(selColor);
		float num18 = val2.X;
		float num19 = val2.Y;
		float z = val2.Z;
		float num20 = (float)(int)((Color)(ref selColor)).A / 255f;
		if (hBar == -1f || sBar == -1f || lBar == -1f || aBar == -1f)
		{
			hBar = num18;
			sBar = num19;
			lBar = z;
			aBar = (float)(int)((Color)(ref selColor)).A / 255f;
		}
		else
		{
			num18 = hBar;
			num19 = sBar;
			z = lBar;
			aBar = num20;
		}
		UILinkPointNavigator.SetPosition(2600, new Vector2((float)num28, (float)num23) + TextureAssets.Hue.Value.Size() / 2f);
		spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2((float)num28, (float)num23), Color.White);
		if ((mouseX > num28 - 4 && mouseX < num28 + TextureAssets.Hue.Width() + 4 && mouseY > num23 - 4 && mouseY < num23 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 1)
		{
			spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num28, (float)num23), OurFavoriteColor);
		}
		spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num28 + (float)(TextureAssets.Hue.Width() - 2) * hBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num23 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
		if (((mouseX > num28 - 4 && mouseX < num28 + TextureAssets.Hue.Width() + 4 && mouseY > num23 - 4 && mouseY < num23 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 1) && mouseLeft && !blockMouse)
		{
			grabColorSlider = 1;
			num18 = mouseX - num28;
			num18 /= (float)TextureAssets.Hue.Width();
			if (num18 < 0f)
			{
				num18 = 0f;
			}
			if (num18 > 1f)
			{
				num18 = 1f;
			}
			hBar = num18;
		}
		num23 += 26;
		UILinkPointNavigator.SetPosition(2601, new Vector2((float)num28, (float)num23) + TextureAssets.ColorBar.Value.Size() / 2f);
		spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num28, (float)num23), Color.White);
		for (int k = 0; k <= num17; k++)
		{
			float saturation = (float)k / (float)num17;
			Color color4 = hslToRgb(num18, saturation, z);
			spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num28 + k + 5), (float)(num23 + 4)), color4);
		}
		if ((mouseX > num28 - 4 && mouseX < num28 + TextureAssets.Hue.Width() + 4 && mouseY > num23 - 4 && mouseY < num23 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 2)
		{
			spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num28, (float)num23), OurFavoriteColor);
		}
		spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num28 + (float)(TextureAssets.Hue.Width() - 2) * sBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num23 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
		if (((mouseX > num28 - 4 && mouseX < num28 + TextureAssets.Hue.Width() + 4 && mouseY > num23 - 4 && mouseY < num23 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 2) && mouseLeft && !blockMouse)
		{
			grabColorSlider = 2;
			num19 = mouseX - num28;
			num19 /= (float)TextureAssets.Hue.Width();
			if (num19 < 0f)
			{
				num19 = 0f;
			}
			if (num19 > 1f)
			{
				num19 = 1f;
			}
			sBar = num19;
		}
		num23 += 26;
		UILinkPointNavigator.SetPosition(2602, new Vector2((float)num28, (float)num23) + TextureAssets.ColorBar.Value.Size() / 2f);
		spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num28, (float)num23), Color.White);
		float num21 = 0.15f;
		for (int l = 0; l <= num17; l++)
		{
			float luminosity = (float)l / (float)num17;
			Color color5 = hslToRgb(num18, num19, luminosity);
			spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num28 + l + 5), (float)(num23 + 4)), color5);
		}
		if ((mouseX > num28 - 4 && mouseX < num28 + TextureAssets.Hue.Width() + 4 && mouseY > num23 - 4 && mouseY < num23 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 3)
		{
			spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num28, (float)num23), OurFavoriteColor);
		}
		spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num28 + (float)(TextureAssets.Hue.Width() - 2) * ((lBar - num21) / (1f - num21)) - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num23 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
		if (((mouseX > num28 - 4 && mouseX < num28 + TextureAssets.Hue.Width() + 4 && mouseY > num23 - 4 && mouseY < num23 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 3) && mouseLeft && !blockMouse)
		{
			grabColorSlider = 3;
			z = mouseX - num28;
			z /= (float)TextureAssets.Hue.Width();
			if (z < 0f)
			{
				z = 0f;
			}
			if (z > 1f)
			{
				z = 1f;
			}
			z = z * (1f - num21) + num21;
			lBar = z;
		}
		selColor = hslToRgb(hBar, sBar, lBar);
		player[myPlayer].hairColor = selColor;
		int num22 = num29;
		int num24 = num30;
		_ = hairStart;
		int num25 = 0;
		int num26 = 0;
		for (int m = 0; m < 15; m++)
		{
			int num27 = Hairstyles.AvailableHairstyles[hairStart + m];
			UILinkPointNavigator.SetPosition(2605 + m, new Vector2((float)num22, (float)num24) + TextureAssets.InventoryBack.Value.Size() * 0.75f);
			if (player[myPlayer].hair == num27)
			{
				spriteBatch.Draw(TextureAssets.InventoryBack14.Value, new Vector2((float)num22, (float)num24), (Rectangle?)new Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			else
			{
				spriteBatch.Draw(TextureAssets.InventoryBack8.Value, new Vector2((float)num22, (float)num24), (Rectangle?)new Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (mouseX > num22 && mouseX < num22 + TextureAssets.InventoryBack.Width() && mouseY > num24 && mouseY < num24 + TextureAssets.InventoryBack.Height())
			{
				Asset<Texture2D> asset = Assets.Request<Texture2D>("Images/UI/PanelBorder");
				Utils.DrawSplicedPanel(spriteBatch, asset.Value, num22, num24, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height(), asset.Width() / 2 - 1, asset.Width() / 2 - 1, asset.Height() / 2 - 1, asset.Height() / 2 - 1, OurFavoriteColor);
				if (mouseLeft && mouseLeftRelease)
				{
					mouseLeftRelease = false;
					player[myPlayer].hair = num27;
					SoundEngine.PlaySound(12);
				}
			}
			LoadHair(num27);
			float x = num22 + TextureAssets.InventoryBack.Width() / 2 - TextureAssets.PlayerHair[num27].Width() / 2;
			float y = num24 + 4;
			spriteBatch.Draw(TextureAssets.Players[num25, 0].Value, new Vector2(x, y), (Rectangle?)new Rectangle(0, 0, TextureAssets.PlayerHair[num27].Width(), 56), player[myPlayer].skinColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.Players[num25, 1].Value, new Vector2(x, y), (Rectangle?)new Rectangle(0, 0, TextureAssets.PlayerHair[num27].Width(), 56), new Color(255, 255, 255, 255), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.Players[num25, 2].Value, new Vector2(x, y), (Rectangle?)new Rectangle(0, 0, TextureAssets.PlayerHair[num27].Width(), 56), player[myPlayer].eyeColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			Vector2 vector2 = player[myPlayer].GetHairDrawOffset(num27, hatHair: false) * player[myPlayer].Directions;
			spriteBatch.Draw(TextureAssets.PlayerHair[num27].Value, new Vector2(x, y) + vector2, (Rectangle?)new Rectangle(0, 0, TextureAssets.PlayerHair[num27].Width(), 56), selColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			num26++;
			num22 += 56;
			if (num26 >= 5)
			{
				num26 = 0;
				num22 = num29;
				num24 += 56;
			}
		}
	}

	public static void OpenClothesWindow()
	{
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		if (clothesWindow)
		{
			CancelClothesWindow();
			return;
		}
		hBar = -1f;
		lBar = -1f;
		sBar = -1f;
		playerInventory = false;
		npcChatText = "";
		clothesWindow = true;
		SoundEngine.PlaySound(10);
		selClothes = 0;
		oldClothesColor[0] = player[myPlayer].shirtColor;
		oldClothesColor[1] = player[myPlayer].underShirtColor;
		oldClothesColor[2] = player[myPlayer].pantsColor;
		oldClothesColor[3] = player[myPlayer].shoeColor;
		oldClothesColor[4] = player[myPlayer].eyeColor;
		oldClothesColor[5] = player[myPlayer].skinColor;
		if (dresserInterfaceDummy == null)
		{
			dresserInterfaceDummy = new Player();
		}
		oldClothesStyle = player[myPlayer].skinVariant;
	}

	public static void CancelClothesWindow(bool quiet = false)
	{
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		if (clothesWindow)
		{
			clothesWindow = false;
			if (!quiet)
			{
				SoundEngine.PlaySound(11);
			}
			player[myPlayer].shirtColor = oldClothesColor[0];
			player[myPlayer].underShirtColor = oldClothesColor[1];
			player[myPlayer].pantsColor = oldClothesColor[2];
			player[myPlayer].shoeColor = oldClothesColor[3];
			player[myPlayer].eyeColor = oldClothesColor[4];
			player[myPlayer].skinColor = oldClothesColor[5];
			dresserInterfaceDummy.skinVariant = oldClothesStyle;
			dresserInterfaceDummy.Male = player[myPlayer].Male;
			player[myPlayer].skinVariant = dresserInterfaceDummy.skinVariant;
		}
	}

	public static void SaveClothesWindow()
	{
		SoundEngine.PlaySound(7);
		clothesWindow = false;
		NetMessage.SendData(4, -1, -1, null, myPlayer);
	}

	protected void DrawClothesWindow()
	{
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0314: Unknown result type (might be due to invalid IL or missing references)
		//IL_0324: Unknown result type (might be due to invalid IL or missing references)
		//IL_0339: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_041b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_042e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0433: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0453: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_05de: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0603: Unknown result type (might be due to invalid IL or missing references)
		//IL_0608: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0624: Unknown result type (might be due to invalid IL or missing references)
		//IL_0640: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0552: Unknown result type (might be due to invalid IL or missing references)
		//IL_0554: Unknown result type (might be due to invalid IL or missing references)
		//IL_055b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0560: Unknown result type (might be due to invalid IL or missing references)
		//IL_0576: Unknown result type (might be due to invalid IL or missing references)
		//IL_0581: Unknown result type (might be due to invalid IL or missing references)
		//IL_0589: Unknown result type (might be due to invalid IL or missing references)
		//IL_058e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0595: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_053d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0536: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_053f: Unknown result type (might be due to invalid IL or missing references)
		//IL_083c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0841: Unknown result type (might be due to invalid IL or missing references)
		//IL_070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0712: Unknown result type (might be due to invalid IL or missing references)
		//IL_0714: Unknown result type (might be due to invalid IL or missing references)
		//IL_071b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0720: Unknown result type (might be due to invalid IL or missing references)
		//IL_0736: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_0749: Unknown result type (might be due to invalid IL or missing references)
		//IL_074e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0755: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_090b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0910: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c03: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cfd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0edf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0efc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f01: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f19: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1306: Unknown result type (might be due to invalid IL or missing references)
		//IL_130b: Unknown result type (might be due to invalid IL or missing references)
		//IL_133a: Unknown result type (might be due to invalid IL or missing references)
		//IL_133f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1354: Unknown result type (might be due to invalid IL or missing references)
		//IL_1359: Unknown result type (might be due to invalid IL or missing references)
		//IL_136e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1373: Unknown result type (might be due to invalid IL or missing references)
		//IL_1388: Unknown result type (might be due to invalid IL or missing references)
		//IL_138d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1401: Unknown result type (might be due to invalid IL or missing references)
		//IL_1406: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1001: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_146d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1472: Unknown result type (might be due to invalid IL or missing references)
		//IL_1481: Unknown result type (might be due to invalid IL or missing references)
		//IL_1483: Unknown result type (might be due to invalid IL or missing references)
		//IL_149f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1412: Unknown result type (might be due to invalid IL or missing references)
		//IL_141c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1426: Unknown result type (might be due to invalid IL or missing references)
		//IL_142b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1107: Unknown result type (might be due to invalid IL or missing references)
		//IL_110c: Unknown result type (might be due to invalid IL or missing references)
		//IL_111e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1123: Unknown result type (might be due to invalid IL or missing references)
		//IL_1135: Unknown result type (might be due to invalid IL or missing references)
		//IL_113a: Unknown result type (might be due to invalid IL or missing references)
		//IL_114c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1151: Unknown result type (might be due to invalid IL or missing references)
		//IL_1163: Unknown result type (might be due to invalid IL or missing references)
		//IL_1168: Unknown result type (might be due to invalid IL or missing references)
		//IL_1197: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_117a: Unknown result type (might be due to invalid IL or missing references)
		//IL_117f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1250: Unknown result type (might be due to invalid IL or missing references)
		//IL_1262: Unknown result type (might be due to invalid IL or missing references)
		//IL_126c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1271: Unknown result type (might be due to invalid IL or missing references)
		//IL_1209: Unknown result type (might be due to invalid IL or missing references)
		//IL_1216: Unknown result type (might be due to invalid IL or missing references)
		//IL_1220: Unknown result type (might be due to invalid IL or missing references)
		//IL_122c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1232: Unknown result type (might be due to invalid IL or missing references)
		if (npcChatText != "" || playerInventory || player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC != -1 || InGuideCraftMenu)
		{
			CancelClothesWindow();
			return;
		}
		if (!LocalPlayer.IsInInteractionRangeToMultiTileHitbox(interactedDresserTopLeftX, interactedDresserTopLeftY) || !tile[interactedDresserTopLeftX, interactedDresserTopLeftY].active())
		{
			CancelClothesWindow();
			return;
		}
		int num = 477;
		int num12 = num / 2;
		num12 = 180;
		num = 511;
		num -= num / 2 - num12 - 26;
		int num17 = screenHeight / 2 + 60;
		int num18 = screenWidth / 2 - num / 2;
		int num19 = num17 + 32;
		int num20 = num18 + 22;
		num19 -= 16;
		int num21 = num18 + num - num12;
		int num22 = num17 + 18;
		if (selClothes == 0)
		{
			selColor = player[myPlayer].shirtColor;
		}
		if (selClothes == 1)
		{
			selColor = player[myPlayer].underShirtColor;
		}
		if (selClothes == 2)
		{
			selColor = player[myPlayer].pantsColor;
		}
		if (selClothes == 3)
		{
			selColor = player[myPlayer].shoeColor;
		}
		if (selClothes == 4)
		{
			selColor = player[myPlayer].eyeColor;
		}
		if (selClothes == 5)
		{
			selColor = player[myPlayer].skinColor;
		}
		Utils.DrawInvBG(spriteBatch, new Rectangle(num18, num17, num, 133));
		if (!PlayerInput.IgnoreMouseInterface && mouseX > num18 && mouseX < num18 + TextureAssets.ClothesStyleBack.Width() && mouseY > num17 && mouseY < num17 + TextureAssets.ClothesStyleBack.Height())
		{
			player[myPlayer].mouseInterface = true;
		}
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)(num18 + num / 2 - 16 - 28), (float)(num17 + 66 + dresserInterfaceDummy.height / 2 - 20));
		vector.Y += 18f;
		vector.X += 58f;
		Rectangle r = default(Rectangle);
		((Rectangle)(ref r))._002Ector((int)vector.X - dresserInterfaceDummy.width / 2 - 15, (int)vector.Y - dresserInterfaceDummy.height - 33, dresserInterfaceDummy.width + 30, dresserInterfaceDummy.height + 66);
		bool flag = ((Rectangle)(ref r)).Contains(MouseScreen.ToPoint());
		int num23 = selClothes;
		int num2 = (mouseTextColor * 2 + 255) / 3;
		Color color = default(Color);
		((Color)(ref color))._002Ector(num2, (int)((double)num2 / 1.1), num2 / 2, num2);
		float num3 = 0.9f;
		string textValue = Language.GetTextValue("GameUI.Change");
		int num4 = num18 + num - num12 + 22;
		num4 = num18 + 22;
		int num5 = num17 + 94;
		bool flag2 = false;
		if (oldClothesColor[0] != player[myPlayer].shirtColor || oldClothesColor[1] != player[myPlayer].underShirtColor || oldClothesColor[2] != player[myPlayer].pantsColor || oldClothesColor[3] != player[myPlayer].shoeColor || oldClothesColor[4] != player[myPlayer].eyeColor || oldClothesColor[5] != player[myPlayer].skinColor || oldClothesStyle != player[myPlayer].skinVariant)
		{
			flag2 = true;
		}
		Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(textValue);
		bool flag3 = false;
		UILinkPointNavigator.SetPosition(2803, new Vector2((float)num4, (float)num5) + vector2 * num3 * 0.5f);
		if (flag2 && mouseX > num4 && (float)mouseX < (float)num4 + vector2.X && mouseY > num5 && (float)mouseY < (float)num5 + vector2.Y)
		{
			flag3 = true;
			num3 = 1.1f;
			if (!npcChatFocus1)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus1 = true;
			player[myPlayer].releaseUseItem = false;
		}
		else
		{
			if (npcChatFocus1)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus1 = false;
		}
		for (int i = 0; i < 5; i++)
		{
			int num6 = num4;
			int num7 = num5;
			Color color2 = Color.Black;
			if (flag3)
			{
				color2 = Color.Brown;
			}
			if (i == 0)
			{
				num6 -= 2;
			}
			if (i == 1)
			{
				num6 += 2;
			}
			if (i == 2)
			{
				num7 -= 2;
			}
			if (i == 3)
			{
				num7 += 2;
			}
			if (i == 4)
			{
				color2 = (Color)(flag2 ? color : new Color(100, 100, 100));
			}
			Vector2 origin = FontAssets.MouseText.Value.MeasureString(textValue);
			origin *= 0.5f;
			spriteBatch.DrawString(FontAssets.MouseText.Value, textValue, new Vector2((float)num6 + origin.X, (float)num7 + origin.Y), color2, 0f, origin, num3, (SpriteEffects)0, 0f);
		}
		num3 = 0.9f;
		string textValue2 = Language.GetTextValue("GameUI.Cancel");
		num4 += 130;
		bool flag4 = false;
		vector2 = FontAssets.MouseText.Value.MeasureString(textValue2);
		UILinkPointNavigator.SetPosition(2804, new Vector2((float)num4, (float)num5) + vector2 * num3 * 0.5f);
		if (mouseX > num4 && (float)mouseX < (float)num4 + vector2.X && mouseY > num5 && (float)mouseY < (float)num5 + vector2.Y)
		{
			flag4 = true;
			num3 = 1.1f;
			if (!npcChatFocus2)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus2 = true;
			player[myPlayer].releaseUseItem = false;
		}
		else
		{
			if (npcChatFocus2)
			{
				SoundEngine.PlaySound(12);
			}
			npcChatFocus2 = false;
		}
		for (int j = 0; j < 5; j++)
		{
			int num8 = num4;
			int num9 = num5;
			Color color3 = Color.Black;
			if (flag4)
			{
				color3 = Color.Brown;
			}
			if (j == 0)
			{
				num8 -= 2;
			}
			if (j == 1)
			{
				num8 += 2;
			}
			if (j == 2)
			{
				num9 -= 2;
			}
			if (j == 3)
			{
				num9 += 2;
			}
			if (j == 4)
			{
				color3 = color;
			}
			Vector2 origin2 = FontAssets.MouseText.Value.MeasureString(textValue2);
			origin2 *= 0.5f;
			spriteBatch.DrawString(FontAssets.MouseText.Value, textValue2, new Vector2((float)num8 + origin2.X, (float)num9 + origin2.Y), color3, 0f, origin2, num3, (SpriteEffects)0, 0f);
		}
		if (mouseLeft && mouseLeftRelease)
		{
			if (npcChatFocus1)
			{
				SaveClothesWindow();
				return;
			}
			if (npcChatFocus2)
			{
				CancelClothesWindow();
				return;
			}
		}
		if (!mouseLeft)
		{
			grabColorSlider = 0;
			blockMouse = false;
		}
		int num10 = 167;
		Vector3 val = rgbToHsl(selColor);
		float num11 = val.X;
		float num13 = val.Y;
		float z = val.Z;
		if (hBar == -1f || sBar == -1f || lBar == -1f)
		{
			hBar = num11;
			sBar = num13;
			lBar = z;
		}
		else
		{
			num11 = hBar;
			num13 = sBar;
			z = lBar;
		}
		spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2((float)num20, (float)num19), Color.White);
		if ((mouseX > num20 - 4 && mouseX < num20 + TextureAssets.Hue.Width() + 4 && mouseY > num19 - 4 && mouseY < num19 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 1)
		{
			spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num20, (float)num19), OurFavoriteColor);
		}
		spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num20 + (float)(TextureAssets.Hue.Width() - 2) * hBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num19 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
		if (((mouseX > num20 - 4 && mouseX < num20 + TextureAssets.Hue.Width() + 4 && mouseY > num19 - 4 && mouseY < num19 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 1) && mouseLeft && !blockMouse)
		{
			grabColorSlider = 1;
			num11 = mouseX - num20;
			num11 /= (float)TextureAssets.Hue.Width();
			if (num11 < 0f)
			{
				num11 = 0f;
			}
			if (num11 > 1f)
			{
				num11 = 1f;
			}
			hBar = num11;
		}
		UILinkPointNavigator.SetPosition(2800, new Vector2((float)num20, (float)num19) + TextureAssets.Hue.Value.Size() / 2f);
		num19 += 26;
		spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num20, (float)num19), Color.White);
		for (int k = 0; k <= num10; k++)
		{
			float saturation = (float)k / (float)num10;
			Color color4 = hslToRgb(num11, saturation, z);
			spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num20 + k + 5), (float)(num19 + 4)), color4);
		}
		if ((mouseX > num20 - 4 && mouseX < num20 + TextureAssets.Hue.Width() + 4 && mouseY > num19 - 4 && mouseY < num19 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 2)
		{
			spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num20, (float)num19), OurFavoriteColor);
		}
		spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num20 + (float)(TextureAssets.Hue.Width() - 2) * sBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num19 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
		if (((mouseX > num20 - 4 && mouseX < num20 + TextureAssets.Hue.Width() + 4 && mouseY > num19 - 4 && mouseY < num19 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 2) && mouseLeft && !blockMouse)
		{
			grabColorSlider = 2;
			num13 = mouseX - num20;
			num13 /= (float)TextureAssets.Hue.Width();
			if (num13 < 0f)
			{
				num13 = 0f;
			}
			if (num13 > 1f)
			{
				num13 = 1f;
			}
			sBar = num13;
		}
		UILinkPointNavigator.SetPosition(2801, new Vector2((float)num20, (float)num19) + TextureAssets.Hue.Value.Size() / 2f);
		num19 += 26;
		spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num20, (float)num19), Color.White);
		float num14 = 0.15f;
		for (int l = 0; l <= num10; l++)
		{
			float luminosity = (float)l / (float)num10;
			Color color5 = hslToRgb(num11, num13, luminosity);
			spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num20 + l + 5), (float)(num19 + 4)), color5);
		}
		if ((mouseX > num20 - 4 && mouseX < num20 + TextureAssets.Hue.Width() + 4 && mouseY > num19 - 4 && mouseY < num19 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 3)
		{
			spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num20, (float)num19), OurFavoriteColor);
		}
		spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num20 + (float)(TextureAssets.Hue.Width() - 2) * ((lBar - num14) / (1f - num14)) - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num19 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
		if (((mouseX > num20 - 4 && mouseX < num20 + TextureAssets.Hue.Width() + 4 && mouseY > num19 - 4 && mouseY < num19 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 3) && mouseLeft && !blockMouse)
		{
			grabColorSlider = 3;
			z = mouseX - num20;
			z /= (float)TextureAssets.Hue.Width();
			if (z < 0f)
			{
				z = 0f;
			}
			if (z > 1f)
			{
				z = 1f;
			}
			z = z * (1f - num14) + num14;
			lBar = z;
		}
		UILinkPointNavigator.SetPosition(2802, new Vector2((float)num20, (float)num19) + TextureAssets.Hue.Value.Size() / 2f);
		selColor = hslToRgb(hBar, sBar, lBar);
		if (selClothes == 0)
		{
			player[myPlayer].shirtColor = selColor;
		}
		if (selClothes == 1)
		{
			player[myPlayer].underShirtColor = selColor;
		}
		if (selClothes == 2)
		{
			player[myPlayer].pantsColor = selColor;
		}
		if (selClothes == 3)
		{
			player[myPlayer].shoeColor = selColor;
		}
		if (selClothes == 4)
		{
			player[myPlayer].eyeColor = selColor;
		}
		if (selClothes == 5)
		{
			player[myPlayer].skinColor = selColor;
		}
		int num15 = num21;
		int num16 = num22;
		num16 -= 8;
		for (int m = 0; m < 6; m++)
		{
			if (num23 == m)
			{
				spriteBatch.Draw(TextureAssets.InventoryBack14.Value, new Vector2((float)num15, (float)num16), (Rectangle?)new Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			else
			{
				spriteBatch.Draw(TextureAssets.InventoryBack8.Value, new Vector2((float)num15, (float)num16), (Rectangle?)new Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height()), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			if (mouseX > num15 && mouseX < num15 + TextureAssets.InventoryBack.Width() && mouseY > num16 && mouseY < num16 + TextureAssets.InventoryBack.Height() && mouseLeft && mouseLeftRelease)
			{
				mouseLeftRelease = false;
				selClothes = m;
				SoundEngine.PlaySound(12);
				hBar = -1f;
				lBar = -1f;
				sBar = -1f;
			}
			float x = num15 + TextureAssets.InventoryBack.Width() / 2 - TextureAssets.Clothes[m].Width() / 2;
			float y = num16 + TextureAssets.InventoryBack.Height() / 2 - TextureAssets.Clothes[m].Height() / 2;
			Color color6 = Color.White;
			if (m == 0)
			{
				color6 = player[myPlayer].shirtColor;
			}
			if (m == 1)
			{
				color6 = player[myPlayer].underShirtColor;
			}
			if (m == 2)
			{
				color6 = player[myPlayer].pantsColor;
			}
			if (m == 3)
			{
				color6 = player[myPlayer].shoeColor;
			}
			if (m == 4)
			{
				color6 = player[myPlayer].eyeColor;
			}
			if (m == 5)
			{
				color6 = player[myPlayer].skinColor;
			}
			spriteBatch.Draw(TextureAssets.Clothes[m].Value, new Vector2(x, y), (Rectangle?)new Rectangle(0, 0, TextureAssets.Clothes[m].Width(), TextureAssets.Clothes[m].Height()), color6, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			if (m == 4)
			{
				Texture2D value = Assets.Request<Texture2D>("Images/UI/CharCreation/ColorEyeBack").Value;
				spriteBatch.Draw(value, new Vector2(x, y), (Rectangle?)value.Frame(), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			UILinkPointNavigator.SetPosition(2806 + m, new Vector2(x, y) + TextureAssets.Clothes[m].Value.Size() * 0.75f);
			num15 += 56;
			if (m == 1)
			{
				num15 -= 112;
				num16 += 56;
			}
			if (m == 3)
			{
				num16 -= 56;
			}
			if (m == 4)
			{
				num16 += 56;
				num15 -= 56;
			}
		}
		dresserInterfaceDummy.skinVariant = player[myPlayer].skinVariant;
		dresserInterfaceDummy.eyeColor = player[myPlayer].eyeColor;
		dresserInterfaceDummy.hairColor = player[myPlayer].hairColor;
		dresserInterfaceDummy.hair = player[myPlayer].hair;
		dresserInterfaceDummy.skinColor = player[myPlayer].skinColor;
		dresserInterfaceDummy.shirtColor = player[myPlayer].shirtColor;
		dresserInterfaceDummy.underShirtColor = player[myPlayer].underShirtColor;
		dresserInterfaceDummy.shoeColor = player[myPlayer].shoeColor;
		dresserInterfaceDummy.pantsColor = player[myPlayer].pantsColor;
		dresserInterfaceDummy.Bottom = screenPosition + vector;
		dresserInterfaceDummy.direction = -1;
		dresserInterfaceDummy.gravDir = 1f;
		dresserInterfaceDummy.PlayerFrame();
		dresserInterfaceDummy.socialIgnoreLight = true;
		Color c = new Color(46, 106, 98) * 0.6f;
		if (flag)
		{
			c = new Color(46, 106, 98) * 2f * 0.6f;
			if (mouseLeft && mouseLeftRelease)
			{
				mouseLeftRelease = false;
				SoundEngine.PlaySound(12);
				CycleClothingStyle(player[myPlayer]);
			}
		}
		UILinkPointNavigator.SetPosition(2805, ((Rectangle)(ref r)).Center.ToVector2());
		Utils.DrawInvBG(spriteBatch, r, c);
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)1, (BlendState)null, (SamplerState)null, (DepthStencilState)null, (RasterizerState)null, (Effect)null, UIScaleMatrix);
		PlayerRenderer.DrawPlayer(Camera, dresserInterfaceDummy, dresserInterfaceDummy.position, dresserInterfaceDummy.fullRotation, dresserInterfaceDummy.fullRotationOrigin);
	}

	private void DrawInterface_Tests()
	{
	}

	private void SetupDrawInterfaceLayers()
	{
		if (_needToSetupDrawInterfaceLayers)
		{
			_needToSetupDrawInterfaceLayers = false;
			_gameInterfaceLayers = new List<GameInterfaceLayer>();
			_gameInterfaceLayers.AddRange(new GameInterfaceLayer[43]
			{
				new LegacyGameInterfaceLayer("Vanilla: Interface Logic 1", delegate
				{
					DrawInterface_0_InterfaceLogic1();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: MP Player Names", delegate
				{
					DrawInterface_20_MultiplayerPlayerNames();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Emote Bubbles", delegate
				{
					DrawInterface_1_1_DrawEmoteBubblesInWorld();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Entity Markers", delegate
				{
					DrawInterface_1_2_DrawEntityMarkersInWorld();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Smart Cursor Targets", delegate
				{
					DrawInterface_2_SmartCursorTargets();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Laser Ruler", delegate
				{
					DrawInterface_3_LaserRuler();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Ruler", delegate
				{
					DrawInterface_4_Ruler();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Gamepad Lock On", delegate
				{
					DrawInterface_5_GamepadLockOn();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Tile Grid Option", delegate
				{
					DrawInterface_6_TileGridOption();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Town NPC House Banners", delegate
				{
					DrawInterface_7_TownNPCHouseBanners();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Hide UI Toggle", DrawInterface_8_CheckF11UIHideToggle, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Wire Selection", delegate
				{
					DrawInterface_9_WireSelection();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Capture Manager Check", DrawInterface_10_CheckCaptureManager),
				new LegacyGameInterfaceLayer("Vanilla: Ingame Options", DrawInterface_11_IngameOptionsMenu, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Fancy UI", DrawInterface_12_IngameFancyUI, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Achievement Complete Popups", delegate
				{
					DrawInterface_13_AchievementCompletePopups();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Entity Health Bars", delegate
				{
					DrawInterface_14_EntityHealthBars();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Invasion Progress Bars", delegate
				{
					DrawInterface_15_InvasionProgressBars();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Map / Minimap", delegate
				{
					DrawInterface_16_MapOrMinimap();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Diagnose Net", delegate
				{
					DrawInterface_17_DiagnoseNet();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Diagnose Video", delegate
				{
					DrawInterface_18_DiagnoseVideo();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Sign Tile Bubble", delegate
				{
					DrawInterface_19_SignTileBubble();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Hair Window", delegate
				{
					DrawInterface_21_HairWindow();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Dresser Window", delegate
				{
					DrawInterface_22_DresserWindow();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: NPC / Sign Dialog", delegate
				{
					DrawInterface_23_NPCSignsDialog();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Interface Logic 2", delegate
				{
					DrawInterface_24_InterfaceLogic2();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Resource Bars", delegate
				{
					DrawInterface_25_ResourceBars();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Interface Logic 3", delegate
				{
					DrawInterface_26_InterfaceLogic3();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Inventory", delegate
				{
					DrawInterface_27_Inventory();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Info Accessories Bar", delegate
				{
					DrawInterface_28_InfoAccs();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Settings Button", delegate
				{
					DrawInterface_29_SettingsButton();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Hotbar", delegate
				{
					DrawInterface_30_Hotbar();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Builder Accessories Bar", delegate
				{
					DrawInterface_31_BuilderAccToggles();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Radial Hotbars", delegate
				{
					DrawInterface_32_GamepadRadialHotbars();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Mouse Text", delegate
				{
					DrawInterface_33_MouseText();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Player Chat", delegate
				{
					DrawInterface_34_PlayerChat();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Death Text", delegate
				{
					DrawInterface_35_YouDied();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Cursor", delegate
				{
					DrawInterface_36_Cursor();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Debug Stuff", delegate
				{
					DrawInterface_37_DebugStuff();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Mouse Item / NPC Head", delegate
				{
					DrawInterface_38_MouseCarriedObject();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Mouse Over", delegate
				{
					DrawInterface_39_MouseOver();
					return true;
				}),
				new LegacyGameInterfaceLayer("Vanilla: Interact Item Icon", delegate
				{
					DrawInterface_40_InteractItemIcon();
					return true;
				}, InterfaceScaleType.UI),
				new LegacyGameInterfaceLayer("Vanilla: Interface Logic 4", delegate
				{
					DrawInterface_41_InterfaceLogic4();
					return true;
				}, InterfaceScaleType.UI)
			});
		}
	}

	protected void DrawInterface(GameTime gameTime)
	{
		_drawInterfaceGameTime = gameTime;
		if (_needToSetupDrawInterfaceLayers)
		{
			SetupDrawInterfaceLayers();
		}
		PlayerInput.SetZoom_UI();
		List<GameInterfaceLayer> list = new List<GameInterfaceLayer>(_gameInterfaceLayers);
		SystemLoader.ModifyInterfaceLayers(list);
		using (List<GameInterfaceLayer>.Enumerator enumerator = list.GetEnumerator())
		{
			while (enumerator.MoveNext() && enumerator.Current.Draw())
			{
			}
		}
		PlayerInput.SetZoom_World();
	}

	private static void DrawWallOfCopperShortswords()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		UnifiedRandom r = new UnifiedRandom(5000);
		Texture2D value = TextureAssets.Cloud[28].Value;
		Vector2 vector = ScreenSize.ToVector2();
		spriteBatch.Begin();
		for (int i = 0; i < 20000; i++)
		{
			Vector2 vector2 = r.NextVector2Square(-0.1f, 1.1f);
			vector2.X -= 0.1f;
			vector2.X += GlobalTimeWrappedHourly % 10f / 10f * 1.2f;
			vector2.Y -= GlobalTimeWrappedHourly % 10f / 10f;
			if (vector2.Y < -0.2f)
			{
				vector2.Y += 1.4f;
			}
			if (vector2.X > 1.1f)
			{
				vector2.X -= 1.2f;
			}
			Vector2 position = vector2 * vector;
			spriteBatch.Draw(value, position, Color.White);
		}
		spriteBatch.End();
	}

	private static void DrawWallOfBoulders()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		UnifiedRandom r = new UnifiedRandom(5000);
		instance.LoadProjectile(99);
		Texture2D value = TextureAssets.Projectile[99].Value;
		Vector2 vector = ScreenSize.ToVector2();
		spriteBatch.Begin();
		for (int i = 0; i < 20000; i++)
		{
			Vector2 vector2 = r.NextVector2Square(-0.1f, 1.1f);
			vector2.X *= 0.1f;
			vector2.X -= 0.1f;
			vector2.X += GlobalTimeWrappedHourly % 10f / 10f * 1.2f;
			vector2.Y -= GlobalTimeWrappedHourly % 10f / 10f;
			if (vector2.Y < -0.2f)
			{
				vector2.Y += 1.4f;
			}
			if (vector2.X > 1.1f)
			{
				vector2.X -= 1.2f;
			}
			Vector2 position = vector2 * vector;
			spriteBatch.Draw(value, position, Color.White);
		}
		spriteBatch.End();
	}

	private static void DrawInterface_41_InterfaceLogic4()
	{
		if (mouseRight)
		{
			npcChatRelease = false;
		}
		else
		{
			npcChatRelease = true;
		}
		_MouseOversCanClear = true;
		DrawPendingMouseText();
		cursorOverride = -1;
	}

	private static void DrawPendingMouseText()
	{
		DrawGamepadInstructions();
		if (instance._mouseTextCache.isValid)
		{
			instance.MouseTextInner(instance._mouseTextCache);
			DrawInterface_36_Cursor();
			instance._mouseTextCache.isValid = false;
			instance._mouseTextCache.noOverride = false;
		}
	}

	private void DrawInterface_40_InteractItemIcon()
	{
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0281: Unknown result type (might be due to invalid IL or missing references)
		//IL_039f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0307: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0324: Unknown result type (might be due to invalid IL or missing references)
		//IL_0430: Unknown result type (might be due to invalid IL or missing references)
		//IL_045c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0466: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		if (HoveringOverAnNPC || LocalPlayer.mouseInterface)
		{
			return;
		}
		Item item = player[myPlayer].inventory[player[myPlayer].selectedItem];
		int num = item.type;
		if (player[myPlayer].UsingBiomeTorches)
		{
			switch (num)
			{
			case 8:
				num = player[myPlayer].BiomeTorchHoldStyle(num);
				break;
			case 966:
				num = player[myPlayer].BiomeCampfireHoldStyle(num);
				break;
			}
		}
		if (player[myPlayer].cursorItemIconID != 0)
		{
			num = player[myPlayer].cursorItemIconID;
		}
		bool flag = player[myPlayer].cursorItemIconEnabled && (player[myPlayer].inventory[player[myPlayer].selectedItem].type > 0 || player[myPlayer].cursorItemIconID != 0);
		ItemIconCacheVerification();
		bool flag2 = _itemIconCacheTime > 0 && mouseItem.type < 1;
		if (!(flag || flag2))
		{
			return;
		}
		int t = _itemIconCacheSelectedItemID;
		if (!flag)
		{
			Utils.Swap(ref t, ref player[myPlayer].cursorItemIconID);
		}
		Color currentColor = player[myPlayer].inventory[player[myPlayer].selectedItem].GetAlpha(Color.White);
		Color color = player[myPlayer].inventory[player[myPlayer].selectedItem].GetColor(Color.White);
		if (player[myPlayer].cursorItemIconID != 0)
		{
			currentColor = Color.White;
			color = default(Color);
		}
		if (player[myPlayer].cursorItemIconID == 269)
		{
			currentColor = player[myPlayer].shirtColor;
		}
		float num2 = 1f;
		num2 = cursorScale;
		ItemSlot.GetItemLight(ref currentColor, num);
		SpriteEffects effects = (SpriteEffects)0;
		if (player[myPlayer].cursorItemIconReversed)
		{
			effects = (SpriteEffects)1;
		}
		if (num > 0)
		{
			int num3 = 10 + player[myPlayer].cursorItemIconPush;
			instance.LoadItem(num);
			spriteBatch.Draw(TextureAssets.Item[num].Value, new Vector2((float)(mouseX + num3), (float)(mouseY + num3)), (Rectangle?)Item.GetDrawHitbox(num, null), currentColor, 0f, default(Vector2), num2, effects, 0f);
			if (num == item.type && TryGetAmmo(item, out var ammoItem, out var ammoColor, out var ammoScale, out var ammoOffset))
			{
				float scale = num2 * ammoScale;
				int type = ammoItem.type;
				Color alpha = ammoItem.GetAlpha(ammoColor);
				instance.LoadItem(type);
				spriteBatch.Draw(TextureAssets.Item[type].Value, new Vector2((float)(mouseX + 10), (float)(mouseY + 10)) + ammoOffset, (Rectangle?)Item.GetDrawHitbox(type, null), alpha, 0f, default(Vector2), scale, effects, 0f);
			}
		}
		if (player[myPlayer].cursorItemIconText != "")
		{
			MouseText(player[myPlayer].cursorItemIconText, 0, 0);
		}
		if (player[myPlayer].cursorItemIconID == 0 && player[myPlayer].inventory[player[myPlayer].selectedItem].color != default(Color))
		{
			instance.LoadItem(player[myPlayer].inventory[player[myPlayer].selectedItem].type);
			spriteBatch.Draw(TextureAssets.Item[player[myPlayer].inventory[player[myPlayer].selectedItem].type].Value, new Vector2((float)(mouseX + 10), (float)(mouseY + 10)), (Rectangle?)Item.GetDrawHitbox(player[myPlayer].inventory[player[myPlayer].selectedItem].type, null), color, 0f, default(Vector2), num2, (SpriteEffects)0, 0f);
		}
		if (!flag)
		{
			Utils.Swap(ref t, ref player[myPlayer].cursorItemIconID);
		}
	}

	private bool TryGetAmmo(Item sourceItem, out Item ammoItem, out Color ammoColor, out float ammoScale, out Vector2 ammoOffset)
	{
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		ammoItem = null;
		ammoColor = Color.White;
		ammoScale = 0.8f;
		ammoOffset = Vector2.Zero;
		int type = sourceItem.type;
		if (type == 1071 || type == 1543 || type == 1072 || type == 1544)
		{
			int num = 22;
			int num2 = 22;
			if (type == 1072 || type == 1544)
			{
				num = 28;
				num2 = 28;
			}
			ammoOffset = new Vector2((float)num, (float)num2);
			ammoItem = player[myPlayer].FindPaintOrCoating();
			return ammoItem != null;
		}
		FlexibleTileWand flexibleTileWand = sourceItem.GetFlexibleTileWand();
		if (flexibleTileWand != null && flexibleTileWand.TryGetPlacementOption(LocalPlayer, Player.FlexibleWandRandomSeed, Player.FlexibleWandCycleOffset, out var _, out ammoItem))
		{
			ammoOffset = new Vector2(28f, 28f);
			return true;
		}
		return false;
	}

	private void DrawInterface_39_MouseOver()
	{
		if (ignoreErrors)
		{
			try
			{
				DrawMouseOver();
				return;
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
				return;
			}
		}
		DrawMouseOver();
	}

	private void DrawInterface_38_MouseCarriedObject()
	{
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		if (mouseItem.type > 0 && mouseItem.stack > 0)
		{
			SetMouseNPC(-1, -1);
			player[myPlayer].cursorItemIconEnabled = false;
			player[myPlayer].cursorItemIconID = 0;
			mouseText = true;
			float num5 = inventoryScale;
			inventoryScale = cursorScale;
			ItemSlot.Draw(spriteBatch, ref mouseItem, 21, new Vector2((float)mouseX, (float)mouseY));
			inventoryScale = num5;
		}
		else
		{
			if (mouseNPCType <= -1)
			{
				return;
			}
			float num2 = 1f;
			num2 *= cursorScale;
			if (mouseNPCIndex >= 0)
			{
				NPC nPC = npc[mouseNPCIndex];
				if (!nPC.active || nPC.type != mouseNPCType)
				{
					SetMouseNPC_ToHousingQuery();
				}
			}
			int type = mouseNPCType;
			int num3 = ((mouseNPCIndex >= 0) ? TownNPCProfiles.GetHeadIndexSafe(npc[mouseNPCIndex]) : NPC.TypeToDefaultHeadIndex(type));
			Texture2D value = TextureAssets.NpcHead[num3].Value;
			spriteBatch.Draw(value, new Vector2((float)mouseX + 26f * num2 - (float)value.Width * 0.5f * num2, (float)mouseY + 26f * num2 - (float)value.Height * 0.5f * num2), (Rectangle?)null, Color.White, 0f, default(Vector2), num2, (SpriteEffects)0, 0f);
			if (PlayerInput.IgnoreMouseInterface)
			{
				return;
			}
			player[myPlayer].mouseInterface = true;
			mouseText = false;
			if (mouseRight && mouseRightRelease)
			{
				SoundEngine.PlaySound(12);
				SetMouseNPC(-1, -1);
			}
			if (!mouseLeft || !mouseLeftRelease)
			{
				return;
			}
			if (mouseNPCType == 0)
			{
				PlayerInput.SetZoom_Unscaled();
				PlayerInput.SetZoom_MouseInWorld();
				int x3 = (int)(((float)mouseX + screenPosition.X) / 16f);
				int y = (int)(((float)mouseY + screenPosition.Y) / 16f);
				if (player[myPlayer].gravDir == -1f)
				{
					y = (int)((screenPosition.Y + (float)screenHeight - (float)mouseY) / 16f);
				}
				PlayerInput.SetZoom_Unscaled();
				int i = -1;
				if (WorldGen.MoveTownNPC(x3, y, i))
				{
					NewText(Lang.inter[39].Value, byte.MaxValue, 240, 20);
				}
				return;
			}
			int num4 = mouseNPCIndex;
			if (num4 >= 0)
			{
				PlayerInput.SetZoom_Unscaled();
				PlayerInput.SetZoom_MouseInWorld();
				int x2 = (int)(((float)mouseX + screenPosition.X) / 16f);
				int y2 = (int)(((float)mouseY + screenPosition.Y) / 16f);
				PlayerInput.SetZoom_Unscaled();
				if (WorldGen.MoveTownNPC(x2, y2, num4))
				{
					SetMouseNPC(-1, -1);
					WorldGen.moveRoom(x2, y2, num4);
					SoundEngine.PlaySound(12);
				}
			}
		}
	}

	private static void DrawInterface_37_DebugStuff()
	{
	}

	private static void DrawInterface_36_Cursor()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, UIScaleMatrix);
		if (cursorOverride != -1)
		{
			Color color = default(Color);
			((Color)(ref color))._002Ector((int)((float)(int)((Color)(ref cursorColor)).R * 0.2f), (int)((float)(int)((Color)(ref cursorColor)).G * 0.2f), (int)((float)(int)((Color)(ref cursorColor)).B * 0.2f), (int)((float)(int)((Color)(ref cursorColor)).A * 0.5f));
			Color white = cursorColor;
			bool flag = true;
			bool flag2 = true;
			float rotation = 0f;
			Vector2 vector = default(Vector2);
			float num = 1f;
			if (cursorOverride == 2)
			{
				flag = false;
				white = Color.White;
				num = 0.7f;
				((Vector2)(ref vector))._002Ector(0.1f);
			}
			switch (cursorOverride)
			{
			case 2:
				flag = false;
				white = Color.White;
				num = 0.7f;
				((Vector2)(ref vector))._002Ector(0.1f);
				break;
			case 3:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
				flag = false;
				white = Color.White;
				break;
			}
			if (flag)
			{
				spriteBatch.Draw(TextureAssets.Cursors[cursorOverride].Value, new Vector2((float)(mouseX + 1), (float)(mouseY + 1)), (Rectangle?)null, color, rotation, vector * TextureAssets.Cursors[cursorOverride].Value.Size(), cursorScale * 1.1f * num, (SpriteEffects)0, 0f);
			}
			if (flag2)
			{
				spriteBatch.Draw(TextureAssets.Cursors[cursorOverride].Value, new Vector2((float)mouseX, (float)mouseY), (Rectangle?)null, white, rotation, vector * TextureAssets.Cursors[cursorOverride].Value.Size(), cursorScale * num, (SpriteEffects)0, 0f);
			}
		}
		else if (SmartCursorIsUsed)
		{
			DrawCursor(DrawThickCursor(smart: true), smart: true);
		}
		else
		{
			DrawCursor(DrawThickCursor());
		}
	}

	private static void DrawInterface_35_YouDied()
	{
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		if (player[myPlayer].dead)
		{
			float num = -60f;
			string value = Lang.inter[38].Value;
			spriteBatch.DrawString(FontAssets.DeathText.Value, value, new Vector2((float)(screenWidth / 2) - FontAssets.DeathText.Value.MeasureString(value).X / 2f, (float)(screenHeight / 2) + num), player[myPlayer].GetDeathAlpha(Color.Transparent), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			if (player[myPlayer].lostCoins > 0)
			{
				num += 50f;
				string textValue = Language.GetTextValue("Game.DroppedCoins", player[myPlayer].lostCoinString);
				spriteBatch.DrawString(FontAssets.MouseText.Value, textValue, new Vector2((float)(screenWidth / 2) - FontAssets.MouseText.Value.MeasureString(textValue).X / 2f, (float)(screenHeight / 2) + num), player[myPlayer].GetDeathAlpha(Color.Transparent), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
			num += (float)((player[myPlayer].lostCoins > 0) ? 24 : 50);
			num += 20f;
			float num2 = 0.7f;
			string textValue2 = Language.GetTextValue("Game.RespawnInSuffix", ((float)(int)(1f + (float)player[myPlayer].respawnTimer / 60f)).ToString());
			spriteBatch.DrawString(FontAssets.DeathText.Value, textValue2, new Vector2((float)(screenWidth / 2) - FontAssets.MouseText.Value.MeasureString(textValue2).X * num2 / 2f, (float)(screenHeight / 2) + num), player[myPlayer].GetDeathAlpha(Color.Transparent), 0f, default(Vector2), num2, (SpriteEffects)0, 0f);
		}
	}

	private void DrawInterface_34_PlayerChat()
	{
		if (ignoreErrors)
		{
			try
			{
				DrawPlayerChat();
				return;
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
				return;
			}
		}
		DrawPlayerChat();
	}

	private void DrawInterface_33_MouseText()
	{
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		SystemLoader.PostDrawInterface(spriteBatch);
		if (mouseItem.stack <= 0)
		{
			mouseItem.type = 0;
		}
		if (hoverItemName != null && hoverItemName != "" && mouseItem.type == 0)
		{
			player[myPlayer].cursorItemIconEnabled = false;
			if (SettingsEnabled_OpaqueBoxBehindTooltips)
			{
				MouseText(hoverItemName, rare, 0, mouseX + 6, mouseY + 6);
			}
			else
			{
				MouseText(hoverItemName, rare, 0);
			}
			mouseText = true;
		}
		if (LocalPlayer.rulerLine && LocalPlayer.builderAccStatus[0] == 0 && ((Vector2)(ref LocalPlayer.velocity)).Length() <= 6f)
		{
			int num = Math.Abs(rulerLineDisplayValues.X) + 1;
			int num2 = Math.Abs(rulerLineDisplayValues.Y) + 1;
			if (num > 1 || num2 > 1)
			{
				Utils.DrawBorderString(spriteBatch, num + "x" + num2, MouseScreen + new Vector2(16f, 0f), new Color(0.24f, 0.8f, 0.9f, 1f), GameZoomTarget, 0f, 0.8f);
			}
		}
		DrawInterface_InstrumentMouseText();
	}

	private void DrawInterface_InstrumentMouseText()
	{
		Player localPlayer = LocalPlayer;
		if (_mouseTextCache.isValid || signHover > -1 || localPlayer.cursorItemIconID > 0 || localPlayer.selectedItem == 58 || (localPlayer.rulerLine && localPlayer.builderAccStatus[0] == 0) || localPlayer.mouseInterface)
		{
			instrumentMouseFixHack = 3;
			return;
		}
		if (instrumentMouseFixHack > 0)
		{
			instrumentMouseFixHack--;
			return;
		}
		int type = localPlayer.inventory[localPlayer.selectedItem].type;
		if (type == 4057 || type == 4372 || type == 4715 || type == 4673)
		{
			float musicDist = localPlayer.musicDist;
			string text = "GameUI.GuitarAm";
			if (type == 4673)
			{
				int num = 10;
				float num2 = 1f / (float)num;
				text = ((musicDist > num2 * 9f) ? "GameUI.DrumCymbol" : ((musicDist > num2 * 8f) ? "GameUI.DrumCymbol1" : ((musicDist > num2 * 7f) ? "GameUI.DrumHiHat" : ((musicDist > num2 * 6f) ? "GameUI.DrumClosedHiHat" : ((musicDist > num2 * 5f) ? "GameUI.DrumFloorTom" : ((musicDist > num2 * 4f) ? "GameUI.DrumTamaSnare" : ((musicDist > num2 * 3f) ? "GameUI.DrumTomHigh" : ((musicDist > num2 * 2f) ? "GameUI.DrumTomMid" : ((!(musicDist > num2 * 1f)) ? "GameUI.DrumKick" : "GameUI.DrumTomLow")))))))));
			}
			else
			{
				int num3 = 6;
				float num4 = 1f / (float)num3;
				text = ((musicDist > num4 * 5f) ? "GameUI.GuitarEm" : ((musicDist > num4 * 4f) ? "GameUI.GuitarD" : ((musicDist > num4 * 3f) ? "GameUI.GuitarC" : ((musicDist > num4 * 2f) ? "GameUI.GuitarBm" : ((!(musicDist > num4 * 1f)) ? "GameUI.GuitarG" : "GameUI.GuitarAm")))));
			}
			MouseText(Language.GetTextValue(Language.GetTextValue(text)), 0, 0);
		}
	}

	private static void DrawInterface_32_GamepadRadialHotbars()
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		ItemSlot.DrawRadialCircular(spriteBatch, new Vector2((float)screenWidth, (float)screenHeight) / 2f, LocalPlayer.CircularRadial, LocalPlayer.inventory);
		ItemSlot.DrawRadialQuicks(spriteBatch, new Vector2((float)screenWidth, (float)screenHeight) / 2f);
	}

	private void DrawInterface_31_BuilderAccToggles()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		DrawBuilderAccToggles(new Vector2(10f, 77f));
	}

	public static void DrawInterface_29_SettingsButton()
	{
		_settingsButtonIsPushedToSide = false;
		if (playerInventory || ingameOptionsWindow || player[myPlayer].ghost || player[myPlayer].dead)
		{
			string value = Lang.inter[62].Value;
			string textSizeMatcher = "Settings";
			int num = screenWidth - 110;
			int num2 = screenHeight - 20;
			int num3 = 620;
			int num4 = 870;
			int amountOfExtraAccessorySlotsToShow = player[myPlayer].GetAmountOfExtraAccessorySlotsToShow();
			if (amountOfExtraAccessorySlotsToShow > 1)
			{
				int num5 = (int)(56f * inventoryScale * (float)(amountOfExtraAccessorySlotsToShow - 1));
				num3 += num5;
				num4 += num5;
			}
			Action clickAction = IngameOptions.Open;
			if (ingameOptionsWindow)
			{
				clickAction = IngameOptions.Close;
			}
			DrawSettingButton(ref mouseExit, ref exitScale, num, num2, value, textSizeMatcher, clickAction);
		}
	}

	public static void DrawSettingButton(ref bool mouseOver, ref float scale, int posX, int posY, string text, string textSizeMatcher, Action clickAction)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		Vector2 val = FontAssets.MouseText.Value.MeasureString(textSizeMatcher);
		Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(text);
		Vector2 vector3 = FontAssets.DeathText.Value.MeasureString(text);
		float num = val.X / vector2.X;
		if (mouseOver)
		{
			if ((double)scale < 0.96)
			{
				scale += 0.02f;
			}
		}
		else if ((double)scale > 0.8)
		{
			scale -= 0.02f;
		}
		UILinkPointNavigator.SetPosition(308, new Vector2((float)posX, (float)posY));
		for (int i = 0; i < 5; i++)
		{
			int num2 = 0;
			int num3 = 0;
			Color color = Color.Black;
			if (i == 0)
			{
				num2 = -2;
			}
			if (i == 1)
			{
				num2 = 2;
			}
			if (i == 2)
			{
				num3 = -2;
			}
			if (i == 3)
			{
				num3 = 2;
			}
			if (i == 4)
			{
				color = Color.White;
			}
			spriteBatch.DrawString(FontAssets.DeathText.Value, text, new Vector2((float)(posX + num2), (float)(posY + num3)), color, 0f, new Vector2(vector3.X / 2f, vector3.Y / 2f), (scale - 0.2f) * num, (SpriteEffects)0, 0f);
		}
		if ((float)mouseX > (float)posX - vector3.X / 2f && (float)mouseX < (float)posX + vector3.X / 2f && (float)mouseY > (float)posY - vector3.Y / 2f && (float)mouseY < (float)posY + vector3.Y / 2f - 10f && !LocalPlayer.mouseInterface)
		{
			if (!PlayerInput.IgnoreMouseInterface)
			{
				if (!mouseOver)
				{
					SoundEngine.PlaySound(12);
				}
				mouseOver = true;
				player[myPlayer].mouseInterface = true;
				if (mouseLeftRelease && mouseLeft)
				{
					mouseOver = false;
					scale = 0.8f;
					clickAction();
				}
			}
		}
		else
		{
			mouseOver = false;
		}
	}

	private void DrawInterface_28_InfoAccs()
	{
		float num = inventoryScale;
		inventoryScale = 0.6f;
		DrawInfoAccs();
		inventoryScale = num;
	}

	private void HackForGamepadInputHell()
	{
		if (PlayerInput.SettingsForUI.ShowGamepadHints)
		{
			PlayerInput.ComposeInstructionsForGamepad();
			PlayerInput.AllowExecutionOfGamepadInstructions = false;
		}
	}

	private void DrawInterface_27_Inventory()
	{
		HackForGamepadInputHell();
		if (playerInventory)
		{
			if (player[myPlayer].chest != -1)
			{
				CreativeMenu.CloseMenu();
			}
			if (ignoreErrors)
			{
				try
				{
					DrawInventory();
					return;
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					return;
				}
			}
			DrawInventory();
		}
		else
		{
			CreativeMenu.CloseMenu();
			recFastScroll = true;
			SetMouseNPC(-1, -1);
			EquipPage = 0;
		}
	}

	private static void DrawInterface_26_InterfaceLogic3()
	{
		bool flag = playerInventory;
		if (player[myPlayer].dead)
		{
			playerInventory = false;
		}
		if (!playerInventory)
		{
			player[myPlayer].chest = -1;
			InGuideCraftMenu = false;
			InReforgeMenu = false;
			if (flag)
			{
				Recipe.FindRecipes();
			}
		}
		hoverItemName = "";
	}

	private void DrawInterface_25_ResourceBars()
	{
		GUIBarsDraw();
	}

	private static void DrawInterface_24_InterfaceLogic2()
	{
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		invAlpha += invDir * 0.2f;
		if (invAlpha > 240f)
		{
			invAlpha = 240f;
			invDir = -1f;
		}
		if (invAlpha < 180f)
		{
			invAlpha = 180f;
			invDir = 1f;
		}
		inventoryBack = new Color((int)(byte)invAlpha, (int)(byte)invAlpha, (int)(byte)invAlpha, (int)(byte)invAlpha);
		mouseText = false;
		rare = 0;
	}

	private void DrawInterface_23_NPCSignsDialog()
	{
		GUIChatDraw();
	}

	private void DrawInterface_22_DresserWindow()
	{
		if (clothesWindow)
		{
			DrawClothesWindow();
		}
	}

	private void DrawInterface_21_HairWindow()
	{
		if (hairWindow)
		{
			DrawHairWindow();
		}
		else
		{
			hairstylesUpdatedForThisInteraction = false;
		}
	}

	private static void DrawInterface_20_MultiplayerPlayerNames()
	{
		ActiveClosePlayersTeamOverlay.Draw();
	}

	private static void DrawInterface_19_SignTileBubble()
	{
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		if (signBubble)
		{
			int num = (int)((float)signX - screenPosition.X);
			int num2 = (int)((float)signY - screenPosition.Y);
			if (player[myPlayer].gravDir == -1f)
			{
				num2 = screenHeight - (int)((float)signY - screenPosition.Y) - 32;
			}
			SpriteEffects effects = (SpriteEffects)0;
			if ((float)signX > player[myPlayer].position.X + (float)player[myPlayer].width)
			{
				effects = (SpriteEffects)1;
				num += -8 - TextureAssets.Chat2.Width();
			}
			else
			{
				num += 8;
			}
			num2 -= 22;
			spriteBatch.Draw(TextureAssets.Chat2.Value, new Vector2((float)num, (float)num2), (Rectangle?)new Rectangle(0, 0, TextureAssets.Chat2.Width(), TextureAssets.Chat2.Height()), new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, default(Vector2), 1f, effects, 0f);
			signBubble = false;
		}
	}

	private static void DrawInterface_18_DiagnoseVideo()
	{
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0445: Unknown result type (might be due to invalid IL or missing references)
		//IL_044a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0456: Unknown result type (might be due to invalid IL or missing references)
		//IL_045c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0306: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_031d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0595: Unknown result type (might be due to invalid IL or missing references)
		//IL_059a: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_05fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0602: Unknown result type (might be due to invalid IL or missing references)
		//IL_060e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0614: Unknown result type (might be due to invalid IL or missing references)
		//IL_0674: Unknown result type (might be due to invalid IL or missing references)
		//IL_0679: Unknown result type (might be due to invalid IL or missing references)
		//IL_0685: Unknown result type (might be due to invalid IL or missing references)
		//IL_068b: Unknown result type (might be due to invalid IL or missing references)
		//IL_06eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0702: Unknown result type (might be due to invalid IL or missing references)
		if (!drawDiag)
		{
			return;
		}
		if (PlayerInput.UsingGamepad)
		{
			for (int i = 0; i < 2; i++)
			{
				string text = "";
				int num = 20;
				int num12 = 160;
				num12 += i * 16;
				if (i == 0)
				{
					text = "Gamepad Left Thumbstick  : " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickLeft.X.ToString("P2"), PlayerInput.GamepadThumbstickLeft.Y.ToString("P2"));
				}
				if (i == 1)
				{
					text = "Gamepad Right Thumbstick: " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickRight.X.ToString("P2"), PlayerInput.GamepadThumbstickRight.Y.ToString("P2"));
				}
				spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2((float)num, (float)num12), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
		}
		for (int j = 0; j < 7; j++)
		{
			string text2 = "";
			int num17 = 20;
			int num18 = 220;
			num18 += j * 16;
			if (j == 0)
			{
				text2 = "Solid Tiles:";
			}
			if (j == 1)
			{
				text2 = "Misc. Tiles:";
			}
			if (j == 2)
			{
				text2 = "Walls Tiles:";
			}
			if (j == 3)
			{
				text2 = "Background Tiles:";
			}
			if (j == 4)
			{
				text2 = "Water Tiles:";
			}
			if (j == 5)
			{
				text2 = "Black Tiles:";
			}
			if (j == 6)
			{
				text2 = "Total Render:";
			}
			spriteBatch.DrawString(FontAssets.MouseText.Value, text2, new Vector2((float)num17, (float)num18), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		for (int k = 0; k < 7; k++)
		{
			string text3 = "";
			int num19 = 180;
			int num20 = 220;
			num20 += k * 16;
			float num21 = ((k != 6) ? TimeLogger.GetDrawTime(k) : TimeLogger.GetDrawTotal());
			text3 = $"{num21:F2}ms";
			spriteBatch.DrawString(FontAssets.MouseText.Value, text3, new Vector2((float)num19, (float)num20), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		for (int l = 0; l < 6; l++)
		{
			string text4 = "";
			int num22 = 20;
			int num23 = 346;
			num23 += l * 16;
			if (l == 0)
			{
				text4 = "Lighting Init:";
			}
			if (l == 1)
			{
				text4 = "Lighting Phase #1:";
			}
			if (l == 2)
			{
				text4 = "Lighting Phase #2:";
			}
			if (l == 3)
			{
				text4 = "Lighting Phase #3";
			}
			if (l == 4)
			{
				text4 = "Lighting Phase #4";
			}
			if (l == 5)
			{
				text4 = "Total Lighting:";
			}
			spriteBatch.DrawString(FontAssets.MouseText.Value, text4, new Vector2((float)num22, (float)num23), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		for (int m = 0; m < 6; m++)
		{
			string text5 = "";
			int num2 = 180;
			int num3 = 346;
			num3 += m * 16;
			float num4 = ((m != 5) ? TimeLogger.GetLightingTime(m) : TimeLogger.GetLightingTotal());
			text5 = $"{num4:F2}ms";
			spriteBatch.DrawString(FontAssets.MouseText.Value, text5, new Vector2((float)num2, (float)num3), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		int num5 = 5;
		for (int n = 0; n < num5; n++)
		{
			string text6 = "";
			int num6 = 20;
			int num7 = 456;
			num7 += n * 16;
			text6 = "Render #" + n + ":";
			spriteBatch.DrawString(FontAssets.MouseText.Value, text6, new Vector2((float)num6, (float)num7), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		for (int num8 = 0; num8 < num5; num8++)
		{
			string text7 = "";
			int num9 = 180;
			int num10 = 456;
			num10 += num8 * 16;
			text7 = $"{TimeLogger.GetRenderTime(num8):F2}ms";
			spriteBatch.DrawString(FontAssets.MouseText.Value, text7, new Vector2((float)num9, (float)num10), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		for (int num11 = 0; num11 < num5; num11++)
		{
			string text8 = "";
			int num13 = 230;
			int num14 = 456;
			num14 += num11 * 16;
			num13 += 10;
			text8 = $"{TimeLogger.GetRenderMax(num11):F2}ms";
			spriteBatch.DrawString(FontAssets.MouseText.Value, text8, new Vector2((float)num13, (float)num14), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		string text9 = "";
		int num15 = 20;
		int num16 = 456 + 16 * num5 + 16;
		text9 = "Update:";
		spriteBatch.DrawString(FontAssets.MouseText.Value, text9, new Vector2((float)num15, (float)num16), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		text9 = "";
		num15 = 180;
		text9 = $"{upTimer:F2}ms";
		spriteBatch.DrawString(FontAssets.MouseText.Value, text9, new Vector2((float)num15, (float)num16), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		text9 = "";
		num15 = 240;
		text9 = $"{upTimerMax:F2}ms";
		spriteBatch.DrawString(FontAssets.MouseText.Value, text9, new Vector2((float)num15, (float)num16), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
	}

	private static void DrawInterface_17_DiagnoseNet()
	{
		if (ModNet.ShouldDrawModNetDiagnosticsUI)
		{
			ModNet.ModNetDiagnosticsUI.Draw(spriteBatch);
		}
		else if (shouldDrawNetDiagnosticsUI)
		{
			ActiveNetDiagnosticsUI.Draw(spriteBatch);
		}
	}

	private void DrawInterface_16_MapOrMinimap()
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Expected O, but got Unknown
		mH = 0;
		if (!mapEnabled)
		{
			return;
		}
		if (!mapFullscreen && mapStyle == 1)
		{
			mH = 256;
			try
			{
				DrawMap(new GameTime());
			}
			catch (Exception e)
			{
				if (!ignoreErrors)
				{
					throw;
				}
				TimeLogger.DrawException(e);
			}
		}
		PlayerInput.SetZoom_UI();
		if (mH + RecommendedEquipmentAreaPushUp > screenHeight)
		{
			mH = screenHeight - RecommendedEquipmentAreaPushUp;
		}
	}

	private static void DrawInterface_15_InvasionProgressBars()
	{
		DrawInvasionProgress();
		if (HealthBarDrawSettings != 0)
		{
			BigBossProgressBar.Draw(spriteBatch);
		}
	}

	private void DrawInterface_14_EntityHealthBars()
	{
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a66: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0caf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b15: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b02: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0300: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0486: Unknown result type (might be due to invalid IL or missing references)
		//IL_048b: Unknown result type (might be due to invalid IL or missing references)
		//IL_048d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0497: Unknown result type (might be due to invalid IL or missing references)
		//IL_049c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0473: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_040c: Unknown result type (might be due to invalid IL or missing references)
		//IL_054e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_042b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0430: Unknown result type (might be due to invalid IL or missing references)
		if (HealthBarDrawSettings == 0)
		{
			return;
		}
		int num = -1;
		if (PlayerInput.UsingGamepad)
		{
			Player localPlayer = LocalPlayer;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = npc[i];
				if ((nPC.life == nPC.lifeMax || nPC.dontTakeDamage) && !nPC.dontTakeDamage && nPC.nameOver > 0f && (num == -1 || nPC.Distance(localPlayer.Center) < npc[num].Distance(localPlayer.Center)))
				{
					num = i;
				}
			}
		}
		bool flag = false;
		for (int num3 = 199; num3 >= 0; num3--)
		{
			if (!npc[num3].active || npc[num3].type <= 0 || npc[num3].shimmerTransparency != 0f)
			{
				continue;
			}
			NPC obj = npc[num3];
			obj.position += npc[num3].netOffset;
			if (npc[num3].life != npc[num3].lifeMax && !npc[num3].dontTakeDamage)
			{
				float scale = 1f;
				int type = npc[num3].type;
				if (type == 4)
				{
					scale = 1.5f;
				}
				if (type == 35)
				{
					scale = 1.5f;
				}
				if (type == 36)
				{
					scale = 1.5f;
				}
				if (type == 50)
				{
					scale = 1.5f;
				}
				if (type == 113)
				{
					scale = 1.5f;
				}
				if (type == 114)
				{
					scale = 1.5f;
				}
				if (type == 125)
				{
					scale = 1.5f;
				}
				if (type == 126)
				{
					scale = 1.5f;
				}
				if (type == 127)
				{
					scale = 1.5f;
				}
				if (type == 128)
				{
					scale = 1.5f;
				}
				if (type == 129)
				{
					scale = 1.5f;
				}
				if (type == 130)
				{
					scale = 1.5f;
				}
				if (type == 131)
				{
					scale = 1.5f;
				}
				if (type == 222)
				{
					scale = 1.5f;
				}
				if (type >= 245 && type <= 249)
				{
					scale = 1.5f;
				}
				if (type == 262)
				{
					scale = 1.5f;
				}
				if (type == 266)
				{
					scale = 1.5f;
				}
				if (type == 564 || type == 565 || type == 551 || type == 576 || type == 577)
				{
					scale = 1.5f;
				}
				if (type == 87)
				{
					scale = 1.5f;
				}
				if (type == 510 || type == 454 || type == 621)
				{
					scale = 1.5f;
				}
				if (type == 439 || type == 370)
				{
					scale = 1.5f;
				}
				float num4 = 10f;
				if (HealthBarDrawSettings == 2)
				{
					num4 -= 34f;
				}
				if (!NPCLoader.DrawHealthBar(npc[num3], ref scale))
				{
					NPC obj2 = npc[num3];
					obj2.position -= npc[num3].netOffset;
					continue;
				}
				if ((!expertMode || type != 266) && ((type != 439 && type != 440) || npc[num3].ai[0] != 5f))
				{
					if (type >= 134 && type <= 136)
					{
						scale = 1.5f;
						if (!flag)
						{
							flag = true;
							Vector2 vector = default(Vector2);
							float num5 = 999999f;
							for (int j = 0; j < 200; j++)
							{
								if (npc[j].active && npc[j].type >= 134 && npc[j].type <= 136)
								{
									Vector2 vector2 = player[myPlayer].Center - npc[j].Center;
									if (((Vector2)(ref vector2)).Length() < num5 && Collision.CanHit(player[myPlayer].Center, 1, 1, npc[j].Center, 1, 1))
									{
										num5 = ((Vector2)(ref vector2)).Length();
										vector = npc[j].position;
									}
								}
							}
							if (num5 < (float)screenWidth)
							{
								if (destroyerHB.X < 100f && destroyerHB.Y < 100f)
								{
									destroyerHB = vector;
								}
								else
								{
									destroyerHB = (destroyerHB * 49f + vector) / 50f;
								}
								vector = destroyerHB;
								int num6 = num3;
								if (type != 134 && npc[num3].realLife != -1)
								{
									num6 = npc[num3].realLife;
								}
								float num7 = Lighting.Brightness((int)((npc[num3].position.X + (float)(npc[num3].width / 2)) / 16f), (int)((npc[num3].position.Y + (float)(npc[num3].height / 2) + npc[num3].gfxOffY) / 16f));
								num7 = (num7 + 1f) / 2f;
								DrawHealthBar(vector.X + (float)(npc[num3].width / 2), vector.Y + (float)(npc[num3].height / 2), npc[num6].life, npc[num6].lifeMax, num7, scale);
							}
							else
							{
								destroyerHB = new Vector2(0f, 0f);
							}
						}
					}
					else
					{
						switch (type)
						{
						case 7:
							DrawInterface_Healthbar_Worm(npc[num3], 9, scale);
							break;
						case 95:
							DrawInterface_Healthbar_Worm(npc[num3], 97, scale);
							break;
						case 10:
							DrawInterface_Healthbar_Worm(npc[num3], 12, scale);
							break;
						case 87:
							DrawInterface_Healthbar_Worm(npc[num3], 92, scale);
							break;
						case 412:
							DrawInterface_Healthbar_Worm(npc[num3], 414, scale);
							break;
						case 39:
							DrawInterface_Healthbar_Worm(npc[num3], 41, scale);
							break;
						case 98:
							DrawInterface_Healthbar_Worm(npc[num3], 100, scale);
							break;
						case 454:
							DrawInterface_Healthbar_Worm(npc[num3], 459, scale);
							break;
						default:
							switch (type)
							{
							case 510:
								DrawInterface_Healthbar_Worm(npc[num3], 512, scale);
								break;
							case 621:
								DrawInterface_Healthbar_Worm(npc[num3], 623, scale);
								break;
							case 513:
								DrawInterface_Healthbar_Worm(npc[num3], 515, scale);
								break;
							case 117:
								DrawInterface_Healthbar_Worm(npc[num3], 119, scale);
								break;
							default:
								if (HealthBarDrawSettings == 1)
								{
									num4 += NPCAddHeight(npc[num3]);
									DrawHealthBar(npc[num3].position.X + (float)(npc[num3].width / 2), npc[num3].position.Y + (float)npc[num3].height + num4 + npc[num3].gfxOffY, npc[num3].life, npc[num3].lifeMax, Lighting.Brightness((int)((npc[num3].position.X + (float)(npc[num3].width / 2)) / 16f), (int)((npc[num3].position.Y + (float)(npc[num3].height / 2) + npc[num3].gfxOffY) / 16f)), scale);
								}
								else if (HealthBarDrawSettings == 2)
								{
									num4 -= NPCAddHeight(npc[num3]) / 2f;
									DrawHealthBar(npc[num3].position.X + (float)(npc[num3].width / 2), npc[num3].position.Y + num4 + npc[num3].gfxOffY, npc[num3].life, npc[num3].lifeMax, Lighting.Brightness((int)((npc[num3].position.X + (float)(npc[num3].width / 2)) / 16f), (int)((npc[num3].position.Y + (float)(npc[num3].height / 2) + npc[num3].gfxOffY) / 16f)), scale);
								}
								break;
							case 118:
							case 119:
							case 511:
							case 512:
							case 514:
							case 515:
							case 622:
							case 623:
								break;
							}
							break;
						case 8:
						case 9:
						case 11:
						case 12:
						case 40:
						case 41:
						case 88:
						case 89:
						case 90:
						case 91:
						case 92:
						case 96:
						case 97:
						case 99:
						case 100:
						case 413:
						case 414:
						case 455:
						case 456:
						case 457:
						case 458:
						case 459:
							break;
						}
					}
				}
			}
			else if (!npc[num3].dontTakeDamage && npc[num3].nameOver > 0f && PlayerInput.UsingGamepad && num3 == num)
			{
				Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, npc[num3].GivenOrTypeName, Vector2.One);
				Vector2 vector3 = npc[num3].Bottom - screenPosition + new Vector2(0f, 10f);
				if (NPC.GetNPCLocation(num3, seekHead: true, averageDirection: true, out var _, out var pos))
				{
					vector3 = pos - screenPosition + new Vector2(0f, (float)(10 + npc[num3].height / 2));
					if (player[myPlayer].gravDir == -1f)
					{
						vector3 = ReverseGravitySupport(vector3, (float)(-npc[num3].height - 20));
					}
					Vector2 origin = stringSize * new Vector2(0.5f, 0f);
					ChatManager.DrawColorCodedStringShadow(spriteBatch, FontAssets.MouseText.Value, npc[num3].GivenOrTypeName, vector3, Color.Black * npc[num3].nameOver * 0.5f, 0f, origin, Vector2.One);
					ChatManager.DrawColorCodedString(spriteBatch, FontAssets.MouseText.Value, npc[num3].GivenOrTypeName, vector3, Color.White * npc[num3].nameOver, 0f, origin, Vector2.One);
				}
			}
			if (npc[num3].type == 548 && !npc[num3].dontTakeDamageFromHostiles && DD2Event.TimeLeftBetweenWaves > 0 && !hideUI)
			{
				Vector2 position = npc[num3].Bottom - screenPosition + new Vector2(0f, -100f);
				int num8 = DD2Event.TimeLeftBetweenWaves / 60;
				string text = $"{num8}";
				DynamicSpriteFont value = FontAssets.MouseText.Value;
				float num9 = 1f;
				Vector2 origin2 = value.MeasureString(text) * num9 * new Vector2(0.5f, 0.5f);
				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, value, text, position, Color.White, 0f, origin2, Vector2.One * num9);
			}
			NPC obj3 = npc[num3];
			obj3.position -= npc[num3].netOffset;
		}
		for (int k = 0; k < 255; k++)
		{
			if (k != myPlayer && player[k].active && !player[k].ghost && !player[k].dead && !player[k].invis && player[k].statLife != player[k].statLifeMax2)
			{
				if (HealthBarDrawSettings == 1)
				{
					int num10 = 10;
					DrawHealthBar(player[k].position.X + (float)(player[k].width / 2), player[k].position.Y + (float)player[k].height + (float)num10 + player[k].gfxOffY, player[k].statLife, player[k].statLifeMax2, player[k].stealth * Lighting.Brightness((int)((player[k].position.X + (float)(player[k].width / 2)) / 16f), (int)((player[k].position.Y + (float)(player[k].height / 2) + player[k].gfxOffY) / 16f)));
				}
				else if (HealthBarDrawSettings == 2)
				{
					int num2 = -20;
					DrawHealthBar(player[k].position.X + (float)(player[k].width / 2), player[k].position.Y + (float)num2 + player[k].gfxOffY, player[k].statLife, player[k].statLifeMax2, player[k].stealth * Lighting.Brightness((int)((player[k].position.X + (float)(player[k].width / 2)) / 16f), (int)((player[k].position.Y + (float)(player[k].height / 2) + player[k].gfxOffY) / 16f)));
				}
			}
		}
	}

	private void DrawInterface_Healthbar_Worm(NPC head, int tailID, float scale)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		NPC nPC = head;
		for (int i = head.whoAmI + 1; i < 200; i++)
		{
			if (npc[i].active && npc[i].type == tailID)
			{
				nPC = npc[i];
				break;
			}
		}
		Vector2 vector = (head.position + nPC.position) / 2f;
		DrawHealthBar(vector.X + (float)(head.width / 2), vector.Y + (float)(head.height / 2), head.life, head.lifeMax, Lighting.Brightness((int)((head.position.X + (float)(head.width / 2)) / 16f), (int)((head.position.Y + (float)(head.height / 2) + head.gfxOffY) / 16f)), scale);
	}

	private static void DrawInterface_13_AchievementCompletePopups()
	{
		InGameNotificationsTracker.DrawInGame(spriteBatch);
	}

	private static bool DrawInterface_12_IngameFancyUI()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, UIScaleMatrix);
		InGameUI.Draw(spriteBatch, _drawInterfaceGameTime);
		bool result = true;
		if (inFancyUI && !IngameFancyUI.Draw(spriteBatch, _drawInterfaceGameTime))
		{
			result = false;
			DrawPendingMouseText();
		}
		return result;
	}

	private bool DrawInterface_11_IngameOptionsMenu()
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		bool result = true;
		if (ingameOptionsWindow)
		{
			DrawInterface_16_MapOrMinimap();
			PlayerInput.SetZoom_UI();
			Matrix uIScaleMatrix = UIScaleMatrix;
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, (BlendState)null, (SamplerState)null, (DepthStencilState)null, (RasterizerState)null, (Effect)null, uIScaleMatrix);
			IngameOptions.Draw(this, spriteBatch);
			DrawInterface_40_InteractItemIcon();
			DrawPendingMouseText();
			result = false;
			_MouseOversCanClear = true;
		}
		return result;
	}

	private static bool DrawInterface_8_CheckF11UIHideToggle()
	{
		bool result = true;
		if (hideUI)
		{
			maxQ = true;
			result = false;
			_MouseOversCanClear = true;
			DrawPendingMouseText();
		}
		return result;
	}

	private static bool DrawInterface_10_CheckCaptureManager()
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		bool result = true;
		PlayerInput.SetDesiredZoomContext(ZoomContext.Unscaled_MouseInWorld);
		CaptureManager.Instance.Update();
		if (CaptureManager.Instance.Active)
		{
			CaptureManager.Instance.Draw(spriteBatch);
			result = false;
			_MouseOversCanClear = true;
			PlayerInput.SetZoom_UI();
			Matrix uIScaleMatrix = UIScaleMatrix;
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, (BlendState)null, (SamplerState)null, (DepthStencilState)null, (RasterizerState)null, (Effect)null, uIScaleMatrix);
			DrawPendingMouseText();
		}
		return result;
	}

	private static void DrawInterface_9_WireSelection()
	{
		if (!hideUI)
		{
			DrawInterface_Resources_GolfPower();
			DrawInterface_GolfBallIndicator();
		}
		WiresUI.HandleWiresUI(spriteBatch);
	}

	private static void DrawInterface_0_InterfaceLogic1()
	{
		if (player[myPlayer].selectedItem == 58 && player[myPlayer].itemAnimation > 0)
		{
			mouseLeftRelease = false;
		}
	}

	private void DrawInterface_7_TownNPCHouseBanners()
	{
		if (EquipPage != 1 && (!UILinkPointNavigator.Shortcuts.NPCS_IconsDisplay || !PlayerInput.UsingGamepad))
		{
			return;
		}
		if (ignoreErrors)
		{
			try
			{
				DrawNPCHousesInWorld();
				return;
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
				return;
			}
		}
		DrawNPCHousesInWorld();
	}

	private static void DrawInterface_6_TileGridOption()
	{
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		bool num3 = MouseShowBuildingGrid && !SmartCursorIsUsed;
		if (PlayerInput.UsingGamepad && !SmartCursorIsUsed)
		{
			_ = PlayerInput.UsingGamepadUI;
		}
		if (num3 && !player[myPlayer].dead && !PlayerInput.CursorIsBusy)
		{
			float num = ((Vector2)(ref player[myPlayer].velocity)).Length();
			float num2 = 6f;
			float value = MathHelper.Lerp(0f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
			MouseBuildingGridAlpha = MathHelper.Lerp(MouseBuildingGridAlpha, value, 0.2f);
			value = MouseBuildingGridAlpha;
			if (value > 0f)
			{
				Vector2 position = MouseWorld.ToTileCoordinates().ToVector2() * 16f;
				new Vector2((float)offScreenRange, (float)offScreenRange);
				_ = drawToScreen;
				position -= screenPosition;
				position += new Vector2(8f);
				if (player[myPlayer].gravDir == -1f)
				{
					position.Y = (float)screenHeight - position.Y;
				}
				Texture2D value2 = TextureAssets.CursorRadial.Value;
				spriteBatch.Draw(value2, position, (Rectangle?)null, Color.White * 0.5f * value, 0f, value2.Size() / 2f, 1f, (SpriteEffects)0, 0f);
			}
		}
		else
		{
			MouseBuildingGridAlpha = MathHelper.Clamp(MouseBuildingGridAlpha - 0.05f, 0f, 1f);
		}
	}

	private static void DrawInterface_5_GamepadLockOn()
	{
		LockOnHelper.Draw(spriteBatch);
	}

	private static void DrawInterface_4_Ruler()
	{
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0244: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0303: Unknown result type (might be due to invalid IL or missing references)
		//IL_030d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_0397: Unknown result type (might be due to invalid IL or missing references)
		//IL_039e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		if (!player[myPlayer].rulerLine || player[myPlayer].builderAccStatus[0] != 0)
		{
			return;
		}
		float num = ((Vector2)(ref player[myPlayer].velocity)).Length();
		float num7 = 6f;
		float num8 = 2f;
		if (!(num <= num7))
		{
			return;
		}
		float num9 = 1f;
		if (num >= num8)
		{
			num9 = 1f - (num - num8) / num7;
		}
		int num10 = 1;
		if ((float)mouseX + screenPosition.X < player[myPlayer].Center.X)
		{
			num10 = -1;
		}
		int num11 = (int)(player[myPlayer].position.X + (float)(player[myPlayer].width / 2)) / 16;
		int num12 = (int)(player[myPlayer].position.Y + (float)player[myPlayer].height - 2f) / 16;
		if (player[myPlayer].gravDir == -1f)
		{
			num12--;
		}
		Vector2 mouseWorld = MouseWorld;
		if (Math.Abs(num11 - (int)(MouseWorld.X / 16f)) > 0)
		{
			num11 += num10;
		}
		if (player[myPlayer].gravDir == -1f)
		{
			mouseWorld.Y += 16f;
		}
		mouseWorld /= 16f;
		new Vector2((float)num11, (float)num12);
		int num13 = (int)mouseWorld.X - num11;
		int num14 = (int)mouseWorld.Y - num12;
		Math.Abs(num13);
		Math.Abs(num14);
		rulerLineDisplayValues.X = num13;
		rulerLineDisplayValues.Y = num14;
		if (num13 == 0 && num14 == 0)
		{
			return;
		}
		Texture2D value = TextureAssets.Extra[2].Value;
		Rectangle value2 = default(Rectangle);
		((Rectangle)(ref value2))._002Ector(0, 0, 16, 16);
		int num2 = num11;
		int num3 = num12;
		if (player[myPlayer].gravDir == -1f)
		{
			num3--;
		}
		float r = 0.24f;
		float g = 0.8f;
		float b = 0.9f;
		float a = 1f;
		float num4 = 0.8f;
		Color color = new Color(r, g, b, a) * num4 * num9;
		spriteBatch.Draw(value, ReverseGravitySupport(new Vector2((float)num2, (float)num3) * 16f - screenPosition, 16f), (Rectangle?)value2, color, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
		if (num13 != 0)
		{
			int num5 = Math.Sign(num13);
			value2.Y = ((num5 == 1) ? 16 : 32);
			while (num13 != 0)
			{
				num13 -= num5;
				num2 += num5;
				if (num13 == 0)
				{
					value2.Y = 0;
				}
				color = new Color(r, g, b, a) * num4 * num9;
				spriteBatch.Draw(value, ReverseGravitySupport(new Vector2((float)num2, (float)num3) * 16f - screenPosition, 16f), (Rectangle?)value2, color, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
			}
		}
		if (num14 == 0)
		{
			return;
		}
		int num6 = Math.Sign(num14);
		value2.Y = ((num6 == 1) ? 48 : 64);
		while (num14 != 0)
		{
			num14 -= num6;
			num3 += num6;
			if (num14 == 0)
			{
				value2.Y = 0;
			}
			color = new Color(r, g, b, a) * num4 * num9;
			spriteBatch.Draw(value, ReverseGravitySupport(new Vector2((float)num2, (float)num3) * 16f - screenPosition, 16f), (Rectangle?)value2, color, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
		}
	}

	private static void DrawInterface_3_LaserRuler()
	{
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_038a: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_039d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0306: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_033d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0427: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		if (!player[myPlayer].rulerGrid || player[myPlayer].builderAccStatus[1] != 0)
		{
			return;
		}
		float num = ((Vector2)(ref player[myPlayer].velocity)).Length();
		num = Vector2.Distance(player[myPlayer].position, player[myPlayer].shadowPos[2]);
		float num2 = 6f;
		Texture2D value = TextureAssets.Extra[68].Value;
		float num3 = MathHelper.Lerp(0.2f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
		Vector2 vec = screenPosition;
		vec += new Vector2(-50f);
		vec = vec.ToTileCoordinates().ToVector2() * 16f;
		int num4 = (screenWidth + 100) / 16;
		int num5 = (screenHeight + 100) / 16;
		Point point = MouseWorld.ToTileCoordinates();
		point.X -= (int)vec.X / 16;
		point.Y -= (int)vec.Y / 16;
		Color color = new Color(0.24f, 0.8f, 0.9f, 0.5f) * 0.4f * num3;
		Color color2 = new Color(1f, 0.8f, 0.9f, 0.5f) * 0.5f * num3;
		Rectangle value2 = default(Rectangle);
		((Rectangle)(ref value2))._002Ector(0, 18, 18, 18);
		vec -= Vector2.One;
		for (int i = 0; i < num4; i++)
		{
			for (int j = 0; j < num5; j++)
			{
				Color color3 = color;
				Vector2 zero = Vector2.Zero;
				if (i != point.X && j != point.Y)
				{
					if (i != point.X + 1)
					{
						value2.X = 0;
						value2.Width = 16;
					}
					else
					{
						value2.X = 2;
						value2.Width = 14;
						zero.X = 2f;
					}
					if (j != point.Y + 1)
					{
						value2.Y = 18;
						value2.Height = 16;
					}
					else
					{
						value2.Y = 2;
						value2.Height = 14;
						zero.Y = 2f;
					}
					spriteBatch.Draw(value, ReverseGravitySupport(new Vector2((float)i, (float)j) * 16f - screenPosition + vec + zero, 16f), (Rectangle?)value2, color3, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
				}
			}
		}
		((Rectangle)(ref value2))._002Ector(0, 0, 16, 18);
		for (int k = 0; k < num4; k++)
		{
			if (k == point.X)
			{
				spriteBatch.Draw(value, ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - screenPosition + vec, 16f), (Rectangle?)new Rectangle(0, 0, 16, 16), color2, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
			}
			else
			{
				spriteBatch.Draw(value, ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - screenPosition + vec, 16f), (Rectangle?)value2, color2, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
			}
		}
		((Rectangle)(ref value2))._002Ector(0, 0, 18, 16);
		for (int l = 0; l < num5; l++)
		{
			if (l != point.Y)
			{
				spriteBatch.Draw(value, ReverseGravitySupport(new Vector2((float)point.X, (float)l) * 16f - screenPosition + vec, 16f), (Rectangle?)value2, color2, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
			}
		}
	}

	private static void DrawInterface_2_SmartCursorTargets()
	{
		DrawSmartCursor();
	}

	private static void DrawInterface_1_1_DrawEmoteBubblesInWorld()
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, (BlendState)null, SamplerState.PointClamp, (DepthStencilState)null, (RasterizerState)null, (Effect)null, GameViewMatrix.ZoomMatrix);
		EmoteBubble.DrawAll(spriteBatch);
		if (instance.currentNPCShowingChatBubble != -1)
		{
			DrawNPCChatBubble(instance.currentNPCShowingChatBubble);
		}
		instance.currentNPCShowingChatBubble = -1;
	}

	private static void DrawInterface_1_2_DrawEntityMarkersInWorld()
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		Player localPlayer = LocalPlayer;
		if (localPlayer.dead || !localPlayer.HeldItem.summon)
		{
			return;
		}
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, (BlendState)null, SamplerState.PointClamp, (DepthStencilState)null, (RasterizerState)null, (Effect)null, GameViewMatrix.ZoomMatrix);
		Texture2D value = TextureAssets.Extra[199].Value;
		Vector2 zero = Vector2.Zero;
		int minionAttackTargetNPC = localPlayer.MinionAttackTargetNPC;
		Rectangle value2 = default(Rectangle);
		((Rectangle)(ref value2))._002Ector((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = npc[i];
			if (!nPC.active)
			{
				continue;
			}
			Rectangle hitbox = nPC.Hitbox;
			if (((Rectangle)(ref hitbox)).Intersects(value2))
			{
				Vector2 vector = nPC.Center - screenPosition;
				if (player[myPlayer].gravDir == -1f)
				{
					vector.Y = (float)screenHeight - vector.Y;
				}
				Vector2 position = vector + zero;
				if (i == minionAttackTargetNPC)
				{
					int frameY = (int)(GlobalTimeWrappedHourly * 10f) % 4;
					Rectangle rectangle = value.Frame(1, 4, 0, frameY, 0, -2);
					Vector2 origin = rectangle.Size() / 2f;
					Color color = Color.White * 0.7f;
					((Color)(ref color)).A = (byte)(((Color)(ref color)).A / 2);
					spriteBatch.Draw(value, position, (Rectangle?)rectangle, color, 0f, origin, 1f, (SpriteEffects)0, 0f);
				}
			}
		}
	}

	private static void MouseOversTryToClear()
	{
		if (_MouseOversCanClear)
		{
			_MouseOversCanClear = false;
			MouseOversClear();
		}
	}

	private static void MouseOversClear()
	{
		player[myPlayer].cursorItemIconEnabled = false;
		player[myPlayer].cursorItemIconID = 0;
		player[myPlayer].cursorItemIconText = string.Empty;
		player[myPlayer].cursorItemIconPush = 0;
		signHover = -1;
	}

	public static void ItemIconCacheUpdate(int selectedItemID)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		_itemIconCacheScreenPosition = MouseScreen;
		_itemIconCacheSelectedItemID = selectedItemID;
		_itemIconCacheTime = 10;
	}

	public static void ItemIconCacheVerification()
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (_itemIconCacheTime > 0)
		{
			float num = Vector2.Distance(_itemIconCacheScreenPosition, MouseScreen);
			if (num != 0f)
			{
				_itemIconCacheTime--;
			}
			if (num > 4f)
			{
				_itemIconCacheTime = 0;
			}
			if (_itemIconCacheSelectedItemID != player[myPlayer].inventory[player[myPlayer].selectedItem].type)
			{
				_itemIconCacheTime = 0;
			}
		}
	}

	public static void DrawWallOfFish()
	{
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		List<int> list = new List<int>();
		for (int i = 2297; i <= 2321; i++)
		{
			list.Add(i);
		}
		for (int j = 2450; j <= 2488; j++)
		{
			list.Add(j);
		}
		Vector2 vector = default(Vector2);
		for (int k = 0; k < 5; k++)
		{
			float num = 10f;
			((Vector2)(ref vector))._002Ector((float)screenWidth / num * (GlobalTimeWrappedHourly % num), -100f);
			vector.X += 14 * k;
			vector.Y += k % 2 * 14;
			int num2 = 30 * k;
			while (vector.Y < (float)(screenHeight + 100))
			{
				if (++num2 >= list.Count)
				{
					num2 = 0;
				}
				vector.Y += 26f;
				instance.LoadItem(list[num2]);
				Texture2D value = TextureAssets.Item[list[num2]].Value;
				Point point = (vector + screenPosition).ToTileCoordinates();
				spriteBatch.Draw(value, vector, (Rectangle?)null, Lighting.GetColor(point.X, point.Y), (float)Math.PI / 4f, value.Size() / 2f, 1f, (SpriteEffects)0, 0f);
			}
		}
	}

	public static void DrawWallOfStars()
	{
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		bool flag = true;
		if (flag)
		{
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		}
		int num = Projectile.NewProjectile(Projectile.GetNoneSource(), Vector2.Zero, Vector2.UnitX, 12, 0, 0f, myPlayer);
		Projectile projectile = Main.projectile[num];
		Vector2 vector = default(Vector2);
		for (int i = 0; i < 5; i++)
		{
			float num2 = 10f;
			((Vector2)(ref vector))._002Ector((float)screenWidth / num2 * (GlobalTimeWrappedHourly % num2), -100f);
			vector.X += 14 * i;
			vector.Y += i % 2 * 14;
			while (vector.Y < (float)(screenHeight + 100))
			{
				vector.Y += 26f;
				projectile.position = Vector2.One * 10f;
				projectile.velocity = Vector2.UnitX * 10f;
				projectile.rotation = GlobalTimeWrappedHourly * ((float)Math.PI * 2f);
				projectile.Update(num);
				projectile.position = vector + screenPosition;
				instance.DrawProj(num);
			}
		}
		projectile.position = Vector2.One * 10f;
		projectile.Kill();
		if (flag)
		{
			spriteBatch.End();
		}
	}

	private static void DrawSmartCursor()
	{
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_024b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_027e: Unknown result type (might be due to invalid IL or missing references)
		//IL_028d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_0329: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_0351: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_038b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0393: Unknown result type (might be due to invalid IL or missing references)
		//IL_039a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		if (SmartCursorShowing && !player[myPlayer].dead)
		{
			Vector2 vector = new Vector2((float)SmartCursorX, (float)SmartCursorY) * 16f;
			new Vector2((float)offScreenRange, (float)offScreenRange);
			_ = drawToScreen;
			vector -= screenPosition;
			if (player[myPlayer].gravDir == -1f)
			{
				vector.Y = (float)screenHeight - vector.Y - 16f;
			}
			Color newColor = Lighting.GetColor(SmartCursorX, SmartCursorY) * 1f;
			Rectangle value = default(Rectangle);
			((Rectangle)(ref value))._002Ector(0, 0, 1, 1);
			float r = 1f;
			float g = 0.9f;
			float b = 0.1f;
			float a = 1f;
			float num = 0.6f;
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 8f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 8f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.One * 8f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, (SpriteEffects)0, 0f);
			b = 0.3f;
			g = 0.95f;
			a = (num = 1f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * -2f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(2f, 16f), (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 16f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(2f, 16f), (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * -2f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(16f, 2f), (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 16f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(16f, 2f), (SpriteEffects)0, 0f);
		}
	}

	private static void DrawSmartInteract()
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_027a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_0324: Unknown result type (might be due to invalid IL or missing references)
		//IL_032e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_039a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03af: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		if (SmartInteractShowingGenuine && SmartInteractNPC == -1 && SmartInteractProj == -1 && !player[myPlayer].dead)
		{
			Vector2 vector = new Vector2((float)SmartInteractX, (float)SmartInteractY) * 16f;
			new Vector2((float)offScreenRange, (float)offScreenRange);
			_ = drawToScreen;
			vector -= screenPosition;
			if (player[myPlayer].gravDir == -1f)
			{
				vector.Y = (float)screenHeight - vector.Y - 16f;
			}
			Color newColor = Lighting.GetColor(SmartInteractX, SmartInteractY) * 1f;
			Rectangle value = default(Rectangle);
			((Rectangle)(ref value))._002Ector(0, 0, 1, 1);
			float r = 0.1f;
			float g = 0.9f;
			float b = 1f;
			float a = 1f;
			float num = 0.6f;
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 8f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 8f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.One * 8f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, 8f, (SpriteEffects)0, 0f);
			r = 0.3f;
			g = 0.95f;
			a = (num = 1f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * -2f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(2f, 16f), (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 16f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(2f, 16f), (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * -2f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(16f, 2f), (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 16f, (Rectangle?)value, buffColor(newColor, r, g, b, a) * num, 0f, Vector2.Zero, new Vector2(16f, 2f), (SpriteEffects)0, 0f);
		}
	}

	private void DrawInterface_30_Hotbar()
	{
		try
		{
			GUIHotbarDrawInner();
		}
		catch (Exception e)
		{
			if (ignoreErrors)
			{
				TimeLogger.DrawException(e);
				return;
			}
			throw;
		}
	}

	public void GUIChatDraw()
	{
		if (ignoreErrors)
		{
			try
			{
				if ((npcChatText != "" || player[myPlayer].sign != -1) && !editChest)
				{
					GUIChatDrawInner();
				}
				return;
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
				return;
			}
		}
		if ((npcChatText != "" || player[myPlayer].sign != -1) && !editChest)
		{
			GUIChatDrawInner();
		}
	}

	public static void DrawItemIcon(SpriteBatch spriteBatch, Item theItem, Vector2 screenPositionForItemCenter, Color itemLightColor, float sizeLimit)
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		GetItemDrawFrame(theItem.type, out var itemTexture, out var frame);
		ItemSlot.DrawItem_GetColorAndScale(theItem, theItem.scale, ref itemLightColor, sizeLimit, ref frame, out var itemLight, out var finalDrawScale);
		spriteBatch.Draw(itemTexture, screenPositionForItemCenter, (Rectangle?)frame, itemLight, 0f, frame.Size() / 2f, finalDrawScale, (SpriteEffects)0, 0f);
		if (theItem.color != Color.Transparent)
		{
			spriteBatch.Draw(itemTexture, screenPositionForItemCenter, (Rectangle?)frame, theItem.GetColor(itemLightColor), 0f, frame.Size() / 2f, finalDrawScale, (SpriteEffects)0, 0f);
		}
	}

	private void DrawInfoAccs()
	{
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_0637: Unknown result type (might be due to invalid IL or missing references)
		//IL_0649: Unknown result type (might be due to invalid IL or missing references)
		//IL_0650: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0811: Unknown result type (might be due to invalid IL or missing references)
		//IL_0813: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_0adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1279: Unknown result type (might be due to invalid IL or missing references)
		//IL_127e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1280: Unknown result type (might be due to invalid IL or missing references)
		//IL_1008: Unknown result type (might be due to invalid IL or missing references)
		//IL_100d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0728: Unknown result type (might be due to invalid IL or missing references)
		//IL_0738: Unknown result type (might be due to invalid IL or missing references)
		//IL_073d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0742: Unknown result type (might be due to invalid IL or missing references)
		//IL_129c: Unknown result type (might be due to invalid IL or missing references)
		//IL_128f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1129: Unknown result type (might be due to invalid IL or missing references)
		//IL_102f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1138: Unknown result type (might be due to invalid IL or missing references)
		//IL_1041: Unknown result type (might be due to invalid IL or missing references)
		//IL_11be: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11da: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_119a: Unknown result type (might be due to invalid IL or missing references)
		//IL_119e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1147: Unknown result type (might be due to invalid IL or missing references)
		//IL_1053: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1206: Unknown result type (might be due to invalid IL or missing references)
		//IL_1208: Unknown result type (might be due to invalid IL or missing references)
		//IL_1212: Unknown result type (might be due to invalid IL or missing references)
		//IL_1217: Unknown result type (might be due to invalid IL or missing references)
		//IL_1226: Unknown result type (might be due to invalid IL or missing references)
		//IL_1232: Unknown result type (might be due to invalid IL or missing references)
		//IL_1238: Unknown result type (might be due to invalid IL or missing references)
		//IL_115f: Unknown result type (might be due to invalid IL or missing references)
		//IL_106e: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1377: Unknown result type (might be due to invalid IL or missing references)
		//IL_137c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1385: Unknown result type (might be due to invalid IL or missing references)
		//IL_138b: Unknown result type (might be due to invalid IL or missing references)
		//IL_138d: Unknown result type (might be due to invalid IL or missing references)
		if (!CanShowInfoAccs)
		{
			return;
		}
		int num = -1;
		int num12 = -10;
		int num23 = 0;
		string text = "";
		float num25 = 215f;
		int startX = 0;
		if (GameCulture.FromCultureName(GameCulture.CultureName.Russian).IsActive)
		{
			startX = -50;
			num25 += 50f;
		}
		Color color = default(Color);
		((Color)(ref color))._002Ector(100, 100, 100, (int)mouseTextColor);
		InfoDisplayPageHandler(startX, ref text, out var startingDisplay, out var endingDisplay);
		Color infoTextColor = default(Color);
		Vector2 vector2 = default(Vector2);
		Vector2 scale = default(Vector2);
		for (int i = startingDisplay; i < endingDisplay; i++)
		{
			string text2 = "";
			string text3 = "";
			((Color)(ref infoTextColor))._002Ector((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor);
			Color infoTextShadowColor = Color.Black;
			InfoDisplay info = InfoDisplayLoader.InfoDisplays[i];
			if (!InfoDisplayLoader.Active(info) || (player[myPlayer].hideInfo[info.Type] && !playerInventory))
			{
				continue;
			}
			Vector2 val;
			if (info == InfoDisplay.Watches)
			{
				num = 0;
				text3 = Lang.inter[95].Value;
				string textValue = Language.GetTextValue("GameUI.TimeAtMorning");
				double num26 = time;
				if (!dayTime)
				{
					num26 += 54000.0;
				}
				num26 = num26 / 86400.0 * 24.0;
				double num27 = 7.5;
				num26 = num26 - num27 - 12.0;
				if (num26 < 0.0)
				{
					num26 += 24.0;
				}
				if (num26 >= 12.0)
				{
					textValue = Language.GetTextValue("GameUI.TimePastMorning");
				}
				int num28 = (int)num26;
				double num29 = num26 - (double)num28;
				num29 = (int)(num29 * 60.0);
				string text4 = string.Concat(num29);
				if (num29 < 10.0)
				{
					text4 = "0" + text4;
				}
				if (num28 > 12)
				{
					num28 -= 12;
				}
				if (num28 == 0)
				{
					num28 = 12;
				}
				if (player[myPlayer].accWatch == 1)
				{
					text4 = "00";
				}
				else if (player[myPlayer].accWatch == 2)
				{
					text4 = ((!(num29 < 30.0)) ? "30" : "00");
				}
				text2 = num28 + ":" + text4 + " " + textValue;
			}
			else if (info == InfoDisplay.WeatherRadio)
			{
				num = 1;
				text3 = Lang.inter[96].Value;
				text2 = (IsItStorming ? Language.GetTextValue("GameUI.Storm") : (((double)maxRaining > 0.6) ? Language.GetTextValue("GameUI.HeavyRain") : (((double)maxRaining >= 0.2) ? Language.GetTextValue("GameUI.Rain") : ((maxRaining > 0f) ? Language.GetTextValue("GameUI.LightRain") : ((cloudBGActive > 0f) ? Language.GetTextValue("GameUI.Overcast") : ((numClouds > 90) ? Language.GetTextValue("GameUI.MostlyCloudy") : ((numClouds > 55) ? Language.GetTextValue("GameUI.Cloudy") : ((numClouds <= 15) ? Language.GetTextValue("GameUI.Clear") : Language.GetTextValue("GameUI.PartlyCloudy")))))))));
				int num30 = (int)(windSpeedCurrent * 50f);
				if (num30 < 0)
				{
					text2 += Language.GetTextValue("GameUI.EastWind", Math.Abs(num30));
				}
				else if (num30 > 0)
				{
					text2 += Language.GetTextValue("GameUI.WestWind", num30);
				}
				if (Sandstorm.Happening)
				{
					if (GlobalTimeWrappedHourly % 10f >= 5f)
					{
						text2 = Language.GetTextValue("GameUI.Sandstorm");
					}
					text2 += " +";
				}
			}
			else if (info == InfoDisplay.Sextant)
			{
				num = ((bloodMoon && !dayTime) ? 8 : ((!eclipse || !dayTime) ? 7 : 8));
				text3 = Lang.inter[102].Value;
				if (moonPhase == 0)
				{
					text2 = Language.GetTextValue("GameUI.FullMoon");
				}
				else if (moonPhase == 1)
				{
					text2 = Language.GetTextValue("GameUI.WaningGibbous");
				}
				else if (moonPhase == 2)
				{
					text2 = Language.GetTextValue("GameUI.ThirdQuarter");
				}
				else if (moonPhase == 3)
				{
					text2 = Language.GetTextValue("GameUI.WaningCrescent");
				}
				else if (moonPhase == 4)
				{
					text2 = Language.GetTextValue("GameUI.NewMoon");
				}
				else if (moonPhase == 5)
				{
					text2 = Language.GetTextValue("GameUI.WaxingCrescent");
				}
				else if (moonPhase == 6)
				{
					text2 = Language.GetTextValue("GameUI.FirstQuarter");
				}
				else if (moonPhase == 7)
				{
					text2 = Language.GetTextValue("GameUI.WaxingGibbous");
				}
			}
			else if (info == InfoDisplay.FishFinder)
			{
				bool flag13 = false;
				num = 2;
				text3 = Lang.inter[97].Value;
				for (int j = 0; j < 1000; j++)
				{
					if (projectile[j].active && projectile[j].owner == myPlayer && projectile[j].bobber)
					{
						flag13 = true;
						break;
					}
				}
				if (flag13)
				{
					text2 = player[myPlayer].displayedFishingInfo;
				}
				else
				{
					PlayerFishingConditions fishingConditions = player[myPlayer].GetFishingConditions();
					text2 = ((fishingConditions.BaitItemType != 2673) ? (player[myPlayer].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", fishingConditions.FinalFishingLevel)) : Language.GetTextValue("GameUI.FishingWarning"));
				}
			}
			else if (info == InfoDisplay.MetalDetector)
			{
				num = 10;
				text3 = Lang.inter[104].Value;
				if (SceneMetrics.bestOre <= 0)
				{
					text2 = Language.GetTextValue("GameUI.NoTreasureNearby");
					infoTextColor = color;
				}
				else
				{
					int baseOption = 0;
					int num2 = SceneMetrics.bestOre;
					if (SceneMetrics.ClosestOrePosition.HasValue)
					{
						Point value = SceneMetrics.ClosestOrePosition.Value;
						Tile tileSafely = Framing.GetTileSafely(value);
						if (tileSafely.active())
						{
							MapHelper.GetTileBaseOption(value.X, value.Y, tileSafely.type, tileSafely, ref baseOption);
							num2 = tileSafely.type;
							if (TileID.Sets.BasicChest[num2] || TileID.Sets.BasicChestFake[num2])
							{
								baseOption = 0;
							}
						}
					}
					text2 = Language.GetTextValue("GameUI.OreDetected", Lang.GetMapObjectName(MapHelper.TileToLookup(num2, baseOption)));
				}
			}
			else if (info == InfoDisplay.LifeformAnalyzer)
			{
				num = 11;
				text3 = Lang.inter[105].Value;
				int num3 = 1300;
				int num4 = 0;
				int num5 = -1;
				if (player[myPlayer].accCritterGuideCounter <= 0)
				{
					player[myPlayer].accCritterGuideCounter = 15;
					for (int k = 0; k < 200; k++)
					{
						if (npc[k].active && npc[k].rarity > num4)
						{
							val = npc[k].Center - player[myPlayer].Center;
							if (((Vector2)(ref val)).Length() < (float)num3)
							{
								num5 = k;
								num4 = npc[k].rarity;
							}
						}
					}
					player[myPlayer].accCritterGuideNumber = (byte)num5;
				}
				else
				{
					player[myPlayer].accCritterGuideCounter--;
					num5 = player[myPlayer].accCritterGuideNumber;
				}
				if (num5 >= 0 && num5 < 200 && npc[num5].active && npc[num5].rarity > 0)
				{
					text2 = npc[num5].GivenOrTypeName;
					DrawInfoAccs_AdjustInfoTextColorsForNPC(npc[num5], ref infoTextColor, ref infoTextShadowColor);
				}
				else
				{
					text2 = Language.GetTextValue("GameUI.NoRareCreatures");
					infoTextColor = color;
				}
			}
			else if (info == InfoDisplay.Radar)
			{
				num = 5;
				text3 = Lang.inter[100].Value;
				int num6 = 2000;
				if (player[myPlayer].accThirdEyeCounter == 0)
				{
					player[myPlayer].accThirdEyeNumber = 0;
					player[myPlayer].accThirdEyeCounter = 15;
					for (int l = 0; l < 200; l++)
					{
						if (npc[l].active && !npc[l].friendly && npc[l].damage > 0 && npc[l].lifeMax > 5 && !npc[l].dontCountMe)
						{
							val = npc[l].Center - player[myPlayer].Center;
							if (((Vector2)(ref val)).Length() < (float)num6)
							{
								player[myPlayer].accThirdEyeNumber++;
							}
						}
					}
				}
				else
				{
					player[myPlayer].accThirdEyeCounter--;
				}
				if (player[myPlayer].accThirdEyeNumber != 0)
				{
					text2 = ((player[myPlayer].accThirdEyeNumber != 1) ? Language.GetTextValue("GameUI.EnemiesNearby", player[myPlayer].accThirdEyeNumber) : Language.GetTextValue("GameUI.OneEnemyNearby"));
				}
				else
				{
					text2 = Language.GetTextValue("GameUI.NoEnemiesNearby");
					infoTextColor = color;
				}
			}
			else if (info == InfoDisplay.TallyCounter)
			{
				num = 6;
				text3 = Lang.inter[101].Value;
				int lastCreatureHit = player[myPlayer].lastCreatureHit;
				if (lastCreatureHit <= 0)
				{
					text2 = Language.GetTextValue("GameUI.NoKillCount");
					infoTextColor = color;
				}
				else
				{
					text2 = Lang.GetNPCNameValue(Item.BannerToNPC(lastCreatureHit)) + ": " + NPC.killCount[lastCreatureHit];
				}
			}
			else if (info == InfoDisplay.DPSMeter)
			{
				num = 12;
				text3 = Lang.inter[106].Value;
				player[myPlayer].checkDPSTime();
				if (player[myPlayer].getDPS() == 0)
				{
					text2 = Language.GetTextValue("GameUI.NoDPS");
					infoTextColor = color;
				}
				else
				{
					text2 = Language.GetTextValue("GameUI.DPS", player[myPlayer].getDPS());
				}
			}
			else if (info == InfoDisplay.Stopwatch)
			{
				num = 9;
				text3 = Lang.inter[103].Value;
				Vector2 vector = player[myPlayer].velocity + player[myPlayer].instantMovementAccumulatedThisFrame;
				if (player[myPlayer].mount.Active && player[myPlayer].mount.IsConsideredASlimeMount && player[myPlayer].velocity.Y != 0f && !player[myPlayer].SlimeDontHyperJump)
				{
					vector.Y += player[myPlayer].velocity.Y;
				}
				int num7 = (int)(1f + ((Vector2)(ref vector)).Length() * 6f);
				if (num7 > player[myPlayer].speedSlice.Length)
				{
					num7 = player[myPlayer].speedSlice.Length;
				}
				float num8 = 0f;
				for (int num9 = num7 - 1; num9 > 0; num9--)
				{
					player[myPlayer].speedSlice[num9] = player[myPlayer].speedSlice[num9 - 1];
				}
				player[myPlayer].speedSlice[0] = ((Vector2)(ref vector)).Length();
				for (int m = 0; m < player[myPlayer].speedSlice.Length; m++)
				{
					if (m < num7)
					{
						num8 += player[myPlayer].speedSlice[m];
					}
					else
					{
						player[myPlayer].speedSlice[m] = num8 / (float)num7;
					}
				}
				num8 /= (float)num7;
				int num10 = 42240;
				int num11 = 216000;
				float num13 = num8 * (float)num11 / (float)num10;
				if (!player[myPlayer].merman && !player[myPlayer].ignoreWater)
				{
					if (player[myPlayer].honeyWet)
					{
						num13 /= 4f;
					}
					else if (player[myPlayer].wet)
					{
						num13 /= 2f;
					}
				}
				text2 = Language.GetTextValue("GameUI.Speed", Math.Round(num13));
			}
			else if (info == InfoDisplay.Compass)
			{
				num = 3;
				text3 = Lang.inter[98].Value;
				int num14 = (int)((player[myPlayer].position.X + (float)(player[myPlayer].width / 2)) * 2f / 16f - (float)maxTilesX);
				text2 = ((num14 > 0) ? Language.GetTextValue("GameUI.CompassEast", num14) : ((num14 >= 0) ? Language.GetTextValue("GameUI.CompassCenter") : Language.GetTextValue("GameUI.CompassWest", -num14)));
			}
			else if (info == InfoDisplay.DepthMeter)
			{
				num = 4;
				text3 = Lang.inter[99].Value;
				int num15 = (int)((double)((player[myPlayer].position.Y + (float)player[myPlayer].height) * 2f / 16f) - worldSurface * 2.0);
				string text5 = "";
				float num16 = (float)maxTilesX / 4200f;
				num16 *= num16;
				int num17 = 1200;
				float num18 = (float)((double)(player[myPlayer].Center.Y / 16f - (65f + 10f * num16)) / (worldSurface / 5.0));
				text5 = ((player[myPlayer].position.Y > (float)((maxTilesY - 204) * 16)) ? Language.GetTextValue("GameUI.LayerUnderworld") : (((double)player[myPlayer].position.Y > rockLayer * 16.0 + (double)(num17 / 2) + 16.0) ? Language.GetTextValue("GameUI.LayerCaverns") : ((num15 > 0) ? Language.GetTextValue("GameUI.LayerUnderground") : ((!(num18 >= 1f)) ? Language.GetTextValue("GameUI.LayerSpace") : Language.GetTextValue("GameUI.LayerSurface")))));
				num15 = Math.Abs(num15);
				text2 = ((num15 != 0) ? Language.GetTextValue("GameUI.Depth", num15) : Language.GetTextValue("GameUI.DepthLevel")) + " " + text5;
			}
			else
			{
				num = info.Type;
				text2 = info.DisplayValue(ref infoTextColor, ref infoTextShadowColor);
				text3 = info.DisplayName.ToString();
			}
			InfoDisplayLoader.ModifyDisplayValue(info, ref text2);
			InfoDisplayLoader.ModifyDisplayName(info, ref text3);
			InfoDisplayLoader.ModifyDisplayColor(info, ref infoTextColor, ref infoTextShadowColor);
			InfoDisplayLoader.ModifyDisplayParameters(info, ref text2, ref text3, ref infoTextColor, ref infoTextShadowColor);
			if (!(text2 != ""))
			{
				continue;
			}
			GetInfoAccIconPosition(num23, startX, out var X, out var Y);
			if (num >= 0)
			{
				int num19 = 22;
				if (screenHeight < 650)
				{
					num19 = 20;
				}
				((Vector2)(ref vector2))._002Ector((float)X, (float)(Y + 74 + num19 * num23 + 52));
				int num20 = info.Type;
				Texture2D icon = ModContent.Request<Texture2D>(info.Texture).Value;
				Texture2D iconHover = ModContent.Request<Texture2D>(info.HoverTexture).Value;
				Color color2 = Color.White;
				bool flag14 = false;
				if (playerInventory)
				{
					((Vector2)(ref vector2))._002Ector((float)X, (float)Y);
					if ((float)mouseX >= vector2.X && (float)mouseY >= vector2.Y && (float)mouseX <= vector2.X + (float)icon.Width && (float)mouseY <= vector2.Y + (float)icon.Height && !PlayerInput.IgnoreMouseInterface)
					{
						flag14 = true;
						player[myPlayer].mouseInterface = true;
						if (mouseLeft && mouseLeftRelease)
						{
							SoundEngine.PlaySound(12);
							mouseLeftRelease = false;
							player[myPlayer].hideInfo[num20] = !player[myPlayer].hideInfo[num20];
						}
						if (!mouseText)
						{
							text = text3;
							mouseText = true;
						}
					}
					if (player[myPlayer].hideInfo[num20])
					{
						((Color)(ref color2))._002Ector(80, 80, 80, 70);
					}
				}
				else if ((float)mouseX >= vector2.X && (float)mouseY >= vector2.Y && (float)mouseX <= vector2.X + (float)icon.Width && (float)mouseY <= vector2.Y + (float)icon.Height && !mouseText)
				{
					num12 = num23;
					text = text3;
					mouseText = true;
				}
				if (num23 <= InfoDisplayLoader.DefaultDisplayCount)
				{
					UILinkPointNavigator.SetPosition(1558 + num23 - 1, vector2 + icon.Size() * 0.75f);
				}
				SpriteBatch obj = spriteBatch;
				Vector2 val2 = vector2;
				Rectangle? val3 = new Rectangle(0, 0, icon.Width, icon.Height);
				Color val4 = color2;
				val = default(Vector2);
				obj.Draw(icon, val2, val3, val4, 0f, val, 1f, (SpriteEffects)0, 0f);
				if (flag14)
				{
					SpriteBatch obj2 = spriteBatch;
					Vector2 val5 = vector2 - Vector2.One * 2f;
					Color ourFavoriteColor = OurFavoriteColor;
					val = default(Vector2);
					obj2.Draw(iconHover, val5, (Rectangle?)null, ourFavoriteColor, 0f, val, 1f, (SpriteEffects)0, 0f);
				}
				X += 20;
			}
			UILinkPointNavigator.Shortcuts.INFOACCCOUNT = num23;
			if (!playerInventory)
			{
				((Vector2)(ref scale))._002Ector(1f);
				Vector2 vector3 = FontAssets.MouseText.Value.MeasureString(text2);
				if (vector3.X > num25)
				{
					scale.X = num25 / vector3.X;
				}
				if (scale.X < 0.58f)
				{
					scale.Y = 1f - scale.X / 3f;
				}
				for (int n = 0; n < 5; n++)
				{
					int num21 = 0;
					int num22 = 0;
					Color color3 = infoTextShadowColor;
					if (n == 0)
					{
						num21 = -2;
					}
					if (n == 1)
					{
						num21 = 2;
					}
					if (n == 2)
					{
						num22 = -2;
					}
					if (n == 3)
					{
						num22 = 2;
					}
					if (n == 4)
					{
						color3 = infoTextColor;
					}
					if (num23 > num12 && num23 < num12 + 2)
					{
						((Color)(ref color3))._002Ector(((Color)(ref color3)).R / 3, ((Color)(ref color3)).G / 3, ((Color)(ref color3)).B / 3, ((Color)(ref color3)).A / 3);
					}
					int num24 = 22;
					if (screenHeight < 650)
					{
						num24 = 20;
					}
					SpriteBatch obj3 = spriteBatch;
					DynamicSpriteFont value2 = FontAssets.MouseText.Value;
					string text6 = text2;
					Vector2 position = new Vector2((float)(X + num21), (float)(Y + 74 + num24 * num23 + num22 + 48));
					Color color4 = color3;
					val = default(Vector2);
					obj3.DrawString(value2, text6, position, color4, 0f, val, scale, (SpriteEffects)0, 0f);
				}
			}
			num23++;
		}
		if (!string.IsNullOrEmpty(text))
		{
			if (playerInventory)
			{
				player[myPlayer].mouseInterface = true;
			}
			MouseText(text, 0, 0);
		}
	}

	private void DrawInfoAccs_AdjustInfoTextColorsForNPC(NPC npc, ref Color infoTextColor, ref Color infoTextShadowColor)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < NPCID.Sets.GoldCrittersCollection.Count; i++)
		{
			int num = NPCID.Sets.GoldCrittersCollection[i];
			if (npc.type == num)
			{
				infoTextColor = OurFavoriteColor;
				infoTextShadowColor = infoTextColor * 0.1f;
				byte b2 = (((Color)(ref infoTextShadowColor)).A = mouseTextColor);
				byte a = b2;
				((Color)(ref infoTextColor)).A = a;
				break;
			}
		}
	}

	private static void GetInfoAccIconPosition(int drawnCount, int StartX, out int X, out int Y)
	{
		if (!playerInventory)
		{
			X = screenWidth - 280;
			Y = -32;
			if (mapStyle == 1 && mapEnabled)
			{
				Y += 261;
			}
		}
		else if (ShouldDrawInfoIconsHorizontally)
		{
			X = screenWidth - 280 + 20 * (drawnCount % 12) - 10;
			Y = 94 + 20 * (drawnCount / 12);
			if (mapStyle == 1 && mapEnabled)
			{
				Y += 261;
			}
		}
		else
		{
			int num = (int)(52f * inventoryScale);
			float num2 = 0.85f;
			int num3 = (int)(52f * num2);
			int nPCS_IconsPerColumn = UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn;
			int nPCS_IconsTotal = UILinkPointNavigator.Shortcuts.NPCS_IconsTotal;
			int num4 = (int)Math.Ceiling((float)nPCS_IconsTotal / (float)nPCS_IconsPerColumn);
			int num5 = nPCS_IconsTotal - Math.Max(0, (num4 - 1) * nPCS_IconsPerColumn);
			int num6 = nPCS_IconsPerColumn - num5;
			int num7 = Math.Max(0, num4 - 4);
			if (num4 >= 4 && num6 < 5)
			{
				num7++;
			}
			int num8 = num7 * (num3 + 4);
			if (EquipPage != 1)
			{
				num8 = 0;
			}
			X = 697 - num * 4 + screenWidth - 800 + 20 * (drawnCount % 2) - num8;
			Y = 114 + mH + num * 7 + num / 2 + 20 * (drawnCount / 2) + 8 * (drawnCount / 4) - 20;
			if (EquipPage == 2)
			{
				X += num + num / 2;
				Y -= num;
			}
		}
		X += StartX;
	}

	private void DrawBuilderAccToggles(Vector2 start)
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		if (playerInventory)
		{
			string.IsNullOrEmpty(npcChatText);
			if (player[myPlayer].sign < 0)
			{
				DrawBuilderAccToggles_Inner(start);
			}
		}
	}

	private static void GetBuilderAccsCountToShow(Player plr, out int blockReplaceIcons, out int torchGodIcons, out int totalDrawnIcons)
	{
		blockReplaceIcons = 1;
		torchGodIcons = (plr.unlockedBiomeTorches ? 1 : 0);
		totalDrawnIcons = plr.InfoAccMechShowWires.ToInt() * 6 + plr.rulerLine.ToInt() + plr.rulerGrid.ToInt() + plr.autoActuator.ToInt() + plr.autoPaint.ToInt() + blockReplaceIcons + torchGodIcons;
	}

	public static void CheckInvasionProgressDisplay()
	{
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		if (invasionProgressMode != 2)
		{
			invasionProgressNearInvasion = false;
			return;
		}
		bool flag = false;
		Player player = Main.player[myPlayer];
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
		int num = 5000;
		int num2 = 0;
		Rectangle value = default(Rectangle);
		for (int i = 0; i < 200; i++)
		{
			if (!npc[i].active)
			{
				continue;
			}
			num2 = 0;
			switch (npc[i].type)
			{
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
				num2 = 1;
				break;
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 325:
			case 326:
			case 327:
			case 329:
			case 330:
				num2 = 2;
				break;
			case 26:
			case 27:
			case 28:
			case 29:
			case 111:
				num2 = 4;
				break;
			case 143:
			case 144:
			case 145:
				num2 = 5;
				break;
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 491:
				num2 = 6;
				break;
			case 381:
			case 382:
			case 383:
			case 385:
			case 386:
			case 388:
			case 389:
			case 390:
			case 391:
			case 395:
				num2 = 7;
				break;
			case 548:
			case 549:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 559:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
				num2 = 3;
				break;
			}
			if (num2 != 0 && (num2 != 1 || (!((double)player.position.Y > worldSurface * 16.0) && !dayTime && snowMoon)) && (num2 != 2 || (!((double)player.position.Y > worldSurface * 16.0) && !dayTime && pumpkinMoon)) && (num2 != 3 || DD2Event.Ongoing) && (num2 <= 3 || (!((double)player.position.Y > worldSurface * 16.0) && invasionType == num2 - 3)))
			{
				((Rectangle)(ref value))._002Ector((int)(npc[i].position.X + (float)(npc[i].width / 2)) - num, (int)(npc[i].position.Y + (float)(npc[i].height / 2)) - num, num * 2, num * 2);
				if (((Rectangle)(ref rectangle)).Intersects(value))
				{
					flag = true;
					break;
				}
			}
		}
		invasionProgressNearInvasion = flag;
		if (!flag || invasionProgressIcon != 0)
		{
			return;
		}
		int waveNumber = NPC.waveNumber;
		if (snowMoon)
		{
			int progressMax = NPC.MoonEventRequiredPointsPerWaveLookup[waveNumber];
			ReportInvasionProgress((int)NPC.waveKills, progressMax, 1, waveNumber);
			return;
		}
		if (pumpkinMoon)
		{
			int progressMax2 = NPC.MoonEventRequiredPointsPerWaveLookup[waveNumber];
			ReportInvasionProgress((int)NPC.waveKills, progressMax2, 2, waveNumber);
			return;
		}
		if (DD2Event.Ongoing)
		{
			DD2Event.ReportEventProgress();
			return;
		}
		int progressMax3 = 1;
		if (invasionType != 0 && invasionSizeStart != 0)
		{
			progressMax3 = invasionSizeStart;
		}
		ReportInvasionProgress(invasionSizeStart - invasionSize, progressMax3, num2, 0);
	}

	public static void SyncAnInvasion(int toWho)
	{
		int waveNumber = NPC.waveNumber;
		if (snowMoon)
		{
			int num = (new int[21]
			{
				0, 25, 15, 10, 30, 100, 160, 180, 200, 250,
				300, 375, 450, 525, 675, 850, 1025, 1325, 1550, 2000,
				0
			})[waveNumber];
			NetMessage.SendData(78, toWho, -1, null, (int)NPC.waveKills, num, 1f, waveNumber);
		}
		else if (pumpkinMoon)
		{
			int num2 = (new int[16]
			{
				0, 25, 40, 50, 80, 100, 160, 180, 200, 250,
				300, 375, 450, 525, 675, 0
			})[waveNumber];
			NetMessage.SendData(78, toWho, -1, null, (int)NPC.waveKills, num2, 2f, waveNumber);
		}
		else if (DD2Event.Ongoing)
		{
			DD2Event.SyncInvasionProgress(toWho);
		}
		else if (invasionType > 0)
		{
			int num3 = 1;
			if (invasionType != 0 && invasionSizeStart != 0)
			{
				num3 = invasionSizeStart;
			}
			NetMessage.SendData(78, toWho, -1, null, invasionSizeStart - invasionSize, num3, invasionType + 3);
		}
	}

	public static void ReportInvasionProgress(int progress, int progressMax, int icon, int progressWave)
	{
		invasionProgress = progress;
		invasionProgressMax = progressMax;
		invasionProgressIcon = icon;
		invasionProgressWave = progressWave;
		invasionProgressDisplayLeft = 160;
	}

	public static void DrawInvasionProgress()
	{
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0612: Unknown result type (might be due to invalid IL or missing references)
		//IL_061f: Unknown result type (might be due to invalid IL or missing references)
		//IL_063a: Unknown result type (might be due to invalid IL or missing references)
		//IL_064a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0654: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_0273: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_093c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0941: Unknown result type (might be due to invalid IL or missing references)
		//IL_094a: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0706: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0401: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0415: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_041f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0428: Unknown result type (might be due to invalid IL or missing references)
		//IL_042a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0434: Unknown result type (might be due to invalid IL or missing references)
		//IL_0445: Unknown result type (might be due to invalid IL or missing references)
		//IL_0452: Unknown result type (might be due to invalid IL or missing references)
		//IL_045e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_0481: Unknown result type (might be due to invalid IL or missing references)
		//IL_0492: Unknown result type (might be due to invalid IL or missing references)
		//IL_0494: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04df: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0509: Unknown result type (might be due to invalid IL or missing references)
		//IL_0528: Unknown result type (might be due to invalid IL or missing references)
		//IL_052e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0545: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0563: Unknown result type (might be due to invalid IL or missing references)
		//IL_056f: Unknown result type (might be due to invalid IL or missing references)
		//IL_058e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_059e: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_097c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0981: Unknown result type (might be due to invalid IL or missing references)
		//IL_0992: Unknown result type (might be due to invalid IL or missing references)
		//IL_0997: Unknown result type (might be due to invalid IL or missing references)
		//IL_099d: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_09bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_09be: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a09: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a51: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a68: Unknown result type (might be due to invalid IL or missing references)
		//IL_095a: Unknown result type (might be due to invalid IL or missing references)
		//IL_077d: Unknown result type (might be due to invalid IL or missing references)
		//IL_077f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0786: Unknown result type (might be due to invalid IL or missing references)
		//IL_078b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0790: Unknown result type (might be due to invalid IL or missing references)
		//IL_079a: Unknown result type (might be due to invalid IL or missing references)
		//IL_079f: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07be: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07df: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0800: Unknown result type (might be due to invalid IL or missing references)
		//IL_0805: Unknown result type (might be due to invalid IL or missing references)
		//IL_0816: Unknown result type (might be due to invalid IL or missing references)
		//IL_081c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0832: Unknown result type (might be due to invalid IL or missing references)
		//IL_083c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0850: Unknown result type (might be due to invalid IL or missing references)
		//IL_085c: Unknown result type (might be due to invalid IL or missing references)
		//IL_087b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0881: Unknown result type (might be due to invalid IL or missing references)
		//IL_0898: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_090f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0921: Unknown result type (might be due to invalid IL or missing references)
		//IL_0760: Unknown result type (might be due to invalid IL or missing references)
		if (invasionProgress == -1)
		{
			return;
		}
		if (invasionProgressMode == 2 && invasionProgressNearInvasion && invasionProgressDisplayLeft < 160)
		{
			invasionProgressDisplayLeft = 160;
		}
		if (!gamePaused && invasionProgressDisplayLeft > 0)
		{
			invasionProgressDisplayLeft--;
		}
		if (invasionProgressDisplayLeft > 0)
		{
			invasionProgressAlpha += 0.05f;
		}
		else
		{
			invasionProgressAlpha -= 0.05f;
		}
		if (invasionProgressMode == 0)
		{
			invasionProgressDisplayLeft = 0;
			invasionProgressAlpha = 0f;
		}
		if (invasionProgressAlpha < 0f)
		{
			invasionProgressAlpha = 0f;
		}
		if (invasionProgressAlpha > 1f)
		{
			invasionProgressAlpha = 1f;
		}
		if (invasionProgressAlpha <= 0f)
		{
			return;
		}
		float num = 0.5f + invasionProgressAlpha * 0.5f;
		Texture2D value = TextureAssets.Extra[9].Value;
		string text = "";
		Color c = Color.White;
		if (invasionProgressIcon == 1)
		{
			value = TextureAssets.Extra[8].Value;
			text = Lang.inter[83].Value;
			c = new Color(64, 109, 164) * 0.5f;
		}
		else if (invasionProgressIcon == 2)
		{
			value = TextureAssets.Extra[12].Value;
			text = Lang.inter[84].Value;
			c = new Color(112, 86, 114) * 0.5f;
		}
		else if (invasionProgressIcon == 3)
		{
			value = TextureAssets.Extra[79].Value;
			text = Language.GetTextValue("DungeonDefenders2.InvasionProgressTitle");
			c = new Color(88, 0, 160) * 0.5f;
		}
		else if (invasionProgressIcon == 7)
		{
			value = TextureAssets.Extra[10].Value;
			text = Lang.inter[85].Value;
			c = new Color(165, 160, 155) * 0.5f;
		}
		else if (invasionProgressIcon == 6)
		{
			value = TextureAssets.Extra[11].Value;
			text = Lang.inter[86].Value;
			c = new Color(148, 122, 72) * 0.5f;
		}
		else if (invasionProgressIcon == 5)
		{
			value = TextureAssets.Extra[7].Value;
			text = Lang.inter[87].Value;
			c = new Color(173, 135, 140) * 0.5f;
		}
		else if (invasionProgressIcon == 4)
		{
			value = TextureAssets.Extra[9].Value;
			text = Lang.inter[88].Value;
			c = new Color(94, 72, 131) * 0.5f;
		}
		Rectangle r4 = default(Rectangle);
		if (invasionProgressWave > 0)
		{
			int num6 = (int)(200f * num);
			int num7 = (int)(45f * num);
			Vector2 vector = default(Vector2);
			((Vector2)(ref vector))._002Ector((float)(screenWidth - 120), (float)(screenHeight - 40));
			((Rectangle)(ref r4))._002Ector((int)vector.X - num6 / 2, (int)vector.Y - num7 / 2, num6, num7);
			Utils.DrawInvBG(spriteBatch, r4, new Color(63, 65, 151, 255) * 0.785f);
			string text2 = "";
			text2 = Language.GetTextValue("Game.WaveMessage", arg1: (invasionProgressMax != 0) ? ((int)((float)invasionProgress * 100f / (float)invasionProgressMax) + "%") : Language.GetTextValue("Game.InvasionPoints", invasionProgress), arg0: invasionProgressWave);
			Texture2D value2 = TextureAssets.ColorBar.Value;
			_ = TextureAssets.ColorBlip.Value;
			float num8 = MathHelper.Clamp((float)invasionProgress / (float)invasionProgressMax, 0f, 1f);
			if (invasionProgressMax == 0)
			{
				num8 = 1f;
			}
			float num9 = 169f * num;
			float num10 = 8f * num;
			Vector2 vector2 = vector + Vector2.UnitY * num10 + Vector2.UnitX * 1f;
			Utils.DrawBorderString(spriteBatch, text2, vector2, Color.White * invasionProgressAlpha, num, 0.5f, 1f);
			spriteBatch.Draw(value2, vector, (Rectangle?)null, Color.White * invasionProgressAlpha, 0f, new Vector2((float)(value2.Width / 2), 0f), num, (SpriteEffects)0, 0f);
			vector2 += Vector2.UnitX * (num8 - 0.5f) * num9;
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, (Rectangle?)new Rectangle(0, 0, 1, 1), new Color(255, 241, 51) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num9 * num8, num10), (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, (Rectangle?)new Rectangle(0, 0, 1, 1), new Color(255, 165, 0, 127) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num10), (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, (Rectangle?)new Rectangle(0, 0, 1, 1), Color.Black * invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num9 * (1f - num8), num10), (SpriteEffects)0, 0f);
		}
		else
		{
			int num11 = (int)(200f * num);
			int num12 = (int)(45f * num);
			Vector2 vector3 = default(Vector2);
			((Vector2)(ref vector3))._002Ector((float)(screenWidth - 120), (float)(screenHeight - 40));
			((Rectangle)(ref r4))._002Ector((int)vector3.X - num11 / 2, (int)vector3.Y - num12 / 2, num11, num12);
			Utils.DrawInvBG(spriteBatch, r4, new Color(63, 65, 151, 255) * 0.785f);
			string text3 = "";
			text3 = ((invasionProgressMax != 0) ? ((int)((float)invasionProgress * 100f / (float)invasionProgressMax) + "%") : invasionProgress.ToString());
			text3 = Language.GetTextValue("Game.WaveCleared", text3);
			Texture2D value3 = TextureAssets.ColorBar.Value;
			_ = TextureAssets.ColorBlip.Value;
			if (invasionProgressMax != 0)
			{
				spriteBatch.Draw(value3, vector3, (Rectangle?)null, Color.White * invasionProgressAlpha, 0f, new Vector2((float)(value3.Width / 2), 0f), num, (SpriteEffects)0, 0f);
				float num13 = MathHelper.Clamp((float)invasionProgress / (float)invasionProgressMax, 0f, 1f);
				Vector2 vector4 = FontAssets.MouseText.Value.MeasureString(text3);
				float num2 = num;
				if (vector4.Y > 22f)
				{
					num2 *= 22f / vector4.Y;
				}
				float num3 = 169f * num;
				float num4 = 8f * num;
				Vector2 vector5 = vector3 + Vector2.UnitY * num4 + Vector2.UnitX * 1f;
				Utils.DrawBorderString(spriteBatch, text3, vector5 + new Vector2(0f, -4f), Color.White * invasionProgressAlpha, num2, 0.5f, 1f);
				vector5 += Vector2.UnitX * (num13 - 0.5f) * num3;
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, (Rectangle?)new Rectangle(0, 0, 1, 1), new Color(255, 241, 51) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num3 * num13, num4), (SpriteEffects)0, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, (Rectangle?)new Rectangle(0, 0, 1, 1), new Color(255, 165, 0, 127) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num4), (SpriteEffects)0, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, (Rectangle?)new Rectangle(0, 0, 1, 1), Color.Black * invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num3 * (1f - num13), num4), (SpriteEffects)0, 0f);
			}
		}
		Vector2 vector6 = FontAssets.MouseText.Value.MeasureString(text);
		float num5 = 120f;
		if (vector6.X > 200f)
		{
			num5 += vector6.X - 200f;
		}
		Rectangle r3 = Utils.CenteredRectangle(new Vector2((float)screenWidth - num5, (float)(screenHeight - 80)), (vector6 + new Vector2((float)(value.Width + 12), 6f)) * num);
		Utils.DrawInvBG(spriteBatch, r3, c);
		spriteBatch.Draw(value, r3.Left() + Vector2.UnitX * num * 8f, (Rectangle?)null, Color.White * invasionProgressAlpha, 0f, new Vector2(0f, (float)(value.Height / 2)), num * 0.8f, (SpriteEffects)0, 0f);
		Utils.DrawBorderString(spriteBatch, text, r3.Right() + Vector2.UnitX * num * -22f, Color.White * invasionProgressAlpha, num * 0.9f, 1f, 0.4f);
	}

	protected void QuitGame()
	{
		SaveSettings();
		if (!dedServ)
		{
			SocialAPI.Shutdown();
		}
		Assets.TransferCompletedAssets();
		((Game)this).Exit();
	}

	private void Main_Exiting(object sender, EventArgs e)
	{
		TryDisposingEverything();
	}

	private static void TryDisposingEverything()
	{
		ChromaInitializer.DisableAllDeviceGroups();
		SteamedWraps.OnGameExitCleanup();
		TerrariaSteamClient.Shutdown();
		CaptureManager.Instance.Dispose();
		audioSystem.Dispose();
	}

	protected Color randColor()
	{
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		while (num + num3 + num2 <= 150)
		{
			num = rand.Next(256);
			num2 = rand.Next(256);
			num3 = rand.Next(256);
		}
		return new Color(num, num2, num3, 255);
	}

	public static Color hslToRgb(Vector3 hslVector)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		return hslToRgb(hslVector.X, hslVector.Y, hslVector.Z);
	}

	public static Color hslToRgb(float Hue, float Saturation, float Luminosity, byte a = byte.MaxValue)
	{
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		byte r;
		byte g;
		byte b;
		if (Saturation == 0f)
		{
			r = (byte)Math.Round((double)Luminosity * 255.0);
			g = (byte)Math.Round((double)Luminosity * 255.0);
			b = (byte)Math.Round((double)Luminosity * 255.0);
		}
		else
		{
			double num3 = Hue;
			double num2 = ((!((double)Luminosity < 0.5)) ? ((double)(Luminosity + Saturation - Luminosity * Saturation)) : ((double)Luminosity * (1.0 + (double)Saturation)));
			double t = 2.0 * (double)Luminosity - num2;
			double c = num3 + 1.0 / 3.0;
			double c2 = num3;
			double c3 = num3 - 1.0 / 3.0;
			c = hue2rgb(c, t, num2);
			c2 = hue2rgb(c2, t, num2);
			double num4 = hue2rgb(c3, t, num2);
			r = (byte)Math.Round(c * 255.0);
			g = (byte)Math.Round(c2 * 255.0);
			b = (byte)Math.Round(num4 * 255.0);
		}
		return new Color((int)r, (int)g, (int)b, (int)a);
	}

	public static double hue2rgb(double c, double t1, double t2)
	{
		if (c < 0.0)
		{
			c += 1.0;
		}
		if (c > 1.0)
		{
			c -= 1.0;
		}
		if (6.0 * c < 1.0)
		{
			return t1 + (t2 - t1) * 6.0 * c;
		}
		if (2.0 * c < 1.0)
		{
			return t2;
		}
		if (3.0 * c < 2.0)
		{
			return t1 + (t2 - t1) * (2.0 / 3.0 - c) * 6.0;
		}
		return t1;
	}

	public static Vector3 rgbToHsl(Color newColor)
	{
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		float num = (int)((Color)(ref newColor)).R;
		float num2 = (int)((Color)(ref newColor)).G;
		float num3 = (int)((Color)(ref newColor)).B;
		num /= 255f;
		num2 /= 255f;
		num3 /= 255f;
		float val = Math.Max(num, num2);
		val = Math.Max(val, num3);
		float val2 = Math.Min(num, num2);
		val2 = Math.Min(val2, num3);
		float num4 = 0f;
		float num5 = (val + val2) / 2f;
		float y;
		if (val == val2)
		{
			num4 = (y = 0f);
		}
		else
		{
			float num6 = val - val2;
			y = (((double)num5 > 0.5) ? (num6 / (2f - val - val2)) : (num6 / (val + val2)));
			if (val == num)
			{
				num4 = (num2 - num3) / num6 + (float)((num2 < num3) ? 6 : 0);
			}
			if (val == num2)
			{
				num4 = (num3 - num) / num6 + 2f;
			}
			if (val == num3)
			{
				num4 = (num - num2) / num6 + 4f;
			}
			num4 /= 6f;
		}
		return new Vector3(num4, y, num5);
	}

	public static void DrawCursor(Vector2 bonus, bool smart = false)
	{
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_036c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0280: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0237: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		if (gameMenu && alreadyGrabbingSunOrMoon)
		{
			return;
		}
		if (player[myPlayer].dead || player[myPlayer].mouseInterface)
		{
			ClearSmartInteract();
			TileInteractionLX = (TileInteractionHX = (TileInteractionLY = (TileInteractionHY = -1)));
		}
		Color color = cursorColor;
		if (!gameMenu && LocalPlayer.hasRainbowCursor)
		{
			color = hslToRgb(GlobalTimeWrappedHourly * 0.25f % 1f, 1f, 0.5f);
		}
		bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
		if (PlayerInput.SettingsForUI.ShowGamepadCursor)
		{
			if ((player[myPlayer].dead && !player[myPlayer].ghost && !gameMenu) || PlayerInput.InvisibleGamepadInMenus)
			{
				return;
			}
			Vector2 t = default(Vector2);
			((Vector2)(ref t))._002Ector((float)mouseX, (float)mouseY);
			Vector2 t2 = Vector2.Zero;
			bool flag2 = SmartCursorIsUsed;
			if (flag2)
			{
				PlayerInput.smartSelectPointer.UpdateCenter(ScreenSize.ToVector2() / 2f);
				t2 = PlayerInput.smartSelectPointer.GetPointerPosition();
				if (Vector2.Distance(t2, t) < 1f)
				{
					flag2 = false;
				}
				else
				{
					Utils.Swap(ref t, ref t2);
				}
			}
			float num = 1f;
			if (flag2)
			{
				num = 0.3f;
				color = Color.White * GamepadCursorAlpha;
				int num2 = 17;
				int frameX = 0;
				spriteBatch.Draw(TextureAssets.Cursors[num2].Value, t2 + bonus, (Rectangle?)TextureAssets.Cursors[num2].Frame(1, 1, frameX), color, (float)Math.PI / 2f * GlobalTimeWrappedHourly, TextureAssets.Cursors[num2].Frame(1, 1, frameX).Size() / 2f, cursorScale, (SpriteEffects)0, 0f);
			}
			if (smart && !flag)
			{
				color = Color.White * GamepadCursorAlpha * num;
				int num3 = 13;
				int frameX2 = 0;
				spriteBatch.Draw(TextureAssets.Cursors[num3].Value, t + bonus, (Rectangle?)TextureAssets.Cursors[num3].Frame(2, 1, frameX2), color, 0f, TextureAssets.Cursors[num3].Frame(2, 1, frameX2).Size() / 2f, cursorScale, (SpriteEffects)0, 0f);
			}
			else
			{
				color = Color.White;
				int num4 = 15;
				spriteBatch.Draw(TextureAssets.Cursors[num4].Value, new Vector2((float)mouseX, (float)mouseY) + bonus, (Rectangle?)null, color, 0f, TextureAssets.Cursors[num4].Value.Size() / 2f, cursorScale, (SpriteEffects)0, 0f);
			}
		}
		else
		{
			int num5 = smart.ToInt();
			spriteBatch.Draw(TextureAssets.Cursors[num5].Value, new Vector2((float)mouseX, (float)mouseY) + bonus + Vector2.One, (Rectangle?)null, new Color((int)((float)(int)((Color)(ref color)).R * 0.2f), (int)((float)(int)((Color)(ref color)).G * 0.2f), (int)((float)(int)((Color)(ref color)).B * 0.2f), (int)((float)(int)((Color)(ref color)).A * 0.5f)), 0f, default(Vector2), cursorScale * 1.1f, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.Cursors[num5].Value, new Vector2((float)mouseX, (float)mouseY) + bonus, (Rectangle?)null, color, 0f, default(Vector2), cursorScale, (SpriteEffects)0, 0f);
		}
	}

	public static void ClearSmartInteract()
	{
		SmartInteractShowingGenuine = false;
		SmartInteractShowingFake = false;
		SmartInteractNPC = -1;
		SmartInteractProj = -1;
		SmartInteractTileCoords.Clear();
		SmartInteractTileCoordsSelected.Clear();
	}

	public static Vector2 DrawThickCursor(bool smart = false)
	{
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		if (ThickMouse)
		{
			bool showGamepadCursor = PlayerInput.SettingsForUI.ShowGamepadCursor;
			if (gameMenu && alreadyGrabbingSunOrMoon)
			{
				return Vector2.Zero;
			}
			if (showGamepadCursor && PlayerInput.InvisibleGamepadInMenus)
			{
				return Vector2.Zero;
			}
			if (showGamepadCursor && player[myPlayer].dead && !player[myPlayer].ghost && !gameMenu)
			{
				return Vector2.Zero;
			}
			bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
			Color mouseBorderColor = MouseBorderColor;
			int num = 11;
			num += smart.ToInt();
			Vector2 origin = default(Vector2);
			for (int i = 0; i < 4; i++)
			{
				Vector2 vector = Vector2.Zero;
				switch (i)
				{
				case 0:
					((Vector2)(ref vector))._002Ector(0f, 1f);
					break;
				case 1:
					((Vector2)(ref vector))._002Ector(1f, 0f);
					break;
				case 2:
					((Vector2)(ref vector))._002Ector(0f, -1f);
					break;
				case 3:
					((Vector2)(ref vector))._002Ector(-1f, 0f);
					break;
				}
				vector *= 1f;
				vector += Vector2.One * 2f;
				((Vector2)(ref origin))._002Ector(2f);
				Rectangle? sourceRectangle = null;
				float scale = cursorScale * 1.1f;
				if (showGamepadCursor)
				{
					if (smart && !flag)
					{
						num = 13;
						int frameX = 0;
						vector = Vector2.One;
						sourceRectangle = TextureAssets.Cursors[num].Frame(2, 1, frameX);
						origin = TextureAssets.Cursors[num].Frame(2, 1, frameX).Size() / 2f;
						mouseBorderColor *= GamepadCursorAlpha;
					}
					else
					{
						num = 15;
						vector = Vector2.One;
						origin = TextureAssets.Cursors[num].Value.Size() / 2f;
					}
				}
				spriteBatch.Draw(TextureAssets.Cursors[num].Value, new Vector2((float)mouseX, (float)mouseY) + vector, sourceRectangle, mouseBorderColor, 0f, origin, scale, (SpriteEffects)0, 0f);
			}
			return new Vector2(2f);
		}
		return Vector2.Zero;
	}

	private void OnCharacterNamed(string text)
	{
		PendingPlayer.name = text.Trim();
		PlayerFileData.CreateAndSave(PendingPlayer);
		LoadPlayers();
		menuMode = 1;
	}

	private void OnSeedSelected(string text)
	{
		text = text.Trim();
		if (text.Length == 0)
		{
			ActiveWorldFileData.SetSeedToRandom();
		}
		else
		{
			ActiveWorldFileData.SetSeed(text);
		}
		menuMode = 10;
		WorldGen.CreateNewWorld();
	}

	private void OnWorldNamed(string text)
	{
		menuMode = 10;
		worldName = text.Trim();
		ActiveWorldFileData = WorldFile.CreateMetadata(worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, GameMode);
		menuMode = 5000;
	}

	private static Action CreateGoToMenuEvent(int menu)
	{
		return delegate
		{
			menuMode = menu;
			UILinkPointNavigator.Shortcuts.FANCYUI_SPECIAL_INSTRUCTIONS = 0;
		};
	}

	public static void GoToWorldSelect()
	{
		menuMode = 888;
		MenuUI.SetState(_worldSelectMenu);
	}

	public static void StartClientGameplay()
	{
		menuMode = 10;
		Netplay.StartTcpClient();
	}

	public static void ReleaseHostAndPlayProcess()
	{
		if (tServer != null)
		{
			tServer = null;
		}
	}

	private string SanitizePathArgument(string argumentName, string argumentPath)
	{
		string input = Regex.Replace(argumentPath, "(\\\\*)\"", "$1$1\\\"");
		string text = "\"" + Regex.Replace(input, "(\\\\+)$", "$1$1") + "\"";
		return " -" + argumentName + " " + text;
	}

	protected void DrawMenu(GameTime gameTime)
	{
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_052a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0625: Unknown result type (might be due to invalid IL or missing references)
		//IL_0640: Unknown result type (might be due to invalid IL or missing references)
		//IL_064a: Unknown result type (might be due to invalid IL or missing references)
		//IL_066b: Unknown result type (might be due to invalid IL or missing references)
		//IL_069d: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ff1: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_5ffb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6003: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0745: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0770: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_60a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_60a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_7172: Unknown result type (might be due to invalid IL or missing references)
		//IL_7177: Unknown result type (might be due to invalid IL or missing references)
		//IL_7181: Unknown result type (might be due to invalid IL or missing references)
		//IL_7190: Unknown result type (might be due to invalid IL or missing references)
		//IL_719f: Unknown result type (might be due to invalid IL or missing references)
		//IL_71a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_71a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_617b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6180: Unknown result type (might be due to invalid IL or missing references)
		//IL_611b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6120: Unknown result type (might be due to invalid IL or missing references)
		//IL_75c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_75cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_74e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_74e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_74f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7502: Unknown result type (might be due to invalid IL or missing references)
		//IL_7511: Unknown result type (might be due to invalid IL or missing references)
		//IL_7516: Unknown result type (might be due to invalid IL or missing references)
		//IL_751b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7096: Unknown result type (might be due to invalid IL or missing references)
		//IL_7097: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c92: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ca3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7129: Unknown result type (might be due to invalid IL or missing references)
		//IL_712b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7130: Unknown result type (might be due to invalid IL or missing references)
		//IL_7204: Unknown result type (might be due to invalid IL or missing references)
		//IL_7209: Unknown result type (might be due to invalid IL or missing references)
		//IL_7213: Unknown result type (might be due to invalid IL or missing references)
		//IL_7222: Unknown result type (might be due to invalid IL or missing references)
		//IL_7231: Unknown result type (might be due to invalid IL or missing references)
		//IL_7236: Unknown result type (might be due to invalid IL or missing references)
		//IL_723b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6248: Unknown result type (might be due to invalid IL or missing references)
		//IL_6257: Unknown result type (might be due to invalid IL or missing references)
		//IL_6261: Unknown result type (might be due to invalid IL or missing references)
		//IL_6266: Unknown result type (might be due to invalid IL or missing references)
		//IL_628c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6291: Unknown result type (might be due to invalid IL or missing references)
		//IL_75f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_75fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_73b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_73b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_73be: Unknown result type (might be due to invalid IL or missing references)
		//IL_73bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_7296: Unknown result type (might be due to invalid IL or missing references)
		//IL_729b: Unknown result type (might be due to invalid IL or missing references)
		//IL_72a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_72b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_72c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_72c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_72cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_62b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_62b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_62d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_62dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_7630: Unknown result type (might be due to invalid IL or missing references)
		//IL_7631: Unknown result type (might be due to invalid IL or missing references)
		//IL_7635: Unknown result type (might be due to invalid IL or missing references)
		//IL_763a: Unknown result type (might be due to invalid IL or missing references)
		//IL_763e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7643: Unknown result type (might be due to invalid IL or missing references)
		//IL_7647: Unknown result type (might be due to invalid IL or missing references)
		//IL_764c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7650: Unknown result type (might be due to invalid IL or missing references)
		//IL_7655: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_79eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_79f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_79fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_79a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_79bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7659: Unknown result type (might be due to invalid IL or missing references)
		//IL_765a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ace: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ad3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c72: Unknown result type (might be due to invalid IL or missing references)
		//IL_63b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_63bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_6357: Unknown result type (might be due to invalid IL or missing references)
		//IL_635c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e82: Unknown result type (might be due to invalid IL or missing references)
		//IL_7eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ada: Unknown result type (might be due to invalid IL or missing references)
		//IL_6adb: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ec6: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ecb: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e29: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6484: Unknown result type (might be due to invalid IL or missing references)
		//IL_6493: Unknown result type (might be due to invalid IL or missing references)
		//IL_649d: Unknown result type (might be due to invalid IL or missing references)
		//IL_64a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_64c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_64cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f43: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f48: Unknown result type (might be due to invalid IL or missing references)
		//IL_747e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7483: Unknown result type (might be due to invalid IL or missing references)
		//IL_748c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7492: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e30: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_650a: Unknown result type (might be due to invalid IL or missing references)
		//IL_650f: Unknown result type (might be due to invalid IL or missing references)
		//IL_652d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6532: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ba8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bae: Unknown result type (might be due to invalid IL or missing references)
		//IL_6619: Unknown result type (might be due to invalid IL or missing references)
		//IL_661e: Unknown result type (might be due to invalid IL or missing references)
		//IL_65ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_65b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6eee: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_6efd: Unknown result type (might be due to invalid IL or missing references)
		//IL_66f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6704: Unknown result type (might be due to invalid IL or missing references)
		//IL_670e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6713: Unknown result type (might be due to invalid IL or missing references)
		//IL_674e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6753: Unknown result type (might be due to invalid IL or missing references)
		//IL_6768: Unknown result type (might be due to invalid IL or missing references)
		//IL_676d: Unknown result type (might be due to invalid IL or missing references)
		//IL_69ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_69b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_7934: Unknown result type (might be due to invalid IL or missing references)
		//IL_7949: Unknown result type (might be due to invalid IL or missing references)
		//IL_794e: Unknown result type (might be due to invalid IL or missing references)
		//IL_795a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7961: Unknown result type (might be due to invalid IL or missing references)
		//IL_78d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_78eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_78f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_78f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_677d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6781: Unknown result type (might be due to invalid IL or missing references)
		//IL_6786: Unknown result type (might be due to invalid IL or missing references)
		//IL_67a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_67a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_6884: Unknown result type (might be due to invalid IL or missing references)
		//IL_6889: Unknown result type (might be due to invalid IL or missing references)
		//IL_6824: Unknown result type (might be due to invalid IL or missing references)
		//IL_6829: Unknown result type (might be due to invalid IL or missing references)
		//IL_6954: Unknown result type (might be due to invalid IL or missing references)
		//IL_6963: Unknown result type (might be due to invalid IL or missing references)
		//IL_696d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6972: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2575: Unknown result type (might be due to invalid IL or missing references)
		//IL_257a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_26fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2703: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_27b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_27be: Unknown result type (might be due to invalid IL or missing references)
		//IL_2416: Unknown result type (might be due to invalid IL or missing references)
		//IL_241b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2874: Unknown result type (might be due to invalid IL or missing references)
		//IL_2879: Unknown result type (might be due to invalid IL or missing references)
		//IL_242e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2433: Unknown result type (might be due to invalid IL or missing references)
		//IL_2930: Unknown result type (might be due to invalid IL or missing references)
		//IL_2935: Unknown result type (might be due to invalid IL or missing references)
		//IL_29ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_29f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feb: Unknown result type (might be due to invalid IL or missing references)
		//IL_202c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2031: Unknown result type (might be due to invalid IL or missing references)
		//IL_203c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2041: Unknown result type (might be due to invalid IL or missing references)
		//IL_204c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2051: Unknown result type (might be due to invalid IL or missing references)
		//IL_205c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2061: Unknown result type (might be due to invalid IL or missing references)
		//IL_206c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2071: Unknown result type (might be due to invalid IL or missing references)
		//IL_2112: Unknown result type (might be due to invalid IL or missing references)
		//IL_2117: Unknown result type (might be due to invalid IL or missing references)
		//IL_4812: Unknown result type (might be due to invalid IL or missing references)
		//IL_4817: Unknown result type (might be due to invalid IL or missing references)
		//IL_4821: Unknown result type (might be due to invalid IL or missing references)
		//IL_48c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_48cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_48d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_4584: Unknown result type (might be due to invalid IL or missing references)
		//IL_4589: Unknown result type (might be due to invalid IL or missing references)
		//IL_4593: Unknown result type (might be due to invalid IL or missing references)
		//IL_45de: Unknown result type (might be due to invalid IL or missing references)
		//IL_45e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_45ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cce: Unknown result type (might be due to invalid IL or missing references)
		//IL_5079: Unknown result type (might be due to invalid IL or missing references)
		if (!IsEngineLoaded)
		{
			IsEngineLoaded = true;
			if (Main.OnEngineLoad != null)
			{
				Main.OnEngineLoad();
			}
		}
		GamepadMainMenuHandler.Update();
		GamepadMainMenuHandler.MenuItemPositions.Clear();
		int num = menuMode;
		if (menuMode <= 1 && slimeRain)
		{
			StopSlimeRain();
		}
		render = false;
		SceneMetrics.Reset();
		drawingPlayerChat = false;
		chatMonitor.Clear();
		screenLastPosition = screenPosition;
		screenPosition.Y = (float)(worldSurface * 16.0 - (double)screenHeight);
		MenuXMovement = 4f;
		if (alreadyGrabbingSunOrMoon && !playOldTile)
		{
			playOldTile = true;
			MenuLoader.ActivateOldVanillaMenu();
			if (starGame)
			{
				playOldTile = false;
			}
		}
		screenPosition.X += MenuXMovement;
		if (screenPosition.X > 2.1474835E+09f)
		{
			screenPosition.X = 0f;
		}
		if (screenPosition.X < -2.1474835E+09f)
		{
			screenPosition.X = 0f;
		}
		Star.UpdateStars();
		Cloud.UpdateClouds();
		DrawFPS();
		background = 0;
		byte b = (byte)((255 + ((Color)(ref tileColor)).R * 2) / 3);
		Color color = default(Color);
		((Color)(ref color))._002Ector((int)b, (int)b, (int)b, 255);
		if (WorldGen.remixWorldGen)
		{
			logoRotation += logoRotationSpeed * 4E-05f;
			if ((double)logoRotation < 3.04)
			{
				logoRotation += logoRotationSpeed * 0.0016f;
				if (logoRotationSpeed < 0f)
				{
					logoRotationSpeed = 0f;
				}
			}
			if ((double)logoRotation > 3.22)
			{
				logoRotationDirection = -1f;
			}
			else if ((double)logoRotation < 3.06)
			{
				logoRotationDirection = 1f;
			}
			if (logoRotationSpeed < 20f && logoRotationDirection == 1f)
			{
				logoRotationSpeed += 1f;
			}
			else if (logoRotationSpeed > -20f && logoRotationDirection == -1f)
			{
				logoRotationSpeed -= 1f;
			}
			logoScale += logoScaleSpeed * 9E-05f;
			if (logoScale > 1f)
			{
				logoScaleDirection = -1f;
			}
			else if (logoScale < 0.9f)
			{
				logoScaleDirection = 1f;
			}
			if (logoScaleSpeed < 50f && logoScaleDirection == 1f)
			{
				logoScaleSpeed += 1f;
			}
			else if (logoScaleSpeed > -50f && logoScaleDirection == -1f)
			{
				logoScaleSpeed -= 1f;
			}
		}
		else if (WorldGen.drunkWorldGen)
		{
			logoRotation += logoRotationSpeed * 4E-06f;
			if (logoRotationSpeed > 0f)
			{
				logoRotationSpeed += 1500f;
			}
			else
			{
				logoRotationSpeed -= 1500f;
			}
			logoScale -= 0.05f;
			if (logoScale < 0f)
			{
				logoScale = 0f;
			}
		}
		else
		{
			if ((double)logoRotation > 0.09)
			{
				logoRotation += logoRotationSpeed * 0.0016f;
				if (logoRotationSpeed > 0f)
				{
					logoRotationSpeed = 0f;
				}
			}
			logoRotation += logoRotationSpeed * 4E-06f;
			if ((double)logoRotation > 0.08)
			{
				logoRotationDirection = -1f;
			}
			else if ((double)logoRotation < -0.08)
			{
				logoRotationDirection = 1f;
			}
			if (logoRotationSpeed < 20f && logoRotationDirection == 1f)
			{
				logoRotationSpeed += 1f;
			}
			else if (logoRotationSpeed > -20f && logoRotationDirection == -1f)
			{
				logoRotationSpeed -= 1f;
			}
			logoScale += logoScaleSpeed * 9E-06f;
			if ((double)logoScale > 1.35)
			{
				logoScaleDirection = -1f;
			}
			else if (logoScale < 1f)
			{
				logoScaleDirection = 1f;
			}
			if (logoScaleSpeed < 50f && logoScaleDirection == 1f)
			{
				logoScaleSpeed += 1f;
			}
			else if (logoScaleSpeed > -50f && logoScaleDirection == -1f)
			{
				logoScaleSpeed -= 1f;
			}
		}
		MenuLoader.UpdateAndDrawModMenu(spriteBatch, gameTime, color, logoRotation, logoScale);
		Color color5 = default(Color);
		((Color)(ref color5))._002Ector((int)(byte)((float)(int)((Color)(ref color)).R * ((float)LogoA / 255f)), (int)(byte)((float)(int)((Color)(ref color)).G * ((float)LogoA / 255f)), (int)(byte)((float)(int)((Color)(ref color)).B * ((float)LogoA / 255f)), (int)(byte)((float)(int)((Color)(ref color)).A * ((float)LogoA / 255f)));
		Color color6 = default(Color);
		((Color)(ref color6))._002Ector((int)(byte)((float)(int)((Color)(ref color)).R * ((float)LogoB / 255f)), (int)(byte)((float)(int)((Color)(ref color)).G * ((float)LogoB / 255f)), (int)(byte)((float)(int)((Color)(ref color)).B * ((float)LogoB / 255f)), (int)(byte)((float)(int)((Color)(ref color)).A * ((float)LogoB / 255f)));
		if (MenuLoader.MenuOldVanilla.IsSelected)
		{
			spriteBatch.Draw(TextureAssets.Logo3.Value, new Vector2((float)(screenWidth / 2), 100f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color5, logoRotation, new Vector2((float)(TextureAssets.Logo.Width() / 2), (float)(TextureAssets.Logo.Height() / 2)), logoScale, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.Logo4.Value, new Vector2((float)(screenWidth / 2), 100f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color6, logoRotation, new Vector2((float)(TextureAssets.Logo.Width() / 2), (float)(TextureAssets.Logo.Height() / 2)), logoScale, (SpriteEffects)0, 0f);
		}
		else if (MenuLoader.MenuJourneysEnd.IsSelected)
		{
			spriteBatch.Draw(TextureAssets.Logo.Value, new Vector2((float)(screenWidth / 2), 100f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color5, logoRotation, new Vector2((float)(TextureAssets.Logo.Width() / 2), (float)(TextureAssets.Logo.Height() / 2)), logoScale, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.Logo2.Value, new Vector2((float)(screenWidth / 2), 100f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color6, logoRotation, new Vector2((float)(TextureAssets.Logo.Width() / 2), (float)(TextureAssets.Logo.Height() / 2)), logoScale, (SpriteEffects)0, 0f);
		}
		if (dayTime && !WorldGen.remixWorldGen)
		{
			LogoA += 2;
			if (LogoA > 255)
			{
				LogoA = 255;
			}
			LogoB--;
			if (LogoB < 0)
			{
				LogoB = 0;
			}
		}
		else
		{
			LogoB += 2;
			if (LogoB > 255)
			{
				LogoB = 255;
			}
			LogoA--;
			if (LogoA < 0)
			{
				LogoA = 0;
				LogoT = true;
			}
		}
		int num24 = 250;
		int num35 = screenWidth / 2;
		int num46 = 80;
		int num57 = 0;
		int num68 = menuMode;
		int num79 = 0;
		int num90 = 0;
		bool flag = false;
		bool flag4 = false;
		bool flag5 = false;
		int num101 = 0;
		bool[] array = new bool[maxMenuItems];
		bool[] array4 = new bool[maxMenuItems];
		bool[] array5 = new bool[maxMenuItems];
		int[] array6 = new int[maxMenuItems];
		int[] array7 = new int[maxMenuItems];
		byte[] array8 = new byte[maxMenuItems];
		float[] array9 = new float[maxMenuItems];
		bool[] array10 = new bool[maxMenuItems];
		bool flag6 = false;
		bool flag7 = UILinkPointNavigator.Shortcuts.BackButtonInUse && !UILinkPointNavigator.Shortcuts.BackButtonLock;
		for (int i = 0; i < maxMenuItems; i++)
		{
			array[i] = false;
			array4[i] = false;
			array6[i] = 0;
			array7[i] = 0;
			array9[i] = 1f;
		}
		string[] array11 = new string[maxMenuItems];
		if (menuMode == -1)
		{
			menuMode = 0;
		}
		if (Program.LoadedEverything)
		{
			GamepadMainMenuHandler.CanRun = true;
			if (menuMode == 1212)
			{
				array11[0] = Lang.menu[102].Value;
				num46 = 50;
				num24 = 200;
				num46 = 33;
				num24 = 200;
				array6[0] = -20;
				array6[1] = 25;
				array6[2] = 25;
				array6[3] = 25;
				array6[4] = 25;
				array6[5] = 25;
				array6[6] = 25;
				array6[7] = 25;
				array6[8] = 25;
				array6[9] = 25;
				array[0] = true;
				array11[1] = Language.GetTextValue("Language.English");
				array11[2] = Language.GetTextValue("Language.German");
				array11[3] = Language.GetTextValue("Language.Italian");
				array11[4] = Language.GetTextValue("Language.French");
				array11[5] = Language.GetTextValue("Language.Spanish");
				array11[6] = Language.GetTextValue("Language.Russian");
				array11[7] = Language.GetTextValue("Language.Chinese");
				array11[8] = Language.GetTextValue("Language.Portuguese");
				array11[9] = Language.GetTextValue("Language.Polish");
				num57 = 10;
				for (int j = 0; j < num57; j++)
				{
					array9[j] = 0.75f;
				}
				array9[0] = 1f;
				if (selectedMenu >= 1)
				{
					changeTheTitle = true;
					LanguageManager.Instance.SetLanguage(selectedMenu);
					menuMode = 10002;
					SoundEngine.PlaySound(10);
					SaveSettings();
				}
			}
			else if (menuMode == 1213)
			{
				array11[0] = Lang.menu[102].Value;
				array[0] = true;
				array11[1] = Language.GetTextValue("Language.English");
				array11[2] = Language.GetTextValue("Language.German");
				array11[3] = Language.GetTextValue("Language.Italian");
				array11[4] = Language.GetTextValue("Language.French");
				array11[5] = Language.GetTextValue("Language.Spanish");
				array11[6] = Language.GetTextValue("Language.Russian");
				array11[7] = Language.GetTextValue("Language.Chinese");
				array11[8] = Language.GetTextValue("Language.Portuguese");
				array11[9] = Language.GetTextValue("Language.Polish");
				array11[10] = Lang.menu[5].Value;
				num57 = 11;
				if (selectedMenu == 10 || flag7)
				{
					flag7 = false;
					menuMode = 11;
					SoundEngine.PlaySound(11);
				}
				else if (selectedMenu >= 1)
				{
					changeTheTitle = true;
					LanguageManager.Instance.SetLanguage(selectedMenu);
					SoundEngine.PlaySound(12);
					SaveSettings();
				}
				num46 = 33;
				num24 = 200;
				array6[0] = -20;
				array6[10] = 10;
				for (int k = 0; k < num57; k++)
				{
					array9[k] = 0.75f;
				}
				array9[0] = 0.85f;
				array9[10] = 0.95f;
			}
			else if (netMode == 2)
			{
				bool flag8 = true;
				for (int l = 0; l < 8; l++)
				{
					if (l >= 255)
					{
						continue;
					}
					try
					{
						array11[l] = Netplay.Clients[l].StatusText;
						if (Netplay.Clients[l].IsActive && showSpam)
						{
							ref string reference = ref array11[l];
							reference = reference + " (" + NetMessage.buffer[l].spamCount + ")";
						}
					}
					catch
					{
						array11[l] = "";
					}
					array[l] = true;
					if (array11[l] != "" && array11[l] != null)
					{
						flag8 = false;
					}
				}
				if (flag8)
				{
					array11[0] = Lang.menu[0].Value;
					array11[1] = Lang.menu[1].Value + Netplay.ListenPort + ".";
				}
				num57 = 11;
				array11[9] = statusText;
				array[9] = true;
				num24 = 170;
				num46 = 30;
				array6[10] = 20;
				array6[10] = 40;
				array11[10] = Lang.menu[2].Value;
				if (selectedMenu == 10 || flag7)
				{
					flag7 = false;
					Netplay.Disconnect = true;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 31)
			{
				if (PlayerInput.SettingsForUI.ShowGamepadHints)
				{
					UIVirtualKeyboard uIVirtualKeyboard = new UIVirtualKeyboard(Lang.menu[3].Value, Netplay.ServerPassword, OnSubmitServerPasswordFromRequest, CanceledGivingServerPassword, 0, allowEmpty: true);
					uIVirtualKeyboard.HideContents = HidePassword;
					UserInterface.ActiveInstance.SetState(uIVirtualKeyboard);
					menuMode = 888;
				}
				string serverPassword = Netplay.ServerPassword;
				PlayerInput.WritingText = true;
				instance.HandleIME();
				Netplay.ServerPassword = GetInputText(Netplay.ServerPassword);
				if (serverPassword != Netplay.ServerPassword)
				{
					SoundEngine.PlaySound(12);
				}
				array11[0] = Lang.menu[3].Value;
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				array11[1] = Netplay.ServerPassword;
				if (HidePassword)
				{
					array11[1] = "";
					for (int m = 0; m < Netplay.ServerPassword.Length; m++)
					{
						array11[1] += "*";
					}
				}
				if (textBlinkerState == 1)
				{
					array11[1] += "|";
					array7[1] = 1;
				}
				else
				{
					array11[1] += " ";
				}
				array[0] = true;
				array[1] = true;
				array6[1] = -20;
				array6[2] = 20;
				array11[2] = Lang.menu[4].Value;
				array11[3] = Lang.menu[5].Value;
				num57 = 4;
				if (selectedMenu == 3 || flag7)
				{
					flag7 = false;
					CanceledGivingServerPassword();
				}
				else if (selectedMenu == 2 || inputTextEnter)
				{
					OnSubmitServerPasswordFromRequest();
				}
			}
			else if ((netMode == 1 && menuMode < 10000 && menuMode != 888) || menuMode == 14)
			{
				num57 = 2;
				array11[0] = statusText;
				array[0] = true;
				num24 = 300;
				int num2 = statusText.Split('\n').Length - 1;
				array9[0] = 1f - (float)num2 * 0.04f;
				array6[0] = num2 * -18;
				array6[1] = num2 * 28;
				array11[1] = Lang.menu[6].Value;
				gameTips.Update();
				gameTips.Draw();
				if (selectedMenu == 1 || flag7)
				{
					flag7 = false;
					Netplay.InvalidateAllOngoingIPSetAttempts();
					Netplay.Disconnect = true;
					Netplay.Connection.Socket.Close();
					SoundEngine.PlaySound(11);
					menuMode = 0;
					netMode = 0;
					if (tServer != null)
					{
						try
						{
							tServer.Kill();
							tServer = null;
						}
						catch
						{
						}
					}
				}
			}
			else if (menuMode == 882)
			{
				num57 = 2;
				array[0] = true;
				num24 = 300;
				array11[0] = statusText;
				array11[1] = Lang.menu[6].Value;
				if (selectedMenu == 1 || flag7)
				{
					flag7 = false;
					SoundEngine.PlaySound(11);
					menuMode = 0;
					netMode = 0;
					if (SocialAPI.Network != null)
					{
						SocialAPI.Network.CancelJoin();
					}
				}
			}
			else if (menuMode == 30)
			{
				if (PlayerInput.SettingsForUI.ShowGamepadHints)
				{
					UIVirtualKeyboard uIVirtualKeyboard2 = new UIVirtualKeyboard(Lang.menu[7].Value, Netplay.ServerPassword, OnSubmitServerPassword, ExitServerPasswordMenu, 0, allowEmpty: true);
					uIVirtualKeyboard2.HideContents = HidePassword;
					UserInterface.ActiveInstance.SetState(uIVirtualKeyboard2);
					menuMode = 888;
				}
				string serverPassword2 = Netplay.ServerPassword;
				PlayerInput.WritingText = true;
				instance.HandleIME();
				Netplay.ServerPassword = GetInputText(Netplay.ServerPassword);
				if (serverPassword2 != Netplay.ServerPassword)
				{
					SoundEngine.PlaySound(12);
				}
				array11[0] = Lang.menu[7].Value;
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				array11[1] = Netplay.ServerPassword;
				if (HidePassword)
				{
					array11[1] = "";
					for (int n = 0; n < Netplay.ServerPassword.Length; n++)
					{
						array11[1] += "*";
					}
				}
				if (textBlinkerState == 1)
				{
					array11[1] += "|";
					array7[1] = 1;
				}
				else
				{
					array11[1] += " ";
				}
				array[0] = true;
				array[1] = true;
				array6[1] = -20;
				array6[2] = 20;
				array11[2] = Lang.menu[4].Value;
				array11[3] = Lang.menu[5].Value;
				num57 = 4;
				if (selectedMenu == 3 || flag7)
				{
					flag7 = false;
					ExitServerPasswordMenu();
				}
				else if (selectedMenu == 2 || inputTextEnter || autoPass)
				{
					OnSubmitServerPassword();
				}
			}
			else if (menuMode == 889)
			{
				num24 = 200;
				num46 = 60;
				array6[1] = 30;
				array6[2] = 30;
				array6[3] = 30;
				array6[4] = 70;
				array6[5] = 70;
				num57 = 6;
				int serverConsoleToggleId = num57++;
				array6[serverConsoleToggleId] = 70;
				array11[serverConsoleToggleId] = Language.GetTextValue(showServerConsole ? "tModLoader.MPShowServerConsoleYes" : "tModLoader.MPShowServerConsoleNo");
				array9[serverConsoleToggleId] = 0.5f;
				array11[0] = Lang.menu[135].Value;
				array11[4] = Lang.menu[144].Value;
				array11[5] = Lang.menu[5].Value;
				array[0] = true;
				if (!MenuServerMode.HasFlag(ServerMode.Lobby))
				{
					MenuServerMode = ServerMode.None;
					array[2] = true;
					array[3] = true;
					array11[1] = Lang.menu[136].Value;
					array11[2] = "";
					array11[3] = "";
				}
				else
				{
					array11[1] = Lang.menu[137].Value;
					if (MenuServerMode.HasFlag(ServerMode.FriendsCanJoin))
					{
						array11[2] = Lang.menu[139].Value;
						if (MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
						{
							array11[3] = Lang.menu[143].Value;
						}
						else
						{
							array11[3] = Lang.menu[142].Value;
						}
					}
					else
					{
						array11[2] = Lang.menu[138].Value;
						if (MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
						{
							array11[3] = Lang.menu[141].Value;
						}
						else
						{
							array11[3] = Lang.menu[140].Value;
						}
					}
				}
				if (flag7)
				{
					flag7 = false;
					selectedMenu = 5;
				}
				switch (selectedMenu)
				{
				case 1:
					MenuServerMode ^= ServerMode.Lobby;
					SoundEngine.PlaySound(12);
					break;
				case 2:
					MenuServerMode ^= ServerMode.FriendsCanJoin;
					SoundEngine.PlaySound(12);
					break;
				case 3:
					MenuServerMode ^= ServerMode.FriendsOfFriends;
					SoundEngine.PlaySound(12);
					break;
				case 4:
					clrInput();
					Netplay.ServerPassword = "";
					GetInputText("");
					autoPass = false;
					menuMode = 30;
					SoundEngine.PlaySound(10);
					break;
				case 5:
					menuMode = 6;
					SoundEngine.PlaySound(11);
					break;
				default:
					if (selectedMenu == serverConsoleToggleId)
					{
						showServerConsole = !showServerConsole;
						SoundEngine.PlaySound(12);
					}
					break;
				}
			}
			else if (menuMode == 15)
			{
				num57 = 2;
				array11[0] = statusText;
				array[0] = true;
				num24 = 80;
				num46 = 400;
				array11[1] = Lang.menu[5].Value;
				if (selectedMenu == 1 || flag7)
				{
					flag7 = false;
					Netplay.Disconnect = true;
					SoundEngine.PlaySound(11);
					menuMode = 0;
					netMode = 0;
				}
			}
			else if (menuMode == 200)
			{
				num57 = 3;
				array11[0] = Lang.menu[9].Value;
				if (WorldIO.customDataFail != null)
				{
					array11[0] = WorldIO.customDataFail.modName + ": " + array11[0];
				}
				array[0] = true;
				num24 -= 30;
				array6[1] = 70;
				array6[2] = 50;
				array11[1] = Lang.menu[10].Value;
				array11[2] = Lang.menu[6].Value;
				if (WorldIO.customDataFail != null)
				{
					array11[2] = Language.GetTextValue("tModLoader.OpenLogs");
				}
				if (selectedMenu == 1)
				{
					if (FileUtilities.Exists(worldPathName + ".bak", ActiveWorldFileData.IsCloudSave))
					{
						FileUtilities.Move(worldPathName, worldPathName + ".bad", ActiveWorldFileData.IsCloudSave);
						FileUtilities.Move(worldPathName + ".bak", worldPathName, ActiveWorldFileData.IsCloudSave);
						WorldIO.LoadBackup(worldPathName, ActiveWorldFileData.IsCloudSave);
						SoundEngine.PlaySound(10);
						WorldGen.playWorld();
						menuMode = 10;
					}
					else
					{
						SoundEngine.PlaySound(11);
						menuMode = 0;
						netMode = 0;
					}
				}
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					SoundEngine.PlaySound(11);
					if (WorldIO.customDataFail == null)
					{
						menuMode = 0;
					}
					else
					{
						Logging.tML.Error((object)Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
						SoundEngine.PlaySound(in SoundID.MenuOpen);
						Utils.OpenFolder(Logging.LogDir);
					}
					netMode = 0;
				}
			}
			else if (menuMode == 201)
			{
				num57 = 3;
				array11[0] = Lang.menu[9].Value;
				if (WorldIO.customDataFail != null)
				{
					array11[0] = WorldIO.customDataFail.modName + ": " + array11[0];
				}
				array[0] = true;
				array[1] = true;
				num24 -= 30;
				array6[1] = -30;
				array6[2] = 50;
				array11[1] = Lang.menu[11].Value;
				array11[2] = Lang.menu[5].Value;
				if (WorldIO.customDataFail != null)
				{
					array11[2] = Language.GetTextValue("tModLoader.OpenLogs");
				}
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					SoundEngine.PlaySound(11);
					if (WorldIO.customDataFail == null)
					{
						menuMode = 0;
					}
					else
					{
						Logging.tML.Error((object)Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
						SoundEngine.PlaySound(in SoundID.MenuOpen);
						Utils.OpenFolder(Logging.LogDir);
					}
					menuMode = 0;
					netMode = 0;
				}
			}
			else if (menuMode == 10)
			{
				num57 = 1;
				array11[0] = statusText;
				array[0] = true;
				num24 = 300;
				gameTips.Update();
				gameTips.Draw();
			}
			else if (menuMode == 100)
			{
				num57 = 1;
				array11[0] = statusText;
				array[0] = true;
				num24 = 300;
			}
			else if (menuMode == 0)
			{
				_blockFancyUIWhileLoading = false;
				_pendingCharacterSelect = null;
				DD2Event.Ongoing = false;
				eclipse = false;
				pumpkinMoon = false;
				snowMoon = false;
				ServerSideCharacter = false;
				menuMultiplayer = false;
				menuServer = false;
				netMode = 0;
				ClearVisualPostProcessEffects();
				int num13 = 0;
				num24 = 220;
				num57 = 7;
				num46 = 52;
				array11[num13] = Lang.menu[12].Value;
				if (selectedMenu == num13)
				{
					SoundEngine.PlaySound(10);
					ClearPendingPlayerSelectCallbacks();
					menuMode = 1;
				}
				num13++;
				array11[num13] = Lang.menu[13].Value;
				if (selectedMenu == num13)
				{
					SoundEngine.PlaySound(10);
					menuMode = 12;
				}
				num13++;
				array11[num13] = Lang.menu[131].Value;
				if (selectedMenu == num13)
				{
					SoundEngine.PlaySound(10);
					menuMode = 888;
					MenuUI.SetState(AchievementsMenu);
				}
				num13++;
				array11[num13] = Language.GetText("UI.Workshop").Value;
				if (selectedMenu == num13)
				{
					SoundEngine.PlaySound(10);
					menuMode = 888;
					UIWorkshopHub uIWorkshopHub = new UIWorkshopHub(null);
					uIWorkshopHub.EnterHub();
					MenuUI.SetState(uIWorkshopHub);
				}
				num13++;
				Interface.AddMenuButtons(this, selectedMenu, array11, array9, ref num24, ref num46, ref num13, ref num57);
				array11[num13] = Lang.menu[14].Value;
				if (selectedMenu == num13)
				{
					SoundEngine.PlaySound(10);
					menuMode = 11;
				}
				num13++;
				array11[num13] = Language.GetText("UI.Credits").Value;
				if (selectedMenu == num13)
				{
					SoundEngine.PlaySound(10);
					menuMode = 3000;
					SkyManager.Instance.Activate("CreditsRoll", default(Vector2));
				}
				num13++;
				array11[num13] = Lang.menu[15].Value;
				if (selectedMenu == num13)
				{
					GameAskedToQuit = true;
				}
				num13++;
			}
			else if (menuMode == 1)
			{
				OpenCharacterSelectUI();
			}
			else if (menuMode == 2)
			{
				flag6 = true;
				if (selectedMenu == 0)
				{
					menuMode = 17;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.hairColor;
				}
				if (selectedMenu == 1)
				{
					menuMode = 18;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.eyeColor;
				}
				if (selectedMenu == 2)
				{
					menuMode = 19;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.skinColor;
				}
				if (selectedMenu == 3)
				{
					menuMode = 20;
					SoundEngine.PlaySound(10);
				}
				array11[0] = Lang.menu[18].Value;
				array11[1] = Lang.menu[19].Value;
				array11[2] = Lang.menu[20].Value;
				array11[3] = Lang.menu[21].Value;
				num24 = 220;
				for (int num16 = 0; num16 < 9; num16++)
				{
					if (num16 < 6)
					{
						array9[num16] = 0.75f;
					}
					else
					{
						array9[num16] = 0.9f;
					}
				}
				num46 = 38;
				array6[6] = 6;
				array6[7] = 12;
				array6[8] = 18;
				num79 = screenWidth / 2 - 16;
				num90 = 176;
				if (PendingPlayer.Male)
				{
					array11[4] = Lang.menu[22].Value;
				}
				else
				{
					array11[4] = Lang.menu[23].Value;
				}
				if (selectedMenu == 4)
				{
					if (PendingPlayer.Male)
					{
						SoundEngine.PlaySound(20);
						PendingPlayer.Male = false;
					}
					else
					{
						SoundEngine.PlaySound(1);
						PendingPlayer.Male = true;
					}
				}
				if (PendingPlayer.difficulty == 2)
				{
					array11[5] = Lang.menu[24].Value;
					array8[5] = PendingPlayer.difficulty;
				}
				else if (PendingPlayer.difficulty == 1)
				{
					array11[5] = Lang.menu[25].Value;
					array8[5] = PendingPlayer.difficulty;
				}
				else
				{
					array11[5] = Lang.menu[26].Value;
				}
				if (selectedMenu == 5)
				{
					SoundEngine.PlaySound(10);
					menuMode = 222;
				}
				if (selectedMenu == 7)
				{
					SoundEngine.PlaySound(12);
					PendingPlayer.hair = rand.Next(51);
					PendingPlayer.eyeColor = randColor();
					while (((Color)(ref PendingPlayer.eyeColor)).R + ((Color)(ref PendingPlayer.eyeColor)).G + ((Color)(ref PendingPlayer.eyeColor)).B > 300)
					{
						PendingPlayer.eyeColor = randColor();
					}
					PendingPlayer.hairColor = randColor();
					PendingPlayer.pantsColor = randColor();
					PendingPlayer.shirtColor = randColor();
					PendingPlayer.shoeColor = randColor();
					PendingPlayer.skinColor = randColor();
					float num17 = (float)rand.Next(60, 120) * 0.01f;
					if (num17 > 1f)
					{
						num17 = 1f;
					}
					((Color)(ref PendingPlayer.skinColor)).R = (byte)((float)rand.Next(240, 255) * num17);
					((Color)(ref PendingPlayer.skinColor)).G = (byte)((float)rand.Next(110, 140) * num17);
					((Color)(ref PendingPlayer.skinColor)).B = (byte)((float)rand.Next(75, 110) * num17);
					PendingPlayer.underShirtColor = randColor();
					int num18 = PendingPlayer.hair + 1;
					if (num18 == 5 || num18 == 6 || num18 == 7 || num18 == 10 || num18 == 12 || num18 == 19 || num18 == 22 || num18 == 23 || num18 == 26 || num18 == 27 || num18 == 30 || num18 == 33)
					{
						PendingPlayer.Male = false;
					}
					else
					{
						PendingPlayer.Male = true;
					}
					PendingPlayer.skinVariant = rand.Next(PlayerVariantID.Count);
				}
				array11[7] = Lang.menu[27].Value;
				array11[6] = Lang.menu[28].Value;
				array11[8] = Lang.menu[5].Value;
				num57 = 9;
				if (selectedMenu == 8 || flag7)
				{
					flag7 = false;
					SoundEngine.PlaySound(11);
					menuMode = 1;
				}
				else if (selectedMenu == 6)
				{
					SoundEngine.PlaySound(10);
					PendingPlayer.name = "";
					menuMode = 3;
					clrInput();
				}
			}
			else if (menuMode == 222)
			{
				if (focusMenu == 3)
				{
					array11[0] = Lang.menu[29].Value;
				}
				else if (focusMenu == 2)
				{
					array11[0] = Lang.menu[30].Value;
				}
				else if (focusMenu == 1)
				{
					array11[0] = Lang.menu[31].Value;
				}
				else
				{
					array11[0] = Lang.menu[32].Value;
				}
				num46 = 50;
				array6[1] = 25;
				array6[2] = 25;
				array6[3] = 25;
				array[0] = true;
				array11[1] = Lang.menu[26].Value;
				array11[2] = Lang.menu[25].Value;
				array8[2] = 1;
				array11[3] = Lang.menu[24].Value;
				array8[3] = 2;
				num57 = 4;
				if (selectedMenu == 1)
				{
					PendingPlayer.difficulty = 0;
					menuMode = 2;
				}
				else if (selectedMenu == 2)
				{
					menuMode = 2;
					PendingPlayer.difficulty = 1;
				}
				else if (selectedMenu == 3)
				{
					PendingPlayer.difficulty = 2;
					menuMode = 2;
				}
			}
			else if (menuMode == 20)
			{
				flag6 = true;
				if (selectedMenu == 0)
				{
					menuMode = 21;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.shirtColor;
				}
				if (selectedMenu == 1)
				{
					menuMode = 22;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.underShirtColor;
				}
				if (selectedMenu == 2)
				{
					menuMode = 23;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.pantsColor;
				}
				if (selectedMenu == 3)
				{
					selColor = PendingPlayer.shoeColor;
					menuMode = 24;
					SoundEngine.PlaySound(10);
				}
				if (selectedMenu == 5 || flag7)
				{
					flag7 = false;
					SoundEngine.PlaySound(11);
					menuMode = 2;
				}
				if (selectedMenu == 4)
				{
					SoundEngine.PlaySound(12);
					CycleClothingStyle(PendingPlayer);
				}
				num79 = screenWidth / 2 - 16;
				num90 = 210;
				num24 = 260;
				num46 = 50;
				num57 = 6;
				array11[0] = Lang.menu[33].Value;
				array11[1] = Lang.menu[34].Value;
				array11[2] = Lang.menu[35].Value;
				array11[3] = Lang.menu[36].Value;
				array11[4] = Lang.menu[127].Value;
				array11[5] = Lang.menu[5].Value;
				array6[5] = 20;
			}
			else if (menuMode == 17)
			{
				flag6 = true;
				num79 = screenWidth / 2 - 16;
				num90 = 210;
				flag = true;
				num101 = 390;
				num24 = 260;
				num46 = 60;
				PendingPlayer.hairColor = selColor;
				num57 = 3;
				array11[0] = Lang.menu[37].Value + " " + (PendingPlayer.hair + 1);
				array11[1] = Lang.menu[38].Value;
				array[1] = true;
				array6[2] = 150;
				array6[1] = 10;
				array11[2] = Lang.menu[5].Value;
				int num19 = 51;
				if (focusMenu == 0)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 9;
				}
				if (selectedMenu == 0)
				{
					SoundEngine.PlaySound(12);
					PendingPlayer.hair++;
					if (PendingPlayer.hair >= num19)
					{
						PendingPlayer.hair = 0;
					}
				}
				else if (selectedMenu2 == 0)
				{
					SoundEngine.PlaySound(12);
					PendingPlayer.hair--;
					if (PendingPlayer.hair < 0)
					{
						PendingPlayer.hair = num19 - 1;
					}
				}
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					menuMode = 2;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 18)
			{
				flag6 = true;
				num79 = screenWidth / 2 - 16;
				num90 = 210;
				flag = true;
				num101 = 370;
				num24 = 240;
				num46 = 60;
				PendingPlayer.eyeColor = selColor;
				num57 = 3;
				array11[0] = "";
				array11[1] = Lang.menu[39].Value;
				array[1] = true;
				array6[2] = 170;
				array6[1] = 10;
				array11[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					menuMode = 2;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 19)
			{
				flag6 = true;
				num79 = screenWidth / 2 - 16;
				num90 = 210;
				flag = true;
				num101 = 370;
				num24 = 240;
				num46 = 60;
				PendingPlayer.skinColor = selColor;
				num57 = 3;
				array11[0] = "";
				array11[1] = Lang.menu[40].Value;
				array[1] = true;
				array6[2] = 170;
				array6[1] = 10;
				array11[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					menuMode = 2;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 21)
			{
				flag6 = true;
				num79 = screenWidth / 2 - 16;
				num90 = 210;
				flag = true;
				num101 = 370;
				num24 = 240;
				num46 = 60;
				PendingPlayer.shirtColor = selColor;
				num57 = 3;
				array11[0] = "";
				array11[1] = Lang.menu[41].Value;
				array[1] = true;
				array6[2] = 170;
				array6[1] = 10;
				array11[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					menuMode = 20;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 22)
			{
				flag6 = true;
				num79 = screenWidth / 2 - 16;
				num90 = 210;
				flag = true;
				num101 = 370;
				num24 = 240;
				num46 = 60;
				PendingPlayer.underShirtColor = selColor;
				num57 = 3;
				array11[0] = "";
				array11[1] = Lang.menu[42].Value;
				array[1] = true;
				array6[2] = 170;
				array6[1] = 10;
				array11[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					menuMode = 20;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 23)
			{
				flag6 = true;
				num79 = screenWidth / 2 - 16;
				num90 = 210;
				flag = true;
				num101 = 370;
				num24 = 240;
				num46 = 60;
				PendingPlayer.pantsColor = selColor;
				num57 = 3;
				array11[0] = "";
				array11[1] = Lang.menu[43].Value;
				array[1] = true;
				array6[2] = 170;
				array6[1] = 10;
				array11[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					menuMode = 20;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 24)
			{
				flag6 = true;
				num79 = screenWidth / 2 - 16;
				num90 = 210;
				flag = true;
				num101 = 370;
				num24 = 240;
				num46 = 60;
				PendingPlayer.shoeColor = selColor;
				num57 = 3;
				array11[0] = "";
				array11[1] = Lang.menu[44].Value;
				array[1] = true;
				array6[2] = 170;
				array6[1] = 10;
				array11[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag7)
				{
					flag7 = false;
					menuMode = 20;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 3)
			{
				UIVirtualKeyboard uIVirtualKeyboard3 = new UIVirtualKeyboard(Lang.menu[45].Value, "", OnCharacterNamed, CreateGoToMenuEvent(2));
				uIVirtualKeyboard3.SetMaxInputLength(20);
				menuMode = 888;
				MenuUI.SetState(uIVirtualKeyboard3);
			}
			else if (menuMode != 4)
			{
				if (menuMode == 5)
				{
					array11[0] = Lang.menu[46].Value + " " + PlayerList[selectedPlayer].Player.name + "?";
					array[0] = true;
					array11[1] = Lang.menu[104].Value;
					array11[2] = Lang.menu[105].Value;
					num57 = 3;
					if (selectedMenu == 1)
					{
						ErasePlayer(selectedPlayer);
						SoundEngine.PlaySound(10);
						menuMode = 1;
					}
					else if (selectedMenu == 2 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = 1;
					}
				}
				else if (menuMode == 6)
				{
					menuMode = 888;
					MenuUI.SetState(_worldSelectMenu);
				}
				else if (menuMode == -7)
				{
					num24 = 200;
					num46 = 60;
					array6[2] = 30;
					array6[3] = 30;
					array6[4] = 30;
					array8[3] = 1;
					array8[4] = 2;
					array6[5] = 70;
					if (focusMenu == 2)
					{
						array11[1] = Language.GetTextValue("UI.WorldDescriptionNormal");
					}
					else if (focusMenu == 3)
					{
						array11[1] = Language.GetTextValue("UI.WorldDescriptionExpert");
					}
					else if (focusMenu == 4)
					{
						array11[1] = Language.GetTextValue("UI.WorldDescriptionMaster");
					}
					array11[0] = Lang.menu[32].Value;
					array[0] = true;
					array[1] = true;
					array11[2] = Language.GetTextValue("UI.Normal");
					array11[3] = Language.GetTextValue("UI.Expert");
					array11[4] = Language.GetTextValue("UI.Master");
					array11[5] = Language.GetTextValue("UI.Back");
					num57 = 6;
					if (selectedMenu == 2)
					{
						GameMode = 0;
						SoundEngine.PlaySound(10);
						menuMode = 7;
						if (SettingsUnlock_WorldEvil)
						{
							menuMode = -71;
						}
					}
					else if (selectedMenu == 3)
					{
						GameMode = 1;
						SoundEngine.PlaySound(10);
						menuMode = 7;
						if (SettingsUnlock_WorldEvil)
						{
							menuMode = -71;
						}
					}
					else if (selectedMenu == 4)
					{
						GameMode = 2;
						SoundEngine.PlaySound(10);
						menuMode = 7;
						if (SettingsUnlock_WorldEvil)
						{
							menuMode = -71;
						}
					}
					else if (selectedMenu == 5 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = 16;
					}
					clrInput();
				}
				else if (menuMode == -71)
				{
					num24 = 200;
					num46 = 60;
					array6[1] = 30;
					array6[2] = 30;
					array6[3] = 30;
					array6[4] = 70;
					num57 = 5;
					int num20 = 0;
					array11[num20] = Lang.misc[100].Value;
					array[num20] = true;
					num20++;
					array11[num20] = Lang.misc[101].Value;
					if (selectedMenu == num20)
					{
						WorldGen.WorldGenParam_Evil = 0;
						SoundEngine.PlaySound(10);
						menuMode = 7;
					}
					num20++;
					array11[num20] = Lang.misc[102].Value;
					if (selectedMenu == num20)
					{
						WorldGen.WorldGenParam_Evil = 1;
						SoundEngine.PlaySound(10);
						menuMode = 7;
					}
					num20++;
					array11[num20] = Lang.misc[103].Value;
					if (selectedMenu == num20)
					{
						WorldGen.WorldGenParam_Evil = -1;
						SoundEngine.PlaySound(10);
						menuMode = 7;
					}
					num20++;
					array11[num20] = Language.GetTextValue("UI.Back");
					if (selectedMenu == num20 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = -7;
					}
					num20++;
					clrInput();
				}
				else if (menuMode == 7)
				{
					menuMode = 888;
					MenuUI.SetState(new UIVirtualKeyboard(Lang.menu[48].Value, "", OnWorldNamed, CreateGoToMenuEvent(-7)));
				}
				else if (menuMode == 5000)
				{
					menuMode = 888;
					MenuUI.SetState(new UIVirtualKeyboard(Language.GetTextValue("UI.EnterSeed"), "", OnSeedSelected, CreateGoToMenuEvent(7), 0, allowEmpty: true));
				}
				else if (menuMode == 8)
				{
					num24 = 180;
					num46 = 40;
					num57 = 8;
					array6[7] += 30;
					for (int num21 = 0; num21 < num57; num21++)
					{
						array9[num21] = 0.8f;
					}
					array11[7] = Lang.menu[5].Value;
					for (int num22 = 0; num22 < 7; num22++)
					{
						if (num22 < WorldList.Count)
						{
							array11[num22] = WorldList[num22 + menuSkip].Name;
							if (WorldList[num22 + menuSkip].GameMode == 1)
							{
								array8[num22] = 1;
							}
							else if (WorldList[num22 + menuSkip].GameMode == 2)
							{
								array8[num22] = 2;
							}
						}
						else
						{
							array11[num22] = null;
						}
					}
					if (WorldList.Count > 7 + menuSkip)
					{
						array11[6] = Language.GetTextValue("UI.More");
						array11[6] = "â¼";
						array9[6] = 0.6f;
						array6[6] += 8;
						menuWide[6] = true;
					}
					if (menuSkip > 0)
					{
						array11[0] = "â²";
						array9[0] = 0.6f;
						array6[0] += 8;
						menuWide[0] = true;
					}
					if (selectedMenu == 0 && menuSkip > 0)
					{
						SoundEngine.PlaySound(12);
						menuSkip -= 5;
						if (menuSkip < 0)
						{
							menuSkip = 0;
						}
					}
					else if (selectedMenu == 6 && menuSkip < WorldList.Count - 7)
					{
						SoundEngine.PlaySound(12);
						menuSkip += 5;
						if (menuSkip >= PlayerList.Count - 7)
						{
							menuSkip = WorldList.Count - 7;
						}
					}
					else if (selectedMenu == 7 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = 6;
					}
					else if (selectedMenu >= 0)
					{
						selectedWorld = selectedMenu + menuSkip;
						SoundEngine.PlaySound(10);
						menuMode = 9;
					}
				}
				else if (menuMode == 9)
				{
					array11[0] = Lang.menu[46].Value + " " + WorldList[selectedWorld].Name + "?";
					array[0] = true;
					array11[1] = Lang.menu[104].Value;
					array11[2] = Lang.menu[105].Value;
					num57 = 3;
					if (selectedMenu == 1)
					{
						EraseWorld(selectedWorld);
						SoundEngine.PlaySound(10);
						menuMode = 6;
					}
					else if (selectedMenu == 2 || flag7)
					{
						SoundEngine.PlaySound(11);
						menuMode = 6;
					}
				}
				else if (menuMode == 3000)
				{
					num57 = 1;
					num24 = 500;
					array9[0] = 0.9f;
					array11[0] = Lang.menu[5].Value;
					if (selectedMenu == 0 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = 0;
					}
				}
				else if (menuMode == 11)
				{
					num24 = 210;
					num46 = 37;
					num57 = 8;
					num57++;
					array6[num57 - 1] = 8;
					for (int num23 = 0; num23 < num57; num23++)
					{
						array9[num23] = 0.75f;
					}
					int num25 = 0;
					array11[num25] = Lang.menu[114].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(10);
						menuMode = 112;
					}
					num25++;
					array11[num25] = Lang.menu[210].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1112;
					}
					num25++;
					array11[num25] = Lang.menu[63].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1111;
					}
					num25++;
					array11[num25] = Lang.menu[65].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(11);
						menuMode = 26;
					}
					num25++;
					array11[num25] = Lang.menu[218].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1125;
					}
					num25++;
					array11[num25] = Lang.menu[219].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1127;
					}
					num25++;
					array11[num25] = Lang.menu[103].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1213;
					}
					num25++;
					array11[num25] = Language.GetTextValue("tModLoader.tModLoaderSettings");
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(in SoundID.MenuOpen);
						menuMode = 10017;
					}
					num25++;
					array11[num25] = Lang.menu[5].Value;
					if (selectedMenu == num25 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = 0;
						SaveSettings();
					}
				}
				else if (menuMode == 112)
				{
					num24 = 250;
					num46 = 52;
					num57 = 5;
					array6[num57 - 1] = 18;
					for (int num26 = 0; num26 < num57; num26++)
					{
						array9[num26] = 0.78f;
					}
					int num27 = 0;
					if (autoSave)
					{
						array11[num27] = Lang.menu[67].Value;
					}
					else
					{
						array11[num27] = Lang.menu[68].Value;
					}
					if (selectedMenu == num27)
					{
						SoundEngine.PlaySound(12);
						if (autoSave)
						{
							autoSave = false;
						}
						else
						{
							autoSave = true;
						}
					}
					num27++;
					if (autoPause)
					{
						array11[num27] = Lang.menu[69].Value;
					}
					else
					{
						array11[num27] = Lang.menu[70].Value;
					}
					if (selectedMenu == num27)
					{
						SoundEngine.PlaySound(12);
						if (autoPause)
						{
							autoPause = false;
						}
						else
						{
							autoPause = true;
						}
					}
					num27++;
					if (mapEnabled)
					{
						array11[num27] = Lang.menu[112].Value;
					}
					else
					{
						array11[num27] = Lang.menu[113].Value;
					}
					if (selectedMenu == num27)
					{
						SoundEngine.PlaySound(12);
						if (mapEnabled)
						{
							mapEnabled = false;
						}
						else
						{
							mapEnabled = true;
						}
					}
					num27++;
					array11[num27] = (HidePassword ? Lang.menu[212].Value : Lang.menu[211].Value);
					if (selectedMenu == num27)
					{
						SoundEngine.PlaySound(12);
						HidePassword = !HidePassword;
					}
					num27++;
					array11[num27] = Lang.menu[5].Value;
					if (selectedMenu == num27 || flag7)
					{
						flag7 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 1112)
				{
					num24 = 210;
					num46 = 32;
					num57 = 10;
					num57++;
					array6[num57 - 1] = 18;
					for (int num28 = 0; num28 < num57; num28++)
					{
						array9[num28] = 0.7f;
					}
					int num29 = 0;
					if (showItemText)
					{
						array11[num29] = Lang.menu[71].Value;
					}
					else
					{
						array11[num29] = Lang.menu[72].Value;
					}
					if (selectedMenu == num29)
					{
						SoundEngine.PlaySound(12);
						if (showItemText)
						{
							showItemText = false;
						}
						else
						{
							showItemText = true;
						}
					}
					num29++;
					array11[num29] = Lang.menu[123].Value + " " + Lang.menu[124 + invasionProgressMode].Value;
					if (selectedMenu == num29)
					{
						SoundEngine.PlaySound(12);
						invasionProgressMode++;
						if (invasionProgressMode >= 3)
						{
							invasionProgressMode = 0;
						}
					}
					num29++;
					array11[num29] = (placementPreview ? Lang.menu[128].Value : Lang.menu[129].Value);
					if (selectedMenu == num29)
					{
						SoundEngine.PlaySound(12);
						placementPreview = !placementPreview;
					}
					num29++;
					array11[num29] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117].Value : Lang.inter[116].Value);
					if (selectedMenu == num29)
					{
						SoundEngine.PlaySound(12);
						ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
					}
					num29++;
					array11[num29] = (MouseShowBuildingGrid ? Lang.menu[229].Value : Lang.menu[230].Value);
					if (selectedMenu == num29)
					{
						SoundEngine.PlaySound(12);
						MouseShowBuildingGrid = !MouseShowBuildingGrid;
					}
					num29++;
					array11[num29] = (GamepadDisableInstructionsDisplay ? Lang.menu[241].Value : Lang.menu[242].Value);
					if (selectedMenu == num29)
					{
						SoundEngine.PlaySound(12);
						GamepadDisableInstructionsDisplay = !GamepadDisableInstructionsDisplay;
					}
					num29++;
					string textValue = Language.GetTextValue("UI.MinimapFrame_" + MinimapFrameManagerInstance.ActiveSelectionKeyName);
					array11[num29] = Language.GetTextValue("UI.SelectMapBorder", textValue);
					if (selectedMenu == num29)
					{
						MinimapFrameManagerInstance.CycleSelection();
					}
					num29++;
					string textValue2 = ResourceSetsManager.ActiveSet.DisplayedName;
					array11[num29] = Language.GetTextValue("UI.SelectHealthStyle", textValue2);
					if (selectedMenu == num29)
					{
						ResourceSetsManager.CycleResourceSet();
					}
					num29++;
					array11[num29] = Language.GetTextValue(BigProgressBarSystem.ShowText ? "UI.ShowBossLifeTextOn" : "UI.ShowBossLifeTextOff");
					if (selectedMenu == num29)
					{
						BigProgressBarSystem.ToggleShowText();
					}
					num29++;
					array11[num29] = BossBarLoader.InsertMenu(out var onClick);
					if (selectedMenu == num29)
					{
						onClick();
					}
					num29++;
					array11[num29] = Lang.menu[5].Value;
					if (selectedMenu == num29 || flag7)
					{
						flag7 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 1111)
				{
					bgScroll = (int)Math.Round((1f - caveParallax) * 500f);
					int num30 = 0;
					array11[num30] = Lang.menu[51].Value;
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(10);
						menuMode = 111;
					}
					num30++;
					array11[num30] = Lang.menu[52].Value;
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(11);
						menuMode = 28;
					}
					num30++;
					array11[num30] = Lang.menu[(int)(247 + FrameSkipMode)].Value;
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(12);
						CycleFrameSkipMode();
					}
					num30++;
					array11[num30] = Language.GetTextValue("UI.LightMode_" + Lighting.Mode);
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(12);
						Lighting.NextLightMode();
					}
					num30++;
					switch (qaStyle)
					{
					case 0:
						array11[num30] = Lang.menu[59].Value;
						break;
					case 1:
						array11[num30] = Lang.menu[60].Value;
						break;
					case 2:
						array11[num30] = Lang.menu[61].Value;
						break;
					default:
						array11[num30] = Lang.menu[62].Value;
						break;
					}
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(12);
						if (++qaStyle > 3)
						{
							qaStyle = 0;
						}
					}
					num30++;
					array11[num30] = (BackgroundEnabled ? Lang.menu[100].Value : Lang.menu[101].Value);
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(12);
						BackgroundEnabled = !BackgroundEnabled;
					}
					num30++;
					array11[num30] = (ChildSafety.Disabled ? Lang.menu[132].Value : Lang.menu[133].Value);
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(12);
						ChildSafety.Disabled = !ChildSafety.Disabled;
					}
					num30++;
					array11[num30] = (SettingsEnabled_MinersWobble ? Lang.menu[250].Value : Lang.menu[251].Value);
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(12);
						SettingsEnabled_MinersWobble = !SettingsEnabled_MinersWobble;
					}
					num30++;
					array11[num30] = (SettingsEnabled_TilesSwayInWind ? Language.GetTextValue("UI.TilesSwayInWindOn") : Language.GetTextValue("UI.TilesSwayInWindOff"));
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(12);
						SettingsEnabled_TilesSwayInWind = !SettingsEnabled_TilesSwayInWind;
					}
					num30++;
					array11[num30] = Language.GetTextValue("UI.Effects");
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(11);
						menuMode = 2008;
					}
					int num31 = num30;
					int num32 = num31;
					array11[num32] = Lang.menu[5].Value;
					array6[num32] = 8;
					if (selectedMenu == num32 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						SaveSettings();
						menuMode = 11;
					}
					num24 = 186;
					num46 = 30;
					num57 = num32 + 1;
					for (int num33 = 0; num33 < num31; num33++)
					{
						array9[num33] = 0.6f;
					}
				}
				else if (menuMode == 2008)
				{
					num24 = 240;
					num46 = 60;
					num57 = 6;
					array11[0] = "";
					array11[1] = Language.GetTextValue("UI.Effects");
					array[1] = true;
					array6[1] = 10;
					array11[2] = Language.GetTextValue("GameUI.StormEffects", UseStormEffects ? Language.GetTextValue("GameUI.Enabled") : Language.GetTextValue("GameUI.Disabled"));
					array9[2] = 0.8f;
					array11[3] = Language.GetTextValue("GameUI.HeatDistortion", UseHeatDistortion ? Language.GetTextValue("GameUI.Enabled") : Language.GetTextValue("GameUI.Disabled"));
					array9[3] = 0.8f;
					array11[4] = Language.GetTextValue("GameUI.WaveQuality", WaveQuality switch
					{
						1 => Language.GetTextValue("GameUI.QualityLow"), 
						2 => Language.GetTextValue("GameUI.QualityMedium"), 
						3 => Language.GetTextValue("GameUI.QualityHigh"), 
						_ => Language.GetTextValue("GameUI.QualityOff"), 
					});
					array9[4] = 0.8f;
					array11[5] = Lang.menu[5].Value;
					if (selectedMenu == 2)
					{
						UseStormEffects = !UseStormEffects;
					}
					if (selectedMenu == 3)
					{
						UseHeatDistortion = !UseHeatDistortion;
					}
					if (selectedMenu == 4)
					{
						WaveQuality = (WaveQuality + 1) % 4;
					}
					if (selectedMenu == 5 || flag7)
					{
						flag7 = false;
						menuMode = 1111;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 111)
				{
					for (int num34 = 0; num34 < 9; num34++)
					{
						array9[num34] = 0.85f;
					}
					num24 = 210;
					num46 = 55;
					int num36 = 0;
					array11[num36] = Lang.menu[73].Value + ": " + PendingResolutionWidth + "x" + PendingResolutionHeight;
					if (selectedMenu == num36 || selectedMenu2 == num36)
					{
						SoundEngine.PlaySound(12);
						int num37 = 0;
						for (int num38 = 0; num38 < numDisplayModes; num38++)
						{
							if (displayWidth[num38] == PendingResolutionWidth && BorderedHeight(displayHeight[num38], graphics.IsFullScreen) == PendingResolutionHeight)
							{
								num37 = num38;
								break;
							}
						}
						num37 = Utils.Repeat(num37 + ((selectedMenu == num36) ? 1 : (-1)), numDisplayModes);
						PendingResolutionWidth = displayWidth[num37];
						PendingResolutionHeight = BorderedHeight(displayHeight[num37], graphics.IsFullScreen);
					}
					num36++;
					if (IsBorderlessDisplayAvailable())
					{
						array11[num36] = Lang.menu[PendingBorderlessState ? 245 : 246].Value;
						if (selectedMenu == num36)
						{
							SoundEngine.PlaySound(12);
							PendingBorderlessState = !PendingBorderlessState;
						}
						num36++;
					}
					array11[num36] = (graphics.IsFullScreen ? Lang.menu[49].Value : Lang.menu[50].Value);
					if (selectedMenu == num36)
					{
						ToggleFullScreen();
					}
					num36++;
					array6[num36] = 100;
					array11[num36] = Lang.menu[134].Value;
					if (selectedMenu == num36)
					{
						if (graphics.IsFullScreen || PendingBorderlessState != screenBorderless || PendingResolutionWidth != screenWidth || PendingResolutionHeight != screenHeight)
						{
							screenBorderless = PendingBorderlessState;
							screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
							SetResolution(PendingResolutionWidth, PendingResolutionHeight);
						}
						SoundEngine.PlaySound(11);
						menuMode = 1111;
					}
					num36++;
					array11[num36] = Lang.menu[5].Value;
					array6[num36] = 100;
					if (selectedMenu == num36 || flag7)
					{
						flag7 = false;
						PendingResolutionWidth = graphics.PreferredBackBufferWidth;
						PendingResolutionHeight = graphics.PreferredBackBufferHeight;
						PendingBorderlessState = screenBorderless;
						menuMode = 1111;
						SoundEngine.PlaySound(11);
					}
					num36++;
					num57 = num36;
				}
				else if (menuMode == 1125)
				{
					num24 = 232;
					num46 = 38;
					num57 = 7;
					array6[num57 - 1] = 18;
					for (int num39 = 0; num39 < num57; num39++)
					{
						array9[num39] = 0.73f;
					}
					int num40 = 0;
					array11[num40] = Lang.menu[64].Value;
					if (selectedMenu == num40)
					{
						SoundEngine.PlaySound(10);
						selColor = mouseColor;
						mouseColorSlider.SetHSL(mouseColor);
						menuMode = 25;
					}
					num40++;
					array11[num40] = Lang.menu[217].Value;
					if (selectedMenu == num40)
					{
						SoundEngine.PlaySound(10);
						selColor = MouseBorderColor;
						mouseBorderColorSlider.SetHSL(mouseColor);
						menuMode = 252;
					}
					num40++;
					array11[num40] = (cSmartCursorModeIsToggleAndNotHold ? Lang.menu[121].Value : Lang.menu[122].Value);
					if (selectedMenu == num40)
					{
						SoundEngine.PlaySound(12);
						cSmartCursorModeIsToggleAndNotHold = !cSmartCursorModeIsToggleAndNotHold;
					}
					num40++;
					array11[num40] = (Player.SmartCursorSettings.SmartAxeAfterPickaxe ? Lang.menu[214].Value : Lang.menu[213].Value);
					if (selectedMenu == num40)
					{
						SoundEngine.PlaySound(12);
						Player.SmartCursorSettings.SmartAxeAfterPickaxe = !Player.SmartCursorSettings.SmartAxeAfterPickaxe;
					}
					num40++;
					array11[num40] = (Player.SmartCursorSettings.SmartBlocksEnabled ? Lang.menu[215].Value : Lang.menu[216].Value);
					if (selectedMenu == num40)
					{
						SoundEngine.PlaySound(12);
						Player.SmartCursorSettings.SmartBlocksEnabled = !Player.SmartCursorSettings.SmartBlocksEnabled;
					}
					num40++;
					switch (LockOnHelper.UseMode)
					{
					case LockOnHelper.LockOnMode.FocusTarget:
						array11[num40] = Lang.menu[232].Value;
						break;
					case LockOnHelper.LockOnMode.TargetClosest:
						array11[num40] = Lang.menu[233].Value;
						break;
					case LockOnHelper.LockOnMode.ThreeDS:
						array11[num40] = Lang.menu[234].Value;
						break;
					}
					if (selectedMenu == num40)
					{
						SoundEngine.PlaySound(12);
						LockOnHelper.CycleUseModes();
					}
					num40++;
					array11[num40] = Lang.menu[5].Value;
					if (selectedMenu == num40 || flag7)
					{
						flag7 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 25)
				{
					flag = true;
					num101 = 320;
					num24 = 200;
					num46 = 10;
					mouseColor = selColor;
					mouseColorSlider.SetHSL(mouseColor);
					num57 = 3;
					array11[0] = "";
					array11[1] = Lang.menu[64].Value;
					array[1] = true;
					array6[2] = 250;
					array6[1] = 10;
					array11[2] = Lang.menu[5].Value;
					if (selectedMenu == 2 || flag7)
					{
						flag7 = false;
						menuMode = 1125;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 252)
				{
					flag = true;
					num101 = 320;
					num24 = 200;
					num46 = 10;
					MouseBorderColor = selColor;
					mouseBorderColorSlider.SetHSL(mouseColor);
					num57 = 3;
					array11[0] = "";
					array11[1] = Lang.menu[217].Value;
					array[1] = true;
					array6[2] = 250;
					array6[1] = 10;
					array11[2] = Lang.menu[5].Value;
					if (selectedMenu == 2 || flag7)
					{
						flag7 = false;
						menuMode = 1125;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 26)
				{
					flag4 = true;
					num24 = 200;
					num46 = 10;
					num57 = 3;
					array11[0] = "";
					array11[1] = Lang.menu[65].Value;
					array[1] = true;
					array6[2] = 250;
					array6[1] = 10;
					array11[2] = Lang.menu[5].Value;
					if (selectedMenu == 2 || flag7)
					{
						flag7 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 28)
				{
					caveParallax = 1f - (float)bgScroll / 500f;
					flag5 = true;
					num24 = 240;
					num46 = 60;
					num57 = 3;
					array11[0] = "";
					array11[1] = Lang.menu[52].Value;
					array[1] = true;
					array6[2] = 170;
					array6[1] = 10;
					array11[2] = Lang.menu[5].Value;
					if (selectedMenu == 2 || flag7)
					{
						flag7 = false;
						menuMode = 1111;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 272727)
				{
					num24 = 200;
					num46 = 30;
					num57 = 14;
					string[] array2 = new string[12]
					{
						cMapStyle, cMapFull, cMapZoomIn, cMapZoomOut, cMapAlphaUp, cMapAlphaDown, null, null, null, null,
						null, null
					};
					if (setKey >= 0)
					{
						array2[setKey] = "_";
					}
					array11[0] = Lang.menu[106].Value + array2[0];
					array11[1] = Lang.menu[107].Value + array2[1];
					array11[2] = Lang.menu[108].Value + array2[2];
					array11[3] = Lang.menu[109].Value + array2[3];
					array11[4] = Lang.menu[110].Value + array2[4];
					array11[5] = Lang.menu[111].Value + array2[5];
					for (int num41 = 0; num41 < 6; num41++)
					{
						array10[num41] = true;
						array9[num41] = 0.55f;
						array7[num41] = -140;
					}
					array9[6] = 0.8f;
					array9[6] = 0.8f;
					array6[6] = 6;
					array11[6] = Lang.menu[86].Value;
					array6[7] = 16;
					array11[7] = Lang.menu[5].Value;
					if (selectedMenu == 7 || flag7)
					{
						flag7 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu == 6)
					{
						cMapStyle = "Tab";
						cMapFull = "M";
						cMapZoomIn = "Add";
						cMapZoomOut = "Subtract";
						cMapAlphaUp = "PageUp";
						cMapAlphaDown = "PageDown";
						setKey = -1;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu >= 0)
					{
						setKey = selectedMenu;
					}
					if (setKey >= 0)
					{
						List<Keys> pressedKeys = PlayerInput.GetPressedKeys();
						if (pressedKeys.Count > 0)
						{
							string text = string.Concat(pressedKeys[0]);
							if (text != "None")
							{
								if (setKey == 0)
								{
									cMapStyle = text;
								}
								if (setKey == 1)
								{
									cMapFull = text;
								}
								if (setKey == 2)
								{
									cMapZoomIn = text;
								}
								if (setKey == 3)
								{
									cMapZoomOut = text;
								}
								if (setKey == 4)
								{
									cMapAlphaUp = text;
								}
								if (setKey == 5)
								{
									cMapAlphaDown = text;
								}
								setKey = -1;
							}
						}
					}
				}
				else if (menuMode == 27)
				{
					num24 = 176;
					num46 = 22;
					num57 = 16;
					string[] array3 = new string[14]
					{
						cUp, cDown, cLeft, cRight, cJump, cThrowItem, cInv, cHeal, cMana, cBuff,
						cHook, cTorch, cSmart, cMount
					};
					if (setKey >= 0)
					{
						array3[setKey] = "_";
					}
					array11[0] = Lang.menu[74].Value + array3[0];
					array11[1] = Lang.menu[75].Value + array3[1];
					array11[2] = Lang.menu[76].Value + array3[2];
					array11[3] = Lang.menu[77].Value + array3[3];
					array11[4] = Lang.menu[78].Value + array3[4];
					array11[5] = Lang.menu[79].Value + array3[5];
					array11[6] = Lang.menu[80].Value + array3[6];
					array11[7] = Lang.menu[81].Value + array3[7];
					array11[8] = Lang.menu[82].Value + array3[8];
					array11[9] = Lang.menu[83].Value + array3[9];
					array11[10] = Lang.menu[84].Value + array3[10];
					array11[11] = Lang.menu[85].Value + array3[11];
					array11[12] = Lang.menu[120].Value + array3[12];
					array11[13] = Lang.menu[130].Value + array3[13];
					for (int num42 = 0; num42 < 14; num42++)
					{
						array10[num42] = true;
						array9[num42] = 0.45f;
						array7[num42] = -80;
					}
					array9[14] = 0.8f;
					array6[14] = 6;
					array11[14] = Lang.menu[86].Value;
					array9[15] = 0.8f;
					array6[15] = 16;
					array11[15] = Lang.menu[5].Value;
					if (selectedMenu == 15 || flag7)
					{
						flag7 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu == 14)
					{
						ResetKeyBindings();
						setKey = -1;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu >= 0)
					{
						setKey = selectedMenu;
					}
					if (setKey >= 0)
					{
						List<Keys> pressedKeys2 = PlayerInput.GetPressedKeys();
						if (pressedKeys2.Count > 0)
						{
							string text2 = string.Concat(pressedKeys2[0]);
							if (text2 != "None")
							{
								if (setKey == 0)
								{
									cUp = text2;
								}
								if (setKey == 1)
								{
									cDown = text2;
								}
								if (setKey == 2)
								{
									cLeft = text2;
								}
								if (setKey == 3)
								{
									cRight = text2;
								}
								if (setKey == 4)
								{
									cJump = text2;
								}
								if (setKey == 5)
								{
									cThrowItem = text2;
								}
								if (setKey == 6)
								{
									cInv = text2;
								}
								if (setKey == 7)
								{
									cHeal = text2;
								}
								if (setKey == 8)
								{
									cMana = text2;
								}
								if (setKey == 9)
								{
									cBuff = text2;
								}
								if (setKey == 10)
								{
									cHook = text2;
								}
								if (setKey == 11)
								{
									cTorch = text2;
								}
								if (setKey == 12)
								{
									cSmart = text2;
								}
								if (setKey == 13)
								{
									cMount = text2;
								}
								setKey = -1;
							}
						}
					}
				}
				else if (menuMode == 1127)
				{
					num24 = 250;
					num46 = 52;
					num57 = 4;
					array6[num57 - 1] = 18;
					for (int num43 = 0; num43 < num57; num43++)
					{
						array9[num43] = 0.78f;
					}
					int num44 = 0;
					array11[num44] = (ReversedUpDownArmorSetBonuses ? Lang.menu[220].Value : Lang.menu[221].Value);
					if (selectedMenu == num44)
					{
						SoundEngine.PlaySound(12);
						ReversedUpDownArmorSetBonuses = !ReversedUpDownArmorSetBonuses;
					}
					num44++;
					if (ItemSlot.Options.DisableQuickTrash)
					{
						array11[num44] = Lang.menu[253].Value;
					}
					else
					{
						array11[num44] = (ItemSlot.Options.DisableLeftShiftTrashCan ? Lang.menu[224].Value : Lang.menu[223].Value);
					}
					if (selectedMenu == num44)
					{
						SoundEngine.PlaySound(12);
						if (ItemSlot.Options.DisableQuickTrash)
						{
							ItemSlot.Options.DisableQuickTrash = false;
							ItemSlot.Options.DisableLeftShiftTrashCan = true;
						}
						else if (ItemSlot.Options.DisableLeftShiftTrashCan)
						{
							ItemSlot.Options.DisableLeftShiftTrashCan = false;
						}
						else
						{
							ItemSlot.Options.DisableQuickTrash = true;
							ItemSlot.Options.DisableLeftShiftTrashCan = false;
						}
					}
					num44++;
					array11[num44] = Lang.menu[222].Value;
					if (selectedMenu == num44)
					{
						SoundEngine.PlaySound(10);
						menuMode = 888;
						MenuUI.SetState(ManageControlsMenu);
					}
					num44++;
					array11[num44] = Lang.menu[5].Value;
					if (selectedMenu == num44 || flag7)
					{
						flag7 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 12)
				{
					int num45 = ((SocialAPI.Network != null) ? 1 : 0);
					menuServer = false;
					array11[0] = Lang.menu[(SocialAPI.Network != null) ? 146 : 87].Value;
					array11[1] = Lang.menu[145].Value;
					array11[1 + num45] = Lang.menu[88].Value;
					array11[2 + num45] = Lang.menu[5].Value;
					if (selectedMenu == 0)
					{
						LoadPlayers();
						menuMultiplayer = true;
						SoundEngine.PlaySound(10);
						ClearPendingPlayerSelectCallbacks();
						menuMode = 1;
					}
					else if (selectedMenu == 1 + num45)
					{
						LoadPlayers();
						SoundEngine.PlaySound(10);
						ClearPendingPlayerSelectCallbacks();
						menuMode = 1;
						menuMultiplayer = true;
						menuServer = true;
					}
					else if (selectedMenu == 1)
					{
						SoundEngine.PlaySound(10);
						SocialAPI.Friends.OpenJoinInterface();
					}
					else if (selectedMenu == 2 + num45 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = 0;
					}
					num57 = 3 + num45;
				}
				else if (menuMode == 13)
				{
					if (PlayerInput.SettingsForUI.ShowGamepadHints)
					{
						num24 = 180;
						num46 = 30;
						int num47 = 0;
						array11[num47] = Lang.menu[89].Value.Replace(":", "");
						if (selectedMenu == num47)
						{
							UIVirtualKeyboard state = new UIVirtualKeyboard(Lang.menu[89].Value, getIP, OnSubmitServerIP, CreateGoToMenuEvent(13), 0, allowEmpty: true);
							UserInterface.ActiveInstance.SetState(state);
							menuMode = 888;
						}
						array9[num47] = 0.6f;
						array6[num47] = 40;
						num47++;
						for (int num48 = 0; num48 <= 6; num48++)
						{
							if (recentWorld[num48] != null && recentWorld[num48] != "")
							{
								array11[num47] = recentWorld[num48] + " (" + recentIP[num48] + ":" + recentPort[num48] + ")";
							}
							else
							{
								array11[num47] = "";
								array[num47] = true;
							}
							array9[num47] = 0.6f;
							array6[num47] = 40;
							if (selectedMenu == num47)
							{
								autoPass = false;
								Netplay.ListenPort = recentPort[num48];
								getIP = recentIP[num48];
								Netplay.SetRemoteIPAsync(getIP, StartClientGameplay);
								menuMode = 14;
								statusText = Language.GetTextValue("Net.ConnectingTo", getIP);
							}
							num47++;
						}
						array6[num47] = 64;
						array11[num47] = Lang.menu[5].Value;
						if (selectedMenu == num47 || flag7)
						{
							flag7 = false;
							SoundEngine.PlaySound(11);
							menuMode = 1;
						}
						num47++;
						num57 = num47;
					}
					else
					{
						string text6 = getIP;
						PlayerInput.WritingText = true;
						instance.HandleIME();
						getIP = GetInputText(getIP);
						if (text6 != getIP)
						{
							SoundEngine.PlaySound(12);
						}
						num57 = 11;
						num24 = 180;
						num46 = 30;
						array11[0] = Lang.menu[89].Value;
						array[0] = true;
						array11[1] = getIP;
						array6[1] = 19;
						if (textBlinkerState == 1)
						{
							array11[1] += "|";
							array7[1] = 1;
						}
						else
						{
							array11[1] += " ";
						}
						array[1] = true;
						array6[9] = 44;
						array11[9] = Lang.menu[4].Value;
						array4[9] = true;
						if (getIP != "")
						{
							if (getIP.Substring(0, 1) == " ")
							{
								getIP = "";
							}
							for (int num49 = 0; num49 < getIP.Length; num49++)
							{
								if (getIP != " ")
								{
									array4[9] = false;
								}
							}
						}
						array6[10] = 64;
						array11[10] = Lang.menu[5].Value;
						for (int num50 = 2; num50 <= 8; num50++)
						{
							int num51 = num50 - 2;
							if (recentWorld[num51] != null && recentWorld[num51] != "")
							{
								array11[num50] = recentWorld[num51] + " (" + recentIP[num51] + ":" + recentPort[num51] + ")";
							}
							else
							{
								array11[num50] = "";
								array[num50] = true;
							}
							array9[num50] = 0.6f;
							array6[num50] = 40;
						}
						if (selectedMenu >= 2 && selectedMenu < 9)
						{
							autoPass = false;
							int num52 = selectedMenu - 2;
							Netplay.ListenPort = recentPort[num52];
							getIP = recentIP[num52];
							Netplay.SetRemoteIPAsync(getIP, StartClientGameplay);
							menuMode = 14;
							statusText = Language.GetTextValue("Net.ConnectingTo", getIP);
						}
						if (selectedMenu == 10 || flag7)
						{
							flag7 = false;
							SoundEngine.PlaySound(11);
							menuMode = 1;
						}
						if (selectedMenu == 9 || (!array4[2] && inputTextEnter))
						{
							OnSubmitServerIP(getIP);
						}
						textBlinkerCount++;
						if (textBlinkerCount >= 20)
						{
							if (textBlinkerState == 0)
							{
								textBlinkerState = 1;
							}
							else
							{
								textBlinkerState = 0;
							}
							textBlinkerCount = 0;
						}
					}
				}
				else if (menuMode == 131)
				{
					if (PlayerInput.SettingsForUI.ShowGamepadHints)
					{
						UIVirtualKeyboard uIVirtualKeyboard4 = new UIVirtualKeyboard(Lang.menu[90].Value, getPort, OnSubmitServerPort, CreateGoToMenuEvent(13), 0, allowEmpty: true);
						uIVirtualKeyboard4.CustomTextValidationForUpdate = IsGoodPortAddress;
						uIVirtualKeyboard4.CustomTextValidationForSubmit = IsGoodPortAddress;
						UserInterface.ActiveInstance.SetState(uIVirtualKeyboard4);
						menuMode = 888;
					}
					int num53 = 7777;
					PlayerInput.WritingText = true;
					instance.HandleIME();
					string text7 = getPort;
					getPort = GetInputText(getPort);
					if (text7 != getPort)
					{
						SoundEngine.PlaySound(12);
					}
					array11[0] = Lang.menu[90].Value;
					array4[2] = true;
					if (getPort != "")
					{
						bool flag9 = false;
						try
						{
							num53 = Convert.ToInt32(getPort);
							if (num53 > 0 && num53 <= 65535)
							{
								flag9 = true;
							}
						}
						catch
						{
						}
						if (flag9)
						{
							array4[2] = false;
						}
					}
					textBlinkerCount++;
					if (textBlinkerCount >= 20)
					{
						if (textBlinkerState == 0)
						{
							textBlinkerState = 1;
						}
						else
						{
							textBlinkerState = 0;
						}
						textBlinkerCount = 0;
					}
					array11[1] = getPort;
					if (textBlinkerState == 1)
					{
						array11[1] += "|";
						array7[1] = 1;
					}
					else
					{
						array11[1] += " ";
					}
					array[0] = true;
					array[1] = true;
					array6[1] = -20;
					array6[2] = 20;
					array11[2] = Lang.menu[4].Value;
					array11[3] = Lang.menu[5].Value;
					num57 = 4;
					if (selectedMenu == 3 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = 1;
					}
					if (selectedMenu == 2 || (!array4[2] && inputTextEnter))
					{
						OnSubmitServerPort(getPort);
					}
				}
				else if (menuMode == 16)
				{
					num24 = 200;
					num46 = 60;
					array6[1] = 30;
					array6[2] = 30;
					array6[3] = 30;
					array6[4] = 70;
					array11[0] = Lang.menu[91].Value;
					array[0] = true;
					array11[1] = Lang.menu[92].Value;
					array11[2] = Lang.menu[93].Value;
					array11[3] = Lang.menu[94].Value;
					array11[4] = Lang.menu[5].Value;
					num57 = 5;
					if (selectedMenu == 4 || flag7)
					{
						flag7 = false;
						menuMode = 6;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu > 0)
					{
						if (selectedMenu == 1)
						{
							maxTilesX = 4200;
							maxTilesY = 1200;
						}
						else if (selectedMenu == 2)
						{
							maxTilesX = 6400;
							maxTilesY = 1800;
						}
						else
						{
							maxTilesX = 8400;
							maxTilesY = 8400;
						}
						clrInput();
						menuMode = -7;
						SoundEngine.PlaySound(10);
						WorldGen.setWorldSize();
					}
				}
				else if (menuMode == 1000000)
				{
					num57 = 2;
					array11[0] = statusText;
					array[0] = true;
					num24 = 220;
					num46 = 250;
					array11[1] = Lang.menu[5].Value;
					if (selectedMenu == 1 || flag7)
					{
						flag7 = false;
						SoundEngine.PlaySound(11);
						menuMode = 6;
						netMode = 0;
					}
				}
				else if (menuMode == 1000001)
				{
					num57 = 2;
					array11[0] = statusText;
					array[0] = true;
					num24 = 220;
					num46 = 250;
					RejectionMenuInfo rejectionMenuInfo = RejectionMenuInfo;
					if (rejectionMenuInfo != null)
					{
						array11[0] = rejectionMenuInfo.TextToShow;
					}
					array11[1] = Lang.menu[5].Value;
					if (selectedMenu == 1 || flag7)
					{
						flag7 = false;
						ReturnFromRejectionMenuAction returnFromRejectionMenuAction = null;
						if (RejectionMenuInfo != null)
						{
							returnFromRejectionMenuAction = RejectionMenuInfo.ExitAction;
						}
						if (returnFromRejectionMenuAction != null)
						{
							returnFromRejectionMenuAction();
						}
						else
						{
							SoundEngine.PlaySound(11);
							menuMode = 0;
							netMode = 0;
						}
					}
				}
				else
				{
					Interface.ModLoaderMenus(this, selectedMenu, array11, array9, array6, ref num24, ref num46, ref num57, ref flag7);
				}
			}
		}
		else
		{
			array11[0] = string.Format("{0}  {1}", Language.GetTextValue("UI.LoadingCode"), Program.LoadedPercentage.ToString("P0"));
			if (!Terraria.ModLoader.ModLoader.skipLoad)
			{
				array11[1] = "Click to skip loading mods";
				array9[1] = 0.5f;
				num57 = 2;
				if (selectedMenu == 1)
				{
					Terraria.ModLoader.ModLoader.skipLoad = true;
				}
			}
		}
		if (menuMode == 888)
		{
			if (!_blockFancyUIWhileLoading)
			{
				MenuUI.Draw(spriteBatch, gameTime);
			}
		}
		else
		{
			MenuUI.SetState(null);
		}
		if (UILinkPointNavigator.Shortcuts.BackButtonInUse && !flag7)
		{
			UILinkPointNavigator.Shortcuts.BackButtonLock = true;
		}
		int num54 = focusMenu;
		if (menuMode != num68)
		{
			if (menuMode == 10 || netMode == 1 || menuMode == 14)
			{
				gameTips.ClearTips();
			}
			blockMouse = true;
			menuSkip = 0;
			num57 = 0;
			if (PlayerInput.UsingGamepad && InvisibleCursorForGamepad)
			{
				num54 = (focusMenu = -1);
				mouseX = (mouseY = (PlayerInput.MouseX = (PlayerInput.MouseY = 0)));
			}
			for (int num55 = 0; num55 < maxMenuItems; num55++)
			{
				menuItemScale[num55] = 0.8f;
			}
		}
		if (!mouseLeft)
		{
			blockMouse = true;
		}
		selectedMenu = -1;
		selectedMenu2 = -1;
		focusMenu = -1;
		bool flag10 = mouseLeft && !PlayerInput.UsingGamepad;
		if (!flag)
		{
			grabColorSlider = 0;
			hBar = -1f;
			sBar = -1f;
			lBar = -1f;
			aBar = -1f;
		}
		if (flag)
		{
			if (!mouseLeft)
			{
				grabColorSlider = 0;
				blockMouse = false;
			}
			int num56 = focusColor;
			focusColor = 0;
			int num58 = num101;
			int num59 = screenWidth / 2 - TextureAssets.Hue.Width() / 2;
			int num60 = 167;
			Vector3 val = rgbToHsl(selColor);
			float num61 = val.X;
			float num62 = val.Y;
			float luminosity = val.Z;
			float num63 = (float)(int)((Color)(ref selColor)).A / 255f;
			if (hBar == -1f || sBar == -1f || lBar == -1f || aBar == -1f)
			{
				hBar = num61;
				sBar = num62;
				lBar = luminosity;
				aBar = num63;
			}
			else
			{
				num61 = hBar;
				num62 = sBar;
				luminosity = lBar;
				num63 = aBar;
			}
			spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2((float)num59, (float)num58), Color.White);
			if ((mouseX > num59 - 4 && mouseX < num59 + TextureAssets.Hue.Width() + 4 && mouseY > num58 - 4 && mouseY < num58 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 1)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num59, (float)num58), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num59 + (float)(TextureAssets.Hue.Width() - 2) * hBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num58 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if ((mouseX > num59 - 4 && mouseX < num59 + TextureAssets.Hue.Width() + 4 && mouseY > num58 - 4 && mouseY < num58 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 1)
			{
				focusColor = 1;
				UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 5;
				if (flag10 && !blockMouse)
				{
					grabColorSlider = 1;
					num61 = mouseX - num59;
					num61 /= (float)TextureAssets.Hue.Width();
					if (num61 < 0f)
					{
						num61 = 0f;
					}
					if (num61 > 1f)
					{
						num61 = 1f;
					}
					hBar = num61;
				}
			}
			GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num59, (float)num58) + TextureAssets.ColorBar.Value.Size() / 2f);
			num58 += 26;
			spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num59, (float)num58), Color.White);
			for (int num64 = 0; num64 <= num60; num64++)
			{
				float saturation = (float)num64 / (float)num60;
				Color color7 = hslToRgb(num61, saturation, luminosity);
				spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num59 + num64 + 5), (float)(num58 + 4)), color7);
			}
			if ((mouseX > num59 - 4 && mouseX < num59 + TextureAssets.Hue.Width() + 4 && mouseY > num58 - 4 && mouseY < num58 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 2)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num59, (float)num58), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num59 + (float)(TextureAssets.Hue.Width() - 2) * sBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num58 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if ((mouseX > num59 - 4 && mouseX < num59 + TextureAssets.Hue.Width() + 4 && mouseY > num58 - 4 && mouseY < num58 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 2)
			{
				focusColor = 2;
				UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 6;
				if (flag10 && !blockMouse)
				{
					grabColorSlider = 2;
					num62 = mouseX - num59;
					num62 /= (float)TextureAssets.Hue.Width();
					if (num62 < 0f)
					{
						num62 = 0f;
					}
					if (num62 > 1f)
					{
						num62 = 1f;
					}
					sBar = num62;
				}
			}
			GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num59, (float)num58) + TextureAssets.ColorBar.Value.Size() / 2f);
			num58 += 26;
			spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num59, (float)num58), Color.White);
			float num65 = 0.15f;
			if (menuMode == 252)
			{
				num65 = 0f;
			}
			for (int num66 = 0; num66 <= num60; num66++)
			{
				float luminosity2 = (float)num66 / (float)num60;
				Color color8 = hslToRgb(num61, num62, luminosity2);
				spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num59 + num66 + 5), (float)(num58 + 4)), color8);
			}
			if ((mouseX > num59 - 4 && mouseX < num59 + TextureAssets.Hue.Width() + 4 && mouseY > num58 - 4 && mouseY < num58 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 3)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num59, (float)num58), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num59 + (float)(TextureAssets.Hue.Width() - 2) * ((lBar - num65) / (1f - num65)) - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num58 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
			if ((mouseX > num59 - 4 && mouseX < num59 + TextureAssets.Hue.Width() + 4 && mouseY > num58 - 4 && mouseY < num58 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 3)
			{
				focusColor = 3;
				UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 7;
				if (flag10 && !blockMouse)
				{
					grabColorSlider = 3;
					luminosity = mouseX - num59;
					luminosity /= (float)TextureAssets.Hue.Width();
					if (luminosity < 0f)
					{
						luminosity = 0f;
					}
					if (luminosity > 1f)
					{
						luminosity = 1f;
					}
					luminosity = (lBar = luminosity * (1f - num65) + num65);
				}
			}
			GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num59, (float)num58) + TextureAssets.ColorBar.Value.Size() / 2f);
			bool flag11 = false;
			if (menuMode == 252)
			{
				num58 += 26;
				flag11 = true;
				spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2((float)num59, (float)num58), Color.White);
				Color color9 = hslToRgb(num61, num62, luminosity);
				for (int num67 = 0; num67 <= num60; num67++)
				{
					float num69 = (float)num67 / (float)num60;
					Color color10 = color9 * num69;
					spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2((float)(num59 + num67 + 5), (float)(num58 + 4)), color10);
				}
				if ((mouseX > num59 - 4 && mouseX < num59 + TextureAssets.Hue.Width() + 4 && mouseY > num58 - 4 && mouseY < num58 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 4)
				{
					spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2((float)num59, (float)num58), OurFavoriteColor);
				}
				spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num59 + (float)(TextureAssets.Hue.Width() - 2) * aBar - (float)(TextureAssets.ColorSlider.Width() / 2), (float)(num58 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2)), Color.White);
				if ((mouseX > num59 - 4 && mouseX < num59 + TextureAssets.Hue.Width() + 4 && mouseY > num58 - 4 && mouseY < num58 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 4)
				{
					focusColor = 4;
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 8;
					if (mouseLeft && !blockMouse)
					{
						grabColorSlider = 4;
						num63 = mouseX - num59;
						num63 /= (float)TextureAssets.Hue.Width();
						if (num63 < 0f)
						{
							num63 = 0f;
						}
						if (num63 > 1f)
						{
							num63 = 1f;
						}
						aBar = num63;
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)num59, (float)num58) + TextureAssets.ColorBar.Value.Size() / 2f);
			}
			if (num56 != focusColor)
			{
				SoundEngine.PlaySound(12);
			}
			selColor = hslToRgb(hBar, sBar, lBar);
			if (flag11)
			{
				((Color)(ref selColor)).A = (byte)(aBar * 255f);
			}
		}
		else if (flag)
		{
			string text3 = "";
			for (int num70 = 0; num70 < 6; num70++)
			{
				int num71 = num101;
				int num72 = 370 + screenWidth / 2 - 400;
				if (num70 == 0)
				{
					text3 = Lang.menu[95].Value;
				}
				if (num70 == 1)
				{
					text3 = Lang.menu[96].Value;
					num71 += 30;
				}
				if (num70 == 2)
				{
					text3 = Lang.menu[97].Value;
					num71 += 60;
				}
				if (num70 == 3)
				{
					text3 = string.Concat(((Color)(ref selColor)).R);
					num72 += 90;
				}
				if (num70 == 4)
				{
					text3 = string.Concat(((Color)(ref selColor)).G);
					num72 += 90;
					num71 += 30;
				}
				if (num70 == 5)
				{
					text3 = string.Concat(((Color)(ref selColor)).B);
					num72 += 90;
					num71 += 60;
				}
				for (int num73 = 0; num73 < 5; num73++)
				{
					Color color11 = Color.Black;
					if (num73 == 4)
					{
						color11 = color;
						((Color)(ref color11)).R = (byte)((255 + ((Color)(ref color11)).R) / 2);
						((Color)(ref color11)).G = (byte)((255 + ((Color)(ref color11)).R) / 2);
						((Color)(ref color11)).B = (byte)((255 + ((Color)(ref color11)).R) / 2);
					}
					int num74 = 255;
					int num75 = ((Color)(ref color11)).R - (255 - num74);
					if (num75 < 0)
					{
						num75 = 0;
					}
					((Color)(ref color11))._002Ector((int)(byte)num75, (int)(byte)num75, (int)(byte)num75, (int)(byte)num74);
					int num76 = 0;
					int num77 = 0;
					if (num73 == 0)
					{
						num76 = -2;
					}
					if (num73 == 1)
					{
						num76 = 2;
					}
					if (num73 == 2)
					{
						num77 = -2;
					}
					if (num73 == 3)
					{
						num77 = 2;
					}
					spriteBatch.DrawString(FontAssets.DeathText.Value, text3, new Vector2((float)(num72 + num76), (float)(num71 + num77)), color11, 0f, default(Vector2), 0.5f, (SpriteEffects)0, 0f);
				}
			}
			bool flag2 = false;
			Vector2 vector2 = default(Vector2);
			for (int num78 = 0; num78 < 2; num78++)
			{
				for (int num80 = 0; num80 < 3; num80++)
				{
					int num81 = num101 + num80 * 30 - 12;
					int num82 = 360 + screenWidth / 2 - 400;
					float scale = 0.9f;
					if (num78 == 0)
					{
						num82 -= 70;
						num81 += 2;
					}
					else
					{
						num82 -= 40;
					}
					text3 = "-";
					if (num78 == 1)
					{
						text3 = "+";
					}
					((Vector2)(ref vector2))._002Ector(24f, 24f);
					int num83 = 142;
					if (mouseX > num82 && (float)mouseX < (float)num82 + vector2.X && mouseY > num81 + 13 && (float)mouseY < (float)(num81 + 13) + vector2.Y)
					{
						if (focusColor != (num78 + 1) * (num80 + 10))
						{
							SoundEngine.PlaySound(12);
						}
						focusColor = (num78 + 1) * (num80 + 10);
						flag2 = true;
						num83 = 255;
						if (mouseLeft)
						{
							if (colorDelay <= 1)
							{
								if (colorDelay == 0)
								{
									colorDelay = 40;
								}
								else
								{
									colorDelay = 3;
								}
								int num84 = num78;
								if (num78 == 0)
								{
									num84 = -1;
									if (((Color)(ref selColor)).R + ((Color)(ref selColor)).G + ((Color)(ref selColor)).B <= 150)
									{
										num84 = 0;
									}
								}
								if (num80 == 0 && ((Color)(ref selColor)).R + num84 >= 0 && ((Color)(ref selColor)).R + num84 <= 255)
								{
									((Color)(ref selColor)).R = (byte)(((Color)(ref selColor)).R + num84);
								}
								if (num80 == 1 && ((Color)(ref selColor)).G + num84 >= 0 && ((Color)(ref selColor)).G + num84 <= 255)
								{
									((Color)(ref selColor)).G = (byte)(((Color)(ref selColor)).G + num84);
								}
								if (num80 == 2 && ((Color)(ref selColor)).B + num84 >= 0 && ((Color)(ref selColor)).B + num84 <= 255)
								{
									((Color)(ref selColor)).B = (byte)(((Color)(ref selColor)).B + num84);
								}
							}
							colorDelay--;
						}
						else
						{
							colorDelay = 0;
						}
					}
					for (int num85 = 0; num85 < 5; num85++)
					{
						Color color12 = Color.Black;
						if (num85 == 4)
						{
							color12 = color;
							((Color)(ref color12)).R = (byte)((255 + ((Color)(ref color12)).R) / 2);
							((Color)(ref color12)).G = (byte)((255 + ((Color)(ref color12)).R) / 2);
							((Color)(ref color12)).B = (byte)((255 + ((Color)(ref color12)).R) / 2);
						}
						int num86 = ((Color)(ref color12)).R - (255 - num83);
						if (num86 < 0)
						{
							num86 = 0;
						}
						((Color)(ref color12))._002Ector((int)(byte)num86, (int)(byte)num86, (int)(byte)num86, (int)(byte)num83);
						int num87 = 0;
						int num88 = 0;
						if (num85 == 0)
						{
							num87 = -2;
						}
						if (num85 == 1)
						{
							num87 = 2;
						}
						if (num85 == 2)
						{
							num88 = -2;
						}
						if (num85 == 3)
						{
							num88 = 2;
						}
						spriteBatch.DrawString(FontAssets.DeathText.Value, text3, new Vector2((float)(num82 + num87), (float)(num81 + num88)), color12, 0f, default(Vector2), scale, (SpriteEffects)0, 0f);
					}
				}
			}
			if (!flag2)
			{
				focusColor = 0;
				colorDelay = 0;
			}
		}
		if (flag4)
		{
			float x = screenWidth / 2 - 40 + 37;
			int num89 = 320;
			string text4 = "";
			Color textColor = default(Color);
			for (int num91 = 0; num91 < 6; num91++)
			{
				int num92 = num89;
				int num93 = 370 + screenWidth / 2 - 400 + 37;
				switch (num91)
				{
				case 0:
					text4 = Lang.menu[98].Value;
					num92 += 30;
					break;
				case 1:
					text4 = Lang.menu[99].Value;
					break;
				case 2:
					text4 = Lang.menu[119].Value;
					num92 += 60;
					break;
				case 3:
					text4 = Math.Round(musicVolume * 100f) + "%";
					num93 += 90;
					break;
				case 4:
					text4 = Math.Round(soundVolume * 100f) + "%";
					num93 += 90;
					num92 += 30;
					break;
				case 5:
					text4 = Math.Round(ambientVolume * 100f) + "%";
					num93 += 90;
					num92 += 60;
					break;
				}
				Color color2 = color;
				((Color)(ref color2)).R = (byte)((255 + ((Color)(ref color2)).R) / 2);
				((Color)(ref color2)).G = (byte)((255 + ((Color)(ref color2)).R) / 2);
				((Color)(ref color2)).B = (byte)((255 + ((Color)(ref color2)).R) / 2);
				int num94 = 255;
				int num95 = ((Color)(ref color2)).R - (255 - num94);
				if (num95 < 0)
				{
					num95 = 0;
				}
				((Color)(ref textColor))._002Ector((int)(byte)num95, (int)(byte)num95, (int)(byte)num95, (int)(byte)num94);
				Utils.DrawBorderStringFourWay(spriteBatch, FontAssets.DeathText.Value, text4, num93, num92, textColor, Color.Black, Vector2.Zero, 0.5f);
			}
			int rightHover = IngameOptions.rightHover;
			IngameOptions.rightHover = -1;
			if (!mouseLeft)
			{
				IngameOptions.rightLock = -1;
			}
			IngameOptions.valuePosition = new Vector2(x, (float)(num89 - 18 + 30));
			GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
			float num96 = IngameOptions.DrawValueBar(spriteBatch, 1f, musicVolume);
			if (IngameOptions.inBar || IngameOptions.rightLock == 3)
			{
				UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 2;
				IngameOptions.rightHover = 3;
				if (flag10 && IngameOptions.rightLock == 3)
				{
					musicVolume = num96;
				}
			}
			IngameOptions.valuePosition = new Vector2(x, (float)(num89 - 18 + 60));
			GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
			float num97 = IngameOptions.DrawValueBar(spriteBatch, 1f, soundVolume);
			if (IngameOptions.inBar || IngameOptions.rightLock == 2)
			{
				UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 3;
				IngameOptions.rightHover = 2;
				if (flag10 && IngameOptions.rightLock == 2)
				{
					soundVolume = num97;
				}
			}
			IngameOptions.valuePosition = new Vector2(x, (float)(num89 - 18 + 90));
			GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
			float num98 = IngameOptions.DrawValueBar(spriteBatch, 1f, ambientVolume);
			if (IngameOptions.inBar || IngameOptions.rightLock == 4)
			{
				UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 4;
				IngameOptions.rightHover = 4;
				if (flag10 && IngameOptions.rightLock == 4)
				{
					ambientVolume = num98;
				}
			}
			if (IngameOptions.rightHover != -1)
			{
				IngameOptions.rightLock = IngameOptions.rightHover;
			}
			if (IngameOptions.rightHover != rightHover)
			{
				SoundEngine.PlaySound(12);
			}
		}
		if (flag5)
		{
			int num99 = 400;
			string text5 = "";
			for (int num100 = 0; num100 < 4; num100++)
			{
				int num102 = num99;
				int num103 = 370 + screenWidth / 2 - 400;
				if (num100 == 0)
				{
					text5 = Lang.menu[52].Value + ": " + bgScroll;
				}
				for (int num104 = 0; num104 < 5; num104++)
				{
					Color color3 = Color.Black;
					if (num104 == 4)
					{
						color3 = color;
						((Color)(ref color3)).R = (byte)((255 + ((Color)(ref color3)).R) / 2);
						((Color)(ref color3)).G = (byte)((255 + ((Color)(ref color3)).R) / 2);
						((Color)(ref color3)).B = (byte)((255 + ((Color)(ref color3)).R) / 2);
					}
					int num105 = 255;
					int num106 = ((Color)(ref color3)).R - (255 - num105);
					if (num106 < 0)
					{
						num106 = 0;
					}
					((Color)(ref color3))._002Ector((int)(byte)num106, (int)(byte)num106, (int)(byte)num106, (int)(byte)num105);
					int num107 = 0;
					int num108 = 0;
					if (num104 == 0)
					{
						num107 = -2;
					}
					if (num104 == 1)
					{
						num107 = 2;
					}
					if (num104 == 2)
					{
						num108 = -2;
					}
					if (num104 == 3)
					{
						num108 = 2;
					}
					spriteBatch.DrawString(FontAssets.DeathText.Value, text5, new Vector2((float)(num103 + num107), (float)(num102 + num108)), color3, 0f, default(Vector2), 0.5f, (SpriteEffects)0, 0f);
				}
			}
			IngameOptions.rightHover = -1;
			if (!mouseLeft)
			{
				IngameOptions.rightLock = -1;
			}
			IngameOptions.valuePosition = new Vector2((float)(screenWidth / 2 - 40), (float)(num99 + 12));
			GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
			float num109 = IngameOptions.DrawValueBar(spriteBatch, 1f, (float)bgScroll / 100f);
			if (IngameOptions.inBar || IngameOptions.rightLock == 2)
			{
				UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 1;
				IngameOptions.rightHover = 2;
				if (flag10 && IngameOptions.rightLock == 2)
				{
					bgScroll = (int)(num109 * 100f);
					caveParallax = 1f - (float)bgScroll / 500f;
				}
			}
			if (IngameOptions.rightHover != -1)
			{
				IngameOptions.rightLock = IngameOptions.rightHover;
			}
		}
		bool flag3 = false;
		for (int num110 = 0; num110 < num57; num110++)
		{
			if (array11[num110] == null)
			{
				continue;
			}
			Vector2 origin = FontAssets.DeathText.Value.MeasureString(array11[num110]);
			origin.X *= 0.5f;
			origin.Y *= 0.5f;
			for (int num111 = 0; num111 < 5; num111++)
			{
				Color color4 = Color.Black;
				if (num111 == 4)
				{
					switch (array8[num110])
					{
					case 0:
						color4 = color;
						break;
					case 1:
						color4 = mcColor;
						break;
					case 2:
						color4 = hcColor;
						break;
					case 3:
						color4 = highVersionColor;
						break;
					case 4:
					case 5:
					case 6:
						color4 = errorColor;
						break;
					default:
						color4 = color;
						break;
					}
					((Color)(ref color4)).R = (byte)((255 + ((Color)(ref color4)).R) / 2);
					((Color)(ref color4)).G = (byte)((255 + ((Color)(ref color4)).G) / 2);
					((Color)(ref color4)).B = (byte)((255 + ((Color)(ref color4)).B) / 2);
				}
				int num3 = (int)(255f * (menuItemScale[num110] * 2f - 1f));
				if (array[num110])
				{
					num3 = 255;
				}
				int num4 = ((Color)(ref color4)).R - (255 - num3);
				if (num4 < 0)
				{
					num4 = 0;
				}
				int num5 = ((Color)(ref color4)).G - (255 - num3);
				if (num5 < 0)
				{
					num5 = 0;
				}
				int num6 = ((Color)(ref color4)).B - (255 - num3);
				if (num6 < 0)
				{
					num6 = 0;
				}
				if (num54 == num110 && num111 == 4)
				{
					float num7 = (float)num3 / 255f;
					num4 = (int)((float)num4 * (1f - num7) + 255f * num7);
					num5 = (int)((float)num5 * (1f - num7) + 215f * num7);
					num6 = (int)((float)num6 * (1f - num7) + 0f * num7);
				}
				((Color)(ref color4))._002Ector((int)(byte)num4, (int)(byte)num5, (int)(byte)num6, (int)(byte)num3);
				if (array5[num110])
				{
					if (num111 == 4)
					{
						((Color)(ref color4)).R = (byte)(((Color)(ref color4)).R * mouseTextColor / 300);
						((Color)(ref color4)).G = (byte)(((Color)(ref color4)).G * mouseTextColor / 300);
						((Color)(ref color4)).B = (byte)(((Color)(ref color4)).B * mouseTextColor / 300);
						((Color)(ref color4)).A = (byte)(((Color)(ref color4)).A * mouseTextColor / 300);
					}
					else
					{
						((Color)(ref color4)).A = (byte)(((Color)(ref color4)).A - (byte)(mouseTextColor / 5));
					}
				}
				int num8 = 0;
				int num9 = 0;
				if (num111 == 0)
				{
					num8 = -2;
				}
				if (num111 == 1)
				{
					num8 = 2;
				}
				if (num111 == 2)
				{
					num9 = -2;
				}
				if (num111 == 3)
				{
					num9 = 2;
				}
				float num10 = menuItemScale[num110];
				if (menuMode == 15 && num110 == 0)
				{
					num10 *= 0.35f;
				}
				else if (menuMode == 1000000 && num110 == 0)
				{
					num10 *= 0.75f;
				}
				else if (netMode == 2)
				{
					num10 *= 0.5f;
				}
				num10 *= array9[num110];
				if (!array10[num110])
				{
					spriteBatch.DrawString(FontAssets.DeathText.Value, array11[num110], new Vector2((float)(num35 + num8 + array7[num110]), (float)(num24 + num46 * num110 + num9) + origin.Y * array9[num110] + (float)array6[num110]), color4, 0f, origin, num10, (SpriteEffects)0, 0f);
				}
				else
				{
					spriteBatch.DrawString(FontAssets.DeathText.Value, array11[num110], new Vector2((float)(num35 + num8 + array7[num110]), (float)(num24 + num46 * num110 + num9) + origin.Y * array9[num110] + (float)array6[num110]), color4, 0f, new Vector2(0f, origin.Y), num10, (SpriteEffects)0, 0f);
				}
			}
			if (!array[num110] && !array4[num110])
			{
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2((float)(num35 + array7[num110]), (float)(num24 + num46 * num110) + origin.Y * array9[num110] + (float)array6[num110]));
			}
			if (!array10[num110])
			{
				int num11 = 0;
				menuWide[num110] = false;
				Vector2 vector3 = FontAssets.DeathText.Value.MeasureString(array11[num110]) * array9[num110];
				if (!((float)mouseX > (float)num35 - vector3.X * 0.5f + (float)array7[num110] - (float)num11) || !((float)mouseX < (float)num35 + vector3.X * 0.5f * array9[num110] + (float)array7[num110] + (float)num11) || mouseY <= num24 + num46 * num110 + array6[num110] || !((float)mouseY < (float)(num24 + num46 * num110 + array6[num110]) + 50f * array9[num110]) || !hasFocus)
				{
					continue;
				}
				focusMenu = num110;
				if (array[num110] || array4[num110])
				{
					focusMenu = -1;
					continue;
				}
				if (num54 != focusMenu)
				{
					flag3 = true;
				}
				if (mouseLeftRelease && mouseLeft)
				{
					selectedMenu = num110;
				}
				if (mouseRightRelease && mouseRight)
				{
					selectedMenu2 = num110;
				}
				continue;
			}
			Vector2 vector4 = FontAssets.DeathText.Value.MeasureString(array11[num110]) * array9[num110];
			if (mouseX <= num35 + array7[num110] || !((float)mouseX < (float)num35 + vector4.X + (float)array7[num110]) || mouseY <= num24 + num46 * num110 + array6[num110] || !((float)mouseY < (float)(num24 + num46 * num110 + array6[num110]) + 50f * array9[num110]) || !hasFocus)
			{
				continue;
			}
			focusMenu = num110;
			if (array[num110] || array4[num110])
			{
				focusMenu = -1;
				continue;
			}
			if (num54 != focusMenu)
			{
				flag3 = true;
			}
			if (mouseLeftRelease && mouseLeft)
			{
				selectedMenu = num110;
			}
			if (mouseRightRelease && mouseRight)
			{
				selectedMenu2 = num110;
			}
		}
		if (flag3 && num54 != focusMenu)
		{
			SoundEngine.PlaySound(12);
		}
		if (GamepadMainMenuHandler.MenuItemPositions.Count == 0)
		{
			Vector2 vector5 = new Vector2((float)Math.Cos(GlobalTimeWrappedHourly * ((float)Math.PI * 2f)), (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 2f)) * new Vector2(30f, 15f) + Vector2.UnitY * 20f;
			UILinkPointNavigator.SetPosition(2000, new Vector2((float)screenWidth, (float)screenHeight) / 2f + vector5);
		}
		for (int num12 = 0; num12 < maxMenuItems; num12++)
		{
			if (num12 == focusMenu)
			{
				if (menuItemScale[num12] < 1f)
				{
					menuItemScale[num12] += 0.02f;
				}
				if (menuItemScale[num12] > 1f)
				{
					menuItemScale[num12] = 1f;
				}
			}
			else if ((double)menuItemScale[num12] > 0.8)
			{
				menuItemScale[num12] -= 0.02f;
			}
		}
		if (flag6)
		{
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, UIScaleMatrix);
			Player pendingPlayer = PendingPlayer;
			pendingPlayer.PlayerFrame();
			pendingPlayer.position.X = (float)num79 + screenPosition.X;
			pendingPlayer.position.Y = (float)num90 + screenPosition.Y;
			PlayerRenderer.DrawPlayer(Camera, pendingPlayer, pendingPlayer.position, 0f, Vector2.Zero);
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, UIScaleMatrix);
		}
		float num14 = 0f;
		if (!WorldGen.drunkWorldGen && menuMode == 0)
		{
			DrawSocialMediaButtons(color, num14);
			num14 += 32f;
			DrawtModLoaderSocialMediaButtons(color, num14);
		}
		if (!WorldGen.drunkWorldGen)
		{
			DrawVersionNumber(color, num14);
			num14 += 20f;
		}
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, UIScaleMatrix);
		WorkshopPublishingIndicator.Draw(spriteBatch);
		IssueReporterIndicator.Draw(spriteBatch);
		DrawCursor(DrawThickCursor());
		DrawPendingMouseText();
		if (fadeCounter > 0)
		{
			Color white = Color.White;
			byte b2 = 0;
			fadeCounter--;
			float num15 = (float)fadeCounter / 120f * 255f;
			if (quickSplash)
			{
				num15 = (float)fadeCounter / 75f * 255f;
			}
			b2 = (byte)num15;
			((Color)(ref white))._002Ector((int)b2, (int)b2, (int)b2, (int)b2);
			spriteBatch.Draw(TextureAssets.Fade.Value, new Rectangle(-5, -5, screenWidth + 10, screenHeight + 10), white);
		}
		spriteBatch.End();
		if (mouseLeft)
		{
			mouseLeftRelease = false;
		}
		else
		{
			mouseLeftRelease = true;
		}
		if (mouseRight)
		{
			mouseRightRelease = false;
		}
		else
		{
			mouseRightRelease = true;
		}
		if (mouseMiddle)
		{
			mouseMiddleRelease = false;
		}
		else
		{
			mouseMiddleRelease = true;
		}
		if (mouseXButton1)
		{
			mouseXButton1Release = false;
		}
		else
		{
			mouseXButton1Release = true;
		}
		if (mouseXButton2)
		{
			mouseXButton2Release = false;
		}
		else
		{
			mouseXButton2Release = true;
		}
		if (menuMode == num)
		{
			GamepadMainMenuHandler.LastDrew = num;
		}
	}

	public static void CycleFrameSkipMode()
	{
		int frameSkipMode = (int)FrameSkipMode;
		frameSkipMode++;
		if (frameSkipMode < 0 || frameSkipMode > 2)
		{
			frameSkipMode = 0;
		}
		FrameSkipMode = (FrameSkipMode)frameSkipMode;
	}

	private static void OnSubmitServerPasswordFromRequest(string passwordCandidate)
	{
		Netplay.ServerPassword = passwordCandidate;
		OnSubmitServerPasswordFromRequest();
	}

	private static void OnSubmitServerPasswordFromRequest()
	{
		NetMessage.SendData(38);
		menuMode = 14;
	}

	private static void CanceledGivingServerPassword()
	{
		SoundEngine.PlaySound(11);
		menuMode = 0;
		Netplay.Disconnect = true;
		Netplay.ServerPassword = "";
	}

	private void OnSubmitServerPassword(string passwordCandidate)
	{
		Netplay.ServerPassword = passwordCandidate;
		OnSubmitServerPassword();
	}

	private void OnSubmitServerPassword()
	{
		string text = "-autoshutdown -password \"" + ConvertToSafeArgument(Netplay.ServerPassword) + "\" -lang " + Language.ActiveCulture.LegacyId;
		if (Platform.IsLinux)
		{
			text = ((IntPtr.Size != 8) ? (text + " -x86") : (text + " -x64"));
		}
		text = ((!ActiveWorldFileData.IsCloudSave) ? (text + SanitizePathArgument("world", worldPathName)) : (text + SanitizePathArgument("cloudworld", worldPathName)));
		text = text + " -worldrollbackstokeep " + WorldRollingBackupsCountToKeep;
		text = text + " -modpath \"" + ModOrganizer.modPath + "\"";
		if (showServerConsole)
		{
			text += " -showserverconsole";
		}
		tServer = new Process();
		tServer.StartInfo.FileName = Environment.ProcessPath;
		tServer.StartInfo.Arguments = "tModLoader.dll -server " + text;
		if (libPath != "")
		{
			ProcessStartInfo startInfo = tServer.StartInfo;
			startInfo.Arguments = startInfo.Arguments + " -loadlib " + libPath;
		}
		tServer.StartInfo.UseShellExecute = true;
		if (!showServerConsole)
		{
			tServer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		}
		if (SocialAPI.Network != null)
		{
			SocialAPI.Network.LaunchLocalServer(tServer, MenuServerMode);
		}
		else
		{
			tServer.Start();
		}
		Netplay.SetRemoteIP("127.0.0.1");
		autoPass = true;
		statusText = Lang.menu[8].Value;
		Netplay.StartTcpClient();
		menuMode = 10;
	}

	private static void ExitServerPasswordMenu()
	{
		if (SocialAPI.Network != null)
		{
			menuMode = 889;
		}
		else
		{
			menuMode = 6;
		}
		Netplay.ServerPassword = "";
	}

	private static bool IsGoodPortAddress(string text)
	{
		if (string.IsNullOrWhiteSpace(text))
		{
			return false;
		}
		ushort result = 0;
		if (!ushort.TryParse(text, out result))
		{
			return false;
		}
		return true;
	}

	private static void OnSubmitServerPort(string candidatePort)
	{
		Netplay.ListenPort = ushort.Parse(candidatePort);
		autoPass = false;
		Netplay.SetRemoteIPAsync(getIP, StartClientGameplay);
		menuMode = 14;
		statusText = Language.GetTextValue("Net.ConnectingTo", getIP);
	}

	public static void OnSubmitServerIP(string inputText)
	{
		getIP = inputText;
		SoundEngine.PlaySound(12);
		menuMode = 131;
		clrInput();
	}

	private static void DrawSocialMediaButtons(Color menuColor, float upBump)
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		List<TitleLinkButton> titleLinks = TitleLinks;
		Vector2 anchorPosition = default(Vector2);
		((Vector2)(ref anchorPosition))._002Ector(18f, (float)(screenHeight - 26) - upBump);
		for (int i = 0; i < titleLinks.Count; i++)
		{
			titleLinks[i].Draw(spriteBatch, anchorPosition);
			anchorPosition.X += 30f;
		}
	}

	private static void DrawVersionNumber(Color menuColor, float upBump)
	{
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_0421: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0453: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_037d: Unknown result type (might be due to invalid IL or missing references)
		//IL_038b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0393: Unknown result type (might be due to invalid IL or missing references)
		//IL_039b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		string supportMessage = Language.GetTextValue("tModLoader.PatreonSupport");
		string patreonShortURL = "patreon.com/tModLoader";
		bool showPatreon = SocialAPI.Mode != SocialMode.Steam;
		Language.GetTextValue("tModLoader.MenuModsEnabled", Math.Max(0, Terraria.ModLoader.ModLoader.Mods.Length - 1));
		string text = Terraria.ModLoader.ModLoader.versionedName + (showPatreon ? (Environment.NewLine + supportMessage) : "") + ((menuMode == 0) ? Environment.NewLine : "") + Environment.NewLine + "Terraria " + versionNumber;
		Vector2 origin = FontAssets.MouseText.Value.MeasureString(text);
		origin.X *= 0.5f;
		origin.Y *= 0.5f;
		Vector2 pos = default(Vector2);
		Rectangle rect = default(Rectangle);
		for (int i = 0; i < 5; i++)
		{
			Color color = Color.Black;
			if (i == 4)
			{
				color = menuColor;
				((Color)(ref color)).R = (byte)((255 + ((Color)(ref color)).R) / 2);
				((Color)(ref color)).G = (byte)((255 + ((Color)(ref color)).R) / 2);
				((Color)(ref color)).B = (byte)((255 + ((Color)(ref color)).R) / 2);
			}
			((Color)(ref color)).A = (byte)((float)(int)((Color)(ref color)).A * 0.3f);
			int num = 0;
			int num2 = 0;
			if (i == 0)
			{
				num = -2;
			}
			if (i == 1)
			{
				num = 2;
			}
			if (i == 2)
			{
				num2 = -2;
			}
			if (i == 3)
			{
				num2 = 2;
			}
			spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2(origin.X + (float)num + 10f, (float)screenHeight - origin.Y + (float)num2 - 2f - upBump), color, 0f, origin, 1f, (SpriteEffects)0, 0f);
			if (menuMode == 0)
			{
				string developerModeText = Language.GetTextValue("tModLoader.SwitchVersionInfoButton");
				Vector2 textSize = FontAssets.MouseText.Value.MeasureString(developerModeText);
				((Vector2)(ref pos))._002Ector((float)screenWidth - 10f + (float)num, (float)screenHeight - 2f + (float)num2);
				Color d_color = color;
				float scale = 1.2f;
				if (i == 4)
				{
					((Rectangle)(ref rect))._002Ector((int)(pos.X - textSize.X * scale), (int)(pos.Y - textSize.Y * scale), (int)(textSize.X * scale), (int)(textSize.Y * scale));
					bool num3 = ((Rectangle)(ref rect)).Contains(mouseX, mouseY);
					d_color = (num3 ? highVersionColor : d_color);
					if (num3 && mouseLeftRelease && mouseLeft)
					{
						SoundEngine.PlaySound(in SoundID.MenuOpen);
						Utils.OpenToURL("https://github.com/tModLoader/tModLoader/wiki/tModLoader-guide-for-players#beta-branches");
					}
				}
				spriteBatch.DrawString(FontAssets.MouseText.Value, developerModeText, pos, d_color, 0f, textSize, 1.2f, (SpriteEffects)0, 0f);
			}
			if (showPatreon)
			{
				DynamicSpriteFont font2 = FontAssets.MouseText.Value;
				Vector2 patreonOrigin = font2.MeasureString(supportMessage);
				Vector2 urlSize = font2.MeasureString(patreonShortURL);
				spriteBatch.DrawString(font2, patreonShortURL, new Vector2(patreonOrigin.X + (float)num + 10f, (float)screenHeight - patreonOrigin.Y + (float)num2 - 2f - (float)(int)upBump), color, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
				if (i == 4 && mouseLeftRelease && mouseLeft)
				{
					Rectangle val = new Rectangle((int)patreonOrigin.X + 10, screenHeight - (int)urlSize.Y - 2 - (int)upBump, (int)urlSize.X, (int)patreonOrigin.Y);
					if (((Rectangle)(ref val)).Contains(new Point(mouseX, mouseY)) && hasFocus)
					{
						SoundEngine.PlaySound(in SoundID.MenuOpen);
						Utils.OpenToURL("https://www.patreon.com/tModLoader");
					}
				}
			}
			if (ModOrganizer.ModPackActive != null)
			{
				DynamicSpriteFont font = FontAssets.MouseText.Value;
				string modpackText = Language.GetTextValue("tModLoader.CurrentModPack", Path.GetFileNameWithoutExtension(ModOrganizer.ModPackActive));
				Vector2 packOrigin = font.MeasureString(modpackText);
				spriteBatch.DrawString(font, modpackText, new Vector2(packOrigin.X + (float)num + 10f, (float)screenHeight - packOrigin.Y + (float)num2 - 2f - (float)(int)upBump), color, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
			}
		}
	}

	private static void ClearVisualPostProcessEffects()
	{
		for (int i = 0; i < 13; i++)
		{
			string key = "";
			switch (i)
			{
			case 0:
				key = "Solar";
				break;
			case 1:
				key = "Vortex";
				break;
			case 2:
				key = "Nebula";
				break;
			case 3:
				key = "Stardust";
				break;
			case 4:
				key = "MoonLord";
				break;
			case 5:
				key = "MonolithSolar";
				break;
			case 6:
				key = "MonolithVortex";
				break;
			case 7:
				key = "MonolithNebula";
				break;
			case 8:
				key = "MonolithStardust";
				break;
			case 9:
				key = "Blizzard";
				break;
			case 10:
				key = "HeatDistortion";
				break;
			case 11:
				key = "Sandstorm";
				break;
			case 12:
				key = "MonolithMoonLord";
				break;
			}
			if (SkyManager.Instance[key] != null && SkyManager.Instance[key].IsActive())
			{
				SkyManager.Instance[key].Deactivate();
			}
			if (Overlays.Scene[key] != null && Overlays.Scene[key].IsVisible())
			{
				Overlays.Scene[key].Deactivate();
			}
			if (Terraria.Graphics.Effects.Filters.Scene[key] != null && Terraria.Graphics.Effects.Filters.Scene[key].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene[key].Deactivate();
			}
		}
		if (Terraria.Graphics.Effects.Filters.Scene["BloodMoon"].IsActive())
		{
			Terraria.Graphics.Effects.Filters.Scene["BloodMoon"].Deactivate();
		}
		if (Terraria.Graphics.Effects.Filters.Scene["Graveyard"].IsActive())
		{
			Terraria.Graphics.Effects.Filters.Scene["Graveyard"].Deactivate();
		}
		if (Terraria.Graphics.Effects.Filters.Scene["Sepia"].IsActive())
		{
			Terraria.Graphics.Effects.Filters.Scene["Sepia"].Deactivate();
		}
		if (Terraria.Graphics.Effects.Filters.Scene["BloodMoon"].IsActive())
		{
			Terraria.Graphics.Effects.Filters.Scene["BloodMoon"].Deactivate();
		}
		if (Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
		{
			Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].Deactivate();
		}
		if (Terraria.Graphics.Effects.Filters.Scene["WaterDistortion"].IsActive())
		{
			Terraria.Graphics.Effects.Filters.Scene["WaterDistortion"].Deactivate();
		}
		if (SkyManager.Instance["Martian"].IsActive())
		{
			SkyManager.Instance["Martian"].Deactivate();
		}
		if (SkyManager.Instance["Party"].IsActive())
		{
			SkyManager.Instance["Party"].Deactivate();
		}
		if (SkyManager.Instance["Slime"].IsActive())
		{
			SkyManager.Instance["Slime"].Deactivate();
		}
		if (SkyManager.Instance["Ambience"].IsActive())
		{
			SkyManager.Instance["Ambience"].Deactivate();
		}
		slimeRain = false;
		slimeRainTime = 0.0;
		slimeWarningTime = 0;
		BirthdayParty.WorldClear();
		LanternNight.WorldClear();
		Sandstorm.WorldClear();
		CreditsRollEvent.Reset();
		maxRaining = 0f;
		raining = false;
		Terraria.Graphics.Effects.Filters.Scene.DeactivateAll();
		SkyManager.Instance.DeactivateAll();
	}

	private static void PostDrawMenu(Point screenSizeCache, Point screenSizeCacheAfterScaling)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		if (ScreenSize == screenSizeCacheAfterScaling)
		{
			screenPosition.Y -= screenSizeCache.Y - screenHeight;
		}
	}

	private void PreDrawMenu(out Point screenSizeCache, out Point screenSizeCacheAfterScaling)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		float uiScaleWanted = _uiScaleWanted;
		float num = (float)screenHeight / 900f;
		if (num < 1f)
		{
			num = 1f;
		}
		if (SettingDontScaleMainMenuUp)
		{
			num = 1f;
		}
		screenSizeCache = ScreenSize;
		UIScale = num;
		PlayerInput.SetZoom_UI();
		screenSizeCacheAfterScaling = ScreenSize;
		if (_needsMenuUIRecalculation)
		{
			_needsMenuUIRecalculation = false;
			MenuUI.Recalculate();
		}
		_uiScaleWanted = uiScaleWanted;
	}

	private static bool IsBorderlessDisplayAvailable()
	{
		bool result = false;
		if (Platform.IsWindows)
		{
			result = true;
		}
		return result;
	}

	public static void OpenCharacterSelectUI()
	{
		menuMode = 888;
		MenuUI.SetState(_characterSelectMenu);
	}

	public static void OpenReportsMenu()
	{
		List<IProvideReports> list = new List<IProvideReports>();
		list.Add(IssueReporter);
		if (SocialAPI.Workshop != null)
		{
			list.Add(SocialAPI.Workshop.IssueReporter);
		}
		UIReportsPage state = new UIReportsPage(MenuUI.CurrentState, menuMode, list);
		menuMode = 888;
		MenuUI.SetState(state);
	}

	public static void OpenWorldSelectUI()
	{
		menuMode = 888;
		MenuUI.SetState(_worldSelectMenu);
	}

	public static void OpenResourcePacksMenu(UIState uiStateToGoBackTo)
	{
		menuMode = 888;
		MenuUI.SetState(new UIResourcePackSelectionMenu(uiStateToGoBackTo, AssetSourceController, AssetInitializer.CreateResourcePackList((IServiceProvider)((Game)instance).Services)));
	}

	private static void CycleClothingStyle(Player plr)
	{
		CycleClothingStyle_Inner(plr);
		while (!IsValidPlayerStyle(plr))
		{
			CycleClothingStyle_Inner(plr);
		}
	}

	private static bool IsValidPlayerStyle(Player plr)
	{
		if ((uint)(plr.skinVariant - 10) <= 1u)
		{
			return false;
		}
		return true;
	}

	private static void CycleClothingStyle_Inner(Player plr)
	{
		if (plr.Male)
		{
			int num = 0;
			int[] variantOrderMale = PlayerVariantID.Sets.VariantOrderMale;
			for (int i = 0; i < variantOrderMale.Length; i++)
			{
				if (variantOrderMale[i] == plr.skinVariant)
				{
					num = i;
					break;
				}
			}
			if (num == variantOrderMale.Length - 1)
			{
				plr.skinVariant = variantOrderMale[0];
			}
			else
			{
				plr.skinVariant = variantOrderMale[num + 1];
			}
			return;
		}
		int num2 = 0;
		int[] variantOrderFemale = PlayerVariantID.Sets.VariantOrderFemale;
		for (int j = 0; j < variantOrderFemale.Length; j++)
		{
			if (variantOrderFemale[j] == plr.skinVariant)
			{
				num2 = j;
				break;
			}
		}
		if (num2 == variantOrderFemale.Length - 1)
		{
			plr.skinVariant = variantOrderFemale[0];
		}
		else
		{
			plr.skinVariant = variantOrderFemale[num2 + 1];
		}
	}

	public static void ResetKeyBindings()
	{
		cUp = "W";
		cDown = "S";
		cLeft = "A";
		cRight = "D";
		cJump = "Space";
		cThrowItem = "T";
		cInv = "Escape";
		cHeal = "H";
		cMana = "J";
		cBuff = "B";
		cHook = "E";
		cTorch = "LeftShift";
		cSmart = "LeftControl";
		cMount = "R";
	}

	public static void CursorColor()
	{
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		cursorAlpha += (float)cursorColorDirection * 0.015f;
		if (cursorAlpha >= 1f)
		{
			cursorAlpha = 1f;
			cursorColorDirection = -1;
		}
		if ((double)cursorAlpha <= 0.6)
		{
			cursorAlpha = 0.6f;
			cursorColorDirection = 1;
		}
		float num = cursorAlpha * 0.3f + 0.7f;
		byte r = (byte)((float)(int)((Color)(ref mouseColor)).R * cursorAlpha);
		byte g = (byte)((float)(int)((Color)(ref mouseColor)).G * cursorAlpha);
		byte b = (byte)((float)(int)((Color)(ref mouseColor)).B * cursorAlpha);
		byte a = (byte)(255f * num);
		cursorColor = new Color((int)r, (int)g, (int)b, (int)a);
		cursorScale = cursorAlpha * 0.3f + 0.7f + 0.1f;
	}

	protected void DrawSplash(GameTime gameTime)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0281: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_0286: Unknown result type (might be due to invalid IL or missing references)
		//IL_028d: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_032f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_034e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		int num = 10000;
		((Game)this).GraphicsDevice.Clear(Color.Black);
		((Game)this).Draw(gameTime);
		TickLoadProcess();
		long num2 = splashTimer.ElapsedMilliseconds;
		if (musicVolume == 0f)
		{
			quickSplash = true;
			num2 = 999999L;
			num = 0;
		}
		if (Assets.PendingAssets == 0 && _musicLoaded && _artLoaded && Program.LoadedEverything)
		{
			_isAsyncLoadComplete = true;
		}
		spriteBatch.Begin();
		splashCounter++;
		Color white = Color.White;
		byte b = 0;
		if (quickSplash)
		{
			if (splashCounter <= 75)
			{
				b = (byte)((float)splashCounter / 75f * 255f);
			}
			else if (splashCounter <= 125)
			{
				b = byte.MaxValue;
			}
			else if (splashCounter <= 200)
			{
				if (!_isAsyncLoadComplete)
				{
					splashCounter = 125;
				}
				b = (byte)((float)(75 - (splashCounter - 125)) / 75f * 255f);
			}
			else
			{
				Initialize_AlmostEverything();
				PostContentLoadInitialize();
				showSplash = false;
				fadeCounter = 75;
				splashTimer.Stop();
			}
		}
		else
		{
			int num3 = 90;
			int num4 = 410;
			int num5 = 620;
			int num6 = 60;
			if (splashCounter >= num3)
			{
				if (splashCounter <= num4)
				{
					float num7 = (float)(splashCounter - num3) / (float)(num4 - num3);
					num7 *= num7 * num7 * num7;
					num7 *= 255f;
					b = (byte)num7;
				}
				else if (splashCounter <= num5)
				{
					b = byte.MaxValue;
					if (splashCounter >= num5 - num6)
					{
						b = (byte)((float)(num6 - (splashCounter - (num5 - num6))) / (float)num6 * 255f);
					}
				}
				else if (!_isAsyncLoadComplete)
				{
					b = 0;
					num = 1;
				}
				else
				{
					Initialize_AlmostEverything();
					PostContentLoadInitialize();
					showSplash = false;
					fadeCounter = 120;
					splashTimer.Stop();
				}
			}
		}
		((Color)(ref white))._002Ector((int)b, (int)b, (int)b, (int)b);
		Asset<Texture2D> splashTextureLegoBack = TextureAssets.SplashTextureLegoBack;
		if (splashTextureLegoBack.Width() > 0 && splashTextureLegoBack.Height() > 0)
		{
			Vector2 val = new Vector2((float)screenWidth / (float)splashTextureLegoBack.Width(), (float)screenHeight / (float)splashTextureLegoBack.Height());
			_ = splashTextureLegoBack.Size() / 2f;
			Vector2 position = new Vector2((float)screenWidth, (float)screenHeight) / 2f;
			Vector2 scale = val;
			if (scale.X > scale.Y)
			{
				scale.X = scale.Y;
			}
			else
			{
				scale.Y = scale.X;
			}
			Vector2 scale2 = val;
			if (scale2.X < scale2.Y)
			{
				scale2.X = scale2.Y;
			}
			else
			{
				scale2.Y = scale2.X;
			}
			spriteBatch.Draw(splashTextureLegoBack.Value, position, (Rectangle?)null, white, 0f, splashTextureLegoBack.Size() / 2f, scale2, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.SplashTextureLegoTree.Value, ScreenSize.ToVector2(), (Rectangle?)null, white, 0f, TextureAssets.SplashTextureLegoTree.Size(), scale, (SpriteEffects)0, 0f);
			spriteBatch.Draw(TextureAssets.SplashTextureLegoFront.Value, position, (Rectangle?)null, white, 0f, TextureAssets.SplashTextureLegoFront.Size() / 2f, scale, (SpriteEffects)0, 0f);
		}
		int num8 = 70;
		if (num == 1)
		{
			DrawSplash_LoadingFlower(Color.White);
		}
		else if (num2 > num)
		{
			DrawSplash_LoadingFlower(white);
		}
		_splashFrameCount += 1f;
		if (_splashFrameCount >= (float)num8)
		{
			_splashFrameCount = 0f;
		}
		spriteBatch.End();
	}

	private void DrawSplash_LoadingFlower(Color splashColor)
	{
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		float val = (float)screenWidth / MinimumZoomComparerX;
		float val2 = (float)screenHeight / MinimumZoomComparerY;
		float num = Math.Max(Math.Max(1f, val), val2);
		Texture2D value = TextureAssets.LoadingSunflower.Value;
		int num2 = 3;
		int num3 = 19;
		Vector2 position = new Vector2((float)(screenWidth / 2), (float)screenHeight) - new Vector2(0f, 50f) * num;
		int num4 = (int)_splashFrameCount / num2;
		if (num4 >= num3)
		{
			num4 = 0;
		}
		Rectangle rectangle = value.Frame(1, num3, 0, (num4 + 10) % num3);
		float rotation = 0f;
		Vector2 origin = rectangle.Size() / 2f;
		spriteBatch.Draw(value, position, (Rectangle?)rectangle, splashColor, rotation, origin, num, (SpriteEffects)0, 0f);
	}

	private void DrawSplash_LoadingStar(Color splashColor)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		int num = 4;
		Vector2 position = new Vector2((float)screenWidth, (float)screenHeight) - new Vector2(30f);
		int num2 = (int)_splashFrameCount / num;
		if (num2 >= 15)
		{
			num2 = 0;
		}
		if (num2 >= 8)
		{
			num2 = 14 - num2;
		}
		Rectangle rectangle = TextureAssets.Item[75].Frame(1, 8, 0, num2);
		rectangle.Height -= 2;
		float rotation = 0f;
		Vector2 origin = rectangle.Size() / 2f;
		origin.Y += 2f;
		spriteBatch.Draw(TextureAssets.Item[75].Value, position, (Rectangle?)rectangle, splashColor, rotation, origin, 1f, (SpriteEffects)0, 0f);
	}

	protected void DrawUnderworldBackground(bool flat)
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		if (!(screenPosition.Y + (float)screenHeight < (float)(maxTilesY - 220) * 16f))
		{
			Vector2 screenOffset = screenPosition + new Vector2((float)(screenWidth >> 1), (float)(screenHeight >> 1));
			float pushUp = (GameViewMatrix.Zoom.Y - 1f) * 0.5f * 200f;
			SkyManager.Instance.ResetDepthTracker();
			for (int num = 4; num >= 0; num--)
			{
				DrawUnderworldBackgroudLayer(flat, screenOffset, pushUp, num);
			}
			if (!mapFullscreen)
			{
				SkyManager.Instance.DrawRemainingDepth(spriteBatch);
			}
			DrawSurfaceBG_DrawChangeOverlay(12);
		}
	}

	private static void DrawUnderworldBackgroudLayer(bool flat, Vector2 screenOffset, float pushUp, int layerTextureIndex)
	{
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03df: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_042f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0435: Unknown result type (might be due to invalid IL or missing references)
		//IL_043d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0444: Unknown result type (might be due to invalid IL or missing references)
		//IL_045d: Unknown result type (might be due to invalid IL or missing references)
		//IL_045e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0463: Unknown result type (might be due to invalid IL or missing references)
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_0482: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04db: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_040d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0519: Unknown result type (might be due to invalid IL or missing references)
		//IL_051b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0522: Unknown result type (might be due to invalid IL or missing references)
		//IL_052c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0541: Unknown result type (might be due to invalid IL or missing references)
		//IL_0548: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_0570: Unknown result type (might be due to invalid IL or missing references)
		//IL_058a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Unknown result type (might be due to invalid IL or missing references)
		int num = underworldBG[layerTextureIndex];
		Asset<Texture2D> asset = TextureAssets.Underworld[num];
		if (!asset.IsLoaded)
		{
			Assets.Request<Texture2D>(asset.Name);
		}
		Texture2D value = asset.Value;
		Vector2 vec = new Vector2((float)value.Width, (float)value.Height) * 0.5f;
		float num7 = (flat ? 1f : ((float)(layerTextureIndex * 2) + 3f));
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector(1f / num7);
		Rectangle value2 = default(Rectangle);
		((Rectangle)(ref value2))._002Ector(0, 0, value.Width, value.Height);
		float num8 = 1.3f;
		Vector2 zero = Vector2.Zero;
		int num9 = 0;
		switch (num)
		{
		case 1:
		{
			int num14 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
			((Rectangle)(ref value2))._002Ector((num14 >> 1) * (value.Width >> 1), num14 % 2 * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
			vec *= 0.5f;
			zero.Y += 175f;
			break;
		}
		case 2:
			zero.Y += 100f;
			break;
		case 3:
			zero.Y += 75f;
			break;
		case 4:
			num8 = 0.5f;
			zero.Y -= 0f;
			break;
		case 5:
			zero.Y += num9;
			break;
		case 6:
		{
			int num13 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
			((Rectangle)(ref value2))._002Ector(num13 % 2 * (value.Width >> 1), (num13 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
			vec *= 0.5f;
			zero.Y += num9;
			zero.Y += -60f;
			break;
		}
		case 7:
		{
			int num12 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
			((Rectangle)(ref value2))._002Ector(num12 % 2 * (value.Width >> 1), (num12 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
			vec *= 0.5f;
			zero.Y += num9;
			zero.X -= 400f;
			zero.Y += 90f;
			break;
		}
		case 8:
		{
			int num11 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
			((Rectangle)(ref value2))._002Ector(num11 % 2 * (value.Width >> 1), (num11 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
			vec *= 0.5f;
			zero.Y += num9;
			zero.Y += 90f;
			break;
		}
		case 9:
			zero.Y += num9;
			zero.Y -= 30f;
			break;
		case 10:
			zero.Y += 250f * num7;
			break;
		case 11:
			zero.Y += 100f * num7;
			break;
		case 12:
			zero.Y += 20f * num7;
			break;
		case 13:
		{
			zero.Y += 20f * num7;
			int num10 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
			((Rectangle)(ref value2))._002Ector(num10 % 2 * (value.Width >> 1), (num10 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
			vec *= 0.5f;
			break;
		}
		}
		if (flat)
		{
			num8 *= 1.5f;
		}
		vec *= num8;
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / vector.X);
		if (flat)
		{
			zero.Y += (float)(TextureAssets.Underworld[0].Height() >> 1) * 1.3f - vec.Y;
		}
		zero.Y -= pushUp;
		float num2 = num8 * (float)value2.Width;
		int num3 = (int)((float)(int)(screenOffset.X * vector.X - vec.X + zero.X - (float)(screenWidth >> 1)) / num2);
		vec = vec.Floor();
		int num4 = (int)Math.Ceiling((float)screenWidth / num2);
		int num5 = (int)(num8 * ((float)(value2.Width - 1) / vector.X));
		Vector2 vec2 = (new Vector2((float)((num3 - 2) * num5), (float)UnderworldLayer * 16f) + vec - screenOffset) * vector + screenOffset - screenPosition - vec + zero;
		vec2 = vec2.Floor();
		while (vec2.X + num2 < 0f)
		{
			num3++;
			vec2.X += num2;
		}
		for (int i = num3 - 2; i <= num3 + 4 + num4; i++)
		{
			spriteBatch.Draw(value, vec2, (Rectangle?)value2, Color.White, 0f, Vector2.Zero, num8, (SpriteEffects)0, 0f);
			if (layerTextureIndex == 0)
			{
				int num6 = (int)(vec2.Y + (float)value2.Height * num8);
				spriteBatch.Draw(TextureAssets.BlackTile.Value, new Rectangle((int)vec2.X, num6, (int)((float)value2.Width * num8), Math.Max(0, screenHeight - num6)), new Color(11, 3, 7));
			}
			vec2.X += num2;
		}
	}

	protected void DrawBackground()
	{
		//IL_1738: Unknown result type (might be due to invalid IL or missing references)
		//IL_173d: Unknown result type (might be due to invalid IL or missing references)
		//IL_173f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1758: Unknown result type (might be due to invalid IL or missing references)
		//IL_1762: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c34: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c39: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c54: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bed: Unknown result type (might be due to invalid IL or missing references)
		//IL_118b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1190: Unknown result type (might be due to invalid IL or missing references)
		//IL_1192: Unknown result type (might be due to invalid IL or missing references)
		//IL_1197: Unknown result type (might be due to invalid IL or missing references)
		//IL_119c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_11af: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1205: Unknown result type (might be due to invalid IL or missing references)
		//IL_120a: Unknown result type (might be due to invalid IL or missing references)
		//IL_120c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1225: Unknown result type (might be due to invalid IL or missing references)
		//IL_1231: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a87: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b68: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_235d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2371: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17de: Unknown result type (might be due to invalid IL or missing references)
		//IL_3367: Unknown result type (might be due to invalid IL or missing references)
		//IL_337b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2415: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_229e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2272: Unknown result type (might be due to invalid IL or missing references)
		//IL_12da: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12de: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_341b: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_18db: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1904: Unknown result type (might be due to invalid IL or missing references)
		//IL_2049: Unknown result type (might be due to invalid IL or missing references)
		//IL_204e: Unknown result type (might be due to invalid IL or missing references)
		//IL_191a: Unknown result type (might be due to invalid IL or missing references)
		//IL_191c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1581: Unknown result type (might be due to invalid IL or missing references)
		//IL_1586: Unknown result type (might be due to invalid IL or missing references)
		//IL_1588: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1335: Unknown result type (might be due to invalid IL or missing references)
		//IL_133a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1368: Unknown result type (might be due to invalid IL or missing references)
		//IL_136d: Unknown result type (might be due to invalid IL or missing references)
		//IL_139b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1416: Unknown result type (might be due to invalid IL or missing references)
		//IL_141b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1446: Unknown result type (might be due to invalid IL or missing references)
		//IL_144b: Unknown result type (might be due to invalid IL or missing references)
		//IL_147a: Unknown result type (might be due to invalid IL or missing references)
		//IL_147f: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2091: Unknown result type (might be due to invalid IL or missing references)
		//IL_209a: Unknown result type (might be due to invalid IL or missing references)
		//IL_209f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_166e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1673: Unknown result type (might be due to invalid IL or missing references)
		//IL_1675: Unknown result type (might be due to invalid IL or missing references)
		//IL_1694: Unknown result type (might be due to invalid IL or missing references)
		//IL_169e: Unknown result type (might be due to invalid IL or missing references)
		//IL_210e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2110: Unknown result type (might be due to invalid IL or missing references)
		//IL_219b: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_3dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1edf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_3152: Unknown result type (might be due to invalid IL or missing references)
		//IL_3157: Unknown result type (might be due to invalid IL or missing references)
		//IL_31c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_31c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_31e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_31f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e62: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ece: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ed5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ef1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3206: Unknown result type (might be due to invalid IL or missing references)
		//IL_3208: Unknown result type (might be due to invalid IL or missing references)
		//IL_3293: Unknown result type (might be due to invalid IL or missing references)
		//IL_3298: Unknown result type (might be due to invalid IL or missing references)
		//IL_329a: Unknown result type (might be due to invalid IL or missing references)
		//IL_32b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_32c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f92: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f13: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2549: Unknown result type (might be due to invalid IL or missing references)
		//IL_254e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff5: Unknown result type (might be due to invalid IL or missing references)
		//IL_356c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3571: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e45: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d03: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d12: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f18: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f38: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ed1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f58: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ff9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3000: Unknown result type (might be due to invalid IL or missing references)
		//IL_3019: Unknown result type (might be due to invalid IL or missing references)
		//IL_3023: Unknown result type (might be due to invalid IL or missing references)
		//IL_369a: Unknown result type (might be due to invalid IL or missing references)
		//IL_369c: Unknown result type (might be due to invalid IL or missing references)
		//IL_369e: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a08: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c20: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c2a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c33: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c39: Unknown result type (might be due to invalid IL or missing references)
		//IL_2682: Unknown result type (might be due to invalid IL or missing references)
		//IL_2684: Unknown result type (might be due to invalid IL or missing references)
		//IL_2686: Unknown result type (might be due to invalid IL or missing references)
		//IL_2688: Unknown result type (might be due to invalid IL or missing references)
		//IL_393e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3943: Unknown result type (might be due to invalid IL or missing references)
		//IL_3945: Unknown result type (might be due to invalid IL or missing references)
		//IL_3972: Unknown result type (might be due to invalid IL or missing references)
		//IL_397c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3985: Unknown result type (might be due to invalid IL or missing references)
		//IL_398b: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_36fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_3728: Unknown result type (might be due to invalid IL or missing references)
		//IL_372d: Unknown result type (might be due to invalid IL or missing references)
		//IL_375b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3760: Unknown result type (might be due to invalid IL or missing references)
		//IL_378e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3793: Unknown result type (might be due to invalid IL or missing references)
		//IL_37d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_37db: Unknown result type (might be due to invalid IL or missing references)
		//IL_3806: Unknown result type (might be due to invalid IL or missing references)
		//IL_380b: Unknown result type (might be due to invalid IL or missing references)
		//IL_383a: Unknown result type (might be due to invalid IL or missing references)
		//IL_383f: Unknown result type (might be due to invalid IL or missing references)
		//IL_386b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3870: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2abd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d70: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d95: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b39: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b43: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b52: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dab: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e51: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e53: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e76: Unknown result type (might be due to invalid IL or missing references)
		//IL_2929: Unknown result type (might be due to invalid IL or missing references)
		//IL_292e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2930: Unknown result type (might be due to invalid IL or missing references)
		//IL_294f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2959: Unknown result type (might be due to invalid IL or missing references)
		//IL_26dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2710: Unknown result type (might be due to invalid IL or missing references)
		//IL_2715: Unknown result type (might be due to invalid IL or missing references)
		//IL_2743: Unknown result type (might be due to invalid IL or missing references)
		//IL_2748: Unknown result type (might be due to invalid IL or missing references)
		//IL_2776: Unknown result type (might be due to invalid IL or missing references)
		//IL_277b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27be: Unknown result type (might be due to invalid IL or missing references)
		//IL_27c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_27f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2822: Unknown result type (might be due to invalid IL or missing references)
		//IL_2827: Unknown result type (might be due to invalid IL or missing references)
		//IL_2853: Unknown result type (might be due to invalid IL or missing references)
		//IL_2858: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bba: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bde: Unknown result type (might be due to invalid IL or missing references)
		//IL_2be8: Unknown result type (might be due to invalid IL or missing references)
		//IL_296f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2971: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a46: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bfe: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c00: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2caa: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cac: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd3: Unknown result type (might be due to invalid IL or missing references)
		float num = shimmerAlpha;
		if (num == 1f)
		{
			ugBackTransition = 0f;
			return;
		}
		if (!BackgroundEnabled)
		{
			OldDrawBackground();
			return;
		}
		Color[] slices = (Color[])(object)new Color[9];
		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();
		double num10 = maxTilesY - 330;
		double num20 = (int)((num10 - worldSurface) / 6.0) * 6;
		num10 = worldSurface + num20 - 5.0;
		int num30 = (int)(255f * (1f - gfxQuality) + 140f * gfxQuality);
		int num40 = (int)(200f * (1f - gfxQuality) + 40f * gfxQuality);
		int num50 = 128;
		Vector2 vector = (Vector2)(drawToScreen ? Vector2.Zero : new Vector2((float)offScreenRange, (float)offScreenRange));
		Vector3 vector2 = default(Vector3);
		((Vector3)(ref vector2))._002Ector(0.9f);
		float num59 = MathHelper.Clamp((screenPosition.Y - (float)worldSurface * 16f) / 300f, 0f, 1f);
		float globalBrightness = Lighting.GlobalBrightness;
		Lighting.GlobalBrightness = globalBrightness * (1f - num59) + 1f * num59;
		float value = (float)((double)(screenPosition.Y - (float)(screenHeight / 2) + 200f) - rockLayer * 16.0) / 300f;
		value = MathHelper.Clamp(value, 0f, 1f);
		int num69 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
		LoaderManager.Get<UndergroundBackgroundStylesLoader>().ChooseStyle(out var modBG, out var priority);
		int num71 = 3;
		num71 = ((num69 <= caveBackX[0]) ? caveBackStyle[0] : ((num69 <= caveBackX[1]) ? caveBackStyle[1] : ((num69 > caveBackX[2]) ? caveBackStyle[3] : caveBackStyle[2])));
		num71 += 3;
		if (priority == SceneEffectPriority.BiomeLow)
		{
			num71 = modBG;
		}
		if (SceneMetrics.SnowTileCount > SceneMetrics.SnowTileThreshold && (screenPosition.Y + (float)screenHeight + 1200f) / 16f < (float)(maxTilesY - 250))
		{
			num71 = 1;
		}
		if (SceneMetrics.JungleTileCount > SceneMetrics.JungleTileThreshold)
		{
			if (num71 == 1)
			{
				if (SceneMetrics.JungleTileCount > SceneMetrics.SnowTileCount)
				{
					num71 = 11;
				}
			}
			else
			{
				num71 = 11;
			}
		}
		if (priority == SceneEffectPriority.BiomeMedium)
		{
			num71 = modBG;
		}
		if (WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenHeight / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
		{
			num71 = (player[myPlayer].ZoneCorrupt ? 19 : (player[myPlayer].ZoneCrimson ? 21 : ((!player[myPlayer].ZoneHallow) ? 18 : 20)));
		}
		else if ((double)(screenPosition.Y / 16f) > rockLayer + 60.0 && (double)(screenPosition.Y / 16f) < num10 - 60.0)
		{
			if (player[myPlayer].ZoneSnow)
			{
				if (player[myPlayer].ZoneCorrupt)
				{
					num71 = 15;
				}
				else if (player[myPlayer].ZoneCrimson)
				{
					num71 = 16;
				}
				else if (player[myPlayer].ZoneHallow)
				{
					num71 = 17;
				}
			}
			else if (player[myPlayer].ZoneCorrupt)
			{
				num71 = 12;
			}
			else if (player[myPlayer].ZoneCrimson)
			{
				num71 = 13;
			}
			else if (player[myPlayer].ZoneHallow)
			{
				num71 = 14;
			}
		}
		if (player[myPlayer].ZoneGlowshroom)
		{
			num71 = 2;
		}
		if (priority >= SceneEffectPriority.BiomeHigh)
		{
			num71 = modBG;
		}
		if (GlobalBackgroundStyleLoader.loaded)
		{
			GlobalBackgroundStyleLoader.DelegateChooseUndergroundBackgroundStyle[] hookChooseUndergroundBackgroundStyle = GlobalBackgroundStyleLoader.HookChooseUndergroundBackgroundStyle;
			for (int num72 = 0; num72 < hookChooseUndergroundBackgroundStyle.Length; num72++)
			{
				hookChooseUndergroundBackgroundStyle[num72](ref num71);
			}
		}
		if (num71 != undergroundBackground)
		{
			oldUndergroundBackground = undergroundBackground;
			undergroundBackground = num71;
			ugBackTransition = 1f;
		}
		if (num > 0f)
		{
			ugBackTransition = 0f;
		}
		if (ugBackTransition > 0f)
		{
			ugBackTransition -= 0.25f;
		}
		if (ugBackTransition < 0f)
		{
			ugBackTransition = 0f;
		}
		int[] array = new int[7];
		int[] array2 = new int[7];
		for (int i = 0; i < 2; i++)
		{
			int num2 = undergroundBackground;
			if (i == 1)
			{
				num2 = oldUndergroundBackground;
			}
			int[] array3 = new int[7];
			switch (num2)
			{
			case 0:
				array3[0] = 1;
				array3[1] = 2;
				array3[2] = 4;
				array3[3] = 3;
				array3[4] = 6;
				array3[5] = 5;
				break;
			case 1:
				if (iceBackStyle == 0)
				{
					array3[1] = 33;
					array3[3] = 32;
					array3[0] = 40;
					array3[2] = 34;
				}
				else if (iceBackStyle == 1)
				{
					array3[1] = 118;
					array3[3] = 117;
					array3[0] = 160;
					array3[2] = 161;
				}
				else if (iceBackStyle == 2)
				{
					array3[1] = 165;
					array3[3] = 167;
					array3[0] = 164;
					array3[2] = 166;
				}
				else
				{
					array3[1] = 120;
					array3[3] = 119;
					array3[0] = 162;
					array3[2] = 163;
				}
				array3[4] = 128 + hellBackStyle;
				break;
			case 2:
				array3[0] = 62;
				array3[1] = 63;
				array3[2] = 64;
				array3[3] = 65;
				array3[4] = 143 + hellBackStyle;
				break;
			case 3:
				array3[0] = 66;
				array3[1] = 67;
				array3[2] = 68;
				array3[3] = 69;
				array3[4] = 128 + hellBackStyle;
				break;
			case 4:
				array3[0] = 70;
				array3[1] = 71;
				array3[2] = 68;
				array3[3] = 72;
				array3[4] = 128 + hellBackStyle;
				break;
			case 5:
				array3[0] = 73;
				array3[1] = 74;
				array3[2] = 75;
				array3[3] = 76;
				array3[4] = 131 + hellBackStyle;
				break;
			case 6:
				array3[0] = 77;
				array3[1] = 78;
				array3[2] = 79;
				array3[3] = 80;
				array3[4] = 134 + hellBackStyle;
				break;
			case 7:
				array3[0] = 77;
				array3[1] = 81;
				array3[2] = 79;
				array3[3] = 82;
				array3[4] = 134 + hellBackStyle;
				break;
			case 8:
				array3[0] = 83;
				array3[1] = 84;
				array3[2] = 85;
				array3[3] = 86;
				array3[4] = 137 + hellBackStyle;
				break;
			case 9:
				array3[0] = 83;
				array3[1] = 87;
				array3[2] = 88;
				array3[3] = 89;
				array3[4] = 137 + hellBackStyle;
				break;
			case 10:
				array3[0] = 121;
				array3[1] = 122;
				array3[2] = 123;
				array3[3] = 124;
				array3[4] = 140 + hellBackStyle;
				break;
			case 11:
				if (jungleBackStyle == 0)
				{
					array3[0] = 153;
					array3[1] = 147;
					array3[2] = 148;
					array3[3] = 149;
					array3[4] = 150 + hellBackStyle;
				}
				else
				{
					array3[0] = 146;
					array3[1] = 154;
					array3[2] = 155;
					array3[3] = 156;
					array3[4] = 157 + hellBackStyle;
				}
				break;
			case 12:
			case 13:
			case 14:
				array3[0] = 66;
				array3[1] = 67;
				array3[2] = 68;
				array3[4] = 128 + hellBackStyle;
				switch (num2)
				{
				case 12:
					array3[3] = 193 + worldID % 4;
					break;
				case 13:
					array3[3] = 188 + worldID % 5;
					break;
				case 14:
					array3[3] = 197 + worldID % 3;
					break;
				}
				break;
			case 15:
			case 16:
			case 17:
				array3[0] = 40;
				array3[1] = 33;
				array3[2] = 34;
				array3[4] = 128 + hellBackStyle;
				switch (num2)
				{
				case 15:
					array3[3] = 200;
					break;
				case 16:
					array3[3] = 201 + worldID % 2;
					break;
				case 17:
					array3[3] = 203 + worldID % 4;
					break;
				}
				break;
			default:
				switch (num2)
				{
				case 18:
					array3[0] = 290;
					array3[1] = 291;
					break;
				case 19:
					array3[0] = 292;
					array3[1] = 293;
					break;
				case 20:
					array3[0] = 294;
					array3[1] = 295;
					break;
				case 21:
					array3[0] = 296;
					array3[1] = 297;
					break;
				}
				break;
			}
			if (hellBackStyle == 0)
			{
				array3[5] = 125;
			}
			if (hellBackStyle == 1)
			{
				array3[5] = 126;
			}
			if (hellBackStyle == 2)
			{
				array3[5] = 127;
			}
			array3[6] = 185 + hellBackStyle;
			LoaderManager.Get<UndergroundBackgroundStylesLoader>().FillTextureArray(num2, array3);
			LoadBackground(array3[0]);
			LoadBackground(array3[1]);
			LoadBackground(array3[2]);
			LoadBackground(array3[3]);
			LoadBackground(array3[4]);
			LoadBackground(array3[5]);
			LoadBackground(array3[6]);
			if (i == 0)
			{
				for (int j = 0; j < 7; j++)
				{
					array[j] = array3[j];
				}
			}
			else
			{
				for (int k = 0; k < 7; k++)
				{
					array2[k] = array3[k];
				}
			}
		}
		globalBrightness = 1.2f - 0.2f * value;
		float x = vector2.X;
		float y = vector2.Y;
		float z = vector2.Z;
		num50 = TextureAssets.Background[array[0]].Width() - 32;
		bgParallax = caveParallax;
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
		bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
		bgTopY = (int)((float)((int)worldSurface * 16 - 16) - screenPosition.Y + 16f);
		for (int l = 0; l < bgLoops; l++)
		{
			for (int m = 0; m < num50 / 16; m++)
			{
				int num3 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num3 == -8)
				{
					num3 = 8;
				}
				float num73 = bgStartX + num50 * l + m * 16 + 8;
				float num4 = bgTopY;
				Color color = Lighting.GetColor((int)((num73 + screenPosition.X) / 16f), (int)((screenPosition.Y + num4) / 16f));
				((Color)(ref color)).R = (byte)((float)(int)((Color)(ref color)).R * x);
				((Color)(ref color)).G = (byte)((float)(int)((Color)(ref color)).G * y);
				((Color)(ref color)).B = (byte)((float)(int)((Color)(ref color)).B * z);
				if (num > 0f)
				{
					color *= 1f - num;
				}
				spriteBatch.Draw(TextureAssets.Background[array[0]].Value, new Vector2((float)(bgStartX + num50 * l + 16 * m + num3), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * m + num3 + 16, 0, 16, 16), color);
			}
		}
		if (ugBackTransition > 0f)
		{
			num50 = TextureAssets.Background[array2[0]].Width() - 32;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
			bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
			for (int n = 0; n < bgLoops; n++)
			{
				for (int num5 = 0; num5 < num50 / 16; num5++)
				{
					int num6 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
					if (num6 == -8)
					{
						num6 = 8;
					}
					float num74 = bgStartX + num50 * n + num5 * 16 + 8;
					float num7 = bgTopY;
					Color color12 = Lighting.GetColor((int)((num74 + screenPosition.X) / 16f), (int)((screenPosition.Y + num7) / 16f));
					((Color)(ref color12)).R = (byte)((float)(int)((Color)(ref color12)).R * x);
					((Color)(ref color12)).G = (byte)((float)(int)((Color)(ref color12)).G * y);
					((Color)(ref color12)).B = (byte)((float)(int)((Color)(ref color12)).B * z);
					Color color23 = color12;
					((Color)(ref color23)).R = (byte)((float)(int)((Color)(ref color23)).R * ugBackTransition);
					((Color)(ref color23)).G = (byte)((float)(int)((Color)(ref color23)).G * ugBackTransition);
					((Color)(ref color23)).B = (byte)((float)(int)((Color)(ref color23)).B * ugBackTransition);
					((Color)(ref color23)).A = (byte)((float)(int)((Color)(ref color23)).A * ugBackTransition);
					spriteBatch.Draw(TextureAssets.Background[array2[0]].Value, new Vector2((float)(bgStartX + num50 * n + 16 * num5 + num6), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num5 + num6 + 16, 0, 16, 16), color23);
				}
			}
		}
		bool flag = false;
		bool flag2 = false;
		bgTopY = (int)((float)((int)worldSurface * 16) - screenPosition.Y + 16f);
		if (worldSurface * 16.0 <= (double)(screenPosition.Y + (float)screenHeight + (float)offScreenRange))
		{
			bgParallax = caveParallax;
			num50 = TextureAssets.Background[array[1]].Width() - 32;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
			bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
			if (worldSurface * 16.0 < (double)(screenPosition.Y - 16f))
			{
				bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[2]) - (double)backgroundHeight[2]);
				bgLoopsY = (screenHeight - bgStartY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			else
			{
				bgStartY = bgTopY;
				bgLoopsY = (screenHeight - bgTopY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			if (rockLayer * 16.0 < (double)(Camera.ScaledPosition.Y + 600f))
			{
				bgLoopsY = (int)(rockLayer * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
				flag2 = true;
			}
			int num8 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
			if (num8 == -8)
			{
				num8 = 8;
			}
			for (int num9 = 0; num9 < bgLoops; num9++)
			{
				for (int num11 = 0; num11 < bgLoopsY; num11++)
				{
					for (int num12 = 0; num12 < num50 / 16; num12++)
					{
						for (int num13 = 0; num13 < 6; num13++)
						{
							float num75 = bgStartY + num11 * 96 + num13 * 16 + 8;
							int num14 = (int)(((float)(bgStartX + num50 * num9 + num12 * 16 + 8) + screenPosition.X) / 16f);
							int num15 = (int)((num75 + screenPosition.Y) / 16f);
							Color color27 = Lighting.GetColor(num14, num15);
							if (!WorldGen.InWorld(num14, num15))
							{
								continue;
							}
							if (tile[num14, num15] == null)
							{
								tile[num14, num15] = default(Tile);
							}
							if (num == 0f && (((Color)(ref color27)).R > 0 || ((Color)(ref color27)).G > 0 || ((Color)(ref color27)).B > 0))
							{
								if (!drawToScreen)
								{
									Lighting.GetCornerColors(num14, num15, out var vertices);
									vertices.BottomLeftColor = new Color(((Color)(ref vertices.BottomLeftColor)).ToVector3() * vector2);
									vertices.BottomRightColor = new Color(((Color)(ref vertices.BottomRightColor)).ToVector3() * vector2);
									tileBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num8), (float)(bgStartY + backgroundHeight[array[1]] * num11 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num8 + 16, 16 * num13, 16, 16), vertices, Vector2.Zero, 1f, (SpriteEffects)0);
								}
								else if ((((Color)(ref color27)).R > num30 || (double)(int)((Color)(ref color27)).G > (double)num30 * 1.1 || (double)(int)((Color)(ref color27)).B > (double)num30 * 1.2) && !tile[num14, num15].active() && WallLightAt(num14, num15) && ugBackTransition == 0f)
								{
									Lighting.GetColor9Slice(num14, num15, ref slices);
									try
									{
										for (int num16 = 0; num16 < 9; num16++)
										{
											int num17 = 0;
											int num18 = 0;
											int width = 4;
											int height = 4;
											Color color28 = color27;
											Color color29 = color27;
											switch (num16)
											{
											case 0:
												if (!tile[num14 - 1, num15 - 1].active())
												{
													color29 = slices[num16];
												}
												break;
											case 1:
												width = 8;
												num17 = 4;
												if (!tile[num14, num15 - 1].active())
												{
													color29 = slices[num16];
												}
												break;
											case 2:
												num17 = 12;
												if (!tile[num14 + 1, num15 - 1].active())
												{
													color29 = slices[num16];
												}
												break;
											case 3:
												height = 8;
												num18 = 4;
												if (!tile[num14 - 1, num15].active())
												{
													color29 = slices[num16];
												}
												break;
											case 4:
												width = 8;
												height = 8;
												num17 = 4;
												num18 = 4;
												break;
											case 5:
												num17 = 12;
												num18 = 4;
												height = 8;
												if (!tile[num14 + 1, num15].active())
												{
													color29 = slices[num16];
												}
												break;
											case 6:
												num18 = 12;
												if (!tile[num14 - 1, num15 + 1].active())
												{
													color29 = slices[num16];
												}
												break;
											case 7:
												width = 8;
												height = 4;
												num17 = 4;
												num18 = 12;
												if (!tile[num14, num15 + 1].active())
												{
													color29 = slices[num16];
												}
												break;
											case 8:
												num17 = 12;
												num18 = 12;
												if (!tile[num14 + 1, num15 + 1].active())
												{
													color29 = slices[num16];
												}
												break;
											}
											((Color)(ref color28)).R = (byte)((((Color)(ref color27)).R + ((Color)(ref color29)).R) / 2);
											((Color)(ref color28)).G = (byte)((((Color)(ref color27)).G + ((Color)(ref color29)).G) / 2);
											((Color)(ref color28)).B = (byte)((((Color)(ref color27)).B + ((Color)(ref color29)).B) / 2);
											((Color)(ref color28)).R = (byte)((float)(int)((Color)(ref color28)).R * x);
											((Color)(ref color28)).G = (byte)((float)(int)((Color)(ref color28)).G * y);
											((Color)(ref color28)).B = (byte)((float)(int)((Color)(ref color28)).B * z);
											spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num17 + num8), (float)(bgStartY + backgroundHeight[array[1]] * num11 + 16 * num13 + num18)) + vector, (Rectangle?)new Rectangle(16 * num12 + num17 + num8 + 16, 16 * num13 + num18, width, height), color28);
											if (ugBackTransition > 0f)
											{
												Color color30 = color28;
												((Color)(ref color30)).R = (byte)((float)(int)((Color)(ref color30)).R * ugBackTransition);
												((Color)(ref color30)).G = (byte)((float)(int)((Color)(ref color30)).G * ugBackTransition);
												((Color)(ref color30)).B = (byte)((float)(int)((Color)(ref color30)).B * ugBackTransition);
												((Color)(ref color30)).A = (byte)((float)(int)((Color)(ref color30)).A * ugBackTransition);
												spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num17 + num8), (float)(bgStartY + backgroundHeight[array2[1]] * num11 + 16 * num13 + num18)) + vector, (Rectangle?)new Rectangle(16 * num12 + num17 + num8 + 16, 16 * num13 + num18, width, height), color30);
											}
										}
									}
									catch
									{
										((Color)(ref color27)).R = (byte)((float)(int)((Color)(ref color27)).R * x);
										((Color)(ref color27)).G = (byte)((float)(int)((Color)(ref color27)).G * y);
										((Color)(ref color27)).B = (byte)((float)(int)((Color)(ref color27)).B * z);
										spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num8), (float)(bgStartY + backgroundHeight[array[1]] * num11 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num8 + 16, 16 * num13, 16, 16), color27);
									}
								}
								else if ((((Color)(ref color27)).R > num40 || (double)(int)((Color)(ref color27)).G > (double)num40 * 1.1 || (double)(int)((Color)(ref color27)).B > (double)num40 * 1.2) && ugBackTransition == 0f)
								{
									Lighting.GetColor4Slice(num14, num15, ref slices);
									for (int num19 = 0; num19 < 4; num19++)
									{
										int num21 = 0;
										int num22 = 0;
										Color color31 = color27;
										Color color32 = slices[num19];
										switch (num19)
										{
										case 1:
											num21 = 8;
											break;
										case 2:
											num22 = 8;
											break;
										case 3:
											num21 = 8;
											num22 = 8;
											break;
										}
										((Color)(ref color31)).R = (byte)((((Color)(ref color27)).R + ((Color)(ref color32)).R) / 2);
										((Color)(ref color31)).G = (byte)((((Color)(ref color27)).G + ((Color)(ref color32)).G) / 2);
										((Color)(ref color31)).B = (byte)((((Color)(ref color27)).B + ((Color)(ref color32)).B) / 2);
										((Color)(ref color31)).R = (byte)((float)(int)((Color)(ref color31)).R * x);
										((Color)(ref color31)).G = (byte)((float)(int)((Color)(ref color31)).G * y);
										((Color)(ref color31)).B = (byte)((float)(int)((Color)(ref color31)).B * z);
										spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num21 + num8), (float)(bgStartY + backgroundHeight[array[1]] * num11 + 16 * num13 + num22)) + vector, (Rectangle?)new Rectangle(16 * num12 + num21 + num8 + 16, 16 * num13 + num22, 8, 8), color31);
										if (ugBackTransition > 0f)
										{
											Color color2 = color31;
											((Color)(ref color2)).R = (byte)((float)(int)((Color)(ref color2)).R * ugBackTransition);
											((Color)(ref color2)).G = (byte)((float)(int)((Color)(ref color2)).G * ugBackTransition);
											((Color)(ref color2)).B = (byte)((float)(int)((Color)(ref color2)).B * ugBackTransition);
											((Color)(ref color2)).A = (byte)((float)(int)((Color)(ref color2)).A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num21 + num8), (float)(bgStartY + backgroundHeight[array2[1]] * num11 + 16 * num13 + num22)) + vector, (Rectangle?)new Rectangle(16 * num12 + num21 + num8 + 16, 16 * num13 + num22, 8, 8), color2);
										}
									}
								}
								else
								{
									((Color)(ref color27)).R = (byte)((float)(int)((Color)(ref color27)).R * x);
									((Color)(ref color27)).G = (byte)((float)(int)((Color)(ref color27)).G * y);
									((Color)(ref color27)).B = (byte)((float)(int)((Color)(ref color27)).B * z);
									spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num8), (float)(bgStartY + backgroundHeight[array[1]] * num11 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num8 + 16, 16 * num13, 16, 16), color27);
									if (ugBackTransition > 0f)
									{
										Color color3 = color27;
										((Color)(ref color3)).R = (byte)((float)(int)((Color)(ref color3)).R * ugBackTransition);
										((Color)(ref color3)).G = (byte)((float)(int)((Color)(ref color3)).G * ugBackTransition);
										((Color)(ref color3)).B = (byte)((float)(int)((Color)(ref color3)).B * ugBackTransition);
										((Color)(ref color3)).A = (byte)((float)(int)((Color)(ref color3)).A * ugBackTransition);
										spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num8), (float)(bgStartY + backgroundHeight[array2[1]] * num11 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num8 + 16, 16 * num13, 16, 16), color3);
									}
								}
							}
							else
							{
								((Color)(ref color27)).R = (byte)((float)(int)((Color)(ref color27)).R * x);
								((Color)(ref color27)).G = (byte)((float)(int)((Color)(ref color27)).G * y);
								((Color)(ref color27)).B = (byte)((float)(int)((Color)(ref color27)).B * z);
								if (num > 0f)
								{
									color27 *= 1f - num;
								}
								spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num50 * num9 + 16 * num12 + num8), (float)(bgStartY + backgroundHeight[array[1]] * num11 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num8 + 16, 16 * num13, 16, 16), color27);
							}
						}
					}
				}
			}
			if (ugBackTransition > 0f)
			{
				num50 = TextureAssets.Background[array2[1]].Width() - 32;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
				bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
				num8 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num8 == -8)
				{
					num8 = 8;
				}
				for (int num23 = 0; num23 < bgLoops; num23++)
				{
					for (int num24 = 0; num24 < bgLoopsY; num24++)
					{
						for (int num25 = 0; num25 < num50 / 16; num25++)
						{
							for (int num26 = 0; num26 < 6; num26++)
							{
								float num76 = bgStartY + num24 * 96 + num26 * 16 + 8;
								int num27 = (int)(((float)(bgStartX + num50 * num23 + num25 * 16 + 8) + screenPosition.X) / 16f);
								int num28 = (int)((num76 + screenPosition.Y) / 16f);
								if (WorldGen.InWorld(num27, num28))
								{
									Color color4 = Lighting.GetColor(num27, num28);
									if (tile[num27, num28] == null)
									{
										tile[num27, num28] = default(Tile);
									}
									if (((Color)(ref color4)).R > 0 || ((Color)(ref color4)).G > 0 || ((Color)(ref color4)).B > 0)
									{
										Lighting.GetCornerColors(num27, num28, out var vertices2, ugBackTransition);
										byte a = (byte)(255f * ugBackTransition);
										((Color)(ref vertices2.BottomLeftColor)).A = a;
										((Color)(ref vertices2.BottomRightColor)).A = a;
										((Color)(ref vertices2.TopLeftColor)).A = a;
										((Color)(ref vertices2.TopRightColor)).A = a;
										tileBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(bgStartX + num50 * num23 + 16 * num25 + num8), (float)(bgStartY + backgroundHeight[array2[1]] * num24 + 16 * num26)) + vector, (Rectangle?)new Rectangle(16 * num25 + num8 + 16, 16 * num26, 16, 16), vertices2, Vector2.Zero, 1f, (SpriteEffects)0);
									}
								}
							}
						}
					}
				}
			}
			num50 = 128;
			if (flag2)
			{
				bgParallax = caveParallax;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
				bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
				bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
				if (bgTopY > -32)
				{
					for (int num29 = 0; num29 < bgLoops; num29++)
					{
						for (int num31 = 0; num31 < num50 / 16; num31++)
						{
							float num77 = bgStartX + num50 * num29 + num31 * 16 + 8;
							float num32 = bgTopY;
							Color color5 = Lighting.GetColor((int)((num77 + screenPosition.X) / 16f), (int)((screenPosition.Y + num32) / 16f));
							((Color)(ref color5)).R = (byte)((float)(int)((Color)(ref color5)).R * x);
							((Color)(ref color5)).G = (byte)((float)(int)((Color)(ref color5)).G * y);
							((Color)(ref color5)).B = (byte)((float)(int)((Color)(ref color5)).B * z);
							if (num > 0f)
							{
								color5 *= 1f - num;
							}
							spriteBatch.Draw(TextureAssets.Background[array[2]].Value, new Vector2((float)(bgStartX + num50 * num29 + 16 * num31 + num8), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num31 + num8 + 16, 0, 16, 16), color5);
							if (ugBackTransition > 0f)
							{
								Color color6 = color5;
								((Color)(ref color6)).R = (byte)((float)(int)((Color)(ref color6)).R * ugBackTransition);
								((Color)(ref color6)).G = (byte)((float)(int)((Color)(ref color6)).G * ugBackTransition);
								((Color)(ref color6)).B = (byte)((float)(int)((Color)(ref color6)).B * ugBackTransition);
								((Color)(ref color6)).A = (byte)((float)(int)((Color)(ref color6)).A * ugBackTransition);
								spriteBatch.Draw(TextureAssets.Background[array2[2]].Value, new Vector2((float)(bgStartX + num50 * num29 + 16 * num31 + num8), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num31 + num8 + 16, 0, 16, 16), color6);
							}
						}
					}
				}
			}
		}
		if (num10 * 16.0 <= (double)(screenPosition.Y + (float)screenHeight) && (!remixWorld || maxTilesX >= 5000))
		{
			int y2 = 0;
			int x2 = 0;
			int num33 = screenHeight + 200;
			int width2 = screenWidth + 100;
			if ((float)UnderworldLayer * 16f < screenPosition.Y + (float)screenHeight)
			{
				int num34 = (int)(hellBlackBoxBottom - screenPosition.Y + vector.Y);
				if (num33 > num34)
				{
					num33 = num34;
				}
			}
			spriteBatch.Draw(TextureAssets.BlackTile.Value, new Rectangle(x2, y2, width2, num33), new Color(0, 0, 0));
		}
		hellBlackBoxBottom = screenPosition.Y + (float)screenHeight + 100f;
		bgTopY = (int)((float)((int)rockLayer * 16) - screenPosition.Y + 16f + 600f - 8f);
		if (rockLayer * 16.0 <= (double)(screenPosition.Y + (float)screenHeight))
		{
			bgParallax = caveParallax;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
			bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
			if (rockLayer * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
			{
				bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[3]) - (double)backgroundHeight[3]);
				bgLoopsY = (screenHeight - bgStartY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			else
			{
				bgStartY = bgTopY;
				bgLoopsY = (screenHeight - bgTopY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			if (num10 * 16.0 < (double)(screenPosition.Y + (float)screenHeight))
			{
				bgLoopsY = (int)(num10 * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
				flag = true;
			}
			int num35 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
			if (num35 == -8)
			{
				num35 = 8;
			}
			for (int num36 = 0; num36 < bgLoops; num36++)
			{
				for (int num37 = 0; num37 < bgLoopsY; num37++)
				{
					for (int num38 = 0; num38 < num50 / 16; num38++)
					{
						for (int num39 = 0; num39 < 6; num39++)
						{
							float num78 = bgStartY + num37 * 96 + num39 * 16 + 8;
							int num41 = (int)(((float)(bgStartX + num50 * num36 + num38 * 16 + 8) + screenPosition.X) / 16f);
							int num42 = (int)((num78 + screenPosition.Y) / 16f);
							if (!WorldGen.InWorld(num41, num42, 1))
							{
								continue;
							}
							Color color7 = Lighting.GetColor(num41, num42);
							if ((!ShouldDrawBackgroundTileAt(num41, num42) && ((Color)(ref color7)).R != 0 && ((Color)(ref color7)).G != 0 && ((Color)(ref color7)).B != 0) || (((Color)(ref color7)).R <= 0 && ((Color)(ref color7)).G <= 0 && ((Color)(ref color7)).B <= 0) || (!WallLightAt(num41, num42) && caveParallax == 0f))
							{
								continue;
							}
							if (num == 0f && Lighting.NotRetro && ((Color)(ref color7)).R < 230 && ((Color)(ref color7)).G < 230 && ((Color)(ref color7)).B < 230 && ugBackTransition == 0f)
							{
								if ((((Color)(ref color7)).R > num30 || (double)(int)((Color)(ref color7)).G > (double)num30 * 1.1 || (double)(int)((Color)(ref color7)).B > (double)num30 * 1.2) && !tile[num41, num42].active())
								{
									Lighting.GetColor9Slice(num41, num42, ref slices);
									for (int num43 = 0; num43 < 9; num43++)
									{
										int num44 = 0;
										int num45 = 0;
										int width3 = 4;
										int height2 = 4;
										Color color8 = color7;
										Color color9 = color7;
										switch (num43)
										{
										case 0:
											if (!tile[num41 - 1, num42 - 1].active())
											{
												color9 = slices[num43];
											}
											break;
										case 1:
											width3 = 8;
											num44 = 4;
											if (!tile[num41, num42 - 1].active())
											{
												color9 = slices[num43];
											}
											break;
										case 2:
											num44 = 12;
											if (!tile[num41 + 1, num42 - 1].active())
											{
												color9 = slices[num43];
											}
											break;
										case 3:
											height2 = 8;
											num45 = 4;
											if (!tile[num41 - 1, num42].active())
											{
												color9 = slices[num43];
											}
											break;
										case 4:
											width3 = 8;
											height2 = 8;
											num44 = 4;
											num45 = 4;
											break;
										case 5:
											num44 = 12;
											num45 = 4;
											height2 = 8;
											if (!tile[num41 + 1, num42].active())
											{
												color9 = slices[num43];
											}
											break;
										case 6:
											num45 = 12;
											if (!tile[num41 - 1, num42 + 1].active())
											{
												color9 = slices[num43];
											}
											break;
										case 7:
											width3 = 8;
											height2 = 4;
											num44 = 4;
											num45 = 12;
											if (!tile[num41, num42 + 1].active())
											{
												color9 = slices[num43];
											}
											break;
										case 8:
											num44 = 12;
											num45 = 12;
											if (!tile[num41 + 1, num42 + 1].active())
											{
												color9 = slices[num43];
											}
											break;
										}
										((Color)(ref color8)).R = (byte)((((Color)(ref color7)).R + ((Color)(ref color9)).R) / 2);
										((Color)(ref color8)).G = (byte)((((Color)(ref color7)).G + ((Color)(ref color9)).G) / 2);
										((Color)(ref color8)).B = (byte)((((Color)(ref color7)).B + ((Color)(ref color9)).B) / 2);
										((Color)(ref color8)).R = (byte)((float)(int)((Color)(ref color8)).R * x);
										((Color)(ref color8)).G = (byte)((float)(int)((Color)(ref color8)).G * y);
										((Color)(ref color8)).B = (byte)((float)(int)((Color)(ref color8)).B * z);
										spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(bgStartX + num50 * num36 + 16 * num38 + num44 + num35), (float)(bgStartY + backgroundHeight[array[3]] * num37 + 16 * num39 + num45)) + vector, (Rectangle?)new Rectangle(16 * num38 + num44 + num35 + 16, 16 * num39 + num45, width3, height2), color8);
										if (ugBackTransition > 0f)
										{
											Color color10 = color8;
											((Color)(ref color10)).R = (byte)((float)(int)((Color)(ref color10)).R * ugBackTransition);
											((Color)(ref color10)).G = (byte)((float)(int)((Color)(ref color10)).G * ugBackTransition);
											((Color)(ref color10)).B = (byte)((float)(int)((Color)(ref color10)).B * ugBackTransition);
											((Color)(ref color10)).A = (byte)((float)(int)((Color)(ref color10)).A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(bgStartX + num50 * num36 + 16 * num38 + num44 + num35), (float)(bgStartY + backgroundHeight[array2[3]] * num37 + 16 * num39 + num45)) + vector, (Rectangle?)new Rectangle(16 * num38 + num44 + num35 + 16, 16 * num39 + num45, width3, height2), color10);
										}
									}
								}
								else if (((Color)(ref color7)).R > num40 || (double)(int)((Color)(ref color7)).G > (double)num40 * 1.1 || (double)(int)((Color)(ref color7)).B > (double)num40 * 1.2)
								{
									Lighting.GetColor4Slice(num41, num42, ref slices);
									for (int num46 = 0; num46 < 4; num46++)
									{
										int num47 = 0;
										int num48 = 0;
										Color color11 = color7;
										Color color13 = slices[num46];
										switch (num46)
										{
										case 1:
											num47 = 8;
											break;
										case 2:
											num48 = 8;
											break;
										case 3:
											num47 = 8;
											num48 = 8;
											break;
										}
										((Color)(ref color11)).R = (byte)((((Color)(ref color7)).R + ((Color)(ref color13)).R) / 2);
										((Color)(ref color11)).G = (byte)((((Color)(ref color7)).G + ((Color)(ref color13)).G) / 2);
										((Color)(ref color11)).B = (byte)((((Color)(ref color7)).B + ((Color)(ref color13)).B) / 2);
										((Color)(ref color11)).R = (byte)((float)(int)((Color)(ref color11)).R * x);
										((Color)(ref color11)).G = (byte)((float)(int)((Color)(ref color11)).G * y);
										((Color)(ref color11)).B = (byte)((float)(int)((Color)(ref color11)).B * z);
										spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(bgStartX + num50 * num36 + 16 * num38 + num47 + num35), (float)(bgStartY + backgroundHeight[array[3]] * num37 + 16 * num39 + num48)) + vector, (Rectangle?)new Rectangle(16 * num38 + num47 + num35 + 16, 16 * num39 + num48, 8, 8), color11);
										if (ugBackTransition > 0f)
										{
											Color color14 = color11;
											((Color)(ref color14)).R = (byte)((float)(int)((Color)(ref color14)).R * ugBackTransition);
											((Color)(ref color14)).G = (byte)((float)(int)((Color)(ref color14)).G * ugBackTransition);
											((Color)(ref color14)).B = (byte)((float)(int)((Color)(ref color14)).B * ugBackTransition);
											((Color)(ref color14)).A = (byte)((float)(int)((Color)(ref color14)).A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(bgStartX + num50 * num36 + 16 * num38 + num47 + num35), (float)(bgStartY + backgroundHeight[array2[3]] * num37 + 16 * num39 + num48)) + vector, (Rectangle?)new Rectangle(16 * num38 + num47 + num35 + 16, 16 * num39 + num48, 8, 8), color14);
										}
									}
								}
								else
								{
									((Color)(ref color7)).R = (byte)((float)(int)((Color)(ref color7)).R * x);
									((Color)(ref color7)).G = (byte)((float)(int)((Color)(ref color7)).G * y);
									((Color)(ref color7)).B = (byte)((float)(int)((Color)(ref color7)).B * z);
									spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(bgStartX + num50 * num36 + 16 * num38 + num35), (float)(bgStartY + backgroundHeight[array[3]] * num37 + 16 * num39)) + vector, (Rectangle?)new Rectangle(16 * num38 + num35 + 16, 16 * num39, 16, 16), color7);
									if (ugBackTransition > 0f)
									{
										Color color15 = color7;
										((Color)(ref color15)).R = (byte)((float)(int)((Color)(ref color15)).R * ugBackTransition);
										((Color)(ref color15)).G = (byte)((float)(int)((Color)(ref color15)).G * ugBackTransition);
										((Color)(ref color15)).B = (byte)((float)(int)((Color)(ref color15)).B * ugBackTransition);
										((Color)(ref color15)).A = (byte)((float)(int)((Color)(ref color15)).A * ugBackTransition);
										spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(bgStartX + num50 * num36 + 16 * num38 + num35), (float)(bgStartY + backgroundHeight[array2[3]] * num37 + 16 * num39)) + vector, (Rectangle?)new Rectangle(16 * num38 + num35 + 16, 16 * num39, 16, 16), color15);
									}
								}
							}
							else
							{
								((Color)(ref color7)).R = (byte)((float)(int)((Color)(ref color7)).R * x);
								((Color)(ref color7)).G = (byte)((float)(int)((Color)(ref color7)).G * y);
								((Color)(ref color7)).B = (byte)((float)(int)((Color)(ref color7)).B * z);
								if (num > 0f)
								{
									color7 *= 1f - num;
								}
								spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(bgStartX + num50 * num36 + 16 * num38 + num35), (float)(bgStartY + backgroundHeight[array[3]] * num37 + 16 * num39)) + vector, (Rectangle?)new Rectangle(16 * num38 + num35 + 16, 16 * num39, 16, 16), color7);
								if (ugBackTransition > 0f)
								{
									Color color16 = color7;
									((Color)(ref color16)).R = (byte)((float)(int)((Color)(ref color16)).R * ugBackTransition);
									((Color)(ref color16)).G = (byte)((float)(int)((Color)(ref color16)).G * ugBackTransition);
									((Color)(ref color16)).B = (byte)((float)(int)((Color)(ref color16)).B * ugBackTransition);
									((Color)(ref color16)).A = (byte)((float)(int)((Color)(ref color16)).A * ugBackTransition);
									spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(bgStartX + num50 * num36 + 16 * num38 + num35), (float)(bgStartY + backgroundHeight[array2[3]] * num37 + 16 * num39)) + vector, (Rectangle?)new Rectangle(16 * num38 + num35 + 16, 16 * num39, 16, 16), color16);
								}
							}
						}
					}
				}
			}
			num50 = 128;
			if (flag)
			{
				bgParallax = caveParallax;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
				bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
				bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
				for (int num49 = 0; num49 < bgLoops; num49++)
				{
					for (int num51 = 0; num51 < num50 / 16; num51++)
					{
						float num79 = bgStartX + num50 * num49 + num51 * 16 + 8;
						float num52 = bgTopY;
						Color color17 = Lighting.GetColor((int)((num79 + screenPosition.X) / 16f), (int)((screenPosition.Y + num52) / 16f));
						((Color)(ref color17)).R = (byte)((float)(int)((Color)(ref color17)).R * x);
						((Color)(ref color17)).G = (byte)((float)(int)((Color)(ref color17)).G * y);
						((Color)(ref color17)).B = (byte)((float)(int)((Color)(ref color17)).B * z);
						spriteBatch.Draw(TextureAssets.Background[array[4]].Value, new Vector2((float)(bgStartX + num50 * num49 + 16 * num51 + num35), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num51 + num35 + 16, magmaBGFrame * 16, 16, 16), color17);
						if (ugBackTransition > 0f)
						{
							Color color18 = color17;
							((Color)(ref color18)).R = (byte)((float)(int)((Color)(ref color18)).R * ugBackTransition);
							((Color)(ref color18)).G = (byte)((float)(int)((Color)(ref color18)).G * ugBackTransition);
							((Color)(ref color18)).B = (byte)((float)(int)((Color)(ref color18)).B * ugBackTransition);
							((Color)(ref color18)).A = (byte)((float)(int)((Color)(ref color18)).A * ugBackTransition);
							spriteBatch.Draw(TextureAssets.Background[array2[4]].Value, new Vector2((float)(bgStartX + num50 * num49 + 16 * num51 + num35), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num51 + num35 + 16, magmaBGFrame * 16, 16, 16), color18);
						}
					}
				}
			}
		}
		bgTopY = (int)((float)((int)num10 * 16) - screenPosition.Y + 16f + 600f) - 8;
		bool flag3 = false;
		if (num10 * 16.0 <= (double)(screenPosition.Y + (float)screenHeight))
		{
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
			bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
			if (num10 * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
			{
				bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[2]) - (double)backgroundHeight[2]);
				bgLoopsY = (screenHeight - bgStartY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			else
			{
				bgStartY = bgTopY;
				bgLoopsY = (screenHeight - bgTopY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			if ((float)UnderworldLayer * 16f < screenPosition.Y + (float)screenHeight)
			{
				bgLoopsY = (int)Math.Ceiling(((float)UnderworldLayer * 16f - screenPosition.Y - (float)bgStartY) / (float)backgroundHeight[2]);
				flag3 = true;
			}
			num30 = (int)((double)num30 * 1.5);
			num40 = (int)((double)num40 * 1.5);
			int num53 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
			if (num53 == -8)
			{
				num53 = 8;
			}
			for (int num54 = 0; num54 < bgLoops; num54++)
			{
				for (int num55 = 0; num55 < bgLoopsY; num55++)
				{
					for (int num56 = 0; num56 < num50 / 16; num56++)
					{
						for (int num57 = 0; num57 < 6; num57++)
						{
							float num80 = bgStartY + num55 * 96 + num57 * 16 + 8;
							int num58 = (int)(((float)(bgStartX + num50 * num54 + num56 * 16 + 8) + screenPosition.X) / 16f);
							int num60 = (int)((num80 + screenPosition.Y) / 16f);
							if (!WorldGen.InWorld(num58, num60, 1))
							{
								continue;
							}
							Color color19 = Lighting.GetColor(num58, num60);
							if ((!ShouldDrawBackgroundTileAt(num58, num60) && ((Color)(ref color19)).R != 0 && ((Color)(ref color19)).G != 0 && ((Color)(ref color19)).B != 0) || (((Color)(ref color19)).R <= 0 && ((Color)(ref color19)).G <= 0 && ((Color)(ref color19)).B <= 0 && num60 <= maxTilesY - 300) || (!WallLightAt(num58, num60) && caveParallax == 0f))
							{
								continue;
							}
							if (Lighting.NotRetro && ((Color)(ref color19)).R < 230 && ((Color)(ref color19)).G < 230 && ((Color)(ref color19)).B < 230)
							{
								if ((((Color)(ref color19)).R > num30 || (double)(int)((Color)(ref color19)).G > (double)num30 * 1.1 || (double)(int)((Color)(ref color19)).B > (double)num30 * 1.2) && !tile[num58, num60].active())
								{
									Lighting.GetColor9Slice(num58, num60, ref slices);
									for (int num61 = 0; num61 < 9; num61++)
									{
										int num62 = 0;
										int num63 = 0;
										int width4 = 4;
										int height3 = 4;
										Color color20 = color19;
										Color color21 = color19;
										switch (num61)
										{
										case 0:
											if (!tile[num58 - 1, num60 - 1].active())
											{
												color21 = slices[num61];
											}
											break;
										case 1:
											width4 = 8;
											num62 = 4;
											if (!tile[num58, num60 - 1].active())
											{
												color21 = slices[num61];
											}
											break;
										case 2:
											num62 = 12;
											if (!tile[num58 + 1, num60 - 1].active())
											{
												color21 = slices[num61];
											}
											break;
										case 3:
											height3 = 8;
											num63 = 4;
											if (!tile[num58 - 1, num60].active())
											{
												color21 = slices[num61];
											}
											break;
										case 4:
											width4 = 8;
											height3 = 8;
											num62 = 4;
											num63 = 4;
											break;
										case 5:
											num62 = 12;
											num63 = 4;
											height3 = 8;
											if (!tile[num58 + 1, num60].active())
											{
												color21 = slices[num61];
											}
											break;
										case 6:
											num63 = 12;
											if (!tile[num58 - 1, num60 + 1].active())
											{
												color21 = slices[num61];
											}
											break;
										case 7:
											width4 = 8;
											height3 = 4;
											num62 = 4;
											num63 = 12;
											if (!tile[num58, num60 + 1].active())
											{
												color21 = slices[num61];
											}
											break;
										case 8:
											num62 = 12;
											num63 = 12;
											if (!tile[num58 + 1, num60 + 1].active())
											{
												color21 = slices[num61];
											}
											break;
										}
										((Color)(ref color20)).R = (byte)((((Color)(ref color19)).R + ((Color)(ref color21)).R) / 2);
										((Color)(ref color20)).G = (byte)((((Color)(ref color19)).G + ((Color)(ref color21)).G) / 2);
										((Color)(ref color20)).B = (byte)((((Color)(ref color19)).B + ((Color)(ref color21)).B) / 2);
										((Color)(ref color20)).R = (byte)((float)(int)((Color)(ref color20)).R * x);
										((Color)(ref color20)).G = (byte)((float)(int)((Color)(ref color20)).G * y);
										((Color)(ref color20)).B = (byte)((float)(int)((Color)(ref color20)).B * z);
										spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(bgStartX + num50 * num54 + 16 * num56 + num62 + num53), (float)(bgStartY + backgroundHeight[2] * num55 + 16 * num57 + num63)) + vector, (Rectangle?)new Rectangle(16 * num56 + num62 + num53 + 16, 16 * num57 + backgroundHeight[2] * magmaBGFrame + num63, width4, height3), color20, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
									}
								}
								else if (((Color)(ref color19)).R > num40 || (double)(int)((Color)(ref color19)).G > (double)num40 * 1.1 || (double)(int)((Color)(ref color19)).B > (double)num40 * 1.2)
								{
									Lighting.GetColor4Slice(num58, num60, ref slices);
									for (int num64 = 0; num64 < 4; num64++)
									{
										int num65 = 0;
										int num66 = 0;
										Color color22 = color19;
										Color color24 = slices[num64];
										switch (num64)
										{
										case 1:
											num65 = 8;
											break;
										case 2:
											num66 = 8;
											break;
										case 3:
											num65 = 8;
											num66 = 8;
											break;
										}
										((Color)(ref color22)).R = (byte)((((Color)(ref color19)).R + ((Color)(ref color24)).R) / 2);
										((Color)(ref color22)).G = (byte)((((Color)(ref color19)).G + ((Color)(ref color24)).G) / 2);
										((Color)(ref color22)).B = (byte)((((Color)(ref color19)).B + ((Color)(ref color24)).B) / 2);
										((Color)(ref color22)).R = (byte)((float)(int)((Color)(ref color22)).R * x);
										((Color)(ref color22)).G = (byte)((float)(int)((Color)(ref color22)).G * y);
										((Color)(ref color22)).B = (byte)((float)(int)((Color)(ref color22)).B * z);
										spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(bgStartX + num50 * num54 + 16 * num56 + num65 + num53), (float)(bgStartY + backgroundHeight[2] * num55 + 16 * num57 + num66)) + vector, (Rectangle?)new Rectangle(16 * num56 + num65 + num53 + 16, 16 * num57 + backgroundHeight[2] * magmaBGFrame + num66, 8, 8), color22, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
									}
								}
								else
								{
									((Color)(ref color19)).R = (byte)((float)(int)((Color)(ref color19)).R * x);
									((Color)(ref color19)).G = (byte)((float)(int)((Color)(ref color19)).G * y);
									((Color)(ref color19)).B = (byte)((float)(int)((Color)(ref color19)).B * z);
									spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(bgStartX + num50 * num54 + 16 * num56 + num53), (float)(bgStartY + backgroundHeight[2] * num55 + 16 * num57)) + vector, (Rectangle?)new Rectangle(16 * num56 + num53 + 16, 16 * num57 + backgroundHeight[2] * magmaBGFrame, 16, 16), color19, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
								}
							}
							else
							{
								((Color)(ref color19)).R = (byte)((float)(int)((Color)(ref color19)).R * x);
								((Color)(ref color19)).G = (byte)((float)(int)((Color)(ref color19)).G * y);
								((Color)(ref color19)).B = (byte)((float)(int)((Color)(ref color19)).B * z);
								spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(bgStartX + num50 * num54 + 16 * num56 + num53), (float)(bgStartY + backgroundHeight[2] * num55 + 16 * num57)) + vector, (Rectangle?)new Rectangle(16 * num56 + num53 + 16, 16 * num57 + backgroundHeight[2] * magmaBGFrame, 16, 16), color19, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
							}
						}
					}
				}
			}
			if (flag3)
			{
				bgParallax = caveParallax;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num50 + (double)screenPosition.X * bgParallax, num50) - (double)(num50 / 2)) - (int)vector.X;
				bgLoops = (screenWidth + (int)vector.X * 2) / num50 + 2;
				bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
				hellBlackBoxBottom = (float)bgTopY + screenPosition.Y;
				for (int num67 = 0; num67 < bgLoops; num67++)
				{
					for (int num68 = 0; num68 < num50 / 16; num68++)
					{
						float num81 = bgStartX + num50 * num67 + num68 * 16 + 8;
						float num70 = bgTopY;
						Color color25 = Lighting.GetColor((int)((num81 + screenPosition.X) / 16f), (int)((screenPosition.Y + num70) / 16f));
						((Color)(ref color25)).R = (byte)((float)(int)((Color)(ref color25)).R * x);
						((Color)(ref color25)).G = (byte)((float)(int)((Color)(ref color25)).G * y);
						((Color)(ref color25)).B = (byte)((float)(int)((Color)(ref color25)).B * z);
						spriteBatch.Draw(TextureAssets.Background[array[6]].Value, new Vector2((float)(bgStartX + num50 * num67 + 16 * num68 + num53), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num68 + num53 + 16, magmaBGFrame * 16, 16, 16), color25);
						if (ugBackTransition > 0f)
						{
							Color color26 = color25;
							((Color)(ref color26)).R = (byte)((float)(int)((Color)(ref color26)).R * ugBackTransition);
							((Color)(ref color26)).G = (byte)((float)(int)((Color)(ref color26)).G * ugBackTransition);
							((Color)(ref color26)).B = (byte)((float)(int)((Color)(ref color26)).B * ugBackTransition);
							((Color)(ref color26)).A = (byte)((float)(int)((Color)(ref color26)).A * ugBackTransition);
							spriteBatch.Draw(TextureAssets.Background[array2[6]].Value, new Vector2((float)(bgStartX + num50 * num67 + 16 * num68 + num53), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num68 + num53 + 16, magmaBGFrame * 16, 16, 16), color26);
						}
					}
				}
			}
		}
		Lighting.GlobalBrightness = globalBrightness;
		TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
	}

	public static Point GetScreenOverdrawOffset()
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		return (Camera.ScaledPosition - Camera.UnscaledPosition).ToTileCoordinates();
	}

	protected void OldDrawBackground()
	{
		//IL_139f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_13bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1880: Unknown result type (might be due to invalid IL or missing references)
		//IL_1885: Unknown result type (might be due to invalid IL or missing references)
		//IL_1887: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_18aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_16eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_170b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1715: Unknown result type (might be due to invalid IL or missing references)
		//IL_172b: Unknown result type (might be due to invalid IL or missing references)
		//IL_172d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b32: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_1436: Unknown result type (might be due to invalid IL or missing references)
		//IL_1438: Unknown result type (might be due to invalid IL or missing references)
		//IL_143d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1442: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_153a: Unknown result type (might be due to invalid IL or missing references)
		//IL_153f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1541: Unknown result type (might be due to invalid IL or missing references)
		//IL_155e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1568: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e78: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_157e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1580: Unknown result type (might be due to invalid IL or missing references)
		//IL_1625: Unknown result type (might be due to invalid IL or missing references)
		//IL_162a: Unknown result type (might be due to invalid IL or missing references)
		//IL_162c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1649: Unknown result type (might be due to invalid IL or missing references)
		//IL_1653: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_120e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fd4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1002: Unknown result type (might be due to invalid IL or missing references)
		//IL_1007: Unknown result type (might be due to invalid IL or missing references)
		//IL_1035: Unknown result type (might be due to invalid IL or missing references)
		//IL_103a: Unknown result type (might be due to invalid IL or missing references)
		//IL_107d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1082: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1112: Unknown result type (might be due to invalid IL or missing references)
		//IL_1117: Unknown result type (might be due to invalid IL or missing references)
		//IL_122e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1230: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12da: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1305: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c84: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c86: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d37: Unknown result type (might be due to invalid IL or missing references)
		//IL_197c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1981: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b18: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a99: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c89: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c54: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c28: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c44: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0981: Unknown result type (might be due to invalid IL or missing references)
		//IL_0986: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f64: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c64: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c66: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0abb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_36a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_36b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_36d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_36e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_36ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_2976: Unknown result type (might be due to invalid IL or missing references)
		//IL_297b: Unknown result type (might be due to invalid IL or missing references)
		//IL_297d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2996: Unknown result type (might be due to invalid IL or missing references)
		//IL_29a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_29b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a57: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a81: Unknown result type (might be due to invalid IL or missing references)
		//IL_307b: Unknown result type (might be due to invalid IL or missing references)
		//IL_307d: Unknown result type (might be due to invalid IL or missing references)
		//IL_307f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3081: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_33e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_33eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_33f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_35d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_35fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_3608: Unknown result type (might be due to invalid IL or missing references)
		//IL_3611: Unknown result type (might be due to invalid IL or missing references)
		//IL_3617: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_20ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_2101: Unknown result type (might be due to invalid IL or missing references)
		//IL_331f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3324: Unknown result type (might be due to invalid IL or missing references)
		//IL_3326: Unknown result type (might be due to invalid IL or missing references)
		//IL_3353: Unknown result type (might be due to invalid IL or missing references)
		//IL_335d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3366: Unknown result type (might be due to invalid IL or missing references)
		//IL_336c: Unknown result type (might be due to invalid IL or missing references)
		//IL_30d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_30db: Unknown result type (might be due to invalid IL or missing references)
		//IL_3109: Unknown result type (might be due to invalid IL or missing references)
		//IL_310e: Unknown result type (might be due to invalid IL or missing references)
		//IL_313c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3141: Unknown result type (might be due to invalid IL or missing references)
		//IL_316f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3174: Unknown result type (might be due to invalid IL or missing references)
		//IL_31b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_31bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_31e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_31ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_321b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3220: Unknown result type (might be due to invalid IL or missing references)
		//IL_324c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3251: Unknown result type (might be due to invalid IL or missing references)
		//IL_252c: Unknown result type (might be due to invalid IL or missing references)
		//IL_252e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2533: Unknown result type (might be due to invalid IL or missing references)
		//IL_2538: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2801: Unknown result type (might be due to invalid IL or missing references)
		//IL_280b: Unknown result type (might be due to invalid IL or missing references)
		//IL_34e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_34ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3517: Unknown result type (might be due to invalid IL or missing references)
		//IL_3521: Unknown result type (might be due to invalid IL or missing references)
		//IL_352a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3530: Unknown result type (might be due to invalid IL or missing references)
		//IL_2821: Unknown result type (might be due to invalid IL or missing references)
		//IL_2823: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_28e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2156: Unknown result type (might be due to invalid IL or missing references)
		//IL_215b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2189: Unknown result type (might be due to invalid IL or missing references)
		//IL_218e: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2237: Unknown result type (might be due to invalid IL or missing references)
		//IL_223c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2267: Unknown result type (might be due to invalid IL or missing references)
		//IL_226c: Unknown result type (might be due to invalid IL or missing references)
		//IL_229b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_22cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2630: Unknown result type (might be due to invalid IL or missing references)
		//IL_2635: Unknown result type (might be due to invalid IL or missing references)
		//IL_2637: Unknown result type (might be due to invalid IL or missing references)
		//IL_2654: Unknown result type (might be due to invalid IL or missing references)
		//IL_265e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_248f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2494: Unknown result type (might be due to invalid IL or missing references)
		//IL_2496: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_24bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2674: Unknown result type (might be due to invalid IL or missing references)
		//IL_2676: Unknown result type (might be due to invalid IL or missing references)
		//IL_271b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2720: Unknown result type (might be due to invalid IL or missing references)
		//IL_2722: Unknown result type (might be due to invalid IL or missing references)
		//IL_273f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2749: Unknown result type (might be due to invalid IL or missing references)
		Color[] slices = (Color[])(object)new Color[9];
		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();
		int num = (int)(255f * (1f - gfxQuality) + 140f * gfxQuality);
		int num11 = (int)(200f * (1f - gfxQuality) + 40f * gfxQuality);
		int num21 = 128;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)offScreenRange, (float)offScreenRange);
		if (drawToScreen)
		{
			vector = Vector2.Zero;
		}
		float num31;
		float num40;
		float num50 = (num40 = (num31 = 0.9f));
		float num60 = 0f;
		if (SceneMetrics.BloodTileCount > SceneMetrics.EvilTileCount && SceneMetrics.BloodTileCount > SceneMetrics.HolyTileCount)
		{
			num60 = SceneMetrics.BloodTileCount;
		}
		else if (SceneMetrics.HolyTileCount > SceneMetrics.EvilTileCount)
		{
			num60 = SceneMetrics.HolyTileCount;
		}
		else if (SceneMetrics.EvilTileCount > SceneMetrics.HolyTileCount)
		{
			num60 = SceneMetrics.EvilTileCount;
		}
		num60 = MathHelper.Clamp(num60 / 800f, 0f, 1f);
		float num65 = (float)((double)screenPosition.Y - worldSurface * 16.0) / 300f;
		if (num65 < 0f)
		{
			num65 = 0f;
		}
		else if (num65 > 1f)
		{
			num65 = 1f;
		}
		float num66 = 1f * (1f - num65) + num31 * num65;
		float globalBrightness = Lighting.GlobalBrightness;
		Lighting.GlobalBrightness = globalBrightness * (1f - num65) + 1f * num65;
		float value = (float)((double)(screenPosition.Y - (float)(screenHeight / 2) + 200f) - rockLayer * 16.0) / 300f;
		value = MathHelper.Clamp(value, 0f, 1f);
		if (SceneMetrics.BloodTileCount > SceneMetrics.EvilTileCount && SceneMetrics.BloodTileCount > SceneMetrics.HolyTileCount)
		{
			num31 = 1f * num60 + num31 * (1f - num60);
			num40 = 0.55f * num60 + num40 * (1f - num60);
			num50 = 0.5f * num60 + num50 * (1f - num60);
		}
		else if (SceneMetrics.EvilTileCount > 0)
		{
			num31 = 0.8f * num60 + num31 * (1f - num60);
			num40 = 0.75f * num60 + num40 * (1f - num60);
			num50 = 1.1f * num60 + num50 * (1f - num60);
		}
		else if (SceneMetrics.HolyTileCount > 0)
		{
			num31 = 1f * num60 + num31 * (1f - num60);
			num40 = 0.7f * num60 + num40 * (1f - num60);
			num50 = 0.9f * num60 + num50 * (1f - num60);
		}
		num31 = 1f * (num66 - value) + num31 * value;
		num40 = 1f * (num66 - value) + num40 * value;
		num50 = 1f * (num66 - value) + num50 * value;
		int num2 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
		int num3 = 3;
		num3 = ((num2 <= caveBackX[0]) ? caveBackStyle[0] : ((num2 <= caveBackX[1]) ? caveBackStyle[1] : ((num2 > caveBackX[2]) ? caveBackStyle[3] : caveBackStyle[2])));
		num3 += 3;
		if (SceneMetrics.SnowTileCount > SceneMetrics.SnowTileThreshold && (screenPosition.Y + (float)screenHeight) / 16f < (float)(maxTilesY - 250))
		{
			num3 = 1;
		}
		if (SceneMetrics.JungleTileCount > SceneMetrics.JungleTileThreshold)
		{
			if (num3 == 1)
			{
				if (SceneMetrics.JungleTileCount > SceneMetrics.SnowTileCount)
				{
					num3 = 11;
				}
			}
			else
			{
				num3 = 11;
			}
		}
		if (SceneMetrics.EnoughTilesForGlowingMushroom)
		{
			num3 = 2;
		}
		if (num3 != undergroundBackground)
		{
			oldUndergroundBackground = undergroundBackground;
			undergroundBackground = num3;
			ugBackTransition = 1f;
		}
		if (ugBackTransition > 0f)
		{
			ugBackTransition -= 0.25f;
		}
		if (ugBackTransition < 0f)
		{
			ugBackTransition = 0f;
		}
		int[] array = new int[6];
		int[] array2 = new int[6];
		for (int i = 0; i < 2; i++)
		{
			int num4 = undergroundBackground;
			if (i == 1)
			{
				num4 = oldUndergroundBackground;
			}
			int[] array3 = new int[6];
			switch (num4)
			{
			case 0:
				array3[0] = 1;
				array3[1] = 2;
				array3[2] = 4;
				array3[3] = 3;
				array3[4] = 6;
				array3[5] = 5;
				break;
			case 1:
				if (iceBackStyle == 0)
				{
					array3[1] = 33;
					array3[3] = 32;
					array3[0] = 40;
					array3[2] = 34;
				}
				else if (iceBackStyle == 1)
				{
					array3[1] = 118;
					array3[3] = 117;
					array3[0] = 160;
					array3[2] = 161;
				}
				else if (iceBackStyle == 2)
				{
					array3[1] = 165;
					array3[3] = 167;
					array3[0] = 164;
					array3[2] = 166;
				}
				else
				{
					array3[1] = 120;
					array3[3] = 119;
					array3[0] = 162;
					array3[2] = 163;
				}
				array3[4] = array3[3];
				break;
			case 2:
				array3[0] = 62;
				array3[1] = 63;
				array3[2] = 64;
				array3[3] = 65;
				array3[4] = 143 + hellBackStyle;
				break;
			case 3:
				array3[0] = 66;
				array3[1] = 67;
				array3[2] = 68;
				array3[3] = 69;
				array3[4] = 128 + hellBackStyle;
				break;
			case 4:
				array3[0] = 70;
				array3[1] = 71;
				array3[2] = 68;
				array3[3] = 72;
				array3[4] = 128 + hellBackStyle;
				break;
			case 5:
				array3[0] = 73;
				array3[1] = 74;
				array3[2] = 75;
				array3[3] = 76;
				array3[4] = 131 + hellBackStyle;
				break;
			case 6:
				array3[0] = 77;
				array3[1] = 78;
				array3[2] = 79;
				array3[3] = 80;
				array3[4] = 134 + hellBackStyle;
				break;
			case 7:
				array3[0] = 77;
				array3[1] = 81;
				array3[2] = 79;
				array3[3] = 82;
				array3[4] = 134 + hellBackStyle;
				break;
			case 8:
				array3[0] = 83;
				array3[1] = 84;
				array3[2] = 85;
				array3[3] = 86;
				array3[4] = 137 + hellBackStyle;
				break;
			case 9:
				array3[0] = 83;
				array3[1] = 87;
				array3[2] = 88;
				array3[3] = 89;
				array3[4] = 137 + hellBackStyle;
				break;
			case 10:
				array3[0] = 121;
				array3[1] = 122;
				array3[2] = 123;
				array3[3] = 124;
				array3[4] = 140 + hellBackStyle;
				break;
			case 11:
				if (jungleBackStyle == 0)
				{
					array3[0] = 153;
					array3[1] = 147;
					array3[2] = 148;
					array3[3] = 149;
					array3[4] = 150 + hellBackStyle;
				}
				else
				{
					array3[0] = 146;
					array3[1] = 154;
					array3[2] = 155;
					array3[3] = 156;
					array3[4] = 157 + hellBackStyle;
				}
				break;
			}
			if (hellBackStyle == 0)
			{
				array3[5] = 125;
			}
			if (hellBackStyle == 1)
			{
				array3[5] = 126;
			}
			if (hellBackStyle == 2)
			{
				array3[5] = 127;
			}
			LoadBackground(array3[0]);
			LoadBackground(array3[1]);
			LoadBackground(array3[2]);
			LoadBackground(array3[3]);
			LoadBackground(array3[4]);
			LoadBackground(array3[5]);
			if (i == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					array[j] = array3[j];
				}
			}
			else
			{
				for (int k = 0; k < 6; k++)
				{
					array2[k] = array3[k];
				}
			}
		}
		globalBrightness = 1.2f * (1f - value) + 1f * value;
		bgParallax = caveParallax;
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)num21 + (double)screenPosition.X * bgParallax, num21) - (double)(num21 / 2)) - (int)vector.X;
		bgLoops = (screenWidth + (int)vector.X * 2) / num21 + 2;
		bgTopY = (int)((float)((int)worldSurface * 16 - 16) - screenPosition.Y + 16f);
		for (int l = 0; l < bgLoops; l++)
		{
			for (int m = 0; m < num21 / 16; m++)
			{
				int num5 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num5 == -8)
				{
					num5 = 8;
				}
				float num67 = bgStartX + num21 * l + m * 16 + 8;
				float num6 = bgTopY;
				Color color = Lighting.GetColor((int)((num67 + screenPosition.X) / 16f), (int)((screenPosition.Y + num6) / 16f));
				((Color)(ref color)).R = (byte)((float)(int)((Color)(ref color)).R * num31);
				((Color)(ref color)).G = (byte)((float)(int)((Color)(ref color)).G * num40);
				((Color)(ref color)).B = (byte)((float)(int)((Color)(ref color)).B * num50);
				spriteBatch.Draw(TextureAssets.Background[array[0]].Value, new Vector2((float)(bgStartX + num21 * l + 16 * m + num5), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * m + num5 + 16, 0, 16, 16), color);
				if (ugBackTransition > 0f)
				{
					Color color12 = color;
					((Color)(ref color12)).R = (byte)((float)(int)((Color)(ref color12)).R * ugBackTransition);
					((Color)(ref color12)).G = (byte)((float)(int)((Color)(ref color12)).G * ugBackTransition);
					((Color)(ref color12)).B = (byte)((float)(int)((Color)(ref color12)).B * ugBackTransition);
					((Color)(ref color12)).A = (byte)((float)(int)((Color)(ref color12)).A * ugBackTransition);
					spriteBatch.Draw(TextureAssets.Background[array2[0]].Value, new Vector2((float)(bgStartX + num21 * l + 16 * m + num5), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * m + num5 + 16, 0, 16, 16), color12);
				}
			}
		}
		double num7 = maxTilesY - 230;
		double num8 = (int)((num7 - worldSurface) / 6.0) * 6;
		num7 = worldSurface + num8 - 5.0;
		bool flag = false;
		bool flag2 = false;
		bgTopY = (int)((float)((int)worldSurface * 16) - screenPosition.Y + 16f);
		if (worldSurface * 16.0 <= (double)(screenPosition.Y + (float)screenHeight + (float)offScreenRange))
		{
			bgParallax = caveParallax;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num21 + (double)screenPosition.X * bgParallax, num21) - (double)(num21 / 2)) - (int)vector.X;
			bgLoops = (screenWidth + (int)vector.X * 2) / num21 + 2;
			if (worldSurface * 16.0 < (double)(screenPosition.Y - 16f))
			{
				bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[2]) - (double)backgroundHeight[2]);
				bgLoopsY = (screenHeight - bgStartY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			else
			{
				bgStartY = bgTopY;
				bgLoopsY = (screenHeight - bgTopY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			if (rockLayer * 16.0 < (double)(Camera.ScaledPosition.Y + 600f))
			{
				bgLoopsY = (int)(rockLayer * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
				flag2 = true;
			}
			int num9 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
			if (num9 == -8)
			{
				num9 = 8;
			}
			for (int n = 0; n < bgLoops; n++)
			{
				for (int num10 = 0; num10 < bgLoopsY; num10++)
				{
					for (int num12 = 0; num12 < num21 / 16; num12++)
					{
						for (int num13 = 0; num13 < 6; num13++)
						{
							float num68 = bgStartY + num10 * 96 + num13 * 16 + 8;
							int num14 = (int)(((float)(bgStartX + num21 * n + num12 * 16 + 8) + screenPosition.X) / 16f);
							int num15 = (int)((num68 + screenPosition.Y) / 16f);
							Color color23 = Lighting.GetColor(num14, num15);
							if (tile[num14, num15] == null)
							{
								tile[num14, num15] = default(Tile);
							}
							if (((Color)(ref color23)).R > 0 || ((Color)(ref color23)).G > 0 || ((Color)(ref color23)).B > 0)
							{
								if (!drawToScreen)
								{
									Lighting.GetCornerColors(num14, num15, out var vertices);
									tileBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num9), (float)(bgStartY + backgroundHeight[array2[1]] * num10 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num9 + 16, 16 * num13, 16, 16), vertices, Vector2.Zero, 1f, (SpriteEffects)0);
								}
								else if ((((Color)(ref color23)).R > num || (double)(int)((Color)(ref color23)).G > (double)num * 1.1 || (double)(int)((Color)(ref color23)).B > (double)num * 1.2) && !tile[num14, num15].active() && WallLightAt(num14, num15) && ugBackTransition == 0f)
								{
									Lighting.GetColor9Slice(num14, num15, ref slices);
									try
									{
										for (int num16 = 0; num16 < 9; num16++)
										{
											int num17 = 0;
											int num18 = 0;
											int width = 4;
											int height = 4;
											Color color24 = color23;
											Color color25 = color23;
											switch (num16)
											{
											case 0:
												if (!tile[num14 - 1, num15 - 1].active())
												{
													color25 = slices[num16];
												}
												break;
											case 1:
												width = 8;
												num17 = 4;
												if (!tile[num14, num15 - 1].active())
												{
													color25 = slices[num16];
												}
												break;
											case 2:
												num17 = 12;
												if (!tile[num14 + 1, num15 - 1].active())
												{
													color25 = slices[num16];
												}
												break;
											case 3:
												height = 8;
												num18 = 4;
												if (!tile[num14 - 1, num15].active())
												{
													color25 = slices[num16];
												}
												break;
											case 4:
												width = 8;
												height = 8;
												num17 = 4;
												num18 = 4;
												break;
											case 5:
												num17 = 12;
												num18 = 4;
												height = 8;
												if (!tile[num14 + 1, num15].active())
												{
													color25 = slices[num16];
												}
												break;
											case 6:
												num18 = 12;
												if (!tile[num14 - 1, num15 + 1].active())
												{
													color25 = slices[num16];
												}
												break;
											case 7:
												width = 8;
												height = 4;
												num17 = 4;
												num18 = 12;
												if (!tile[num14, num15 + 1].active())
												{
													color25 = slices[num16];
												}
												break;
											case 8:
												num17 = 12;
												num18 = 12;
												if (!tile[num14 + 1, num15 + 1].active())
												{
													color25 = slices[num16];
												}
												break;
											}
											((Color)(ref color24)).R = (byte)((((Color)(ref color23)).R + ((Color)(ref color25)).R) / 2);
											((Color)(ref color24)).G = (byte)((((Color)(ref color23)).G + ((Color)(ref color25)).G) / 2);
											((Color)(ref color24)).B = (byte)((((Color)(ref color23)).B + ((Color)(ref color25)).B) / 2);
											((Color)(ref color24)).R = (byte)((float)(int)((Color)(ref color24)).R * num31);
											((Color)(ref color24)).G = (byte)((float)(int)((Color)(ref color24)).G * num40);
											((Color)(ref color24)).B = (byte)((float)(int)((Color)(ref color24)).B * num50);
											spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num17 + num9), (float)(bgStartY + backgroundHeight[array[1]] * num10 + 16 * num13 + num18)) + vector, (Rectangle?)new Rectangle(16 * num12 + num17 + num9 + 16, 16 * num13 + num18, width, height), color24);
											if (ugBackTransition > 0f)
											{
												Color color26 = color24;
												((Color)(ref color26)).R = (byte)((float)(int)((Color)(ref color26)).R * ugBackTransition);
												((Color)(ref color26)).G = (byte)((float)(int)((Color)(ref color26)).G * ugBackTransition);
												((Color)(ref color26)).B = (byte)((float)(int)((Color)(ref color26)).B * ugBackTransition);
												((Color)(ref color26)).A = (byte)((float)(int)((Color)(ref color26)).A * ugBackTransition);
												spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num17 + num9), (float)(bgStartY + backgroundHeight[array2[1]] * num10 + 16 * num13 + num18)) + vector, (Rectangle?)new Rectangle(16 * num12 + num17 + num9 + 16, 16 * num13 + num18, width, height), color26);
											}
										}
									}
									catch
									{
										((Color)(ref color23)).R = (byte)((float)(int)((Color)(ref color23)).R * num31);
										((Color)(ref color23)).G = (byte)((float)(int)((Color)(ref color23)).G * num40);
										((Color)(ref color23)).B = (byte)((float)(int)((Color)(ref color23)).B * num50);
										spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num9), (float)(bgStartY + backgroundHeight[array[1]] * num10 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num9 + 16, 16 * num13, 16, 16), color23);
									}
								}
								else if ((((Color)(ref color23)).R > num11 || (double)(int)((Color)(ref color23)).G > (double)num11 * 1.1 || (double)(int)((Color)(ref color23)).B > (double)num11 * 1.2) && ugBackTransition == 0f)
								{
									Lighting.GetColor4Slice(num14, num15, ref slices);
									for (int num19 = 0; num19 < 4; num19++)
									{
										int num20 = 0;
										int num22 = 0;
										Color color27 = color23;
										Color color28 = slices[num19];
										switch (num19)
										{
										case 1:
											num20 = 8;
											break;
										case 2:
											num22 = 8;
											break;
										case 3:
											num20 = 8;
											num22 = 8;
											break;
										}
										((Color)(ref color27)).R = (byte)((((Color)(ref color23)).R + ((Color)(ref color28)).R) / 2);
										((Color)(ref color27)).G = (byte)((((Color)(ref color23)).G + ((Color)(ref color28)).G) / 2);
										((Color)(ref color27)).B = (byte)((((Color)(ref color23)).B + ((Color)(ref color28)).B) / 2);
										((Color)(ref color27)).R = (byte)((float)(int)((Color)(ref color27)).R * num31);
										((Color)(ref color27)).G = (byte)((float)(int)((Color)(ref color27)).G * num40);
										((Color)(ref color27)).B = (byte)((float)(int)((Color)(ref color27)).B * num50);
										spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num20 + num9), (float)(bgStartY + backgroundHeight[array[1]] * num10 + 16 * num13 + num22)) + vector, (Rectangle?)new Rectangle(16 * num12 + num20 + num9 + 16, 16 * num13 + num22, 8, 8), color27);
										if (ugBackTransition > 0f)
										{
											Color color29 = color27;
											((Color)(ref color29)).R = (byte)((float)(int)((Color)(ref color29)).R * ugBackTransition);
											((Color)(ref color29)).G = (byte)((float)(int)((Color)(ref color29)).G * ugBackTransition);
											((Color)(ref color29)).B = (byte)((float)(int)((Color)(ref color29)).B * ugBackTransition);
											((Color)(ref color29)).A = (byte)((float)(int)((Color)(ref color29)).A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num20 + num9), (float)(bgStartY + backgroundHeight[array2[1]] * num10 + 16 * num13 + num22)) + vector, (Rectangle?)new Rectangle(16 * num12 + num20 + num9 + 16, 16 * num13 + num22, 8, 8), color29);
										}
									}
								}
								else
								{
									((Color)(ref color23)).R = (byte)((float)(int)((Color)(ref color23)).R * num31);
									((Color)(ref color23)).G = (byte)((float)(int)((Color)(ref color23)).G * num40);
									((Color)(ref color23)).B = (byte)((float)(int)((Color)(ref color23)).B * num50);
									spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num9), (float)(bgStartY + backgroundHeight[array[1]] * num10 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num9 + 16, 16 * num13, 16, 16), color23);
									if (ugBackTransition > 0f)
									{
										Color color2 = color23;
										((Color)(ref color2)).R = (byte)((float)(int)((Color)(ref color2)).R * ugBackTransition);
										((Color)(ref color2)).G = (byte)((float)(int)((Color)(ref color2)).G * ugBackTransition);
										((Color)(ref color2)).B = (byte)((float)(int)((Color)(ref color2)).B * ugBackTransition);
										((Color)(ref color2)).A = (byte)((float)(int)((Color)(ref color2)).A * ugBackTransition);
										spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num9), (float)(bgStartY + backgroundHeight[array2[1]] * num10 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num9 + 16, 16 * num13, 16, 16), color2);
									}
								}
							}
							else
							{
								((Color)(ref color23)).R = (byte)((float)(int)((Color)(ref color23)).R * num31);
								((Color)(ref color23)).G = (byte)((float)(int)((Color)(ref color23)).G * num40);
								((Color)(ref color23)).B = (byte)((float)(int)((Color)(ref color23)).B * num50);
								spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2((float)(bgStartX + num21 * n + 16 * num12 + num9), (float)(bgStartY + backgroundHeight[array[1]] * num10 + 16 * num13)) + vector, (Rectangle?)new Rectangle(16 * num12 + num9 + 16, 16 * num13, 16, 16), color23);
							}
						}
					}
				}
			}
			if (ugBackTransition > 0f)
			{
				for (int num23 = 0; num23 < bgLoops; num23++)
				{
					for (int num24 = 0; num24 < bgLoopsY; num24++)
					{
						for (int num25 = 0; num25 < num21 / 16; num25++)
						{
							for (int num26 = 0; num26 < 6; num26++)
							{
								float num69 = bgStartY + num24 * 96 + num26 * 16 + 8;
								int num27 = (int)(((float)(bgStartX + num21 * num23 + num25 * 16 + 8) + screenPosition.X) / 16f);
								int num28 = (int)((num69 + screenPosition.Y) / 16f);
								Color color3 = Lighting.GetColor(num27, num28);
								if (tile[num27, num28] == null)
								{
									tile[num27, num28] = default(Tile);
								}
								if (((Color)(ref color3)).R > 0 || ((Color)(ref color3)).G > 0 || ((Color)(ref color3)).B > 0)
								{
									Lighting.GetCornerColors(num27, num28, out var vertices2, ugBackTransition);
									byte a = (byte)(255f * ugBackTransition);
									((Color)(ref vertices2.BottomLeftColor)).A = a;
									((Color)(ref vertices2.BottomRightColor)).A = a;
									((Color)(ref vertices2.TopLeftColor)).A = a;
									((Color)(ref vertices2.TopRightColor)).A = a;
									tileBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2((float)(bgStartX + num21 * num23 + 16 * num25 + num9), (float)(bgStartY + backgroundHeight[array2[1]] * num24 + 16 * num26)) + vector, (Rectangle?)new Rectangle(16 * num25 + num9 + 16, 16 * num26, 16, 16), vertices2, Vector2.Zero, 1f, (SpriteEffects)0);
								}
							}
						}
					}
				}
			}
			if (flag2)
			{
				bgParallax = caveParallax;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num21 + (double)screenPosition.X * bgParallax, num21) - (double)(num21 / 2)) - (int)vector.X;
				bgLoops = (screenWidth + (int)vector.X * 2) / num21 + 2;
				bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
				if (bgTopY > -32)
				{
					for (int num29 = 0; num29 < bgLoops; num29++)
					{
						for (int num30 = 0; num30 < num21 / 16; num30++)
						{
							float num70 = bgStartX + num21 * num29 + num30 * 16 + 8;
							float num32 = bgTopY;
							Color color4 = Lighting.GetColor((int)((num70 + screenPosition.X) / 16f), (int)((screenPosition.Y + num32) / 16f));
							((Color)(ref color4)).R = (byte)((float)(int)((Color)(ref color4)).R * num31);
							((Color)(ref color4)).G = (byte)((float)(int)((Color)(ref color4)).G * num40);
							((Color)(ref color4)).B = (byte)((float)(int)((Color)(ref color4)).B * num50);
							spriteBatch.Draw(TextureAssets.Background[array[2]].Value, new Vector2((float)(bgStartX + num21 * num29 + 16 * num30 + num9), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num30 + num9 + 16, 0, 16, 16), color4);
							if (ugBackTransition > 0f)
							{
								Color color5 = color4;
								((Color)(ref color5)).R = (byte)((float)(int)((Color)(ref color5)).R * ugBackTransition);
								((Color)(ref color5)).G = (byte)((float)(int)((Color)(ref color5)).G * ugBackTransition);
								((Color)(ref color5)).B = (byte)((float)(int)((Color)(ref color5)).B * ugBackTransition);
								((Color)(ref color5)).A = (byte)((float)(int)((Color)(ref color5)).A * ugBackTransition);
								spriteBatch.Draw(TextureAssets.Background[array2[2]].Value, new Vector2((float)(bgStartX + num21 * num29 + 16 * num30 + num9), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num30 + num9 + 16, 0, 16, 16), color5);
							}
						}
					}
				}
			}
		}
		bgTopY = (int)((float)((int)rockLayer * 16) - screenPosition.Y + 16f + 600f - 8f);
		if (rockLayer * 16.0 <= (double)(screenPosition.Y + 600f))
		{
			bgParallax = caveParallax;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num21 + (double)screenPosition.X * bgParallax, num21) - (double)(num21 / 2)) - (int)vector.X;
			bgLoops = (screenWidth + (int)vector.X * 2) / num21 + 2;
			if (rockLayer * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
			{
				bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[3]) - (double)backgroundHeight[3]);
				bgLoopsY = (screenHeight - bgStartY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			else
			{
				bgStartY = bgTopY;
				bgLoopsY = (screenHeight - bgTopY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			if (num7 * 16.0 < (double)(screenPosition.Y + 600f))
			{
				bgLoopsY = (int)(num7 * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
				flag = true;
			}
			int num33 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
			if (num33 == -8)
			{
				num33 = 8;
			}
			for (int num34 = 0; num34 < bgLoops; num34++)
			{
				for (int num35 = 0; num35 < bgLoopsY; num35++)
				{
					for (int num36 = 0; num36 < num21 / 16; num36++)
					{
						for (int num37 = 0; num37 < 6; num37++)
						{
							float num71 = bgStartY + num35 * 96 + num37 * 16 + 8;
							int num38 = (int)(((float)(bgStartX + num21 * num34 + num36 * 16 + 8) + screenPosition.X) / 16f);
							int num39 = (int)((num71 + screenPosition.Y) / 16f);
							Color color6 = Lighting.GetColor(num38, num39);
							if ((!ShouldDrawBackgroundTileAt(num38, num39) && ((Color)(ref color6)).R != 0 && ((Color)(ref color6)).G != 0 && ((Color)(ref color6)).B != 0) || (((Color)(ref color6)).R <= 0 && ((Color)(ref color6)).G <= 0 && ((Color)(ref color6)).B <= 0) || (!WallLightAt(num38, num39) && caveParallax == 0f))
							{
								continue;
							}
							if (Lighting.NotRetro && ((Color)(ref color6)).R < 230 && ((Color)(ref color6)).G < 230 && ((Color)(ref color6)).B < 230 && ugBackTransition == 0f)
							{
								if ((((Color)(ref color6)).R > num || (double)(int)((Color)(ref color6)).G > (double)num * 1.1 || (double)(int)((Color)(ref color6)).B > (double)num * 1.2) && !tile[num38, num39].active())
								{
									Lighting.GetColor9Slice(num38, num39, ref slices);
									for (int num41 = 0; num41 < 9; num41++)
									{
										int num42 = 0;
										int num43 = 0;
										int width2 = 4;
										int height2 = 4;
										Color color7 = color6;
										Color color8 = color6;
										switch (num41)
										{
										case 0:
											if (!tile[num38 - 1, num39 - 1].active())
											{
												color8 = slices[num41];
											}
											break;
										case 1:
											width2 = 8;
											num42 = 4;
											if (!tile[num38, num39 - 1].active())
											{
												color8 = slices[num41];
											}
											break;
										case 2:
											num42 = 12;
											if (!tile[num38 + 1, num39 - 1].active())
											{
												color8 = slices[num41];
											}
											break;
										case 3:
											height2 = 8;
											num43 = 4;
											if (!tile[num38 - 1, num39].active())
											{
												color8 = slices[num41];
											}
											break;
										case 4:
											width2 = 8;
											height2 = 8;
											num42 = 4;
											num43 = 4;
											break;
										case 5:
											num42 = 12;
											num43 = 4;
											height2 = 8;
											if (!tile[num38 + 1, num39].active())
											{
												color8 = slices[num41];
											}
											break;
										case 6:
											num43 = 12;
											if (!tile[num38 - 1, num39 + 1].active())
											{
												color8 = slices[num41];
											}
											break;
										case 7:
											width2 = 8;
											height2 = 4;
											num42 = 4;
											num43 = 12;
											if (!tile[num38, num39 + 1].active())
											{
												color8 = slices[num41];
											}
											break;
										case 8:
											num42 = 12;
											num43 = 12;
											if (!tile[num38 + 1, num39 + 1].active())
											{
												color8 = slices[num41];
											}
											break;
										}
										((Color)(ref color7)).R = (byte)((((Color)(ref color6)).R + ((Color)(ref color8)).R) / 2);
										((Color)(ref color7)).G = (byte)((((Color)(ref color6)).G + ((Color)(ref color8)).G) / 2);
										((Color)(ref color7)).B = (byte)((((Color)(ref color6)).B + ((Color)(ref color8)).B) / 2);
										((Color)(ref color7)).R = (byte)((float)(int)((Color)(ref color7)).R * num31);
										((Color)(ref color7)).G = (byte)((float)(int)((Color)(ref color7)).G * num40);
										((Color)(ref color7)).B = (byte)((float)(int)((Color)(ref color7)).B * num50);
										spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(bgStartX + num21 * num34 + 16 * num36 + num42 + num33), (float)(bgStartY + backgroundHeight[array[3]] * num35 + 16 * num37 + num43)) + vector, (Rectangle?)new Rectangle(16 * num36 + num42 + num33 + 16, 16 * num37 + num43, width2, height2), color7);
										if (ugBackTransition > 0f)
										{
											Color color9 = color7;
											((Color)(ref color9)).R = (byte)((float)(int)((Color)(ref color9)).R * ugBackTransition);
											((Color)(ref color9)).G = (byte)((float)(int)((Color)(ref color9)).G * ugBackTransition);
											((Color)(ref color9)).B = (byte)((float)(int)((Color)(ref color9)).B * ugBackTransition);
											((Color)(ref color9)).A = (byte)((float)(int)((Color)(ref color9)).A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(bgStartX + num21 * num34 + 16 * num36 + num42 + num33), (float)(bgStartY + backgroundHeight[array2[3]] * num35 + 16 * num37 + num43)) + vector, (Rectangle?)new Rectangle(16 * num36 + num42 + num33 + 16, 16 * num37 + num43, width2, height2), color9);
										}
									}
								}
								else if (((Color)(ref color6)).R > num11 || (double)(int)((Color)(ref color6)).G > (double)num11 * 1.1 || (double)(int)((Color)(ref color6)).B > (double)num11 * 1.2)
								{
									Lighting.GetColor4Slice(num38, num39, ref slices);
									for (int num44 = 0; num44 < 4; num44++)
									{
										int num45 = 0;
										int num46 = 0;
										Color color10 = color6;
										Color color11 = slices[num44];
										switch (num44)
										{
										case 1:
											num45 = 8;
											break;
										case 2:
											num46 = 8;
											break;
										case 3:
											num45 = 8;
											num46 = 8;
											break;
										}
										((Color)(ref color10)).R = (byte)((((Color)(ref color6)).R + ((Color)(ref color11)).R) / 2);
										((Color)(ref color10)).G = (byte)((((Color)(ref color6)).G + ((Color)(ref color11)).G) / 2);
										((Color)(ref color10)).B = (byte)((((Color)(ref color6)).B + ((Color)(ref color11)).B) / 2);
										((Color)(ref color10)).R = (byte)((float)(int)((Color)(ref color10)).R * num31);
										((Color)(ref color10)).G = (byte)((float)(int)((Color)(ref color10)).G * num40);
										((Color)(ref color10)).B = (byte)((float)(int)((Color)(ref color10)).B * num50);
										spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(bgStartX + num21 * num34 + 16 * num36 + num45 + num33), (float)(bgStartY + backgroundHeight[array[3]] * num35 + 16 * num37 + num46)) + vector, (Rectangle?)new Rectangle(16 * num36 + num45 + num33 + 16, 16 * num37 + num46, 8, 8), color10);
										if (ugBackTransition > 0f)
										{
											Color color13 = color10;
											((Color)(ref color13)).R = (byte)((float)(int)((Color)(ref color13)).R * ugBackTransition);
											((Color)(ref color13)).G = (byte)((float)(int)((Color)(ref color13)).G * ugBackTransition);
											((Color)(ref color13)).B = (byte)((float)(int)((Color)(ref color13)).B * ugBackTransition);
											((Color)(ref color13)).A = (byte)((float)(int)((Color)(ref color13)).A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(bgStartX + num21 * num34 + 16 * num36 + num45 + num33), (float)(bgStartY + backgroundHeight[array2[3]] * num35 + 16 * num37 + num46)) + vector, (Rectangle?)new Rectangle(16 * num36 + num45 + num33 + 16, 16 * num37 + num46, 8, 8), color13);
										}
									}
								}
								else
								{
									((Color)(ref color6)).R = (byte)((float)(int)((Color)(ref color6)).R * num31);
									((Color)(ref color6)).G = (byte)((float)(int)((Color)(ref color6)).G * num40);
									((Color)(ref color6)).B = (byte)((float)(int)((Color)(ref color6)).B * num50);
									spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(bgStartX + num21 * num34 + 16 * num36 + num33), (float)(bgStartY + backgroundHeight[array[3]] * num35 + 16 * num37)) + vector, (Rectangle?)new Rectangle(16 * num36 + num33 + 16, 16 * num37, 16, 16), color6);
									if (ugBackTransition > 0f)
									{
										Color color14 = color6;
										((Color)(ref color14)).R = (byte)((float)(int)((Color)(ref color14)).R * ugBackTransition);
										((Color)(ref color14)).G = (byte)((float)(int)((Color)(ref color14)).G * ugBackTransition);
										((Color)(ref color14)).B = (byte)((float)(int)((Color)(ref color14)).B * ugBackTransition);
										((Color)(ref color14)).A = (byte)((float)(int)((Color)(ref color14)).A * ugBackTransition);
										spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(bgStartX + num21 * num34 + 16 * num36 + num33), (float)(bgStartY + backgroundHeight[array2[3]] * num35 + 16 * num37)) + vector, (Rectangle?)new Rectangle(16 * num36 + num33 + 16, 16 * num37, 16, 16), color14);
									}
								}
							}
							else
							{
								((Color)(ref color6)).R = (byte)((float)(int)((Color)(ref color6)).R * num31);
								((Color)(ref color6)).G = (byte)((float)(int)((Color)(ref color6)).G * num40);
								((Color)(ref color6)).B = (byte)((float)(int)((Color)(ref color6)).B * num50);
								spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2((float)(bgStartX + num21 * num34 + 16 * num36 + num33), (float)(bgStartY + backgroundHeight[array[3]] * num35 + 16 * num37)) + vector, (Rectangle?)new Rectangle(16 * num36 + num33 + 16, 16 * num37, 16, 16), color6);
								if (ugBackTransition > 0f)
								{
									Color color15 = color6;
									((Color)(ref color15)).R = (byte)((float)(int)((Color)(ref color15)).R * ugBackTransition);
									((Color)(ref color15)).G = (byte)((float)(int)((Color)(ref color15)).G * ugBackTransition);
									((Color)(ref color15)).B = (byte)((float)(int)((Color)(ref color15)).B * ugBackTransition);
									((Color)(ref color15)).A = (byte)((float)(int)((Color)(ref color15)).A * ugBackTransition);
									spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2((float)(bgStartX + num21 * num34 + 16 * num36 + num33), (float)(bgStartY + backgroundHeight[array2[3]] * num35 + 16 * num37)) + vector, (Rectangle?)new Rectangle(16 * num36 + num33 + 16, 16 * num37, 16, 16), color15);
								}
							}
						}
					}
				}
			}
			num21 = 128;
			if (flag)
			{
				bgParallax = caveParallax;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num21 + (double)screenPosition.X * bgParallax, num21) - (double)(num21 / 2)) - (int)vector.X;
				bgLoops = (screenWidth + (int)vector.X * 2) / num21 + 2;
				bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
				for (int num47 = 0; num47 < bgLoops; num47++)
				{
					for (int num48 = 0; num48 < num21 / 16; num48++)
					{
						float num72 = bgStartX + num21 * num47 + num48 * 16 + 8;
						float num49 = bgTopY;
						Color color16 = Lighting.GetColor((int)((num72 + screenPosition.X) / 16f), (int)((screenPosition.Y + num49) / 16f));
						((Color)(ref color16)).R = (byte)((float)(int)((Color)(ref color16)).R * num31);
						((Color)(ref color16)).G = (byte)((float)(int)((Color)(ref color16)).G * num40);
						((Color)(ref color16)).B = (byte)((float)(int)((Color)(ref color16)).B * num50);
						spriteBatch.Draw(TextureAssets.Background[array[4]].Value, new Vector2((float)(bgStartX + num21 * num47 + 16 * num48 + num33), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num48 + num33 + 16, magmaBGFrame * 16, 16, 16), color16);
						if (ugBackTransition > 0f)
						{
							Color color17 = color16;
							((Color)(ref color17)).R = (byte)((float)(int)((Color)(ref color17)).R * ugBackTransition);
							((Color)(ref color17)).G = (byte)((float)(int)((Color)(ref color17)).G * ugBackTransition);
							((Color)(ref color17)).B = (byte)((float)(int)((Color)(ref color17)).B * ugBackTransition);
							((Color)(ref color17)).A = (byte)((float)(int)((Color)(ref color17)).A * ugBackTransition);
							spriteBatch.Draw(TextureAssets.Background[array2[4]].Value, new Vector2((float)(bgStartX + num21 * num47 + 16 * num48 + num33), (float)bgTopY) + vector, (Rectangle?)new Rectangle(16 * num48 + num33 + 16, magmaBGFrame * 16, 16, 16), color17);
						}
					}
				}
			}
		}
		bgTopY = (int)((float)((int)num7 * 16) - screenPosition.Y + 16f + 600f) - 8;
		if (num7 * 16.0 <= (double)(screenPosition.Y + 600f))
		{
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num21 + (double)screenPosition.X * bgParallax, num21) - (double)(num21 / 2)) - (int)vector.X;
			bgLoops = (screenWidth + (int)vector.X * 2) / num21 + 2;
			if (num7 * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
			{
				bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[2]) - (double)backgroundHeight[2]);
				bgLoopsY = (screenHeight - bgStartY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			else
			{
				bgStartY = bgTopY;
				bgLoopsY = (screenHeight - bgTopY + (int)vector.Y * 2) / backgroundHeight[2] + 1;
			}
			num = (int)((double)num * 1.5);
			num11 = (int)((double)num11 * 1.5);
			int num51 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
			if (num51 == -8)
			{
				num51 = 8;
			}
			for (int num52 = 0; num52 < bgLoops; num52++)
			{
				for (int num53 = 0; num53 < bgLoopsY; num53++)
				{
					for (int num54 = 0; num54 < num21 / 16; num54++)
					{
						for (int num55 = 0; num55 < 6; num55++)
						{
							float num73 = bgStartY + num53 * 96 + num55 * 16 + 8;
							int num56 = (int)(((float)(bgStartX + num21 * num52 + num54 * 16 + 8) + screenPosition.X) / 16f);
							int num57 = (int)((num73 + screenPosition.Y) / 16f);
							Color color18 = Lighting.GetColor(num56, num57);
							if ((!ShouldDrawBackgroundTileAt(num56, num57) && ((Color)(ref color18)).R != 0 && ((Color)(ref color18)).G != 0 && ((Color)(ref color18)).B != 0) || (((Color)(ref color18)).R <= 0 && ((Color)(ref color18)).G <= 0 && ((Color)(ref color18)).B <= 0) || (!WallLightAt(num56, num57) && caveParallax == 0f))
							{
								continue;
							}
							if (Lighting.NotRetro && ((Color)(ref color18)).R < 230 && ((Color)(ref color18)).G < 230 && ((Color)(ref color18)).B < 230)
							{
								if ((((Color)(ref color18)).R > num || (double)(int)((Color)(ref color18)).G > (double)num * 1.1 || (double)(int)((Color)(ref color18)).B > (double)num * 1.2) && !tile[num56, num57].active())
								{
									Lighting.GetColor9Slice(num56, num57, ref slices);
									for (int num58 = 0; num58 < 9; num58++)
									{
										int num59 = 0;
										int num61 = 0;
										int width3 = 4;
										int height3 = 4;
										Color color19 = color18;
										Color color20 = color18;
										switch (num58)
										{
										case 0:
											if (!tile[num56 - 1, num57 - 1].active())
											{
												color20 = slices[num58];
											}
											break;
										case 1:
											width3 = 8;
											num59 = 4;
											if (!tile[num56, num57 - 1].active())
											{
												color20 = slices[num58];
											}
											break;
										case 2:
											num59 = 12;
											if (!tile[num56 + 1, num57 - 1].active())
											{
												color20 = slices[num58];
											}
											break;
										case 3:
											height3 = 8;
											num61 = 4;
											if (!tile[num56 - 1, num57].active())
											{
												color20 = slices[num58];
											}
											break;
										case 4:
											width3 = 8;
											height3 = 8;
											num59 = 4;
											num61 = 4;
											break;
										case 5:
											num59 = 12;
											num61 = 4;
											height3 = 8;
											if (!tile[num56 + 1, num57].active())
											{
												color20 = slices[num58];
											}
											break;
										case 6:
											num61 = 12;
											if (!tile[num56 - 1, num57 + 1].active())
											{
												color20 = slices[num58];
											}
											break;
										case 7:
											width3 = 8;
											height3 = 4;
											num59 = 4;
											num61 = 12;
											if (!tile[num56, num57 + 1].active())
											{
												color20 = slices[num58];
											}
											break;
										case 8:
											num59 = 12;
											num61 = 12;
											if (!tile[num56 + 1, num57 + 1].active())
											{
												color20 = slices[num58];
											}
											break;
										}
										((Color)(ref color19)).R = (byte)((((Color)(ref color18)).R + ((Color)(ref color20)).R) / 2);
										((Color)(ref color19)).G = (byte)((((Color)(ref color18)).G + ((Color)(ref color20)).G) / 2);
										((Color)(ref color19)).B = (byte)((((Color)(ref color18)).B + ((Color)(ref color20)).B) / 2);
										((Color)(ref color19)).R = (byte)((float)(int)((Color)(ref color19)).R * num31);
										((Color)(ref color19)).G = (byte)((float)(int)((Color)(ref color19)).G * num40);
										((Color)(ref color19)).B = (byte)((float)(int)((Color)(ref color19)).B * num50);
										spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(bgStartX + num21 * num52 + 16 * num54 + num59 + num51), (float)(bgStartY + backgroundHeight[2] * num53 + 16 * num55 + num61)) + vector, (Rectangle?)new Rectangle(16 * num54 + num59 + num51 + 16, 16 * num55 + backgroundHeight[2] * magmaBGFrame + num61, width3, height3), color19, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
									}
								}
								else if (((Color)(ref color18)).R > num11 || (double)(int)((Color)(ref color18)).G > (double)num11 * 1.1 || (double)(int)((Color)(ref color18)).B > (double)num11 * 1.2)
								{
									Lighting.GetColor4Slice(num56, num57, ref slices);
									for (int num62 = 0; num62 < 4; num62++)
									{
										int num63 = 0;
										int num64 = 0;
										Color color21 = color18;
										Color color22 = slices[num62];
										switch (num62)
										{
										case 1:
											num63 = 8;
											break;
										case 2:
											num64 = 8;
											break;
										case 3:
											num63 = 8;
											num64 = 8;
											break;
										}
										((Color)(ref color21)).R = (byte)((((Color)(ref color18)).R + ((Color)(ref color22)).R) / 2);
										((Color)(ref color21)).G = (byte)((((Color)(ref color18)).G + ((Color)(ref color22)).G) / 2);
										((Color)(ref color21)).B = (byte)((((Color)(ref color18)).B + ((Color)(ref color22)).B) / 2);
										((Color)(ref color21)).R = (byte)((float)(int)((Color)(ref color21)).R * num31);
										((Color)(ref color21)).G = (byte)((float)(int)((Color)(ref color21)).G * num40);
										((Color)(ref color21)).B = (byte)((float)(int)((Color)(ref color21)).B * num50);
										spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(bgStartX + num21 * num52 + 16 * num54 + num63 + num51), (float)(bgStartY + backgroundHeight[2] * num53 + 16 * num55 + num64)) + vector, (Rectangle?)new Rectangle(16 * num54 + num63 + num51 + 16, 16 * num55 + backgroundHeight[2] * magmaBGFrame + num64, 8, 8), color21, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
									}
								}
								else
								{
									((Color)(ref color18)).R = (byte)((float)(int)((Color)(ref color18)).R * num31);
									((Color)(ref color18)).G = (byte)((float)(int)((Color)(ref color18)).G * num40);
									((Color)(ref color18)).B = (byte)((float)(int)((Color)(ref color18)).B * num50);
									spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(bgStartX + num21 * num52 + 16 * num54 + num51), (float)(bgStartY + backgroundHeight[2] * num53 + 16 * num55)) + vector, (Rectangle?)new Rectangle(16 * num54 + num51 + 16, 16 * num55 + backgroundHeight[2] * magmaBGFrame, 16, 16), color18, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
								}
							}
							else
							{
								((Color)(ref color18)).R = (byte)((float)(int)((Color)(ref color18)).R * num31);
								((Color)(ref color18)).G = (byte)((float)(int)((Color)(ref color18)).G * num40);
								((Color)(ref color18)).B = (byte)((float)(int)((Color)(ref color18)).B * num50);
								spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2((float)(bgStartX + num21 * num52 + 16 * num54 + num51), (float)(bgStartY + backgroundHeight[2] * num53 + 16 * num55)) + vector, (Rectangle?)new Rectangle(16 * num54 + num51 + 16, 16 * num55 + backgroundHeight[2] * magmaBGFrame, 16, 16), color18, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
							}
						}
					}
				}
			}
		}
		Lighting.GlobalBrightness = globalBrightness;
		TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
	}

	private static bool ShouldDrawBackgroundTileAt(int i, int j)
	{
		if (tile[i, j] == null)
		{
			tile[i, j] = default(Tile);
		}
		if (caveParallax != 0f)
		{
			if (tile[i - 1, j] == null)
			{
				tile[i - 1, j] = default(Tile);
			}
			if (tile[i + 1, j] == null)
			{
				tile[i + 1, j] = default(Tile);
			}
			if (WallLightAt(i, j) || WallLightAt(i - 1, j) || WallLightAt(i + 1, j))
			{
				return true;
			}
		}
		else if (WallLightAt(i, j))
		{
			return true;
		}
		return false;
	}

	public static bool WallLightAt(int i, int j)
	{
		return WallLightAt(i, j, ShouldShowInvisibleWalls());
	}

	public static bool WallLightAt(int i, int j, bool showInvisibleWalls)
	{
		Tile tile = Main.tile[i, j];
		if (!wallLight[tile.wall])
		{
			if (!showInvisibleWalls)
			{
				return tile.invisibleWall();
			}
			return false;
		}
		return true;
	}

	protected void RenderBackground()
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		if (drawToScreen)
		{
			return;
		}
		((Game)this).GraphicsDevice.SetRenderTarget(backWaterTarget);
		((Game)this).GraphicsDevice.Clear(Color.Transparent);
		spriteBatch.Begin();
		tileBatch.Begin();
		try
		{
			DrawWaters(isBackground: true);
		}
		catch
		{
		}
		tileBatch.End();
		spriteBatch.End();
		((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
		((Game)this).GraphicsDevice.SetRenderTarget(backgroundTarget);
		((Game)this).GraphicsDevice.Clear(Color.Transparent);
		spriteBatch.Begin();
		tileBatch.Begin();
		if (ignoreErrors)
		{
			try
			{
				DrawBackground();
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
		}
		else
		{
			DrawBackground();
		}
		TimeLogger.DetailedDrawReset();
		tileBatch.End();
		spriteBatch.End();
		TimeLogger.DetailedDrawTime(33);
		((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
	}

	protected void DrawToMap()
	{
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04de: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0370: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0394: Unknown result type (might be due to invalid IL or missing references)
		if (!mapEnabled)
		{
			return;
		}
		int num = maxTilesX / textureMaxWidth;
		int num12 = maxTilesY / textureMaxHeight;
		for (int i = 0; i <= num; i++)
		{
			for (int j = 0; j <= num12; j++)
			{
				if (!checkMap(i, j))
				{
					return;
				}
			}
		}
		if (clearMap)
		{
			for (int k = 0; k <= num; k++)
			{
				for (int l = 0; l <= num12; l++)
				{
					((Game)this).GraphicsDevice.SetRenderTarget(mapTarget[k, l]);
					((Game)this).GraphicsDevice.Clear(Color.Transparent);
					((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
				}
			}
			clearMap = false;
		}
		int num19 = -1;
		int num20 = -1;
		bool flag = false;
		int num21 = 0;
		int num22 = mapMinY;
		int num23 = mapMinY;
		int num24 = mapMaxY;
		int num25 = mapMaxY;
		int num2 = 1;
		if (mapMinY / textureMaxHeight != mapMaxY / textureMaxHeight)
		{
			num24 = textureMaxHeight;
			num23 = textureMaxHeight;
			num2 = 2;
		}
		for (int m = 0; m < num2; m++)
		{
			switch (m)
			{
			case 0:
				mapMinY = num22;
				mapMaxY = num24;
				break;
			case 1:
				mapMinY = num23;
				mapMaxY = num25;
				break;
			}
			if (mapMinX < 0)
			{
				mapMinX = 0;
			}
			if (mapMinX >= maxTilesX)
			{
				mapMinX = maxTilesX - 1;
			}
			if (mapMinY < 0)
			{
				mapMinY = 0;
			}
			if (mapMinY >= maxTilesY)
			{
				mapMinY = maxTilesY - 1;
			}
			for (int n = mapMinX; n < mapMaxX; n++)
			{
				for (int num3 = mapMinY; num3 < mapMaxY; num3++)
				{
					MapTile mapTile = Map[n, num3];
					if (!mapTile.IsChanged || mapTarget[n / textureMaxWidth, num3 / textureMaxHeight].IsContentLost)
					{
						continue;
					}
					num21++;
					if (num21 >= maxMapUpdates)
					{
						continue;
					}
					if (loadMap)
					{
						loadMapLastX = n;
					}
					Map.ConsumeUpdate(n, num3);
					int num4 = n / textureMaxWidth;
					int num5 = num3 / textureMaxHeight;
					if (num4 != num19 || num5 != num20)
					{
						num19 = num4;
						num20 = num5;
						if (flag)
						{
							spriteBatch.End();
							((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
						}
						flag = true;
						((Game)this).GraphicsDevice.SetRenderTarget(mapTarget[num4, num5]);
						spriteBatch.Begin();
					}
					int num6 = n - num4 * textureMaxWidth;
					int num7 = num3 - num5 * textureMaxHeight;
					Color mapTileXnaColor = MapHelper.GetMapTileXnaColor(ref mapTile);
					int num8 = 1;
					int num9 = 1;
					int num10 = num3 + 1;
					while (num10 < mapMaxY)
					{
						MapTile other2;
						MapTile mapTile3 = (other2 = Map[n, num10]);
						if (!mapTile3.IsChanged || !mapTile.Equals(ref other2) || num10 / textureMaxHeight != num5)
						{
							break;
						}
						Map.ConsumeUpdate(n, num10);
						num8++;
						num10++;
						num3++;
					}
					if (num8 == 1)
					{
						for (num10 = n + 1; num10 < mapMaxX; num10++)
						{
							MapTile other;
							MapTile mapTile2 = (other = Map[num10, num3]);
							if (!mapTile2.IsChanged || !mapTile.Equals(ref other) || num10 / textureMaxWidth != num4)
							{
								break;
							}
							Map.ConsumeUpdate(num10, num3);
							num9++;
						}
					}
					spriteBatch.Draw(TextureAssets.MagicPixel.Value, new Vector2((float)num6, (float)num7), (Rectangle?)new Rectangle(0, 0, num9, num8), mapTileXnaColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
				}
			}
		}
		for (int num11 = 0; num11 < MapHelper.numUpdateTile; num11++)
		{
			int num13 = MapHelper.updateTileX[num11];
			int num14 = MapHelper.updateTileY[num11];
			MapTile mapTile4 = Map[num13, num14];
			if (!mapTile4.IsChanged)
			{
				continue;
			}
			Map.ConsumeUpdate(num13, num14);
			int num15 = num13 / textureMaxWidth;
			int num16 = num14 / textureMaxHeight;
			if (num15 != num19 || num16 != num20)
			{
				num19 = num15;
				num20 = num16;
				if (flag)
				{
					spriteBatch.End();
					((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
				}
				flag = true;
				((Game)this).GraphicsDevice.SetRenderTarget(mapTarget[num15, num16]);
				spriteBatch.Begin();
			}
			int num17 = num13 - num15 * textureMaxWidth;
			int num18 = num14 - num16 * textureMaxHeight;
			Color mapTileXnaColor2 = MapHelper.GetMapTileXnaColor(ref mapTile4);
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, new Vector2((float)num17, (float)num18), (Rectangle?)new Rectangle(0, 0, 1, 1), mapTileXnaColor2, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		MapHelper.numUpdateTile = 0;
		if (flag)
		{
			spriteBatch.End();
			((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
		}
		mapReady = true;
		loadMapLastX = 0;
		loadMap = false;
		loadMapLock = false;
	}

	protected void DrawToMap_Section(int secX, int secY)
	{
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		Stopwatch stopwatch = Stopwatch.StartNew();
		Color[] mapColorCacheArray = _mapColorCacheArray;
		int num = secX * 200;
		int num2 = num + 200;
		int num3 = secY * 150;
		int num4 = num3 + 150;
		int num5 = num / textureMaxWidth;
		int num6 = num3 / textureMaxHeight;
		int num7 = num % textureMaxWidth;
		int num8 = num3 % textureMaxHeight;
		if (!checkMap(num5, num6))
		{
			return;
		}
		int num9 = 0;
		_ = Color.Transparent;
		for (int i = num3; i < num4; i++)
		{
			for (int j = num; j < num2; j++)
			{
				MapTile mapTile = Map[j, i];
				mapColorCacheArray[num9] = MapHelper.GetMapTileXnaColor(ref mapTile);
				num9++;
			}
		}
		try
		{
			((Game)this).GraphicsDevice.SetRenderTarget(mapTarget[num5, num6]);
		}
		catch (ObjectDisposedException)
		{
			initMap[num5, num6] = false;
			return;
		}
		spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend);
		_ = stopwatch.Elapsed.TotalMilliseconds;
		((Texture2D)mapSectionTexture).SetData<Color>(mapColorCacheArray, 0, mapColorCacheArray.Length);
		_ = stopwatch.Elapsed.TotalMilliseconds;
		_ = stopwatch.Elapsed.TotalMilliseconds;
		spriteBatch.Draw((Texture2D)(object)mapSectionTexture, new Vector2((float)num7, (float)num8), Color.White);
		spriteBatch.End();
		((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
		_ = stopwatch.Elapsed.TotalMilliseconds;
		stopwatch.Stop();
	}

	public static string ValueToCoins(long value)
	{
		long num = value;
		long num2 = 0L;
		long num3 = 0L;
		long num4 = 0L;
		long num5 = 0L;
		while (num >= 1000000)
		{
			num -= 1000000;
			num2++;
		}
		while (num >= 10000)
		{
			num -= 10000;
			num3++;
		}
		while (num >= 100)
		{
			num -= 100;
			num4++;
		}
		num5 = num;
		string text = "";
		if (num2 > 0)
		{
			text += string.Format("{0} {1} ", num2, Language.GetTextValue("Currency.Platinum").ToLower());
		}
		if (num3 > 0)
		{
			text += string.Format("{0} {1} ", num3, Language.GetTextValue("Currency.Gold").ToLower());
		}
		if (num4 > 0)
		{
			text += string.Format("{0} {1} ", num4, Language.GetTextValue("Currency.Silver").ToLower());
		}
		if (num5 > 0)
		{
			text += string.Format("{0} {1} ", num5, Language.GetTextValue("Currency.Copper").ToLower());
		}
		if (text.Length > 0)
		{
			text = text.Substring(0, text.Length - 1);
		}
		return text;
	}

	private static void UpdateMinimapAnchors()
	{
		int num = 240;
		int num2 = 240;
		_minimapTopRightAnchorOffsetTowardsLeft = 292;
		_minimapTopRightAnchorOffsetTowardsBottom = 90;
		_minimapTopRightAnchorOffsetTowardsLeft = (int)((float)(52 + num / 2) + MapScale * (float)num / 2f);
		_minimapTopRightAnchorOffsetTowardsBottom = (int)((float)(90 + num2 / 2) - MapScale * (float)num2 / 2f);
		_minimapTopRightAnchorOffsetTowardsLeft = 52 + (int)(240f * MapScale);
		_minimapTopRightAnchorOffsetTowardsBottom = 90;
	}

	protected void DrawMap(GameTime gameTime)
	{
		//IL_12d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffe: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1505: Unknown result type (might be due to invalid IL or missing references)
		//IL_151e: Unknown result type (might be due to invalid IL or missing references)
		//IL_153f: Unknown result type (might be due to invalid IL or missing references)
		//IL_154d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1566: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_1135: Unknown result type (might be due to invalid IL or missing references)
		//IL_113a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1144: Unknown result type (might be due to invalid IL or missing references)
		//IL_115b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1160: Unknown result type (might be due to invalid IL or missing references)
		//IL_1165: Unknown result type (might be due to invalid IL or missing references)
		//IL_1049: Unknown result type (might be due to invalid IL or missing references)
		//IL_1413: Unknown result type (might be due to invalid IL or missing references)
		//IL_1418: Unknown result type (might be due to invalid IL or missing references)
		//IL_1430: Unknown result type (might be due to invalid IL or missing references)
		//IL_1440: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_122e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1240: Unknown result type (might be due to invalid IL or missing references)
		//IL_1286: Unknown result type (might be due to invalid IL or missing references)
		//IL_1186: Unknown result type (might be due to invalid IL or missing references)
		//IL_118b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_105c: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_023d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_0244: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1edd: Unknown result type (might be due to invalid IL or missing references)
		//IL_120f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1214: Unknown result type (might be due to invalid IL or missing references)
		//IL_1219: Unknown result type (might be due to invalid IL or missing references)
		//IL_121b: Unknown result type (might be due to invalid IL or missing references)
		//IL_121d: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_17de: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1804: Unknown result type (might be due to invalid IL or missing references)
		//IL_1809: Unknown result type (might be due to invalid IL or missing references)
		//IL_15eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_233b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2354: Unknown result type (might be due to invalid IL or missing references)
		//IL_2376: Unknown result type (might be due to invalid IL or missing references)
		//IL_238f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_182a: Unknown result type (might be due to invalid IL or missing references)
		//IL_182f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11be: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2593: Unknown result type (might be due to invalid IL or missing references)
		//IL_2598: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_25be: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2407: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a16: Unknown result type (might be due to invalid IL or missing references)
		//IL_184e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1858: Unknown result type (might be due to invalid IL or missing references)
		//IL_185d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1862: Unknown result type (might be due to invalid IL or missing references)
		//IL_1790: Unknown result type (might be due to invalid IL or missing references)
		//IL_268c: Unknown result type (might be due to invalid IL or missing references)
		//IL_269e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_241a: Unknown result type (might be due to invalid IL or missing references)
		//IL_28c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_254a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_266d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2672: Unknown result type (might be due to invalid IL or missing references)
		//IL_2677: Unknown result type (might be due to invalid IL or missing references)
		//IL_2679: Unknown result type (might be due to invalid IL or missing references)
		//IL_267b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0749: Unknown result type (might be due to invalid IL or missing references)
		//IL_0758: Unknown result type (might be due to invalid IL or missing references)
		//IL_0762: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0805: Unknown result type (might be due to invalid IL or missing references)
		//IL_0814: Unknown result type (might be due to invalid IL or missing references)
		//IL_081e: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2608: Unknown result type (might be due to invalid IL or missing references)
		//IL_2612: Unknown result type (might be due to invalid IL or missing references)
		//IL_2617: Unknown result type (might be due to invalid IL or missing references)
		//IL_261c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d73: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_2da6: Unknown result type (might be due to invalid IL or missing references)
		//IL_2db2: Unknown result type (might be due to invalid IL or missing references)
		//IL_2db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0efe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f76: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0857: Unknown result type (might be due to invalid IL or missing references)
		//IL_085c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ab3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_086d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0886: Unknown result type (might be due to invalid IL or missing references)
		//IL_088b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0892: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e19: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b98: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_2bc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c13: Unknown result type (might be due to invalid IL or missing references)
		string text = "";
		if (!mapEnabled || !mapReady)
		{
			return;
		}
		float num = 0f;
		float num49 = 0f;
		float num60 = num;
		float num70 = num49;
		float num81 = 2f;
		byte b = byte.MaxValue;
		_ = maxTilesX / textureMaxWidth;
		int num92 = maxTilesY / textureMaxHeight;
		float num103 = Lighting.OffScreenTiles;
		float num114 = Lighting.OffScreenTiles;
		float num125 = maxTilesX - Lighting.OffScreenTiles - 1;
		float num2 = maxTilesY - Lighting.OffScreenTiles - 42;
		float num13 = 0f;
		float num24 = 0f;
		num103 = 10f;
		num114 = 10f;
		num125 = maxTilesX - 10;
		num2 = maxTilesY - 10;
		for (int i = 0; i < mapTarget.GetLength(0); i++)
		{
			for (int j = 0; j < mapTarget.GetLength(1); j++)
			{
				if (mapTarget[i, j] != null)
				{
					if (mapTarget[i, j].IsContentLost && !mapWasContentLost[i, j])
					{
						mapWasContentLost[i, j] = true;
						refreshMap = true;
						clearMap = true;
					}
					else if (!mapTarget[i, j].IsContentLost && mapWasContentLost[i, j])
					{
						mapWasContentLost[i, j] = false;
					}
				}
			}
		}
		num = 200f;
		num49 = 300f;
		float num35 = 0f;
		float num43 = 0f;
		float num44 = num125 - 1f;
		float num45 = num2 - 1f;
		num81 = (mapFullscreen ? mapFullscreenScale : ((mapStyle != 1) ? mapOverlayScale : mapMinimapScale));
		bool flag = false;
		float mapScale = MapScale;
		float num46 = 1f / mapScale;
		int num47 = mouseX;
		int num48 = mouseY;
		Matrix uIScaleMatrix = UIScaleMatrix;
		Matrix transformMatrix = uIScaleMatrix;
		Matrix transformMatrix2 = uIScaleMatrix;
		Matrix matrix = Matrix.CreateScale(mapScale);
		CoinLossRevengeSystem.RevengeMarker revengeMarker = null;
		int num50 = -1;
		if (mapStyle != 1)
		{
			transformMatrix = Matrix.Identity;
		}
		if (mapFullscreen)
		{
			transformMatrix = Matrix.Identity;
		}
		if (!mapFullscreen && mapStyle == 1)
		{
			transformMatrix *= matrix;
			transformMatrix2 *= matrix;
		}
		if (!mapFullscreen)
		{
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, transformMatrix);
			if (num81 > 1f)
			{
				flag = true;
			}
		}
		if (mapFullscreen)
		{
			if (mouseLeft && ((Game)this).IsActive && !CaptureManager.Instance.UsingMap)
			{
				if (mouseLeftRelease)
				{
					grabMapX = mouseX;
					grabMapY = mouseY;
				}
				else
				{
					float num51 = (float)mouseX - grabMapX;
					float num52 = (float)mouseY - grabMapY;
					grabMapX = mouseX;
					grabMapY = mouseY;
					num51 *= 0.06255f;
					num52 *= 0.06255f;
					mapFullscreenPos.X -= num51 * (16f / mapFullscreenScale);
					mapFullscreenPos.Y -= num52 * (16f / mapFullscreenScale);
				}
			}
			player[myPlayer].mouseInterface = true;
			float num53 = (float)screenWidth / (float)maxTilesX * 0.599f;
			if (mapFullscreenScale < num53)
			{
				mapFullscreenScale = num53;
			}
			if (mapFullscreenScale > 31.2f)
			{
				mapFullscreenScale = 31.18f;
			}
			num81 = mapFullscreenScale;
			b = byte.MaxValue;
			if (mapFullscreenPos.X < num103)
			{
				mapFullscreenPos.X = num103;
			}
			if (mapFullscreenPos.X > num125)
			{
				mapFullscreenPos.X = num125;
			}
			if (mapFullscreenPos.Y < num114)
			{
				mapFullscreenPos.Y = num114;
			}
			if (mapFullscreenPos.Y > num2)
			{
				mapFullscreenPos.Y = num2;
			}
			float num54 = mapFullscreenPos.X;
			float num55 = mapFullscreenPos.Y;
			if (resetMapFull)
			{
				resetMapFull = false;
				num54 = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
				num55 = (screenPosition.Y + (float)(screenHeight / 2)) / 16f;
				mapFullscreenPos.X = num54;
				mapFullscreenPos.Y = num55;
			}
			num54 *= num81;
			num55 *= num81;
			num = 0f - num54 + (float)(screenWidth / 2);
			num49 = 0f - num55 + (float)(screenHeight / 2);
			num += num103 * num81;
			num49 += num114 * num81;
			float num56 = maxTilesX / 840;
			num56 *= mapFullscreenScale;
			float num57 = num;
			float num58 = num49;
			float num59 = TextureAssets.Map.Width();
			float num61 = TextureAssets.Map.Height();
			if (maxTilesX == 8400)
			{
				num56 *= 0.999f;
				num57 -= 40.6f * num56;
				num58 = num49 - 5f * num56;
				num59 -= 8.045f;
				num59 *= num56;
				num61 += 0.12f;
				num61 *= num56;
				if ((double)num56 < 1.2)
				{
					num61 += 1f;
				}
			}
			else if (maxTilesX == 6400)
			{
				num56 *= 1.09f;
				num57 -= 38.8f * num56;
				num58 = num49 - 3.85f * num56;
				num59 -= 13.6f;
				num59 *= num56;
				num61 -= 6.92f;
				num61 *= num56;
				if ((double)num56 < 1.2)
				{
					num61 += 2f;
				}
			}
			else if (maxTilesX == 6300)
			{
				num56 *= 1.09f;
				num57 -= 39.8f * num56;
				num58 = num49 - 4.08f * num56;
				num59 -= 26.69f;
				num59 *= num56;
				num61 -= 6.92f;
				num61 *= num56;
				if ((double)num56 < 1.2)
				{
					num61 += 2f;
				}
			}
			else if (maxTilesX == 4200)
			{
				num56 *= 0.998f;
				num57 -= 37.3f * num56;
				num58 -= 1.7f * num56;
				num59 -= 16f;
				num59 *= num56;
				num61 -= 8.31f;
				num61 *= num56;
			}
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
			flag = true;
			DrawMapFullscreenBackground(screenPosition, screenWidth, screenHeight);
			int x = (int)(num + mapFullscreenScale * 10f);
			int y = (int)(num49 + mapFullscreenScale * 10f);
			int width = (int)((float)(maxTilesX - 40) * mapFullscreenScale);
			int height = (int)((float)(maxTilesY - 40) * mapFullscreenScale);
			Rectangle destinationRectangle = default(Rectangle);
			((Rectangle)(ref destinationRectangle))._002Ector(x, y, width, height);
			spriteBatch.Draw(TextureAssets.Map.Value, destinationRectangle, (Rectangle?)new Rectangle(40, 4, 848, 240), Color.White);
			int edgeWidth = (int)(40f * mapFullscreenScale * 5f);
			int edgeHeight = (int)(4f * mapFullscreenScale * 5f);
			((Rectangle)(ref destinationRectangle))._002Ector(x - edgeWidth, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
			spriteBatch.Draw(TextureAssets.Map.Value, destinationRectangle, (Rectangle?)new Rectangle(0, 0, 40, 248), Color.White);
			((Rectangle)(ref destinationRectangle))._002Ector(x + width, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
			spriteBatch.Draw(TextureAssets.Map.Value, destinationRectangle, (Rectangle?)new Rectangle(888, 0, 40, 248), Color.White);
			if (mouseLeft && mouseLeftRelease)
			{
				double totalSeconds = gameTime.TotalGameTime.TotalSeconds;
				if (totalSeconds - _lastPingMouseDownTime < 0.5 && Vector2.Distance(MouseScreen, _lastPingMousePosition) < 2f)
				{
					TriggerPing((MouseScreen - new Vector2(num - 10f * num81, num49 - 10f * num81)) / num81);
				}
				_lastPingMouseDownTime = totalSeconds;
				_lastPingMousePosition = MouseScreen;
			}
			if (num81 < 1f)
			{
				spriteBatch.End();
				spriteBatch.Begin();
				flag = false;
			}
		}
		else if (mapStyle == 1)
		{
			UpdateMinimapAnchors();
			miniMapWidth = 240;
			miniMapHeight = 240;
			miniMapX = screenWidth - _minimapTopRightAnchorOffsetTowardsLeft;
			miniMapY = _minimapTopRightAnchorOffsetTowardsBottom;
			miniMapX = (int)((float)miniMapX * num46);
			miniMapY = (int)((float)miniMapY * num46);
			mouseX = (int)((float)mouseX * num46);
			mouseY = (int)((float)mouseY * num46);
			_ = (float)miniMapHeight / (float)maxTilesY;
			if ((double)mapMinimapScale < 0.2)
			{
				mapMinimapScale = 0.2f;
			}
			if (mapMinimapScale > 3f)
			{
				mapMinimapScale = 3f;
			}
			if ((double)mapMinimapAlpha < 0.01)
			{
				mapMinimapAlpha = 0.01f;
			}
			if (mapMinimapAlpha > 1f)
			{
				mapMinimapAlpha = 1f;
			}
			num81 = mapMinimapScale;
			b = (byte)(255f * mapMinimapAlpha);
			num = miniMapX;
			num49 = miniMapY;
			num60 = num;
			num70 = num49;
			float num62 = (screenPosition.X + (float)(PlayerInput.RealScreenWidth / 2)) / 16f;
			float num63 = (screenPosition.Y + (float)(PlayerInput.RealScreenHeight / 2)) / 16f;
			num13 = (0f - (num62 - (float)(int)((screenPosition.X + (float)(PlayerInput.RealScreenWidth / 2)) / 16f))) * num81;
			num24 = (0f - (num63 - (float)(int)((screenPosition.Y + (float)(PlayerInput.RealScreenHeight / 2)) / 16f))) * num81;
			num44 = (float)miniMapWidth / num81;
			num45 = (float)miniMapHeight / num81;
			num35 = (float)(int)num62 - num44 / 2f;
			num43 = (float)(int)num63 - num45 / 2f;
			_ = maxTilesY;
			float num64 = num60 - 6f;
			float num65 = num70 - 6f;
			MinimapFrameManagerInstance.DrawTo(spriteBatch, new Vector2(num64 + 10f, num65 + 10f));
		}
		else if (mapStyle == 2)
		{
			float num66 = (float)screenWidth / (float)maxTilesX;
			if (mapOverlayScale < num66)
			{
				mapOverlayScale = num66;
			}
			if (mapOverlayScale > 16f * GameViewMatrix.Zoom.X)
			{
				mapOverlayScale = 16f * GameViewMatrix.Zoom.X;
			}
			if ((double)mapOverlayAlpha < 0.01)
			{
				mapOverlayAlpha = 0.01f;
			}
			if (mapOverlayAlpha > 1f)
			{
				mapOverlayAlpha = 1f;
			}
			num81 = mapOverlayScale;
			b = (byte)(255f * mapOverlayAlpha);
			_ = maxTilesX;
			_ = maxTilesY;
			float num67 = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
			float num136 = (screenPosition.Y + (float)(screenHeight / 2)) / 16f;
			num67 *= num81;
			float num68 = num136 * num81;
			num = 0f - num67 + (float)(screenWidth / 2);
			num49 = 0f - num68 + (float)(screenHeight / 2);
			num += num103 * num81;
			num49 += num114 * num81;
		}
		if (mapStyle == 1 && !mapFullscreen)
		{
			if (num35 < num103)
			{
				num -= (num35 - num103) * num81;
			}
			if (num43 < num114)
			{
				num49 -= (num43 - num114) * num81;
			}
		}
		num44 = num35 + num44;
		num45 = num43 + num45;
		if (num35 > num103)
		{
			num103 = num35;
		}
		if (num43 > num114)
		{
			num114 = num43;
		}
		if (num44 < num125)
		{
			num125 = num44;
		}
		if (num45 < num2)
		{
			num2 = num45;
		}
		float num69 = (float)textureMaxWidth * num81;
		float num71 = (float)textureMaxHeight * num81;
		float num72 = num;
		float num73 = 0f;
		Rectangle value = default(Rectangle);
		for (int k = 0; k <= mapTargetX - 1; k++)
		{
			if (!((float)((k + 1) * textureMaxWidth) > num103) || !((float)(k * textureMaxWidth) < num103 + num125))
			{
				continue;
			}
			for (int l = 0; l <= num92; l++)
			{
				if ((float)((l + 1) * textureMaxHeight) > num114 && (float)(l * textureMaxHeight) < num114 + num2)
				{
					float num74 = num + (float)(int)((float)k * num69);
					float num75 = num49 + (float)(int)((float)l * num71);
					float num76 = k * textureMaxWidth;
					float num77 = l * textureMaxHeight;
					float num78 = 0f;
					float num79 = 0f;
					if (num76 < num103)
					{
						num78 = num103 - num76;
						num74 = num;
					}
					else
					{
						num74 -= num103 * num81;
					}
					if (num77 < num114)
					{
						num79 = num114 - num77;
						num75 = num49;
					}
					else
					{
						num75 -= num114 * num81;
					}
					num74 = num72;
					float num80 = textureMaxWidth;
					float num82 = textureMaxHeight;
					float num83 = (k + 1) * textureMaxWidth;
					float num84 = (l + 1) * textureMaxHeight;
					if (num83 >= num125)
					{
						num80 -= num83 - num125;
					}
					if (num84 >= num2)
					{
						num82 -= num84 - num2;
					}
					num74 += num13;
					num75 += num24;
					if (num80 > num78)
					{
						((Rectangle)(ref value))._002Ector((int)num78, (int)num79, (int)num80 - (int)num78, (int)num82 - (int)num79);
						spriteBatch.Draw((Texture2D)(object)mapTarget[k, l], new Vector2(num74, num75), (Rectangle?)value, new Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), num81, (SpriteEffects)0, 0f);
					}
					num73 = (float)((int)num80 - (int)num78) * num81;
				}
				if (l == num92)
				{
					num72 += num73;
				}
			}
		}
		if (flag)
		{
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, transformMatrix);
		}
		if (!mapFullscreen)
		{
			if (mapStyle == 2)
			{
				float num85 = (num81 * 0.2f * 2f + 1f) / 3f;
				if (num85 > 1f)
				{
					num85 = 1f;
				}
				num85 *= UIScale;
				MapIcons.Draw(Vector2.Zero, new Vector2(num - 10f * num81, num49 - 10f * num81), null, num81, num85, ref text);
				revengeMarker = NPC.RevengeManager.DrawMapIcons(spriteBatch, Vector2.Zero, new Vector2(num - 10f * num81, num49 - 10f * num81), null, num81, num85, ref text);
				DrawMiscMapIcons(spriteBatch, Vector2.Zero, new Vector2(num - 10f * num81, num49 - 10f * num81), null, num81, num85, ref text);
				spriteBatch.End();
				if (revengeMarker != null)
				{
					spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, uIScaleMatrix);
					try
					{
						revengeMarker.UseMouseOver(spriteBatch, ref text, num85);
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
					}
					spriteBatch.End();
				}
				spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, transformMatrix);
				try
				{
					for (int m = 0; m < 200; m++)
					{
						if (npc[m].active && npc[m].townNPC)
						{
							int headIndexSafe = TownNPCProfiles.GetHeadIndexSafe(npc[m]);
							if (headIndexSafe > 0)
							{
								SpriteEffects dir = (SpriteEffects)0;
								if (npc[m].direction > 0)
								{
									dir = (SpriteEffects)1;
								}
								float num86 = (npc[m].position.X + (float)(npc[m].width / 2)) / 16f * num81;
								float num87 = (npc[m].position.Y + (float)(npc[m].height / 2)) / 16f * num81;
								num86 += num;
								num87 += num49;
								num86 -= 10f * num81;
								num87 -= 10f * num81;
								DrawNPCHeadFriendly(npc[m], b, num85, dir, headIndexSafe, num86, num87);
							}
						}
						if (!npc[m].active || npc[m].GetBossHeadTextureIndex() == -1)
						{
							continue;
						}
						float bossHeadRotation = npc[m].GetBossHeadRotation();
						SpriteEffects bossHeadSpriteEffects = npc[m].GetBossHeadSpriteEffects();
						Vector2 vector = npc[m].Center + new Vector2(0f, npc[m].gfxOffY);
						if (npc[m].type == 134)
						{
							Vector2 center = npc[m].Center;
							int num88 = 1;
							int num89 = (int)npc[m].ai[0];
							while (num88 < 15 && npc[num89].active && npc[num89].type >= 134 && npc[num89].type <= 136)
							{
								num88++;
								center += npc[num89].Center;
								num89 = (int)npc[num89].ai[0];
							}
							center /= (float)num88;
							vector = center;
						}
						int bossHeadTextureIndex = npc[m].GetBossHeadTextureIndex();
						float num90 = vector.X / 16f * num81;
						float num91 = vector.Y / 16f * num81;
						num90 += num;
						num91 += num49;
						num90 -= 10f * num81;
						num91 -= 10f * num81;
						DrawNPCHeadBoss(npc[m], b, num85, bossHeadRotation, bossHeadSpriteEffects, bossHeadTextureIndex, num90, num91);
					}
				}
				catch (Exception e2)
				{
					TimeLogger.DrawException(e2);
				}
				spriteBatch.End();
				spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, transformMatrix);
				for (int n = 0; n < 255; n++)
				{
					if (player[n].active && !player[n].dead && n != myPlayer && ((!player[myPlayer].hostile && !player[n].hostile) || (player[myPlayer].team == player[n].team && player[n].team != 0) || n == myPlayer))
					{
						float num93 = (player[n].position.X + (float)(player[n].width / 2)) / 16f * num81;
						float num94 = player[n].position.Y / 16f * num81;
						num93 += num;
						num94 += num49;
						num93 -= 6f;
						num94 -= 2f;
						num94 -= 2f - num81 / 5f * 2f;
						num93 -= 10f * num81;
						num94 -= 10f * num81;
						Color playerHeadBordersColor = GetPlayerHeadBordersColor(player[n]);
						MapPlayerRenderer.DrawPlayerHead(Camera, player[n], new Vector2(num93, num94), (float)(int)b / 255f, num85, playerHeadBordersColor);
					}
				}
				spriteBatch.End();
				spriteBatch.Begin();
			}
			if (mapStyle == 1)
			{
				float num95 = (num81 * 0.25f * 2f + 1f) / 3f;
				if (num95 > 1f)
				{
					num95 = 1f;
				}
				MapIcons.Draw(new Vector2(num35, num43), new Vector2(num60 + num13, num70 + num24), (Rectangle?)new Rectangle(miniMapX, miniMapY, miniMapWidth, miniMapHeight), num81, num95, ref text);
				revengeMarker = NPC.RevengeManager.DrawMapIcons(spriteBatch, new Vector2(num35, num43), new Vector2(num60 + num13, num70 + num24), (Rectangle?)new Rectangle(miniMapX, miniMapY, miniMapWidth, miniMapHeight), num81, num95, ref text);
				DrawMiscMapIcons(spriteBatch, new Vector2(num35, num43), new Vector2(num60 + num13, num70 + num24), (Rectangle?)new Rectangle(miniMapX, miniMapY, miniMapWidth, miniMapHeight), num81, num95, ref text);
				spriteBatch.End();
				spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, transformMatrix2);
				for (int num96 = 0; num96 < 200; num96++)
				{
					if (npc[num96].active && npc[num96].townNPC)
					{
						int headIndexSafe2 = TownNPCProfiles.GetHeadIndexSafe(npc[num96]);
						if (headIndexSafe2 > 0)
						{
							SpriteEffects dir2 = (SpriteEffects)0;
							if (npc[num96].direction > 0)
							{
								dir2 = (SpriteEffects)1;
							}
							float num97 = ((npc[num96].position.X + (float)npc[num96].width / 2f) / 16f - num35) * num81;
							float num98 = ((npc[num96].position.Y + npc[num96].gfxOffY + (float)npc[num96].height / 2f) / 16f - num43) * num81;
							num97 += num60;
							num98 += num70;
							num98 -= 2f * num81 / 5f;
							num97 += num13;
							num98 += num24;
							if (num97 > (float)(miniMapX + 12) && num97 < (float)(miniMapX + miniMapWidth - 16) && num98 > (float)(miniMapY + 10) && num98 < (float)(miniMapY + miniMapHeight - 14))
							{
								float num99 = num97 - (float)(TextureAssets.NpcHead[headIndexSafe2].Width() / 2) * num95;
								float num100 = num98 - (float)(TextureAssets.NpcHead[headIndexSafe2].Height() / 2) * num95;
								float num101 = num99 + (float)TextureAssets.NpcHead[headIndexSafe2].Width() * num95;
								float num102 = num100 + (float)TextureAssets.NpcHead[headIndexSafe2].Height() * num95;
								if ((float)mouseX >= num99 && (float)mouseX <= num101 && (float)mouseY >= num100 && (float)mouseY <= num102)
								{
									text = npc[num96].FullName;
								}
								DrawNPCHeadFriendly(npc[num96], b, num95, dir2, headIndexSafe2, num97, num98);
							}
						}
					}
					if (!npc[num96].active || npc[num96].GetBossHeadTextureIndex() == -1)
					{
						continue;
					}
					float bossHeadRotation2 = npc[num96].GetBossHeadRotation();
					SpriteEffects bossHeadSpriteEffects2 = npc[num96].GetBossHeadSpriteEffects();
					Vector2 vector2 = npc[num96].Center + new Vector2(0f, npc[num96].gfxOffY);
					if (npc[num96].type == 134)
					{
						Vector2 center2 = npc[num96].Center;
						int num104 = 1;
						int num105 = (int)npc[num96].ai[0];
						while (num104 < 15 && npc[num105].active && npc[num105].type >= 134 && npc[num105].type <= 136)
						{
							num104++;
							center2 += npc[num105].Center;
							num105 = (int)npc[num105].ai[0];
						}
						center2 /= (float)num104;
						vector2 = center2;
					}
					int bossHeadTextureIndex2 = npc[num96].GetBossHeadTextureIndex();
					float num106 = (vector2.X / 16f - num35) * num81;
					float num107 = (vector2.Y / 16f - num43) * num81;
					num106 += num60;
					num107 += num70;
					num107 -= 2f * num81 / 5f;
					num106 += num13;
					num107 += num24;
					if (num106 > (float)(miniMapX + 12) && num106 < (float)(miniMapX + miniMapWidth - 16) && num107 > (float)(miniMapY + 10) && num107 < (float)(miniMapY + miniMapHeight - 14))
					{
						float num108 = num106 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Width() / 2) * num95;
						float num109 = num107 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Height() / 2) * num95;
						float num110 = num108 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Width() * num95;
						float num111 = num109 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Height() * num95;
						if ((float)mouseX >= num108 && (float)mouseX <= num110 && (float)mouseY >= num109 && (float)mouseY <= num111)
						{
							text = npc[num96].GivenOrTypeName;
						}
						DrawNPCHeadBoss(npc[num96], b, num95, bossHeadRotation2, bossHeadSpriteEffects2, bossHeadTextureIndex2, num106, num107);
					}
				}
				spriteBatch.End();
				spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, transformMatrix2);
				for (int num112 = 0; num112 < 255; num112++)
				{
					if (!player[num112].active || ((player[myPlayer].hostile || player[num112].hostile) && (player[myPlayer].team != player[num112].team || player[num112].team == 0) && num112 != myPlayer))
					{
						continue;
					}
					float num113 = ((player[num112].position.X + (float)(player[num112].width / 2)) / 16f - num35) * num81;
					float num115 = ((player[num112].position.Y + player[num112].gfxOffY + (float)(player[num112].height / 2)) / 16f - num43) * num81;
					num113 += num60;
					num115 += num70;
					num113 -= 6f;
					num115 -= 6f;
					num115 -= 2f - num81 / 5f * 2f;
					num113 += num13;
					num115 += num24;
					if (!player[num112].dead && num113 > (float)(miniMapX + 6) && num113 < (float)(miniMapX + miniMapWidth - 16) && num115 > (float)(miniMapY + 6) && num115 < (float)(miniMapY + miniMapHeight - 14))
					{
						Color playerHeadBordersColor2 = GetPlayerHeadBordersColor(player[num112]);
						MapPlayerRenderer.DrawPlayerHead(Camera, player[num112], new Vector2(num113, num115), (float)(int)b / 255f, num95, playerHeadBordersColor2);
						if (num112 != myPlayer)
						{
							float num116 = num113 + 4f - 14f * num95;
							float num117 = num115 + 2f - 14f * num95;
							float num118 = num116 + 28f * num95;
							float num119 = num117 + 28f * num95;
							if ((float)mouseX >= num116 && (float)mouseX <= num118 && (float)mouseY >= num117 && (float)mouseY <= num119)
							{
								text = player[num112].name;
							}
						}
					}
					if (!player[num112].showLastDeath)
					{
						continue;
					}
					num113 = (player[num112].lastDeathPostion.X / 16f - num35) * num81;
					num115 = (player[num112].lastDeathPostion.Y / 16f - num43) * num81;
					num113 += num60;
					num115 += num70;
					num115 -= 2f - num81 / 5f * 2f;
					num113 += num13;
					num115 += num24;
					if (num113 > (float)(miniMapX + 8) && num113 < (float)(miniMapX + miniMapWidth - 18) && num115 > (float)(miniMapY + 8) && num115 < (float)(miniMapY + miniMapHeight - 16))
					{
						spriteBatch.Draw(TextureAssets.MapDeath.Value, new Vector2(num113, num115), (Rectangle?)new Rectangle(0, 0, TextureAssets.MapDeath.Width(), TextureAssets.MapDeath.Height()), Color.White, 0f, new Vector2((float)TextureAssets.MapDeath.Width() * 0.5f, (float)TextureAssets.MapDeath.Height() * 0.5f), num95, (SpriteEffects)0, 0f);
						float num120 = num113 + 4f - 14f * num95;
						float num121 = num115 + 2f - 14f * num95;
						num120 -= 4f;
						num121 -= 4f;
						float num122 = num120 + 28f * num95;
						float num123 = num121 + 28f * num95;
						if ((float)mouseX >= num120 && (float)mouseX <= num122 && (float)mouseY >= num121 && (float)mouseY <= num123)
						{
							num50 = num112;
						}
					}
				}
				spriteBatch.End();
				spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, transformMatrix2);
				MinimapFrameManagerInstance.DrawForeground(spriteBatch);
				spriteBatch.End();
				spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, uIScaleMatrix);
				if (num50 != -1)
				{
					TimeSpan timeSpan = DateTime.Now - player[num50].lastDeathTime;
					text = Language.GetTextValue("Game.PlayerDeathTime", player[num50].name, Lang.LocalizedDuration(timeSpan, abbreviated: false, showAllAvailableUnits: false));
				}
				else
				{
					revengeMarker?.UseMouseOver(spriteBatch, ref text);
				}
			}
		}
		if (mapFullscreen)
		{
			int num124 = (int)((0f - num + (float)mouseX) / num81 + num103);
			int num126 = (int)((0f - num49 + (float)mouseY) / num81 + num114);
			bool flag2 = false;
			if ((float)num124 < num103)
			{
				flag2 = true;
			}
			if ((float)num124 >= num125)
			{
				flag2 = true;
			}
			if ((float)num126 < num114)
			{
				flag2 = true;
			}
			if ((float)num126 >= num2)
			{
				flag2 = true;
			}
			if (!flag2 && Map[num124, num126].Light > 40)
			{
				int type = Map[num124, num126].Type;
				int num127 = MapHelper.tileLookup[21];
				int num128 = MapHelper.tileLookup[441];
				int num129 = MapHelper.tileOptionCounts[21];
				int num130 = MapHelper.tileLookup[467];
				int num131 = MapHelper.tileLookup[468];
				int num132 = MapHelper.tileOptionCounts[467];
				int num133 = MapHelper.tileLookup[88];
				int num134 = MapHelper.tileOptionCounts[88];
				LocalizedText[] chestType = Lang.chestType;
				LocalizedText[] chestType2 = Lang.chestType2;
				if (type >= num127 && type < num127 + num129)
				{
					Tile tile = Main.tile[num124, num126];
					if (tile != null)
					{
						int num135 = num124;
						int num3 = num126;
						if (tile.frameX % 36 != 0)
						{
							num135--;
						}
						if (tile.frameY % 36 != 0)
						{
							num3--;
						}
						text = DrawMap_FindChestName(chestType, tile, num135, num3);
					}
				}
				else if (type >= num130 && type < num130 + num132)
				{
					Tile tile2 = Main.tile[num124, num126];
					if (tile2 != null)
					{
						int num4 = num124;
						int num5 = num126;
						if (tile2.frameX % 36 != 0)
						{
							num4--;
						}
						if (tile2.frameY % 36 != 0)
						{
							num5--;
						}
						text = DrawMap_FindChestName(chestType2, tile2, num4, num5);
					}
				}
				else if (type >= num128 && type < num128 + num129)
				{
					Tile tile3 = Main.tile[num124, num126];
					if (tile3 != null)
					{
						int num6 = num124;
						int num7 = num126;
						if (tile3.frameX % 36 != 0)
						{
							num6--;
						}
						if (tile3.frameY % 36 != 0)
						{
							num7--;
						}
						text = chestType[tile3.frameX / 36].Value;
					}
				}
				else if (type >= num131 && type < num131 + num132)
				{
					Tile tile4 = Main.tile[num124, num126];
					if (tile4 != null)
					{
						int num8 = num124;
						int num9 = num126;
						if (tile4.frameX % 36 != 0)
						{
							num8--;
						}
						if (tile4.frameY % 36 != 0)
						{
							num9--;
						}
						text = chestType2[tile4.frameX / 36].Value;
					}
				}
				else if (type >= num133 && type < num133 + num134)
				{
					Tile tile5 = Main.tile[num124, num126];
					if (tile5 != null)
					{
						int num10 = num126;
						int x2 = num124 - tile5.frameX % 54 / 18;
						if (tile5.frameY % 36 != 0)
						{
							num10--;
						}
						int num11 = Chest.FindChest(x2, num10);
						text = ((num11 < 0) ? Lang.dresserType[0].Value : ((!(chest[num11].name != "")) ? Lang.dresserType[tile5.frameX / 54].Value : (Lang.dresserType[tile5.frameX / 54].Value + ": " + chest[num11].name)));
					}
				}
				else
				{
					text = Lang._mapLegendCache.FromTile(Map[num124, num126], num124, num126);
				}
			}
			float num12 = (num81 * 0.25f * 2f + 1f) / 3f;
			if (num12 > 1f)
			{
				num12 = 1f;
			}
			num12 = 1f;
			num12 = UIScale;
			revengeMarker = NPC.RevengeManager.DrawMapIcons(spriteBatch, Vector2.Zero, new Vector2(num - 10f * num81, num49 - 10f * num81), null, num81, num12, ref text);
			DrawMiscMapIcons(spriteBatch, Vector2.Zero, new Vector2(num - 10f * num81, num49 - 10f * num81), null, num81, num12, ref text);
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend);
			for (int num14 = 0; num14 < 200; num14++)
			{
				if (npc[num14].active && npc[num14].townNPC)
				{
					int headIndexSafe3 = TownNPCProfiles.GetHeadIndexSafe(npc[num14]);
					if (headIndexSafe3 > 0)
					{
						SpriteEffects dir3 = (SpriteEffects)0;
						if (npc[num14].direction > 0)
						{
							dir3 = (SpriteEffects)1;
						}
						float num15 = (npc[num14].position.X + (float)(npc[num14].width / 2)) / 16f * num81;
						float num16 = (npc[num14].position.Y + npc[num14].gfxOffY + (float)(npc[num14].height / 2)) / 16f * num81;
						num15 += num;
						num16 += num49;
						num15 -= 10f * num81;
						num16 -= 10f * num81;
						float num17 = num15 - (float)(TextureAssets.NpcHead[headIndexSafe3].Width() / 2) * num12;
						float num18 = num16 - (float)(TextureAssets.NpcHead[headIndexSafe3].Height() / 2) * num12;
						float num19 = num17 + (float)TextureAssets.NpcHead[headIndexSafe3].Width() * num12;
						float num20 = num18 + (float)TextureAssets.NpcHead[headIndexSafe3].Height() * num12;
						if ((float)mouseX >= num17 && (float)mouseX <= num19 && (float)mouseY >= num18 && (float)mouseY <= num20)
						{
							text = npc[num14].FullName;
						}
						DrawNPCHeadFriendly(npc[num14], b, num12, dir3, headIndexSafe3, num15, num16);
					}
				}
				if (!npc[num14].active || npc[num14].GetBossHeadTextureIndex() == -1)
				{
					continue;
				}
				float bossHeadRotation3 = npc[num14].GetBossHeadRotation();
				SpriteEffects bossHeadSpriteEffects3 = npc[num14].GetBossHeadSpriteEffects();
				Vector2 vector3 = npc[num14].Center + new Vector2(0f, npc[num14].gfxOffY);
				if (npc[num14].type == 134)
				{
					Vector2 center3 = npc[num14].Center;
					int num21 = 1;
					int num22 = (int)npc[num14].ai[0];
					while (num21 < 15 && npc[num22].active && npc[num22].type >= 134 && npc[num22].type <= 136)
					{
						num21++;
						center3 += npc[num22].Center;
						num22 = (int)npc[num22].ai[0];
					}
					center3 /= (float)num21;
					vector3 = center3;
				}
				int bossHeadTextureIndex3 = npc[num14].GetBossHeadTextureIndex();
				float num23 = vector3.X / 16f * num81;
				float num25 = vector3.Y / 16f * num81;
				num23 += num;
				num25 += num49;
				num23 -= 10f * num81;
				num25 -= 10f * num81;
				DrawNPCHeadBoss(npc[num14], b, num12, bossHeadRotation3, bossHeadSpriteEffects3, bossHeadTextureIndex3, num23, num25);
				float num26 = num23 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Width() / 2) * num12;
				float num27 = num25 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Height() / 2) * num12;
				float num28 = num26 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Width() * num12;
				float num29 = num27 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Height() * num12;
				if ((float)mouseX >= num26 && (float)mouseX <= num28 && (float)mouseY >= num27 && (float)mouseY <= num29)
				{
					text = npc[num14].GivenOrTypeName;
				}
			}
			bool flag3 = false;
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend);
			for (int num30 = 0; num30 < 255; num30++)
			{
				if (player[num30].active && ((!player[myPlayer].hostile && !player[num30].hostile) || (player[myPlayer].team == player[num30].team && player[num30].team != 0) || num30 == myPlayer) && player[num30].showLastDeath && DrawPlayerDeathMarker(num, num49, num81, num35, num43, num12, num30))
				{
					num50 = num30;
				}
			}
			if (num50 != -1)
			{
				TimeSpan timeSpan2 = DateTime.Now - player[num50].lastDeathTime;
				text = Language.GetTextValue("Game.PlayerDeathTime", player[num50].name, Lang.LocalizedDuration(timeSpan2, abbreviated: false, showAllAvailableUnits: false));
			}
			else if (revengeMarker != null)
			{
				spriteBatch.End();
				spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, uIScaleMatrix);
				revengeMarker.UseMouseOver(spriteBatch, ref text, num12);
				spriteBatch.End();
				spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend);
			}
			for (int num31 = 0; num31 < 255; num31++)
			{
				if (!player[num31].active || ((player[myPlayer].hostile || player[num31].hostile) && (player[myPlayer].team != player[num31].team || player[num31].team == 0) && num31 != myPlayer))
				{
					continue;
				}
				float num32 = ((player[num31].position.X + (float)(player[num31].width / 2)) / 16f - num35) * num81;
				float num33 = ((player[num31].position.Y + player[num31].gfxOffY + (float)(player[num31].height / 2)) / 16f - num43) * num81;
				num32 += num;
				num33 += num49;
				num32 -= 6f;
				num33 -= 2f;
				num33 -= 2f - num81 / 5f * 2f;
				num32 -= 10f * num81;
				num33 -= 10f * num81;
				float num34 = num32 + 4f - 14f * num12;
				float num36 = num33 + 2f - 14f * num12;
				float num37 = num34 + 28f * num12;
				float num38 = num36 + 28f * num12;
				if (player[num31].dead)
				{
					continue;
				}
				Color playerHeadBordersColor3 = GetPlayerHeadBordersColor(player[num31]);
				MapPlayerRenderer.DrawPlayerHead(Camera, player[num31], new Vector2(num32, num33), (float)(int)b / 255f, num12, playerHeadBordersColor3);
				if (!((float)mouseX >= num34) || !((float)mouseX <= num37) || !((float)mouseY >= num36) || !((float)mouseY <= num38))
				{
					continue;
				}
				text = player[num31].name;
				if (num31 != myPlayer && player[myPlayer].team > 0 && player[myPlayer].team == player[num31].team && netMode == 1 && player[myPlayer].HasUnityPotion() && !flag3 && !cancelWormHole)
				{
					flag3 = true;
					if (!unityMouseOver)
					{
						SoundEngine.PlaySound(12);
					}
					unityMouseOver = true;
					playerHeadBordersColor3 = OurFavoriteColor;
					MapPlayerRenderer.DrawPlayerHead(Camera, player[num31], new Vector2(num32, num33), 1f, num12 + 0.5f, playerHeadBordersColor3);
					text = Language.GetTextValue("Game.TeleportTo", player[num31].name);
					if (mouseLeft && mouseLeftRelease)
					{
						mouseLeftRelease = false;
						mapFullscreen = false;
						player[myPlayer].UnityTeleport(player[num31].position);
						player[myPlayer].TakeUnityPotion();
					}
				}
			}
			cancelWormHole = false;
			MapIcons.Draw(Vector2.Zero, new Vector2(num - 10f * num81, num49 - 10f * num81), null, num81, num12, ref text);
			if (!flag3 && unityMouseOver)
			{
				unityMouseOver = false;
			}
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, (Effect)null, UIScaleMatrix);
			PlayerInput.SetZoom_UI();
			int num39 = 10;
			int num40 = screenHeight - 40;
			if (showFrameRate)
			{
				num40 -= 15;
			}
			int num41 = 0;
			int num42 = 130;
			if (mouseX >= num39 && mouseX <= num39 + 32 && mouseY >= num40 && mouseY <= num40 + 30)
			{
				num42 = 255;
				num41 += 4;
				player[myPlayer].mouseInterface = true;
				if (mouseLeft && mouseLeftRelease)
				{
					SoundEngine.PlaySound(10);
					mapFullscreen = false;
				}
			}
			spriteBatch.Draw(TextureAssets.MapIcon[num41].Value, new Vector2((float)num39, (float)num40), (Rectangle?)new Rectangle(0, 0, TextureAssets.MapIcon[num41].Width(), TextureAssets.MapIcon[num41].Height()), new Color(num42, num42, num42, num42), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			SystemLoader.PostDrawFullscreenMap(ref text);
			DrawCursor(DrawThickCursor());
		}
		mouseX = num47;
		mouseY = num48;
		float t = 3f;
		Utils.Swap(ref t, ref inventoryScale);
		if (text != "")
		{
			MouseText(text, 0, 0);
		}
		Utils.Swap(ref t, ref inventoryScale);
		spriteBatch.End();
		try
		{
			if (num35 < num103)
			{
				num += (num35 - num103) * num81;
			}
			if (num43 < num114)
			{
				num49 += (num43 - num114) * num81;
			}
			if (mapFullscreen && Main.OnPostFullscreenMapDraw != null)
			{
				Main.OnPostFullscreenMapDraw(new Vector2(num, num49), num81);
			}
		}
		catch (Exception e3)
		{
			TimeLogger.DrawException(e3);
		}
		spriteBatch.Begin();
		PlayerInput.SetZoom_Unscaled();
		TimeLogger.DetailedDrawTime(9);
	}

	private static void DrawMapFullscreenBackground(Vector2 screenPosition, int screenWidth, int screenHeight)
	{
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0318: Unknown result type (might be due to invalid IL or missing references)
		//IL_031d: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_046a: Unknown result type (might be due to invalid IL or missing references)
		if (ModContent.RequestIfExists(LocalPlayer.CurrentSceneEffect.mapBackground, out Asset<Texture2D> modTexture, AssetRequestMode.ImmediateLoad))
		{
			spriteBatch.Draw(modTexture.Value, new Rectangle(0, 0, screenWidth, screenHeight), Color.White);
			return;
		}
		Asset<Texture2D> asset = TextureAssets.MapBGs[0];
		int num = -1;
		Color color = Color.White;
		if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)] == null)
		{
			return;
		}
		int wall = tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall;
		if (screenPosition.Y > (float)((maxTilesY - 232) * 16))
		{
			num = 2;
		}
		else if (player[myPlayer].ZoneDungeon)
		{
			num = 4;
		}
		else if (wall == 87)
		{
			num = 13;
		}
		else if ((double)screenPosition.Y > worldSurface * 16.0)
		{
			switch (wall)
			{
			case 86:
			case 108:
				num = 15;
				break;
			case 180:
			case 184:
				num = 16;
				break;
			case 178:
			case 183:
				num = 17;
				break;
			case 62:
			case 263:
				num = 18;
				break;
			default:
				num = (player[myPlayer].ZoneGlowshroom ? 20 : (player[myPlayer].ZoneCorrupt ? (player[myPlayer].ZoneDesert ? 39 : ((!player[myPlayer].ZoneSnow) ? 22 : 33)) : (player[myPlayer].ZoneCrimson ? (player[myPlayer].ZoneDesert ? 40 : ((!player[myPlayer].ZoneSnow) ? 23 : 34)) : (player[myPlayer].ZoneHallow ? (player[myPlayer].ZoneDesert ? 41 : ((!player[myPlayer].ZoneSnow) ? 21 : 35)) : (player[myPlayer].ZoneSnow ? 3 : (player[myPlayer].ZoneJungle ? 12 : (player[myPlayer].ZoneDesert ? 14 : ((!player[myPlayer].ZoneRockLayerHeight) ? 1 : 31))))))));
				break;
			}
		}
		else if (player[myPlayer].ZoneGlowshroom)
		{
			num = 19;
		}
		else
		{
			color = ColorOfTheSkies;
			int num2 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
			if (player[myPlayer].ZoneSkyHeight)
			{
				num = 32;
			}
			else if (player[myPlayer].ZoneCorrupt)
			{
				num = ((!player[myPlayer].ZoneDesert) ? 5 : 36);
			}
			else if (player[myPlayer].ZoneCrimson)
			{
				num = ((!player[myPlayer].ZoneDesert) ? 6 : 37);
			}
			else if (player[myPlayer].ZoneHallow)
			{
				num = ((!player[myPlayer].ZoneDesert) ? 7 : 38);
			}
			else if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && (num2 < 380 || num2 > maxTilesX - 380))
			{
				num = 10;
			}
			else if (player[myPlayer].ZoneSnow)
			{
				num = 11;
			}
			else if (player[myPlayer].ZoneJungle)
			{
				num = 8;
			}
			else if (player[myPlayer].ZoneDesert)
			{
				num = 9;
			}
			else if (bloodMoon)
			{
				color *= 2f;
				num = 25;
			}
			else if (player[myPlayer].ZoneGraveyard)
			{
				num = 26;
			}
		}
		if (num > -1)
		{
			asset = TextureAssets.MapBGs[num];
		}
		spriteBatch.Draw(asset.Value, new Rectangle(0, 0, screenWidth, screenHeight), color);
	}

	private static bool DrawPlayerDeathMarker(float X, float Y, float scale, float left, float top, float headScale, int i)
	{
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		float num = (player[i].lastDeathPostion.X / 16f - left) * scale;
		float num2 = (player[i].lastDeathPostion.Y / 16f - top) * scale;
		num += X;
		num2 += Y;
		num2 -= 2f - scale / 5f * 2f;
		num -= 10f * scale;
		num2 -= 10f * scale;
		spriteBatch.Draw(TextureAssets.MapDeath.Value, new Vector2(num, num2), (Rectangle?)new Rectangle(0, 0, TextureAssets.MapDeath.Width(), TextureAssets.MapDeath.Height()), Color.White, 0f, new Vector2((float)TextureAssets.MapDeath.Width() * 0.5f, (float)TextureAssets.MapDeath.Height() * 0.5f), headScale, (SpriteEffects)0, 0f);
		float num3 = num + 4f - 14f * headScale;
		float num4 = num2 + 2f - 14f * headScale;
		float num5 = num3 + 28f * headScale;
		float num6 = num4 + 28f * headScale;
		if ((float)mouseX >= num3 && (float)mouseX <= num5 && (float)mouseY >= num4)
		{
			return (float)mouseY <= num6;
		}
		return false;
	}

	private void DrawMiscMapIcons(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Rectangle? mapRect, float mapScale, float drawScale, ref string mouseTextString)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		DrawMapIcons_PotionOfReturnHomePosition(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, ref mouseTextString);
		DrawMapIcons_PotionOfReturnAppearAfterUsePosition(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, ref mouseTextString);
		DrawMapIcons_LastGolfballHit(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, ref mouseTextString);
	}

	private void DrawMapIcons_PotionOfReturnAppearAfterUsePosition(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Rectangle? mapRect, float mapScale, float drawScale, ref string mouseTextString)
	{
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		Vector2? potionOfReturnOriginalUsePosition = LocalPlayer.PotionOfReturnOriginalUsePosition;
		if (!potionOfReturnOriginalUsePosition.HasValue)
		{
			return;
		}
		Vector2? val = potionOfReturnOriginalUsePosition;
		Vector2 val2 = default(Vector2);
		((Vector2)(ref val2))._002Ector(0f, (float)(-LocalPlayer.height / 2));
		Vector2 vec = (val.HasValue ? new Vector2?(val.GetValueOrDefault() + val2) : null).Value / 16f - mapTopLeft;
		vec *= mapScale;
		vec += mapX2Y2AndOff;
		vec = vec.Floor();
		Rectangle val3;
		if (mapRect.HasValue)
		{
			val3 = mapRect.Value;
			if (!((Rectangle)(ref val3)).Contains(vec.ToPoint()))
			{
				return;
			}
		}
		Texture2D value = TextureAssets.Extra[173].Value;
		Rectangle rectangle = value.Frame();
		spriteBatch.Draw(value, vec, (Rectangle?)rectangle, Color.White, 0f, rectangle.Size() / 2f, drawScale, (SpriteEffects)0, 0f);
		val3 = Utils.CenteredRectangle(vec, rectangle.Size() * drawScale);
		if (((Rectangle)(ref val3)).Contains(MouseScreen.ToPoint()))
		{
			mouseTextString = Language.GetTextValue("GameUI.PotionOfReturnExitPortal");
			_ = MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
		}
	}

	private void DrawMapIcons_PotionOfReturnHomePosition(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Rectangle? mapRect, float mapScale, float drawScale, ref string mouseTextString)
	{
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		Vector2? potionOfReturnHomePosition = LocalPlayer.PotionOfReturnHomePosition;
		if (!potionOfReturnHomePosition.HasValue)
		{
			return;
		}
		Vector2? val = potionOfReturnHomePosition;
		Vector2 val2 = default(Vector2);
		((Vector2)(ref val2))._002Ector(0f, (float)(-LocalPlayer.height / 2));
		Vector2 vec = (val.HasValue ? new Vector2?(val.GetValueOrDefault() + val2) : null).Value / 16f - mapTopLeft;
		vec *= mapScale;
		vec += mapX2Y2AndOff;
		vec = vec.Floor();
		Rectangle val3;
		if (mapRect.HasValue)
		{
			val3 = mapRect.Value;
			if (!((Rectangle)(ref val3)).Contains(vec.ToPoint()))
			{
				return;
			}
		}
		Texture2D value = TextureAssets.Extra[175].Value;
		Rectangle rectangle = value.Frame();
		spriteBatch.Draw(value, vec, (Rectangle?)rectangle, Color.White, 0f, rectangle.Size() / 2f, drawScale, (SpriteEffects)0, 0f);
		val3 = Utils.CenteredRectangle(vec, rectangle.Size() * drawScale);
		if (((Rectangle)(ref val3)).Contains(MouseScreen.ToPoint()))
		{
			mouseTextString = Language.GetTextValue("GameUI.PotionOfReturnHomePortal");
			_ = MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
		}
	}

	private void DrawMapIcons_LastGolfballHit(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Rectangle? mapRect, float mapScale, float drawScale, ref string mouseTextString)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		Projectile lastHitBall = LocalGolfState.GetLastHitBall();
		if (lastHitBall == null)
		{
			return;
		}
		Vector2 vec = lastHitBall.Center / 16f - mapTopLeft;
		vec *= mapScale;
		vec += mapX2Y2AndOff;
		vec = vec.Floor();
		if (mapRect.HasValue)
		{
			Rectangle value2 = mapRect.Value;
			if (!((Rectangle)(ref value2)).Contains(vec.ToPoint()))
			{
				return;
			}
		}
		Texture2D value = TextureAssets.Extra[176].Value;
		Rectangle rectangle = value.Frame();
		spriteBatch.Draw(value, vec, (Rectangle?)rectangle, Color.White, 0f, rectangle.Size() / 2f, drawScale, (SpriteEffects)0, 0f);
		Rectangle rectangle2 = Utils.CenteredRectangle(vec, rectangle.Size() * drawScale);
		LoadProjectile(lastHitBall.type);
		value = TextureAssets.Projectile[lastHitBall.type].Value;
		rectangle = value.Frame();
		spriteBatch.Draw(value, vec, (Rectangle?)rectangle, Color.White, 0f, rectangle.Size() / 2f, drawScale, (SpriteEffects)0, 0f);
		if (((Rectangle)(ref rectangle2)).Contains(MouseScreen.ToPoint()))
		{
			mouseTextString = lastHitBall.Name;
			_ = MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
		}
	}

	public static void TriggerPing(Vector2 position)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		if (!dedServ)
		{
			Pings.Add(position);
			if (netMode == 1)
			{
				NetManager.Instance.SendToServer(NetPingModule.Serialize(position));
			}
		}
	}

	private static void DrawNPCHeadFriendly(Entity theNPC, byte alpha, float headScale, SpriteEffects dir, int townHeadId, float x, float y)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		TownNPCHeadRenderer.DrawWithOutlines(theNPC, townHeadId, new Vector2(x, y), new Color((int)alpha, (int)alpha, (int)alpha, (int)alpha), 0f, headScale, dir);
	}

	private static void DrawNPCHeadBoss(Entity theNPC, byte alpha, float headScale, float rotation, SpriteEffects effects, int bossHeadId, float x, float y)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		BossNPCHeadRenderer.DrawWithOutlines(theNPC, bossHeadId, new Vector2(x, y), new Color((int)alpha, (int)alpha, (int)alpha, (int)alpha), rotation, headScale, effects);
	}

	private static void DrawWithOutlines(Entity entity, Texture2D tex, Vector2 position, Rectangle? rect, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		float num = 2f * scale;
		Color white = Color.White;
		int colorOnlyShaderIndex = ContentSamples.CommonlyUsedContentSamples.ColorOnlyShaderIndex;
		DrawData value = new DrawData(tex, position, rect, color, rotation, origin, scale, effects);
		GameShaders.Armor.Apply(colorOnlyShaderIndex, entity, value);
		Color black = Color.Black;
		black *= (float)(int)((Color)(ref color)).A / 255f;
		black *= (float)(int)((Color)(ref color)).A / 255f;
		Color color2 = white;
		color2 *= (float)(int)((Color)(ref color)).A / 255f;
		color2 *= (float)(int)((Color)(ref color)).A / 255f;
		int num2 = 2;
		Vector2 vector;
		for (int i = -num2; i <= num2; i++)
		{
			for (int j = -num2; j <= num2; j++)
			{
				if (Math.Abs(i) + Math.Abs(j) == num2)
				{
					vector = Utils.RotatedBy(new Vector2((float)i * num, (float)j * num), rotation);
					spriteBatch.Draw(tex, position + vector, rect, black, rotation, origin, scale, effects, 0f);
				}
			}
		}
		num2 = 1;
		vector = Vector2.Zero;
		for (int k = -num2; k <= num2; k++)
		{
			for (int l = -num2; l <= num2; l++)
			{
				if (Math.Abs(k) + Math.Abs(l) == num2)
				{
					vector = Utils.RotatedBy(new Vector2((float)k * num, (float)l * num), rotation);
					spriteBatch.Draw(tex, position + vector, rect, color2, rotation, origin, scale, effects, 0f);
				}
			}
		}
		pixelShader.CurrentTechnique.Passes[0].Apply();
		spriteBatch.Draw(tex, position, rect, color, rotation, origin, scale, effects, 0f);
	}

	public static Color GetPlayerHeadBordersColor(Player plr)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		if (plr.ghost || plr.dead)
		{
			return Color.Transparent;
		}
		if (plr.whoAmI == myPlayer)
		{
			return teamColor[plr.team];
		}
		if (plr.hostile && (plr.team != LocalPlayer.team || plr.team == 0))
		{
			return Color.Transparent;
		}
		return teamColor[plr.team];
	}

	private static string DrawMap_FindChestName(LocalizedText[] chestNames, Tile chestTile, int x, int y, int fullTileWidth = 36)
	{
		int num = Chest.FindChestByGuessing(x, y);
		if (num < 0)
		{
			return chestNames[0].Value;
		}
		if (chest[num].name != "")
		{
			return string.Concat(chestNames[chestTile.frameX / fullTileWidth], ": ", chest[num].name);
		}
		return chestNames[chestTile.frameX / fullTileWidth].Value;
	}

	public void DrawSimpleSurfaceBackground(Vector2 areaPosition, int areaWidth, int areaHeight)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		float num = (float)(worldSurface + 1.0) * 16f;
		float num2 = Math.Min(areaPosition.Y + (float)areaHeight, num) - areaPosition.Y;
		float y = areaPosition.Y;
		float num3 = areaPosition.Y + num2;
		Vector4 vector = ((Color)(ref ColorOfTheSkies)).ToVector4();
		Color val = new Color(53, 43, 243);
		Vector4 value = ((Color)(ref val)).ToVector4() * vector;
		val = new Color(132, 170, 248);
		Vector4 value2 = ((Color)(ref val)).ToVector4() * vector;
		Color color = default(Color);
		((Color)(ref color))._002Ector(Vector4.Lerp(value, value2, y / num));
		Color color2 = default(Color);
		((Color)(ref color2))._002Ector(Vector4.Lerp(value, value2, num3 / num));
		VertexColors colors = default(VertexColors);
		colors.TopLeftColor = color;
		colors.TopRightColor = color;
		colors.BottomLeftColor = color2;
		colors.BottomRightColor = color2;
		tileBatch.Draw(TextureAssets.BlackTile.Value, new Vector4(0f, 0f, (float)areaWidth, num2), colors);
		float num4 = (float)areaHeight - num2;
		if (num4 > 0f)
		{
			colors.TopLeftColor = Color.Black;
			colors.TopRightColor = Color.Black;
			colors.BottomLeftColor = Color.Black;
			colors.BottomRightColor = Color.Black;
			tileBatch.Draw(TextureAssets.BlackTile.Value, new Vector4(0f, num2, (float)areaWidth, num4), colors);
		}
	}

	public void DrawCapture(Rectangle area, CaptureSettings settings)
	{
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_033c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03be: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_042b: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0440: Unknown result type (might be due to invalid IL or missing references)
		//IL_0445: Unknown result type (might be due to invalid IL or missing references)
		//IL_044a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_051f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0524: Unknown result type (might be due to invalid IL or missing references)
		//IL_0526: Unknown result type (might be due to invalid IL or missing references)
		//IL_052b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_054c: Unknown result type (might be due to invalid IL or missing references)
		//IL_057a: Unknown result type (might be due to invalid IL or missing references)
		//IL_057f: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0592: Unknown result type (might be due to invalid IL or missing references)
		//IL_0594: Unknown result type (might be due to invalid IL or missing references)
		//IL_0599: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a94: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_06bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_070c: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0750: Unknown result type (might be due to invalid IL or missing references)
		//IL_085d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0867: Unknown result type (might be due to invalid IL or missing references)
		//IL_0876: Unknown result type (might be due to invalid IL or missing references)
		//IL_0881: Unknown result type (might be due to invalid IL or missing references)
		//IL_0897: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_076e: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0965: Unknown result type (might be due to invalid IL or missing references)
		//IL_0967: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_09b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0800: Unknown result type (might be due to invalid IL or missing references)
		//IL_0802: Unknown result type (might be due to invalid IL or missing references)
		//IL_0818: Unknown result type (might be due to invalid IL or missing references)
		//IL_081d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0824: Unknown result type (might be due to invalid IL or missing references)
		//IL_0832: Unknown result type (might be due to invalid IL or missing references)
		//IL_0839: Unknown result type (might be due to invalid IL or missing references)
		//IL_084c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0851: Unknown result type (might be due to invalid IL or missing references)
		//IL_09da: Unknown result type (might be due to invalid IL or missing references)
		//IL_09df: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a10: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_1047: Unknown result type (might be due to invalid IL or missing references)
		//IL_1049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1016: Unknown result type (might be due to invalid IL or missing references)
		//IL_101c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fed: Unknown result type (might be due to invalid IL or missing references)
		float[] array = bgAlphaFrontLayer;
		bgAlphaFrontLayer = new float[array.Length];
		float[] array2 = bgAlphaFarBackLayer;
		bgAlphaFarBackLayer = new float[array2.Length];
		UpdateBGVisibility_BackLayer(settings.Biome.BackgroundIndex, 1f);
		UpdateBGVisibility_FrontLayer(settings.Biome.BackgroundIndex, 1f);
		float[] array3 = liquidAlpha.ToArray();
		int holyTileCount = SceneMetrics.HolyTileCount;
		SceneMetrics.HolyTileCount = ((settings.Biome.BackgroundIndex == 6) ? SceneMetrics.HallowTileMax : 0);
		int num = offScreenRange;
		offScreenRange = 0;
		SpriteViewMatrix gameViewMatrix = GameViewMatrix;
		GameViewMatrix = new SpriteViewMatrix(((Game)this).GraphicsDevice);
		Rasterizer = RasterizerState.CullCounterClockwise;
		bool captureEntities = settings.CaptureEntities;
		bool captureBackground = settings.CaptureBackground;
		CaptureBiome biome = settings.Biome;
		Vector2 vector = screenPosition;
		int num10 = screenWidth;
		int num11 = screenHeight;
		float num12 = cloudAlpha;
		bool captureMech = settings.CaptureMech;
		screenWidth = area.Width << 4;
		screenHeight = area.Height << 4;
		screenPosition = new Vector2((float)(area.X * 16), (float)(area.Y * 16));
		cloudAlpha = 0f;
		for (int i = 0; i <= 10; i++)
		{
			if (i != 1)
			{
				liquidAlpha[i] = ((i == biome.WaterStyle) ? 1f : 0f);
			}
		}
		int x = area.X;
		int y = area.Y;
		int num13 = area.X + screenWidth / 16;
		int num14 = area.Y + screenHeight / 16;
		float num15 = (biome.TileColor == CaptureBiome.TileColorStyle.Mushroom).ToInt();
		InfoToSetBackColor info = default(InfoToSetBackColor);
		info.isInGameMenuOrIsServer = gameMenu || netMode == 2;
		info.CorruptionBiomeInfluence = (biome.TileColor == CaptureBiome.TileColorStyle.Corrupt).ToInt();
		info.CrimsonBiomeInfluence = (biome.TileColor == CaptureBiome.TileColorStyle.Crimson).ToInt();
		info.JungleBiomeInfluence = (biome.TileColor == CaptureBiome.TileColorStyle.Jungle).ToInt();
		info.MushroomBiomeInfluence = num15;
		info.GraveyardInfluence = GraveyardVisualIntensity;
		info.BloodMoonActive = biome.WaterStyle == 9;
		info.LanternNightActive = LanternNight.LanternsUp;
		SetBackColor(info, out var sunColor, out var moonColor);
		ApplyColorOfTheSkiesToTiles();
		ColorOfSurfaceBackgroundsBase = (ColorOfSurfaceBackgroundsModified = ColorOfTheSkies);
		bool flag = mapEnabled;
		mapEnabled = false;
		Lighting.Initialize();
		renderCount = 99;
		for (int j = 0; j < 4; j++)
		{
			Lighting.LightTiles(x, num13, y, num14);
		}
		mapEnabled = flag;
		if (!((float)(settings.Area.X * 16) > vector.X - 16f) || !((float)(settings.Area.Y * 16) > vector.Y - 16f) || !((float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num10 + 16f) || !((float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num11 + 16f))
		{
			for (int k = 0; k < dust.Length; k++)
			{
				if (dust[k].active && dust[k].type == 76)
				{
					dust[k].active = false;
				}
			}
		}
		Vector2 vector2 = (Vector2)(drawToScreen ? Vector2.Zero : new Vector2((float)offScreenRange, (float)offScreenRange));
		int val = (int)((screenPosition.X - vector2.X) / 16f - 1f);
		int val2 = (int)((screenPosition.X + (float)screenWidth + vector2.X) / 16f) + 2;
		int val3 = (int)((screenPosition.Y - vector2.Y) / 16f - 1f);
		int val4 = (int)((screenPosition.Y + (float)screenHeight + vector2.Y) / 16f) + 5;
		vector2 -= screenPosition;
		val = Math.Max(val, 5) - 2;
		val3 = Math.Max(val3, 5);
		val2 = Math.Min(val2, maxTilesX - 5) + 2;
		val4 = Math.Min(val4, maxTilesY - 5) + 4;
		Rectangle drawArea = default(Rectangle);
		((Rectangle)(ref drawArea))._002Ector(val, val3, val2 - val, val4 - val3);
		LiquidRenderer.Instance.PrepareDraw(drawArea);
		WorldGen.SectionTileFrameWithCheck(x, y, num13, num14);
		SceneArea sceneArea = default(SceneArea);
		if (captureBackground)
		{
			Matrix transform = Transform;
			int num16 = screenHeight;
			int num17 = screenWidth;
			Vector2 vector3 = screenPosition;
			bool flag2 = mapFullscreen;
			mapFullscreen = false;
			float num2 = scAdj;
			Vector2 vector4 = default(Vector2);
			((Vector2)(ref vector4))._002Ector((float)num10, (float)num11);
			Vector2 vector5 = new Vector2((float)(settings.Area.Width * 16), (float)(settings.Area.Height * 16)) / vector4;
			vector5.X = Math.Max(1f, vector5.X);
			vector5.Y = Math.Max(1f, vector5.Y);
			Vector2[] array4 = (Vector2[])(object)new Vector2[numClouds];
			for (int l = 0; l < numClouds; l++)
			{
				array4[l] = cloud[l].position;
				Cloud obj = cloud[l];
				obj.position *= vector5;
			}
			if ((float)(settings.Area.Height * 16) >= 2000f || (float)(settings.Area.Width * 16) >= 2000f)
			{
				scAdj = 0f;
				float num3 = 2048f;
				float num4 = MathHelper.Clamp((float)settings.Area.Height * 16f / num3, 1f, 3f);
				screenWidth = settings.Area.Width * 16;
				screenHeight = Math.Min(2048, settings.Area.Height * 16);
				screenPosition.X = settings.Area.X * 16;
				screenPosition.Y = settings.Area.Y * 16;
				screenPosition.Y += Math.Max(0f, Math.Min(settings.Area.Height, (float)worldSurface) * 16f - num3 * num4);
				transform *= Matrix.CreateScale(num4);
				((Matrix)(ref transform)).Translation = ((Matrix)(ref transform)).Translation + new Vector3((float)((settings.Area.X - area.X) * 16), (float)((settings.Area.Y - area.Y) * 16), 0f);
				((Matrix)(ref transform)).Translation = ((Matrix)(ref transform)).Translation + new Vector3(0f, Math.Max(0f, Math.Min(settings.Area.Height, (float)worldSurface) * 16f - num3 * num4) / num4, 0f);
			}
			else if ((float)(settings.Area.X * 16) > vector.X - 16f && (float)(settings.Area.Y * 16) > vector.Y - 16f && (float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num10 + 16f && (float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num11 + 16f)
			{
				screenPosition = vector;
				screenWidth = num10;
				screenHeight = num11;
				((Matrix)(ref transform)).Translation = ((Matrix)(ref transform)).Translation + new Vector3(vector.X - (float)area.X * 16f, vector.Y - (float)area.Y * 16f, 0f);
			}
			Vector2 areaPosition = default(Vector2);
			((Vector2)(ref areaPosition))._002Ector((float)(area.X * 16), (float)(area.Y * 16));
			int areaWidth = area.Width * 16;
			int areaHeight = area.Height * 16;
			tileBatch.Begin();
			DrawSimpleSurfaceBackground(areaPosition, areaWidth, areaHeight);
			tileBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.AnisotropicClamp, DepthStencilState.Default, RasterizerState.CullNone, (Effect)null, transform);
			int num5 = screenWidth;
			int num6 = screenHeight;
			Vector2 zero = Vector2.Zero;
			if (num5 < 800)
			{
				int num7 = 800 - num5;
				zero.X -= (float)num7 * 0.5f;
				num5 = 800;
			}
			if (num6 < 600)
			{
				int num8 = 600 - num6;
				zero.Y -= (float)num8 * 0.5f;
				num6 = 600;
			}
			SceneArea sceneArea2 = default(SceneArea);
			sceneArea2.bgTopY = 0;
			sceneArea2.totalWidth = num5;
			sceneArea2.totalHeight = num6;
			sceneArea2.SceneLocalScreenPositionOffset = zero;
			SceneArea sceneArea3 = sceneArea2;
			sceneArea = sceneArea3;
			if (shimmerAlpha != 1f)
			{
				DrawStarsInBackground(sceneArea3, artificial: false);
			}
			if ((double)(screenPosition.Y / 16f) < worldSurface + 2.0)
			{
				DrawSunAndMoon(sceneArea3, moonColor, sunColor, num15);
			}
			DrawSurfaceBG();
			spriteBatch.End();
			for (int m = 0; m < numClouds; m++)
			{
				cloud[m].position = array4[m];
			}
			scAdj = num2;
			mapFullscreen = flag2;
			screenWidth = num17;
			screenHeight = num16;
			screenPosition = vector3;
		}
		if (captureBackground)
		{
			spriteBatch.Begin();
			DrawUnderworldBackground(flat: true);
			spriteBatch.End();
		}
		if (captureEntities)
		{
			spriteBatch.Begin();
			CacheNPCDraws();
			CacheProjDraws();
			DrawCachedNPCs(DrawCacheNPCsMoonMoon, behindTiles: true);
			spriteBatch.End();
		}
		if (shimmerAlpha > 0f && captureBackground)
		{
			spriteBatch.Begin();
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, Vector2.Zero, (Rectangle?)null, Color.Black * shimmerAlpha, 0f, Vector2.Zero, new Vector2(Camera.UnscaledSize.X + (float)(offScreenRange * 2), Camera.UnscaledSize.Y + (float)(offScreenRange * 2)), (SpriteEffects)0, 0f);
			spriteBatch.End();
		}
		tileBatch.Begin();
		spriteBatch.Begin();
		DrawBlack(force: true);
		tileBatch.End();
		spriteBatch.End();
		tileBatch.Begin();
		spriteBatch.Begin();
		if (biome == null)
		{
			DrawLiquid(bg: true, waterStyle);
		}
		else
		{
			DrawLiquid(bg: true, bloodMoon ? 9 : biome.WaterStyle);
		}
		tileBatch.End();
		spriteBatch.End();
		if (shimmerAlpha > 0f && captureBackground)
		{
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, (DepthStencilState)null, (RasterizerState)null, (Effect)null);
			PlayerInput.SetZoom_Unscaled();
			DrawStarsInBackground(sceneArea, artificial: true);
			spriteBatch.End();
			PlayerInput.SetDesiredZoomContext(ZoomContext.World);
		}
		if (captureBackground)
		{
			tileBatch.Begin();
			spriteBatch.Begin();
			DrawBackground();
			tileBatch.End();
			spriteBatch.End();
		}
		tileBatch.Begin();
		spriteBatch.Begin();
		DrawWalls();
		tileBatch.End();
		spriteBatch.End();
		if (captureEntities)
		{
			spriteBatch.Begin();
			DrawWoF();
			spriteBatch.End();
		}
		if (drawBackGore && captureEntities)
		{
			spriteBatch.Begin();
			DrawGoreBehind();
			spriteBatch.End();
			drawBackGore = true;
		}
		if (captureEntities)
		{
			spriteBatch.Begin();
			MoonlordDeathDrama.DrawPieces(spriteBatch);
			MoonlordDeathDrama.DrawExplosions(spriteBatch);
			spriteBatch.End();
		}
		bool flag3 = false;
		bool intoRenderTargets = false;
		bool intoRenderTargets2 = false;
		TilesRenderer.SpecificHacksForCapture();
		TilesRenderer.PreDrawTiles(solidLayer: false, flag3, intoRenderTargets2);
		tileBatch.Begin();
		spriteBatch.Begin();
		DrawCachedNPCs(DrawCacheNPCsBehindNonSolidTiles, behindTiles: true);
		int waterStyleOverride = (bloodMoon ? 9 : biome.WaterStyle);
		if (biome == null)
		{
			DrawTiles(solidLayer: false, flag3, intoRenderTargets);
		}
		else
		{
			DrawTiles(solidLayer: false, flag3, intoRenderTargets, waterStyleOverride);
		}
		tileBatch.End();
		spriteBatch.End();
		DrawTileEntities(solidLayer: false, flag3, intoRenderTargets);
		if (captureEntities)
		{
			spriteBatch.Begin();
			tileBatch.Begin();
			waterfallManager.FindWaterfalls(forced: true);
			waterfallManager.Draw(spriteBatch);
			tileBatch.End();
			spriteBatch.End();
		}
		if (captureEntities)
		{
			DrawCachedProjs(DrawCacheProjsBehindNPCsAndTiles);
			spriteBatch.Begin();
			DrawNPCs(behindTiles: true);
			spriteBatch.End();
		}
		TilesRenderer.PreDrawTiles(solidLayer: true, flag3, intoRenderTargets2);
		tileBatch.Begin();
		spriteBatch.Begin();
		if (biome == null)
		{
			DrawTiles(solidLayer: true, flag3, intoRenderTargets);
		}
		else
		{
			DrawTiles(solidLayer: true, flag3, intoRenderTargets, waterStyleOverride);
		}
		tileBatch.End();
		spriteBatch.End();
		DrawTileEntities(solidLayer: true, flag3, intoRenderTargets);
		if (captureEntities)
		{
			DrawPlayers_BehindNPCs();
			DrawCachedProjs(DrawCacheProjsBehindNPCs);
			spriteBatch.Begin();
			DrawNPCs();
			spriteBatch.End();
			spriteBatch.Begin();
			DrawCachedNPCs(DrawCacheNPCProjectiles, behindTiles: false);
			spriteBatch.End();
			DrawSuperSpecialProjectiles(DrawCacheFirstFractals);
			DrawCachedProjs(DrawCacheProjsBehindProjectiles);
			DrawProjectiles();
			DrawPlayers_AfterProjectiles();
			DrawCachedProjs(DrawCacheProjsOverPlayers);
			spriteBatch.Begin();
			DrawCachedNPCs(DrawCacheNPCsOverPlayers, behindTiles: false);
			spriteBatch.End();
			spriteBatch.Begin();
			DrawItems();
			spriteBatch.End();
			spriteBatch.Begin();
			DrawRain();
			spriteBatch.End();
			spriteBatch.Begin();
			DrawGore();
			spriteBatch.End();
			DrawDust();
		}
		tileBatch.Begin();
		spriteBatch.Begin();
		if (biome == null)
		{
			DrawLiquid(bg: false, waterStyle);
		}
		else
		{
			DrawLiquid(bg: false, biome.WaterStyle);
		}
		if (captureMech)
		{
			DrawWires();
		}
		tileBatch.End();
		spriteBatch.End();
		DrawCachedProjs(DrawCacheProjsOverWiresUI);
		if (mapEnabled)
		{
			spriteBatch.Begin();
			for (int n = area.X; n < area.X + area.Width; n++)
			{
				for (int num9 = area.Y; num9 < area.Y + area.Height; num9++)
				{
					if (!Map.IsRevealed(n, num9))
					{
						spriteBatch.Draw(TextureAssets.BlackTile.Value, new Vector2((float)n * 16f, (float)num9 * 16f) - screenPosition, Color.Black);
					}
				}
			}
			spriteBatch.End();
		}
		renderCount = 99;
		screenWidth = num10;
		screenHeight = num11;
		screenPosition = vector;
		liquidAlpha = array3;
		offScreenRange = num;
		cloudAlpha = num12;
		bgAlphaFrontLayer = array;
		bgAlphaFarBackLayer = array2;
		SceneMetrics.HolyTileCount = holyTileCount;
		Lighting.Initialize();
		GameViewMatrix = gameViewMatrix;
	}

	protected void RenderTiles()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		if (drawToScreen)
		{
			return;
		}
		RenderBlack();
		((Game)this).GraphicsDevice.SetRenderTarget(tileTarget);
		((Game)this).GraphicsDevice.Clear(Color.Transparent);
		spriteBatch.Begin();
		tileBatch.Begin();
		try
		{
			TilesRenderer.PreDrawTiles(solidLayer: true, forRenderTargets: false, intoRenderTargets: true);
			DrawTiles(solidLayer: true, forRenderTargets: false, intoRenderTargets: true);
		}
		catch (Exception e)
		{
			if (!ignoreErrors)
			{
				throw;
			}
			TimeLogger.DrawException(e);
		}
		TimeLogger.DetailedDrawReset();
		tileBatch.End();
		spriteBatch.End();
		DrawTileEntities(solidLayer: true, overRenderTargets: false, intoRenderTargets: true);
		TimeLogger.DetailedDrawTime(28);
		((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
	}

	protected void RenderTiles2()
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		if (drawToScreen)
		{
			return;
		}
		((Game)this).GraphicsDevice.SetRenderTarget(tile2Target);
		((Game)this).GraphicsDevice.Clear(Color.Transparent);
		spriteBatch.Begin();
		tileBatch.Begin();
		try
		{
			TilesRenderer.PreDrawTiles(solidLayer: false, forRenderTargets: false, intoRenderTargets: true);
			DrawTiles(solidLayer: false, forRenderTargets: false, intoRenderTargets: true);
		}
		catch (Exception e)
		{
			if (!ignoreErrors)
			{
				throw;
			}
			TimeLogger.DrawException(e);
		}
		TimeLogger.DetailedDrawReset();
		tileBatch.End();
		spriteBatch.End();
		DrawTileEntities(solidLayer: false, overRenderTargets: false, intoRenderTargets: true);
		TimeLogger.DetailedDrawTime(29);
		((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
	}

	protected void RenderWater()
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		if (!drawToScreen)
		{
			((Game)this).GraphicsDevice.SetRenderTarget(waterTarget);
			((Game)this).GraphicsDevice.Clear(Color.Transparent);
			spriteBatch.Begin();
			try
			{
				DrawWaters();
			}
			catch
			{
			}
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(31);
			((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
		}
	}

	public static int CalculateWaterStyle(bool ignoreFountains = false)
	{
		if (SceneMetrics.ActiveFountainColor >= 0 && !ignoreFountains)
		{
			return SceneMetrics.ActiveFountainColor;
		}
		if (bloodMoon && !dayTime)
		{
			return 9;
		}
		switch (bgStyle)
		{
		case 1:
			return 2;
		case 5:
			if (SceneMetrics.EvilTileCount > SceneMetrics.HolyTileCount && SceneMetrics.EvilTileCount > SceneMetrics.BloodTileCount)
			{
				return 2;
			}
			if (SceneMetrics.HolyTileCount > SceneMetrics.BloodTileCount)
			{
				return 4;
			}
			return 10;
		case 3:
			return 3;
		case 8:
			return 10;
		case 6:
			return 4;
		case 7:
			return 5;
		case 2:
			if (remixWorld)
			{
				return 6;
			}
			if ((double)(player[myPlayer].position.Y / 16f) > worldSurface)
			{
				return 12;
			}
			return 6;
		case 4:
			return 13;
		default:
		{
			LoaderManager.Get<WaterStylesLoader>().ChooseStyle(out var waterStyle, out var priority);
			if (priority >= SceneEffectPriority.BiomeLow)
			{
				return waterStyle;
			}
			if (remixWorld)
			{
				if ((double)(screenPosition.Y / 16f) > rockLayer)
				{
					return 7;
				}
				if ((double)(screenPosition.Y / 16f) > worldSurface)
				{
					return 8;
				}
			}
			else
			{
				if ((double)(screenPosition.Y / 16f) > rockLayer + 40.0)
				{
					if (player[myPlayer].ZoneGlowshroom)
					{
						return 7;
					}
					return 8;
				}
				if ((double)(screenPosition.Y / 16f) > worldSurface)
				{
					return 7;
				}
			}
			return 0;
		}
		}
	}

	public static bool IsLiquidStyleWater(int liquidStyle)
	{
		if (liquidStyle != 1)
		{
			return liquidStyle != 11;
		}
		if (liquidStyle >= 15)
		{
			return true;
		}
		return false;
	}

	private void DrawWaters(bool isBackground = false)
	{
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		drewLava = false;
		if (!isBackground)
		{
			waterStyle = CalculateWaterStyle();
			for (int i = 0; i < 15; i++)
			{
				if (IsLiquidStyleWater(waterStyle))
				{
					if (waterStyle != i)
					{
						liquidAlpha[i] = Math.Max(liquidAlpha[i] - 0.2f, 0f);
					}
					else
					{
						liquidAlpha[i] = Math.Min(liquidAlpha[i] + 0.2f, 1f);
					}
				}
			}
			LoaderManager.Get<WaterStylesLoader>().UpdateLiquidAlphas();
		}
		if (!drawToScreen && !isBackground)
		{
			Vector2 vector = (Vector2)(drawToScreen ? Vector2.Zero : new Vector2((float)offScreenRange, (float)offScreenRange));
			int val = (int)((Camera.ScaledPosition.X - vector.X) / 16f - 1f);
			int val2 = (int)((Camera.ScaledPosition.X + Camera.ScaledSize.X + vector.X) / 16f) + 2;
			int val3 = (int)((Camera.ScaledPosition.Y - vector.Y) / 16f - 1f);
			int val4 = (int)((Camera.ScaledPosition.Y + Camera.ScaledSize.Y + vector.Y) / 16f) + 5;
			val = Math.Max(val, 5) - 2;
			val3 = Math.Max(val3, 5);
			val2 = Math.Min(val2, maxTilesX - 5) + 2;
			val4 = Math.Min(val4, maxTilesY - 5) + 4;
			Rectangle drawArea = default(Rectangle);
			((Rectangle)(ref drawArea))._002Ector(val, val3, val2 - val, val4 - val3);
			LiquidRenderer.Instance.PrepareDraw(drawArea);
		}
		bool flag = false;
		for (int j = 0; j < LoaderManager.Get<WaterStylesLoader>().TotalCount; j++)
		{
			if (IsLiquidStyleWater(j) && liquidAlpha[j] > 0f && j != waterStyle)
			{
				DrawLiquid(isBackground, j, isBackground ? 1f : liquidAlpha[j], drawSinglePassLiquids: false);
				flag = true;
			}
		}
		DrawLiquid(isBackground, waterStyle, flag ? liquidAlpha[waterStyle] : 1f);
	}

	protected internal void DrawLiquid(bool bg = false, int waterStyle = 0, float Alpha = 1f, bool drawSinglePassLiquids = true)
	{
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		if (!Lighting.NotRetro)
		{
			oldDrawWater(bg, waterStyle, Alpha);
			return;
		}
		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();
		Vector2 drawOffset = (Vector2)(drawToScreen ? Vector2.Zero : new Vector2((float)offScreenRange, (float)offScreenRange)) - screenPosition;
		if (bg)
		{
			TilesRenderer.DrawLiquidBehindTiles(waterStyle);
		}
		LiquidRenderer.Instance.DrawNormalLiquids(spriteBatch, drawOffset, waterStyle, Alpha, bg);
		if (drawSinglePassLiquids)
		{
			LiquidRenderer.Instance.DrawShimmer(spriteBatch, drawOffset, bg);
		}
		if (!bg)
		{
			TimeLogger.DrawTime(4, stopwatch.Elapsed.TotalMilliseconds);
		}
	}

	public static void DrawTileInWater(Vector2 drawOffset, int x, int y)
	{
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		if (Main.tile[x, y] != null && Main.tile[x, y].active() && Main.tile[x, y].type == 518)
		{
			instance.LoadTiles(Main.tile[x, y].type);
			Tile tile = Main.tile[x, y];
			int num = tile.liquid / 16;
			num -= 3;
			if (WorldGen.SolidTile(x, y - 1) && num > 8)
			{
				num = 8;
			}
			Rectangle value = default(Rectangle);
			((Rectangle)(ref value))._002Ector((int)tile.frameX, (int)tile.frameY, 16, 16);
			spriteBatch.Draw(TextureAssets.Tile[tile.type].Value, new Vector2((float)(x * 16), (float)(y * 16 - num)) + drawOffset, (Rectangle?)value, Lighting.GetColor(x, y), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
	}

	public void oldDrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
	{
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0686: Unknown result type (might be due to invalid IL or missing references)
		//IL_068d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0836: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0806: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b84: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f65: Unknown result type (might be due to invalid IL or missing references)
		//IL_08d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0916: Unknown result type (might be due to invalid IL or missing references)
		//IL_0920: Unknown result type (might be due to invalid IL or missing references)
		//IL_0925: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1002: Unknown result type (might be due to invalid IL or missing references)
		//IL_1004: Unknown result type (might be due to invalid IL or missing references)
		//IL_1009: Unknown result type (might be due to invalid IL or missing references)
		//IL_1018: Unknown result type (might be due to invalid IL or missing references)
		//IL_1024: Unknown result type (might be due to invalid IL or missing references)
		//IL_102a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ebb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ec7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1060: Unknown result type (might be due to invalid IL or missing references)
		//IL_1065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_1104: Unknown result type (might be due to invalid IL or missing references)
		//IL_1106: Unknown result type (might be due to invalid IL or missing references)
		//IL_1110: Unknown result type (might be due to invalid IL or missing references)
		//IL_111a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1123: Unknown result type (might be due to invalid IL or missing references)
		//IL_1129: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a11: Unknown result type (might be due to invalid IL or missing references)
		//IL_1151: Unknown result type (might be due to invalid IL or missing references)
		//IL_1153: Unknown result type (might be due to invalid IL or missing references)
		//IL_1158: Unknown result type (might be due to invalid IL or missing references)
		//IL_115d: Unknown result type (might be due to invalid IL or missing references)
		//IL_115f: Unknown result type (might be due to invalid IL or missing references)
		//IL_116a: Unknown result type (might be due to invalid IL or missing references)
		//IL_117c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1188: Unknown result type (might be due to invalid IL or missing references)
		//IL_118e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c28: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ca7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1223: Unknown result type (might be due to invalid IL or missing references)
		//IL_1225: Unknown result type (might be due to invalid IL or missing references)
		//IL_122a: Unknown result type (might be due to invalid IL or missing references)
		//IL_122f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1231: Unknown result type (might be due to invalid IL or missing references)
		//IL_123d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1247: Unknown result type (might be due to invalid IL or missing references)
		//IL_124b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1257: Unknown result type (might be due to invalid IL or missing references)
		//IL_125d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ddc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0def: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d80: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_1285: Unknown result type (might be due to invalid IL or missing references)
		//IL_1287: Unknown result type (might be due to invalid IL or missing references)
		//IL_128c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1291: Unknown result type (might be due to invalid IL or missing references)
		//IL_1293: Unknown result type (might be due to invalid IL or missing references)
		//IL_129f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e32: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e37: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e82: Unknown result type (might be due to invalid IL or missing references)
		float num = 0f;
		float num12 = 99999f;
		float num23 = 99999f;
		int num27 = -1;
		int num28 = -1;
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)offScreenRange, (float)offScreenRange);
		if (drawToScreen)
		{
			vector = Vector2.Zero;
		}
		_ = new Color[4];
		int num29 = (int)(255f * (1f - gfxQuality) + 40f * gfxQuality);
		_ = gfxQuality;
		_ = gfxQuality;
		int num30 = (int)((screenPosition.X - vector.X) / 16f - 1f);
		int num31 = (int)((screenPosition.X + (float)screenWidth + vector.X) / 16f) + 2;
		int num32 = (int)((screenPosition.Y - vector.Y) / 16f - 1f);
		int num2 = (int)((screenPosition.Y + (float)screenHeight + vector.Y) / 16f) + 5;
		if (num30 < 5)
		{
			num30 = 5;
		}
		if (num31 > maxTilesX - 5)
		{
			num31 = maxTilesX - 5;
		}
		if (num32 < 5)
		{
			num32 = 5;
		}
		if (num2 > maxTilesY - 5)
		{
			num2 = maxTilesY - 5;
		}
		Vector2 vector2 = default(Vector2);
		Rectangle value = default(Rectangle);
		Color newColor = default(Color);
		for (int i = num32; i < num2 + 4; i++)
		{
			for (int j = num30 - 2; j < num31 + 2; j++)
			{
				if (tile[j, i] == null)
				{
					tile[j, i] = default(Tile);
				}
				if (tile[j, i].liquid <= 0 || (tile[j, i].nactive() && tileSolid[tile[j, i].type] && !tileSolidTop[tile[j, i].type]) || !(Lighting.Brightness(j, i) > 0f || bg))
				{
					continue;
				}
				Color color = Lighting.GetColor(j, i);
				float num3 = 256 - tile[j, i].liquid;
				num3 /= 32f;
				bool flag = false;
				int num4 = 0;
				if (tile[j, i].lava())
				{
					if (drewLava)
					{
						continue;
					}
					float num5 = Math.Abs((float)(j * 16 + 8) - (screenPosition.X + (float)(screenWidth / 2)));
					float num6 = Math.Abs((float)(i * 16 + 8) - (screenPosition.Y + (float)(screenHeight / 2)));
					if (num5 < (float)(screenWidth * 2) && num6 < (float)(screenHeight * 2))
					{
						float num7 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
						float num8 = 1f - num7 / ((float)screenWidth * 0.75f);
						if (num8 > 0f)
						{
							num += num8;
						}
					}
					if (num5 < num12)
					{
						num12 = num5;
						num27 = j * 16 + 8;
					}
					if (num6 < num23)
					{
						num23 = num5;
						num28 = i * 16 + 8;
					}
					num4 = 1;
				}
				else if (tile[j, i].honey())
				{
					num4 = 11;
				}
				else if (tile[j, i].shimmer())
				{
					num4 = 14;
					flag = true;
				}
				if (num4 == 0)
				{
					num4 = Style;
				}
				if ((num4 == 1 || num4 == 11) && drewLava)
				{
					continue;
				}
				float num9 = 0.5f;
				if (bg)
				{
					num9 = 1f;
				}
				if (num4 != 1 && num4 != 11)
				{
					num9 *= Alpha;
				}
				DrawTileInWater(-screenPosition + vector, j, i);
				((Vector2)(ref vector2))._002Ector((float)(j * 16), (float)(i * 16 + (int)num3 * 2));
				((Rectangle)(ref value))._002Ector(0, 0, 16, 16 - (int)num3 * 2);
				bool flag2 = true;
				if (tile[j, i + 1].liquid < 245 && (!tile[j, i + 1].nactive() || !tileSolid[tile[j, i + 1].type] || tileSolidTop[tile[j, i + 1].type]))
				{
					float num10 = 256 - tile[j, i + 1].liquid;
					num10 /= 32f;
					num9 = 0.5f * (8f - num3) / 4f;
					if ((double)num9 > 0.55)
					{
						num9 = 0.55f;
					}
					if ((double)num9 < 0.35)
					{
						num9 = 0.35f;
					}
					float num11 = num3 / 2f;
					if (tile[j, i + 1].liquid < 200)
					{
						if (bg)
						{
							continue;
						}
						if (tile[j, i - 1].liquid > 0 && tile[j, i - 1].liquid > 0)
						{
							((Rectangle)(ref value))._002Ector(0, 4, 16, 16);
							num9 = 0.5f;
						}
						else if (tile[j, i - 1].liquid > 0)
						{
							((Vector2)(ref vector2))._002Ector((float)(j * 16), (float)(i * 16 + 4));
							((Rectangle)(ref value))._002Ector(0, 4, 16, 12);
							num9 = 0.5f;
						}
						else if (tile[j, i + 1].liquid > 0)
						{
							((Vector2)(ref vector2))._002Ector((float)(j * 16), (float)(i * 16 + (int)num3 * 2 + (int)num10 * 2));
							((Rectangle)(ref value))._002Ector(0, 4, 16, 16 - (int)num3 * 2);
						}
						else
						{
							((Vector2)(ref vector2))._002Ector((float)(j * 16 + (int)num11), (float)(i * 16 + (int)num11 * 2 + (int)num10 * 2));
							((Rectangle)(ref value))._002Ector(0, 4, 16 - (int)num11 * 2, 16 - (int)num11 * 2);
						}
					}
					else
					{
						num9 = 0.5f;
						((Rectangle)(ref value))._002Ector(0, 4, 16, 16 - (int)num3 * 2 + (int)num10 * 2);
					}
				}
				else if (tile[j, i - 1].liquid > 32)
				{
					((Rectangle)(ref value))._002Ector(0, 4, value.Width, value.Height);
				}
				else if (num3 < 1f && tile[j, i - 1].nactive() && tileSolid[tile[j, i - 1].type] && !tileSolidTop[tile[j, i - 1].type])
				{
					((Vector2)(ref vector2))._002Ector((float)(j * 16), (float)(i * 16));
					((Rectangle)(ref value))._002Ector(0, 4, 16, 16);
				}
				else
				{
					for (int k = i + 1; k < i + 6 && (!tile[j, k].nactive() || !tileSolid[tile[j, k].type] || tileSolidTop[tile[j, k].type]); k++)
					{
						if (tile[j, k].liquid < 200)
						{
							flag2 = false;
							break;
						}
					}
					if (!flag2)
					{
						num9 = 0.5f;
						((Rectangle)(ref value))._002Ector(0, 4, 16, 16);
					}
					else if (tile[j, i - 1].liquid > 0)
					{
						((Rectangle)(ref value))._002Ector(0, 2, value.Width, value.Height);
					}
				}
				if ((((Color)(ref color)).R > 20 || ((Color)(ref color)).B > 20 || ((Color)(ref color)).G > 20) && value.Y < 4)
				{
					int num13 = ((Color)(ref color)).R;
					if (((Color)(ref color)).G > num13)
					{
						num13 = ((Color)(ref color)).G;
					}
					if (((Color)(ref color)).B > num13)
					{
						num13 = ((Color)(ref color)).B;
					}
					num13 /= 30;
					if (rand.Next(20000) < num13)
					{
						((Color)(ref newColor))._002Ector(255, 255, 255);
						if (tile[j, i].honey())
						{
							((Color)(ref newColor))._002Ector(255, 255, 50);
						}
						int num14 = Dust.NewDust(new Vector2((float)(j * 16), vector2.Y - 2f), 16, 8, 43, 0f, 0f, 254, newColor, 0.75f);
						Dust obj = dust[num14];
						obj.velocity *= 0f;
					}
				}
				if (tile[j, i].honey())
				{
					num9 *= 1.6f;
					if (num9 > 1f)
					{
						num9 = 1f;
					}
				}
				if (tile[j, i].lava())
				{
					num9 *= 1.8f;
					if (num9 > 1f)
					{
						num9 = 1f;
					}
					if (((Game)this).IsActive && !gamePaused && Dust.lavaBubbles < 200)
					{
						if (tile[j, i].liquid > 200 && rand.Next(700) == 0)
						{
							Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 35);
						}
						if (value.Y == 0 && rand.Next(350) == 0)
						{
							int num15 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16) + num3 * 2f - 8f), 16, 8, 35, 0f, 0f, 50, default(Color), 1.5f);
							Dust obj2 = dust[num15];
							obj2.velocity *= 0.8f;
							dust[num15].velocity.X *= 2f;
							dust[num15].velocity.Y -= (float)rand.Next(1, 7) * 0.1f;
							if (rand.Next(10) == 0)
							{
								dust[num15].velocity.Y *= rand.Next(2, 5);
							}
							dust[num15].noGravity = true;
						}
					}
				}
				float num16 = (float)(int)((Color)(ref color)).R * num9;
				float num17 = (float)(int)((Color)(ref color)).G * num9;
				float num18 = (float)(int)((Color)(ref color)).B * num9;
				float num19 = (float)(int)((Color)(ref color)).A * num9;
				((Color)(ref color))._002Ector((int)(byte)num16, (int)(byte)num17, (int)(byte)num18, (int)(byte)num19);
				if (flag)
				{
					((Color)(ref color))._002Ector(((Color)(ref color)).ToVector4() * LiquidRenderer.GetShimmerBaseColor(j, i));
				}
				if (Lighting.NotRetro && !bg)
				{
					Color color2 = color;
					if (num4 != 1 && ((double)(int)((Color)(ref color2)).R > (double)num29 * 0.6 || (double)(int)((Color)(ref color2)).G > (double)num29 * 0.65 || (double)(int)((Color)(ref color2)).B > (double)num29 * 0.7))
					{
						for (int l = 0; l < 4; l++)
						{
							int num20 = 0;
							int num21 = 0;
							int width = 8;
							int height = 8;
							Color color3 = color2;
							Color color4 = Lighting.GetColor(j, i);
							if (l == 0)
							{
								color4 = Lighting.GetColor(j - 1, i - 1);
								if (value.Height < 8)
								{
									height = value.Height;
								}
							}
							if (l == 1)
							{
								color4 = Lighting.GetColor(j + 1, i - 1);
								num20 = 8;
								if (value.Height < 8)
								{
									height = value.Height;
								}
							}
							if (l == 2)
							{
								color4 = Lighting.GetColor(j - 1, i + 1);
								num21 = 8;
								height = 8 - (16 - value.Height);
							}
							if (l == 3)
							{
								color4 = Lighting.GetColor(j + 1, i + 1);
								num20 = 8;
								num21 = 8;
								height = 8 - (16 - value.Height);
							}
							num16 = (float)(int)((Color)(ref color4)).R * num9;
							num17 = (float)(int)((Color)(ref color4)).G * num9;
							num18 = (float)(int)((Color)(ref color4)).B * num9;
							num19 = (float)(int)((Color)(ref color4)).A * num9;
							((Color)(ref color4))._002Ector((int)(byte)num16, (int)(byte)num17, (int)(byte)num18, (int)(byte)num19);
							((Color)(ref color3)).R = (byte)((((Color)(ref color2)).R * 3 + ((Color)(ref color4)).R * 2) / 5);
							((Color)(ref color3)).G = (byte)((((Color)(ref color2)).G * 3 + ((Color)(ref color4)).G * 2) / 5);
							((Color)(ref color3)).B = (byte)((((Color)(ref color2)).B * 3 + ((Color)(ref color4)).B * 2) / 5);
							((Color)(ref color3)).A = (byte)((((Color)(ref color2)).A * 3 + ((Color)(ref color4)).A * 2) / 5);
							if (flag)
							{
								((Color)(ref color3))._002Ector(((Color)(ref color3)).ToVector4() * LiquidRenderer.GetShimmerBaseColor(j, i));
							}
							spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + new Vector2((float)num20, (float)num21) + vector, (Rectangle?)new Rectangle(value.X + num20, value.Y + num21, width, height), color3, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
							if (flag)
							{
								spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + new Vector2((float)num20, (float)num21) + vector, (Rectangle?)new Rectangle(value.X + num20, value.Y + num21 + 36, width, height), LiquidRenderer.GetShimmerGlitterColor(flag2, j, i), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
							}
						}
					}
					else
					{
						spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + vector, (Rectangle?)value, color, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
						if (flag)
						{
							value.Y += 36;
							spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + vector, (Rectangle?)value, LiquidRenderer.GetShimmerGlitterColor(flag2, j, i), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
						}
					}
				}
				else
				{
					if (value.Y < 4)
					{
						value.X += (int)(wFrame * 18f);
					}
					spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + vector, (Rectangle?)value, color, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
					if (flag)
					{
						value.Y += 36;
						spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + vector, (Rectangle?)value, LiquidRenderer.GetShimmerGlitterColor(flag2, j, i), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
					}
				}
				if (!tile[j, i + 1].halfBrick())
				{
					continue;
				}
				color = Lighting.GetColor(j, i + 1);
				num16 = (float)(int)((Color)(ref color)).R * num9;
				num17 = (float)(int)((Color)(ref color)).G * num9;
				num18 = (float)(int)((Color)(ref color)).B * num9;
				num19 = (float)(int)((Color)(ref color)).A * num9;
				((Color)(ref color))._002Ector((int)(byte)num16, (int)(byte)num17, (int)(byte)num18, (int)(byte)num19);
				if (flag)
				{
					((Color)(ref color))._002Ector(((Color)(ref color)).ToVector4() * LiquidRenderer.GetShimmerBaseColor(j, i));
				}
				((Vector2)(ref vector2))._002Ector((float)(j * 16), (float)(i * 16 + 16));
				spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + vector, (Rectangle?)new Rectangle(0, 4, 16, 8), color, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
				if (flag)
				{
					spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + vector, (Rectangle?)new Rectangle(0, 40, 16, 8), LiquidRenderer.GetShimmerGlitterColor(flag2, j, i), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
				}
				float num22 = 6f;
				float num24 = 0.75f;
				if (num4 == 1 || num4 == 11)
				{
					num22 = 4f;
					num24 = 0.5f;
				}
				for (int m = 0; (float)m < num22; m++)
				{
					int num25 = i + 2 + m;
					if (WorldGen.SolidTile(j, num25))
					{
						break;
					}
					float num26 = 1f - (float)m / num22;
					num26 *= num24;
					((Vector2)(ref vector2))._002Ector((float)(j * 16), (float)(num25 * 16 - 2));
					spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + vector, (Rectangle?)new Rectangle(0, 18, 16, 16), color * num26, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
					if (flag)
					{
						spriteBatch.Draw(TextureAssets.Liquid[num4].Value, vector2 - screenPosition + vector, (Rectangle?)new Rectangle(0, 54, 16, 16), LiquidRenderer.GetShimmerGlitterColor(flag2, j, i) * num26, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
					}
				}
			}
		}
		if (!drewLava)
		{
			ambientLavaX = num27;
			ambientLavaY = num28;
			ambientLavaStrength = num;
		}
		drewLava = true;
	}

	protected bool FullTile(int x, int y)
	{
		if (Main.tile[x - 1, y] == null || Main.tile[x - 1, y].blockType() != 0 || Main.tile[x + 1, y] == null || Main.tile[x + 1, y].blockType() != 0)
		{
			return false;
		}
		Tile tile = Main.tile[x, y];
		if (tile == null)
		{
			return false;
		}
		if (tile.active())
		{
			if (tile.type < TileID.Sets.DrawsWalls.Length && TileID.Sets.DrawsWalls[tile.type])
			{
				return false;
			}
			if (tileSolid[tile.type] && !tileSolidTop[tile.type])
			{
				int frameX = tile.frameX;
				int frameY = tile.frameY;
				if (tileLargeFrames[tile.type] > 0)
				{
					if (frameY == 18 || frameY == 108)
					{
						if (frameX >= 18 && frameX <= 54)
						{
							return true;
						}
						if (frameX >= 108 && frameX <= 144)
						{
							return true;
						}
					}
				}
				else if (frameY == 18)
				{
					if (frameX >= 18 && frameX <= 54)
					{
						return true;
					}
					if (frameX >= 108 && frameX <= 144)
					{
						return true;
					}
				}
				else if (frameY >= 90 && frameY <= 196)
				{
					if (frameX <= 70)
					{
						return true;
					}
					if (frameX >= 144 && frameX <= 232)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	protected void DrawBlack(bool force = false)
	{
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03db: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fb: Unknown result type (might be due to invalid IL or missing references)
		if (shimmerAlpha == 1f)
		{
			return;
		}
		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();
		Vector2 vector = (Vector2)(drawToScreen ? Vector2.Zero : new Vector2((float)offScreenRange, (float)offScreenRange));
		int num = (((Color)(ref tileColor)).R + ((Color)(ref tileColor)).G + ((Color)(ref tileColor)).B) / 3;
		float num2 = (float)((double)num * 0.4) / 255f;
		if (Lighting.Mode == LightMode.Retro)
		{
			num2 = (float)(((Color)(ref tileColor)).R - 55) / 255f;
			if (num2 < 0f)
			{
				num2 = 0f;
			}
		}
		else if (Lighting.Mode == LightMode.Trippy)
		{
			num2 = (float)(num - 55) / 255f;
			if (num2 < 0f)
			{
				num2 = 0f;
			}
		}
		Point screenOverdrawOffset = GetScreenOverdrawOffset();
		Point point = default(Point);
		((Point)(ref point))._002Ector(-offScreenRange / 16 + screenOverdrawOffset.X, -offScreenRange / 16 + screenOverdrawOffset.Y);
		int num3 = (int)((screenPosition.X - vector.X) / 16f - 1f) + point.X;
		int num4 = (int)((screenPosition.X + (float)screenWidth + vector.X) / 16f) + 2 - point.X;
		int num5 = (int)((screenPosition.Y - vector.Y) / 16f - 1f) + point.Y;
		int num6 = (int)((screenPosition.Y + (float)screenHeight + vector.Y) / 16f) + 5 - point.Y;
		if (num3 < 0)
		{
			num3 = point.X;
		}
		if (num4 > maxTilesX)
		{
			num4 = maxTilesX - point.X;
		}
		if (num5 < 0)
		{
			num5 = point.Y;
		}
		if (num6 > maxTilesY)
		{
			num6 = maxTilesY - point.Y;
		}
		if (!force)
		{
			if (num5 < maxTilesY / 2)
			{
				num6 = Math.Min(num6, (int)worldSurface + 1);
				num5 = Math.Min(num5, (int)worldSurface + 1);
			}
			else
			{
				num6 = Math.Max(num6, UnderworldLayer);
				num5 = Math.Max(num5, UnderworldLayer);
			}
		}
		bool flag = ShouldShowInvisibleWalls();
		for (int i = num5; i < num6; i++)
		{
			bool flag2 = i >= UnderworldLayer;
			if (flag2)
			{
				num2 = 0.2f;
			}
			for (int j = num3; j < num4; j++)
			{
				int num7 = j;
				for (; j < num4; j++)
				{
					if (!WorldGen.InWorld(j, i))
					{
						return;
					}
					if (Main.tile[j, i] == null)
					{
						Main.tile[j, i] = default(Tile);
					}
					Tile tile = Main.tile[j, i];
					float num8 = Lighting.Brightness(j, i);
					num8 = (float)Math.Floor(num8 * 255f) / 255f;
					byte b = tile.liquid;
					bool num9 = num8 <= num2 && ((!flag2 && b < 250) || WorldGen.SolidTile(tile) || (b >= 200 && num8 == 0f));
					bool flag3 = tile.active() && tileBlockLight[tile.type] && (!tile.invisibleBlock() || flag);
					bool flag4 = !WallID.Sets.Transparent[tile.wall] && (!tile.invisibleWall() || flag);
					if (!num9 || (!flag4 && !flag3) || (!drawToScreen && LiquidRenderer.Instance.HasFullWater(j, i) && tile.wall == 0 && !tile.halfBrick() && !((double)i <= worldSurface)))
					{
						break;
					}
				}
				if (j - num7 > 0)
				{
					spriteBatch.Draw(TextureAssets.BlackTile.Value, new Vector2((float)(num7 << 4), (float)(i << 4)) - screenPosition + vector, (Rectangle?)new Rectangle(0, 0, j - num7 << 4, 16), Color.Black);
				}
			}
		}
		TimeLogger.DrawTime(5, stopwatch.Elapsed.TotalMilliseconds);
	}

	public static bool ShouldShowInvisibleWalls()
	{
		if (!SceneMetrics.EchoMonolith)
		{
			return LocalPlayer.CanSeeInvisibleBlocks;
		}
		return true;
	}

	protected void RenderBlack()
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Expected O, but got Unknown
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		if (!drawToScreen)
		{
			((Game)this).GraphicsDevice.SetRenderTarget(blackTarget);
			((Game)this).GraphicsDevice.DepthStencilState = new DepthStencilState
			{
				DepthBufferEnable = true
			};
			((Game)this).GraphicsDevice.Clear(Color.Transparent);
			spriteBatch.Begin();
			DrawBlack();
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(30);
			((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
		}
	}

	protected void DrawWalls()
	{
		WallsRenderer.DrawWalls();
	}

	protected void RenderWalls()
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Expected O, but got Unknown
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		if (drawToScreen)
		{
			return;
		}
		((Game)this).GraphicsDevice.SetRenderTarget(wallTarget);
		((Game)this).GraphicsDevice.DepthStencilState = new DepthStencilState
		{
			DepthBufferEnable = true
		};
		((Game)this).GraphicsDevice.Clear(Color.Transparent);
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend);
		tileBatch.Begin();
		if (ignoreErrors)
		{
			try
			{
				DrawWalls();
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
		}
		else
		{
			DrawWalls();
		}
		TimeLogger.DetailedDrawReset();
		tileBatch.End();
		spriteBatch.End();
		TimeLogger.DetailedDrawTime(32);
		((Game)this).GraphicsDevice.SetRenderTarget((RenderTarget2D)null);
	}

	protected void ReleaseTargets()
	{
		try
		{
			if (!dedServ)
			{
				offScreenRange = 0;
				targetSet = false;
				if (waterTarget != null)
				{
					((GraphicsResource)waterTarget).Dispose();
				}
				if (backWaterTarget != null)
				{
					((GraphicsResource)backWaterTarget).Dispose();
				}
				if (blackTarget != null)
				{
					((GraphicsResource)blackTarget).Dispose();
				}
				if (tileTarget != null)
				{
					((GraphicsResource)tileTarget).Dispose();
				}
				if (tile2Target != null)
				{
					((GraphicsResource)tile2Target).Dispose();
				}
				if (wallTarget != null)
				{
					((GraphicsResource)wallTarget).Dispose();
				}
				if (screenTarget != null)
				{
					((GraphicsResource)screenTarget).Dispose();
				}
				if (screenTargetSwap != null)
				{
					((GraphicsResource)screenTargetSwap).Dispose();
				}
				if (backgroundTarget != null)
				{
					((GraphicsResource)backgroundTarget).Dispose();
				}
				if (Main.OnRenderTargetsReleased != null)
				{
					Main.OnRenderTargetsReleased();
				}
			}
		}
		catch
		{
		}
	}

	protected bool checkMap(int i, int j)
	{
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Expected O, but got Unknown
		if (mapTarget[i, j] == null || ((GraphicsResource)mapTarget[i, j]).IsDisposed)
		{
			initMap[i, j] = false;
		}
		if (!initMap[i, j])
		{
			try
			{
				int width = textureMaxWidth;
				int height = textureMaxHeight;
				if (i == mapTargetX - 1)
				{
					width = 400;
				}
				if (j == mapTargetY - 1)
				{
					height = 600;
				}
				mapTarget[i, j] = new RenderTarget2D(((Game)this).GraphicsDevice, width, height, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0, 0, (RenderTargetUsage)1);
			}
			catch
			{
				mapEnabled = false;
				for (int k = 0; k < mapTargetX; k++)
				{
					for (int l = 0; l < mapTargetY; l++)
					{
						try
						{
							initMap[k, l] = false;
							((GraphicsResource)mapTarget[k, l]).Dispose();
						}
						catch
						{
						}
					}
				}
				return false;
			}
			initMap[i, j] = true;
		}
		return true;
	}

	protected void InitMap()
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Expected O, but got Unknown
		int num = mapTargetX;
		int num2 = mapTargetY;
		if (!mapEnabled)
		{
			return;
		}
		try
		{
			for (int i = 0; i < num; i++)
			{
				for (int j = 0; j < num2; j++)
				{
					mapTarget[i, j] = new RenderTarget2D(((Game)this).GraphicsDevice, textureMaxWidth, textureMaxHeight, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0, 0, (RenderTargetUsage)1);
				}
			}
			mapInit = true;
		}
		catch
		{
			mapEnabled = false;
			for (int k = 0; k < num; k++)
			{
				for (int l = 0; l < num2; l++)
				{
					try
					{
						if (mapTarget[k, l] != null)
						{
							((GraphicsResource)mapTarget[k, l]).Dispose();
						}
					}
					catch
					{
					}
				}
			}
		}
	}

	protected void InitTargets()
	{
		if (!PreventUpdatingTargets)
		{
			UpdateDisplaySettings();
		}
		InitTargets(((Game)this).GraphicsDevice.PresentationParameters.BackBufferWidth, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferHeight);
	}

	protected void EnsureRenderTargetContent()
	{
		if (waterTarget == null || waterTarget.IsContentLost || backWaterTarget == null || backWaterTarget.IsContentLost || blackTarget == null || blackTarget.IsContentLost || tileTarget == null || tileTarget.IsContentLost || tile2Target == null || tile2Target.IsContentLost || wallTarget == null || wallTarget.IsContentLost || backgroundTarget == null || backgroundTarget.IsContentLost || screenTarget == null || screenTarget.IsContentLost || screenTargetSwap == null || screenTargetSwap.IsContentLost)
		{
			InitTargets();
		}
	}

	protected void InitTargets(int width, int height)
	{
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Expected O, but got Unknown
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Expected O, but got Unknown
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Expected O, but got Unknown
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Expected O, but got Unknown
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Expected O, but got Unknown
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Expected O, but got Unknown
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Expected O, but got Unknown
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Expected O, but got Unknown
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Expected O, but got Unknown
		ReleaseTargets();
		offScreenRange = 192;
		if (width + offScreenRange * 2 > _renderTargetMaxSize)
		{
			offScreenRange = (_renderTargetMaxSize - width) / 2;
		}
		width += offScreenRange * 2;
		height += offScreenRange * 2;
		try
		{
			if (!dedServ)
			{
				targetSet = true;
				waterTarget = new RenderTarget2D(((Game)this).GraphicsDevice, width, height, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				backWaterTarget = new RenderTarget2D(((Game)this).GraphicsDevice, width, height, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				blackTarget = new RenderTarget2D(((Game)this).GraphicsDevice, width, height, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				tileTarget = new RenderTarget2D(((Game)this).GraphicsDevice, width, height, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				tile2Target = new RenderTarget2D(((Game)this).GraphicsDevice, width, height, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				wallTarget = new RenderTarget2D(((Game)this).GraphicsDevice, width, height, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				backgroundTarget = new RenderTarget2D(((Game)this).GraphicsDevice, width, height, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				screenTarget = new RenderTarget2D(((Game)this).GraphicsDevice, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferWidth, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferHeight, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				screenTargetSwap = new RenderTarget2D(((Game)this).GraphicsDevice, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferWidth, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferHeight, false, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				if (Main.OnRenderTargetsInitialized != null)
				{
					Main.OnRenderTargetsInitialized(((Game)this).GraphicsDevice.PresentationParameters.BackBufferWidth, ((Game)this).GraphicsDevice.PresentationParameters.BackBufferHeight);
				}
			}
		}
		catch
		{
			Lighting.Mode = LightMode.Retro;
			mapEnabled = false;
			SaveSettings();
			try
			{
				ReleaseTargets();
			}
			catch
			{
			}
		}
	}

	protected void DrawWires()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_1101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1156: Unknown result type (might be due to invalid IL or missing references)
		//IL_115b: Unknown result type (might be due to invalid IL or missing references)
		//IL_115d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1162: Unknown result type (might be due to invalid IL or missing references)
		//IL_1181: Unknown result type (might be due to invalid IL or missing references)
		//IL_1186: Unknown result type (might be due to invalid IL or missing references)
		//IL_1188: Unknown result type (might be due to invalid IL or missing references)
		//IL_118d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1194: Unknown result type (might be due to invalid IL or missing references)
		//IL_1196: Unknown result type (might be due to invalid IL or missing references)
		//IL_1198: Unknown result type (might be due to invalid IL or missing references)
		//IL_119d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ffa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fff: Unknown result type (might be due to invalid IL or missing references)
		//IL_104d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1052: Unknown result type (might be due to invalid IL or missing references)
		//IL_1054: Unknown result type (might be due to invalid IL or missing references)
		//IL_106f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1079: Unknown result type (might be due to invalid IL or missing references)
		//IL_107c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1088: Unknown result type (might be due to invalid IL or missing references)
		//IL_108e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1003: Unknown result type (might be due to invalid IL or missing references)
		//IL_100a: Unknown result type (might be due to invalid IL or missing references)
		//IL_100f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1013: Unknown result type (might be due to invalid IL or missing references)
		//IL_1018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_0318: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0355: Unknown result type (might be due to invalid IL or missing references)
		//IL_033c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0351: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_08bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_050a: Unknown result type (might be due to invalid IL or missing references)
		//IL_050c: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0503: Unknown result type (might be due to invalid IL or missing references)
		//IL_0508: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_08dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_055a: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0561: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_056c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0576: Unknown result type (might be due to invalid IL or missing references)
		//IL_0580: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cee: Unknown result type (might be due to invalid IL or missing references)
		//IL_094d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0952: Unknown result type (might be due to invalid IL or missing references)
		//IL_0954: Unknown result type (might be due to invalid IL or missing references)
		//IL_0959: Unknown result type (might be due to invalid IL or missing references)
		//IL_095f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0969: Unknown result type (might be due to invalid IL or missing references)
		//IL_0973: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d66: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05de: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_09c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_09da: Unknown result type (might be due to invalid IL or missing references)
		//IL_09e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_09eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0654: Unknown result type (might be due to invalid IL or missing references)
		//IL_0659: Unknown result type (might be due to invalid IL or missing references)
		//IL_065b: Unknown result type (might be due to invalid IL or missing references)
		//IL_066a: Unknown result type (might be due to invalid IL or missing references)
		//IL_066f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0676: Unknown result type (might be due to invalid IL or missing references)
		//IL_0682: Unknown result type (might be due to invalid IL or missing references)
		//IL_068c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0693: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dde: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a86: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0705: Unknown result type (might be due to invalid IL or missing references)
		//IL_070a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0711: Unknown result type (might be due to invalid IL or missing references)
		//IL_071a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0724: Unknown result type (might be due to invalid IL or missing references)
		//IL_072b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e41: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e68: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b04: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_077e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0783: Unknown result type (might be due to invalid IL or missing references)
		//IL_0785: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0798: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0edc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ef7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f0a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f11: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b71: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b78: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b95: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f64: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f69: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f75: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f8f: Unknown result type (might be due to invalid IL or missing references)
		Rectangle value = default(Rectangle);
		((Rectangle)(ref value))._002Ector(0, 0, 16, 16);
		Vector2 zero = Vector2.Zero;
		DrawWiresSpecialTiles.Clear();
		bool flag = !WiresUI.Settings.HideWires;
		float num = 1f;
		if (WiresUI.Settings.HideWires)
		{
			num = 0.5f;
		}
		int num9 = 1;
		int num10 = 1;
		int num11 = 1;
		int num12 = 1;
		int num13 = 1;
		if (player[myPlayer].InfoAccMechShowWires)
		{
			int[] builderAccStatus = player[myPlayer].builderAccStatus;
			num9 = builderAccStatus[4];
			num10 = builderAccStatus[5];
			num11 = builderAccStatus[6];
			num12 = builderAccStatus[7];
			num13 = builderAccStatus[9];
		}
		_ = gfxQuality;
		_ = gfxQuality;
		Vector2 zero2 = Vector2.Zero;
		if (drawToScreen)
		{
			zero2 = Vector2.Zero;
		}
		int num14 = (int)((screenPosition.X - zero2.X) / 16f - 1f);
		int num15 = (int)((screenPosition.X + (float)screenWidth + zero2.X) / 16f) + 2;
		int num16 = (int)((screenPosition.Y - zero2.Y) / 16f - 1f);
		int num2 = (int)((screenPosition.Y + (float)screenHeight + zero2.Y) / 16f) + 5;
		if (num14 < 0)
		{
			num14 = 0;
		}
		if (num15 > maxTilesX)
		{
			num15 = maxTilesX;
		}
		if (num16 < 0)
		{
			num16 = 0;
		}
		if (num2 > maxTilesY)
		{
			num2 = maxTilesY;
		}
		Point screenOverdrawOffset = GetScreenOverdrawOffset();
		for (int i = num16 + screenOverdrawOffset.Y; i < num2 - screenOverdrawOffset.Y; i++)
		{
			for (int j = num14 + screenOverdrawOffset.X; j < num15 - screenOverdrawOffset.X; j++)
			{
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				bool flag6 = false;
				bool flag7 = false;
				bool flag8 = false;
				bool flag9 = false;
				bool flag10 = false;
				bool flag2 = false;
				float num3 = 0f;
				Tile tile = Main.tile[j, i];
				if (flag && player[myPlayer].CanDoWireStuffHere(j, i))
				{
					int num4 = 0;
					if (tile.active())
					{
						if (tile.type == 424)
						{
							switch (tile.frameX / 18)
							{
							case 0:
								num4 += 72;
								break;
							case 1:
								num4 += 144;
								break;
							case 2:
								num4 += 216;
								break;
							}
						}
						else if (tile.type == 445)
						{
							num4 += 72;
						}
					}
					if (tile.wire())
					{
						num3 += 1f;
						int num5 = 0;
						if (Main.tile[j, i - 1].wire())
						{
							num5 += 18;
							flag5 = true;
						}
						if (Main.tile[j + 1, i].wire())
						{
							num5 += 36;
							flag4 = true;
						}
						if (Main.tile[j, i + 1].wire())
						{
							num5 += 72;
							flag6 = true;
						}
						if (Main.tile[j - 1, i].wire())
						{
							num5 += 144;
							flag3 = true;
						}
						value.Y = num4;
						value.X = num5;
						Color color = Lighting.GetColor(j, i);
						switch (num9)
						{
						case 0:
							color = Color.White;
							break;
						case 2:
							color *= 0.5f;
							break;
						case 3:
							color = Color.Transparent;
							break;
						}
						if (color == Color.Transparent)
						{
							num3 -= 1f;
						}
						else
						{
							spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)value, color, 0f, zero, 1f, (SpriteEffects)0, 0f);
						}
					}
					if (tile.wire2())
					{
						flag7 = (flag8 = (flag9 = (flag10 = (flag2 = false))));
						num3 += 1f;
						int num6 = 0;
						if (Main.tile[j, i - 1].wire2())
						{
							num6 += 18;
							flag9 = true;
							if (flag5)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j + 1, i].wire2())
						{
							num6 += 36;
							flag8 = true;
							if (flag4)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j, i + 1].wire2())
						{
							num6 += 72;
							flag10 = true;
							if (flag6)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j - 1, i].wire2())
						{
							num6 += 144;
							flag7 = true;
							if (flag3)
							{
								flag2 = true;
							}
						}
						if (num3 > 1f)
						{
							flag2 = true;
						}
						value.Y = num4 + 18;
						value.X = num6;
						Color color2 = Lighting.GetColor(j, i);
						switch (num10)
						{
						case 0:
							color2 = Color.White;
							break;
						case 2:
							color2 *= 0.5f;
							break;
						case 3:
							color2 = Color.Transparent;
							break;
						}
						if (color2 == Color.Transparent)
						{
							num3 -= 1f;
						}
						else
						{
							spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)value, color2 * (1f / num3), 0f, zero, 1f, (SpriteEffects)0, 0f);
							if (flag9)
							{
								if (flag2 && !flag5)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)new Rectangle(18, value.Y, 16, 6), color2, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag5 = true;
							}
							if (flag10)
							{
								if (flag2 && !flag6)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2 + new Vector2(0f, 10f), (Rectangle?)new Rectangle(72, value.Y + 10, 16, 6), color2, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag6 = true;
							}
							if (flag8)
							{
								if (flag2 && !flag4)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2 + new Vector2(10f, 0f), (Rectangle?)new Rectangle(46, value.Y, 6, 16), color2, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag4 = true;
							}
							if (flag7)
							{
								if (flag2 && !flag3)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)new Rectangle(144, value.Y, 6, 16), color2, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag3 = true;
							}
						}
					}
					if (tile.wire3())
					{
						flag7 = (flag8 = (flag9 = (flag10 = (flag2 = false))));
						num3 += 1f;
						int num7 = 0;
						if (Main.tile[j, i - 1].wire3())
						{
							num7 += 18;
							flag9 = true;
							if (flag5)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j + 1, i].wire3())
						{
							num7 += 36;
							flag8 = true;
							if (flag4)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j, i + 1].wire3())
						{
							num7 += 72;
							flag10 = true;
							if (flag6)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j - 1, i].wire3())
						{
							num7 += 144;
							flag7 = true;
							if (flag3)
							{
								flag2 = true;
							}
						}
						if (num3 > 1f)
						{
							flag2 = true;
						}
						value.Y = num4 + 36;
						value.X = num7;
						Color color3 = Lighting.GetColor(j, i);
						switch (num11)
						{
						case 0:
							color3 = Color.White;
							break;
						case 2:
							color3 *= 0.5f;
							break;
						case 3:
							color3 = Color.Transparent;
							break;
						}
						if (color3 == Color.Transparent)
						{
							num3 -= 1f;
						}
						else
						{
							spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)value, color3 * (1f / num3), 0f, zero, 1f, (SpriteEffects)0, 0f);
							if (flag9)
							{
								if (flag2 && !flag5)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)new Rectangle(18, value.Y, 16, 6), color3, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag5 = true;
							}
							if (flag10)
							{
								if (flag2 && !flag6)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2 + new Vector2(0f, 10f), (Rectangle?)new Rectangle(72, value.Y + 10, 16, 6), color3, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag6 = true;
							}
							if (flag8)
							{
								if (flag2 && !flag4)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2 + new Vector2(10f, 0f), (Rectangle?)new Rectangle(46, value.Y, 6, 16), color3, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag4 = true;
							}
							if (flag7)
							{
								if (flag2 && !flag3)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)new Rectangle(144, value.Y, 6, 16), color3, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag3 = true;
							}
						}
					}
					if (tile.wire4())
					{
						flag7 = (flag8 = (flag9 = (flag10 = (flag2 = false))));
						num3 += 1f;
						int num8 = 0;
						if (Main.tile[j, i - 1].wire4())
						{
							num8 += 18;
							flag9 = true;
							if (flag5)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j + 1, i].wire4())
						{
							num8 += 36;
							flag8 = true;
							if (flag4)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j, i + 1].wire4())
						{
							num8 += 72;
							flag10 = true;
							if (flag6)
							{
								flag2 = true;
							}
						}
						if (Main.tile[j - 1, i].wire4())
						{
							num8 += 144;
							flag7 = true;
							if (flag3)
							{
								flag2 = true;
							}
						}
						if (num3 > 1f)
						{
							flag2 = true;
						}
						value.Y = num4 + 54;
						value.X = num8;
						Color color4 = Lighting.GetColor(j, i);
						switch (num12)
						{
						case 0:
							color4 = Color.White;
							break;
						case 2:
							color4 *= 0.5f;
							break;
						case 3:
							color4 = Color.Transparent;
							break;
						}
						if (color4 == Color.Transparent)
						{
							num3 -= 1f;
						}
						else
						{
							spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)value, color4 * (1f / num3), 0f, zero, 1f, (SpriteEffects)0, 0f);
							if (flag9)
							{
								if (flag2 && !flag5)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)new Rectangle(18, value.Y, 16, 6), color4, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag5 = true;
							}
							if (flag10)
							{
								if (flag2 && !flag6)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2 + new Vector2(0f, 10f), (Rectangle?)new Rectangle(72, value.Y + 10, 16, 6), color4, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag6 = true;
							}
							if (flag8)
							{
								if (flag2 && !flag4)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2 + new Vector2(10f, 0f), (Rectangle?)new Rectangle(46, value.Y, 6, 16), color4, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag4 = true;
							}
							if (flag7)
							{
								if (flag2 && !flag3)
								{
									spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)new Rectangle(144, value.Y, 6, 16), color4, 0f, zero, 1f, (SpriteEffects)0, 0f);
								}
								flag3 = true;
							}
						}
					}
				}
				if (Main.tile[j, i].actuator() && (Lighting.Brightness(j, i) > 0f || num13 == 0))
				{
					Color color5 = Lighting.GetColor(j, i);
					switch (num13)
					{
					case 0:
						color5 = Color.White;
						break;
					case 2:
						color5 *= 0.5f;
						break;
					case 3:
						color5 = Color.Transparent;
						break;
					}
					spriteBatch.Draw(TextureAssets.Actuator.Value, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y)) + zero2, (Rectangle?)new Rectangle(0, 0, TextureAssets.Actuator.Width(), TextureAssets.Actuator.Height()), color5 * num, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
				}
				if (tile.active() && tile.type == 423 && tile.frameY == 36)
				{
					DrawWiresSpecialTiles.Add(Tuple.Create(j, i, tile.type));
				}
			}
		}
		for (int k = 0; k < DrawWiresSpecialTiles.Count; k++)
		{
			Tuple<int, int, ushort> tuple = DrawWiresSpecialTiles[k];
			if (tuple.Item3 == 423)
			{
				Vector2 start = new Vector2((float)(tuple.Item1 * 16 - 32 - 1), (float)(tuple.Item2 * 16 - 160 - 1)) + zero2;
				Vector2 end = new Vector2((float)(tuple.Item1 * 16 + 48 + 1), (float)(tuple.Item2 * 16 + 1)) + zero2;
				Utils.DrawRectangle(spriteBatch, start, end, Color.LightSeaGreen, Color.LightSeaGreen, 2f);
			}
		}
		TimeLogger.DetailedDrawTime(34);
	}

	public static int ConvertPaintIdToTileShaderIndex(int paintIndexOnTile, bool isUsedForPaintingGrass, bool useWallShaderHacks)
	{
		if (paintIndexOnTile == 31)
		{
			return 0;
		}
		if (paintIndexOnTile == 30 && useWallShaderHacks)
		{
			return 43;
		}
		if (paintIndexOnTile >= 28)
		{
			return paintIndexOnTile + 12;
		}
		if (isUsedForPaintingGrass && paintIndexOnTile >= 1 && paintIndexOnTile <= 12)
		{
			return paintIndexOnTile + 27;
		}
		return paintIndexOnTile;
	}

	public static void ResetWindCounter(bool resetExtreme = false)
	{
		FastRandom fastRandom = FastRandom.CreateWithRandomSeed();
		windCounter = fastRandom.Next(900, 2701);
		if (resetExtreme)
		{
			extremeWindCounter = fastRandom.Next(10, 31);
		}
	}

	public static void NewLightning()
	{
		if (!DisableIntenseVisualEffects && !(shimmerAlpha > 0f))
		{
			if (rand.Next(3) == 0)
			{
				thunderDelay = rand.Next(1, 31);
			}
			else if (rand.Next(2) == 0)
			{
				thunderDelay = rand.Next(31, 121);
			}
			else
			{
				thunderDelay = rand.Next(11, 61);
			}
			thunderDistance = thunderDelay;
			lightningDecay = rand.NextFloat() * 0.05f + 0.008f;
			lightningSpeed = rand.NextFloat() * 0.05f + 0.05f;
		}
	}

	public void UpdateWeather(GameTime gameTime, int currentDayRateIteration)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		if (netMode != 2 && currentDayRateIteration == 0)
		{
			bool flag = ((Game)this).IsActive;
			if (thunderDelay > 0)
			{
				thunderDelay--;
				if (thunderDelay == 0)
				{
					Vector2 center = player[myPlayer].Center;
					float num = thunderDistance * 15;
					if (rand.Next(2) == 0)
					{
						num *= -1f;
					}
					center.X += num;
					int num2 = (int)(worldSurface * 16.0) - 500;
					if (center.Y > (float)num2)
					{
						center.Y = num2;
					}
					if (flag)
					{
						SoundEngine.PlaySound(43, center);
					}
				}
			}
			if (lightningSpeed > 0f)
			{
				lightning += lightningSpeed;
				if (lightning >= 1f)
				{
					lightning = 1f;
					lightningSpeed = 0f;
				}
				Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
				Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
			}
			else if (lightning > 0f)
			{
				lightning -= lightningDecay;
				Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
				Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
			}
			else if (thunderDelay <= 0 && (double)player[myPlayer].position.Y < rockLayer * 16.0 && atmo == 1f && !remixWorld)
			{
				if (IsItStorming)
				{
					float num3 = 600f;
					float num4 = 1600f;
					if ((double)maxRaining > 0.8)
					{
						num3 *= 0.6f;
						num4 *= 0.8f;
					}
					if ((double)maxRaining > 0.7)
					{
						num3 *= 0.7f;
						num4 *= 0.9f;
					}
					if ((double)maxRaining > 0.6)
					{
						num3 *= 0.8f;
						num4 *= 0.95f;
					}
					if ((double)Math.Abs(windSpeedTarget) > 0.7)
					{
						num3 *= 0.6f;
						num4 *= 0.8f;
					}
					if ((double)Math.Abs(windSpeedTarget) > 0.6)
					{
						num3 *= 0.7f;
						num4 *= 0.9f;
					}
					if ((double)Math.Abs(windSpeedTarget) > 0.5)
					{
						num3 *= 0.8f;
						num4 *= 0.95f;
					}
					float num5 = rand.Next((int)num3, (int)num4);
					num5 *= (1f - maxRaining + 1f) / 2f;
					num5 *= (1f - windSpeedTarget + 1f) / 2f;
					if (rand.Next((int)num5) == 0)
					{
						NewLightning();
					}
				}
				else if ((double)GraveyardVisualIntensity >= 0.9)
				{
					int maxValue = 120;
					if (rand.Next(maxValue) == 0)
					{
						NewLightning();
					}
				}
			}
		}
		float num6 = 0.8f;
		float num7 = 0.0003f;
		float num8 = windSpeedTarget * (1f + 5f / 9f * maxRaining);
		num7 += Math.Abs(num8 - windSpeedCurrent) * 0.0015f;
		if (windSpeedCurrent < num8)
		{
			windSpeedCurrent += num7;
			if (windSpeedCurrent > num8)
			{
				windSpeedCurrent = num8;
			}
		}
		else if (windSpeedCurrent > num8)
		{
			windSpeedCurrent -= num7;
			if (windSpeedCurrent < num8)
			{
				windSpeedCurrent = num8;
			}
		}
		if (netMode == 1 || (netMode != 2 && gameMenu))
		{
			return;
		}
		if (!CreativePowerManager.Instance.GetPower<CreativePowers.FreezeWindDirectionAndStrength>().Enabled)
		{
			if (LanternNight.LanternsUp)
			{
				return;
			}
			windCounter--;
			if (windCounter <= 0)
			{
				float num9 = 1f;
				if (windSpeedTarget < 0f)
				{
					num9 = -1f;
				}
				if (rand.Next(4) == 0)
				{
					windSpeedTarget += (float)rand.Next(-25, 26) * 0.001f;
				}
				else if (rand.Next(2) == 0)
				{
					windSpeedTarget += (float)rand.Next(-50, 51) * 0.001f;
				}
				else
				{
					windSpeedTarget += (float)rand.Next(-100, 101) * 0.001f;
				}
				extremeWindCounter--;
				if (extremeWindCounter <= 0)
				{
					ResetWindCounter(resetExtreme: true);
					if (rand.Next(30) < 13)
					{
						if (rand.Next(2) == 0)
						{
							windSpeedTarget = 0f;
							windCounter = rand.Next(7200, 28801);
						}
						else
						{
							windSpeedTarget = (float)rand.Next(-200, 201) * 0.001f;
						}
					}
					else if (rand.Next(20) < 13)
					{
						windSpeedTarget = (float)rand.Next(-400, 401) * 0.001f;
					}
					else
					{
						windSpeedTarget = (float)rand.Next(-850, 851) * 0.001f;
					}
					if ((double)Math.Abs(windSpeedTarget) > 0.3)
					{
						extremeWindCounter += rand.Next(5, 11);
					}
					if ((double)Math.Abs(windSpeedTarget) > 0.5)
					{
						extremeWindCounter += rand.Next(10, 21);
					}
					if ((double)Math.Abs(windSpeedTarget) > 0.7)
					{
						extremeWindCounter += rand.Next(15, 31);
					}
				}
				else
				{
					ResetWindCounter();
				}
				if (rand.Next(3) != 0 && ((num9 < 0f && windSpeedTarget > 0f) || (num9 > 0f && windSpeedTarget < 0f)))
				{
					windSpeedTarget *= -1f;
				}
			}
			if (windSpeedTarget > num6)
			{
				windSpeedTarget = num6;
			}
			if (windSpeedTarget < 0f - num6)
			{
				windSpeedTarget = 0f - num6;
			}
		}
		if (rand.Next(60) == 0)
		{
			numCloudsTemp += rand.Next(-1, 2);
		}
		if ((float)rand.Next(1000) < 50f * cloudBGAlpha)
		{
			numCloudsTemp++;
		}
		if ((float)rand.Next(1300) < 25f * (1f - cloudBGAlpha))
		{
			numCloudsTemp--;
		}
		if ((float)rand.Next(1000) < 200f * cloudAlpha && numCloudsTemp < 100)
		{
			numCloudsTemp++;
		}
		if ((float)rand.Next(1000) < 50f * cloudAlpha)
		{
			numCloudsTemp++;
		}
		if (numCloudsTemp > 66 && rand.Next(100) == 0)
		{
			numCloudsTemp -= rand.Next(1, 3);
		}
		if (numCloudsTemp < 50 && rand.Next(100) == 0)
		{
			numCloudsTemp += rand.Next(1, 3);
		}
		if (cloudBGActive <= 0f && numCloudsTemp > 100 && cloudAlpha == 0f)
		{
			numCloudsTemp = 100;
		}
		if (numCloudsTemp < -20)
		{
			numCloudsTemp = -20;
		}
		if (cloudAlpha > 0f && (float)numClouds < 200f * cloudAlpha)
		{
			while ((float)numClouds < 200f * cloudAlpha)
			{
				numClouds += rand.Next(30);
				if (numClouds > 200)
				{
					numClouds = 200;
				}
				if (numCloudsTemp < numClouds)
				{
					numCloudsTemp = numClouds;
				}
			}
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
		}
		weatherCounter--;
		if (weatherCounter > 0)
		{
			return;
		}
		if (rand.Next(2) == 0)
		{
			if (rand.Next(2) == 0)
			{
				numCloudsTemp += rand.Next(250);
			}
			else
			{
				numCloudsTemp += rand.Next(100);
			}
		}
		if (numCloudsTemp < 0)
		{
			numCloudsTemp = 0;
		}
		if (numCloudsTemp > 200)
		{
			numCloudsTemp = 200;
		}
		numClouds = numCloudsTemp;
		weatherCounter = rand.Next(3600, 10800);
		if (netMode == 2)
		{
			NetMessage.SendData(7);
		}
	}

	public void LoadBackground(int i)
	{
		if (i >= 0 && TextureAssets.Background[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.Background[i].Name);
			backgroundWidth[i] = TextureAssets.Background[i].Width();
			backgroundHeight[i] = TextureAssets.Background[i].Height();
			switch (i)
			{
			case 219:
			case 220:
			case 221:
			case 235:
			case 271:
			case 272:
			case 273:
			case 281:
				backgroundWidth[i] /= 2;
				backgroundHeight[i] /= 2;
				break;
			}
		}
	}

	public void LoadItem(int i)
	{
		if (TextureAssets.Item[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.Item[i].Name);
		}
	}

	public void LoadNPC(int i)
	{
		if (TextureAssets.Npc[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.Npc[i].Name);
		}
	}

	public void LoadProjectile(int i)
	{
		if (TextureAssets.Projectile[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.Projectile[i].Name);
		}
	}

	public void LoadGore(int i)
	{
		if (TextureAssets.Gore[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.Gore[i].Name);
		}
	}

	public void LoadWall(int i)
	{
		if (TextureAssets.Wall[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.Wall[i].Name);
		}
	}

	public void LoadTiles(int i)
	{
		if (TextureAssets.Tile[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.Tile[i].Name);
		}
	}

	public void LoadItemFlames(int i)
	{
		if (TextureAssets.ItemFlame[i].State == AssetState.NotLoaded)
		{
			try
			{
				Assets.Request<Texture2D>(TextureAssets.ItemFlame[i].Name);
			}
			catch
			{
			}
		}
	}

	public void LoadWings(int i)
	{
		if (TextureAssets.Wings[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.Wings[i].Name);
		}
	}

	public void LoadHair(int i)
	{
		if (TextureAssets.PlayerHair[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.PlayerHair[i].Name);
			Assets.Request<Texture2D>(TextureAssets.PlayerHairAlt[i].Name);
		}
	}

	public void LoadArmorHead(int i)
	{
		if (TextureAssets.ArmorHead[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.ArmorHead[i].Name);
		}
	}

	public void LoadArmorBody(int i)
	{
		if (ArmorIDs.Body.Sets.UsesNewFramingCode[i])
		{
			if (TextureAssets.ArmorBodyComposite[i].State == AssetState.NotLoaded)
			{
				Assets.Request<Texture2D>(TextureAssets.ArmorBodyComposite[i].Name);
			}
		}
		else if (TextureAssets.ArmorBody[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.FemaleBody[i].Name);
			Assets.Request<Texture2D>(TextureAssets.ArmorBody[i].Name);
			Assets.Request<Texture2D>(TextureAssets.ArmorArm[i].Name);
		}
	}

	public void LoadArmorLegs(int i)
	{
		if (TextureAssets.ArmorLeg[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.ArmorLeg[i].Name);
		}
	}

	public void LoadAccHandsOn(int i)
	{
		bool flag = !ArmorIDs.HandOn.Sets.UsesNewFramingCode[i];
		if (ArmorIDs.HandOn.Sets.UsesOldFramingTexturesForWalking[i])
		{
			flag = true;
		}
		if (flag && TextureAssets.AccHandsOn[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccHandsOn[i].Name);
		}
		if (ArmorIDs.HandOn.Sets.UsesNewFramingCode[i] && TextureAssets.AccHandsOnComposite[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccHandsOnComposite[i].Name);
		}
	}

	public void LoadAccHandsOff(int i)
	{
		if (!ArmorIDs.HandOff.Sets.UsesNewFramingCode[i] && TextureAssets.AccHandsOff[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccHandsOff[i].Name);
		}
		if (ArmorIDs.HandOff.Sets.UsesNewFramingCode[i] && TextureAssets.AccHandsOffComposite[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccHandsOffComposite[i].Name);
		}
	}

	public void LoadAccBack(int i)
	{
		if (TextureAssets.AccBack[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccBack[i].Name);
		}
	}

	public void LoadAccFront(int i)
	{
		if (TextureAssets.AccFront[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccFront[i].Name);
		}
	}

	public void LoadAccShoes(int i)
	{
		if (TextureAssets.AccShoes[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccShoes[i].Name);
		}
	}

	public void LoadAccWaist(int i)
	{
		if (TextureAssets.AccWaist[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccWaist[i].Name);
		}
	}

	public void LoadAccShield(int i)
	{
		if (TextureAssets.AccShield[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccShield[i].Name);
		}
	}

	public void LoadAccNeck(int i)
	{
		if (TextureAssets.AccNeck[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccNeck[i].Name);
		}
	}

	public void LoadAccFace(int i)
	{
		if (TextureAssets.AccFace[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccFace[i].Name);
		}
	}

	public void LoadAccBalloon(int i)
	{
		if (TextureAssets.AccBalloon[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccBalloon[i].Name);
		}
	}

	public void LoadAccBeard(int i)
	{
		if (TextureAssets.AccBeard[i].State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.AccBeard[i].Name);
		}
	}

	public void LoadFlameRing()
	{
		if (TextureAssets.FlameRing.State == AssetState.NotLoaded)
		{
			Assets.Request<Texture2D>(TextureAssets.FlameRing.Name);
		}
	}

	protected void DrawSurfaceBG()
	{
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_038c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0392: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_0292: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_1296: Unknown result type (might be due to invalid IL or missing references)
		//IL_129f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_163f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1646: Unknown result type (might be due to invalid IL or missing references)
		//IL_1650: Unknown result type (might be due to invalid IL or missing references)
		//IL_1655: Unknown result type (might be due to invalid IL or missing references)
		//IL_1697: Unknown result type (might be due to invalid IL or missing references)
		//IL_169c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a62: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a67: Unknown result type (might be due to invalid IL or missing references)
		//IL_067d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0680: Unknown result type (might be due to invalid IL or missing references)
		//IL_0685: Unknown result type (might be due to invalid IL or missing references)
		//IL_1090: Unknown result type (might be due to invalid IL or missing references)
		//IL_1095: Unknown result type (might be due to invalid IL or missing references)
		//IL_109a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ecf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ee8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10af: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c05: Unknown result type (might be due to invalid IL or missing references)
		//IL_06da: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0705: Unknown result type (might be due to invalid IL or missing references)
		//IL_070c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0718: Unknown result type (might be due to invalid IL or missing references)
		//IL_071e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0760: Unknown result type (might be due to invalid IL or missing references)
		//IL_0763: Unknown result type (might be due to invalid IL or missing references)
		//IL_0768: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11da: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1238: Unknown result type (might be due to invalid IL or missing references)
		//IL_1252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0940: Unknown result type (might be due to invalid IL or missing references)
		//IL_0961: Unknown result type (might be due to invalid IL or missing references)
		//IL_096b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0972: Unknown result type (might be due to invalid IL or missing references)
		//IL_097e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0984: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		if ((!remixWorld || (gameMenu && !WorldGen.remixWorldGen)) && (!WorldGen.remixWorldGen || !WorldGen.drunkWorldGen))
		{
			flag = true;
		}
		if (mapFullscreen)
		{
			flag = false;
		}
		Color colorOfSurfaceBackgroundsBase = ColorOfSurfaceBackgroundsBase;
		int num = 30;
		if (gameMenu)
		{
			num = 0;
		}
		if (WorldGen.drunkWorldGen)
		{
			num = -180;
		}
		float num12 = (float)worldSurface;
		if (num12 == 0f)
		{
			num12 = 1f;
		}
		_ = screenPosition;
		float num17 = screenPosition.Y + (float)(screenHeight / 2) - 600f;
		double num18 = (num17 - screenOff / 2f) / (num12 * 16f);
		num18 = 0f - MathHelper.Lerp((float)num18, 1f, 0f);
		num18 = (0f - num17 + screenOff / 2f) / (num12 * 16f);
		float num19 = 2f;
		int num20 = 0;
		float num21 = SkyManager.Instance.ProcessCloudAlpha() * atmo;
		if (flag && (double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int i = 0; i < 200; i++)
			{
				if (cloud[i].active && cloud[i].scale < 1f)
				{
					Color color = cloud[i].cloudColor(ColorOfTheSkies);
					float num22 = cloud[i].scale * 0.8f;
					float num23 = (cloud[i].scale + 1f) / 2f * 0.9f;
					((Color)(ref color)).R = (byte)((float)(int)((Color)(ref color)).R * num22);
					((Color)(ref color)).G = (byte)((float)(int)((Color)(ref color)).G * num23);
					float num2 = cloud[i].position.Y * ((float)screenHeight / 600f);
					num2 = cloud[i].position.Y + (float)(int)(num18 * 750.0 + 830.0) + (float)(int)scAdj + (float)num20;
					spriteBatch.Draw(TextureAssets.Cloud[cloud[i].type].Value, new Vector2(cloud[i].position.X + (float)TextureAssets.Cloud[cloud[i].type].Width() * 0.5f, num2 + (float)TextureAssets.Cloud[cloud[i].type].Height() * 0.5f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Cloud[cloud[i].type].Width(), TextureAssets.Cloud[cloud[i].type].Height()), color * num21, cloud[i].rotation, new Vector2((float)TextureAssets.Cloud[cloud[i].type].Width() * 0.5f, (float)TextureAssets.Cloud[cloud[i].type].Height() * 0.5f), cloud[i].scale, cloud[i].spriteDir, 0f);
				}
			}
		}
		if (invasionType == 4 && !SkyManager.Instance["Martian"].IsActive())
		{
			SkyManager.Instance.Activate("Martian", default(Vector2));
		}
		else if (invasionType != 4 && SkyManager.Instance["Martian"].IsActive())
		{
			SkyManager.Instance.Deactivate("Martian");
		}
		SkyManager.Instance.ResetDepthTracker();
		bgParallax = 0.15;
		int num3 = -180;
		bool flag2 = true;
		int num4 = 0;
		if (gameMenu)
		{
			num4 -= num3;
		}
		num20 = num4;
		num20 += num;
		if (!WorldGen.drunkWorldGen && flag && (double)(screenPosition.Y / 16f) <= worldSurface + 10.0)
		{
			if (BackgroundEnabled)
			{
				if (cloudBGActive > 0f)
				{
					cloudBGAlpha += 0.0005f * (float)desiredWorldEventsUpdateRate;
					if (cloudBGAlpha > 1f)
					{
						cloudBGAlpha = 1f;
					}
				}
				else
				{
					cloudBGAlpha -= 0.0005f * (float)desiredWorldEventsUpdateRate;
					if (cloudBGAlpha < 0f)
					{
						cloudBGAlpha = 0f;
					}
				}
				if (cloudBGAlpha > 0f)
				{
					LoadBackground(cloudBG[0]);
					LoadBackground(cloudBG[1]);
					float num5 = cloudBGAlpha;
					if (num5 > 1f)
					{
						num5 = 1f;
					}
					bgScale = 1.65f;
					bgParallax = 0.09000000357627869;
					if (((Game)this).IsActive && !gamePaused)
					{
						cloudBGX[0] += windSpeedCurrent * (float)bgParallax * 9f * (float)desiredWorldEventsUpdateRate;
					}
					if (cloudBGX[0] > (float)backgroundWidth[cloudBG[0]] * bgScale)
					{
						cloudBGX[0] -= (float)backgroundWidth[cloudBG[0]] * bgScale;
					}
					if (cloudBGX[0] < (float)(-backgroundWidth[cloudBG[0]]) * bgScale)
					{
						cloudBGX[0] += (float)backgroundWidth[cloudBG[0]] * bgScale;
					}
					float num6 = (float)backgroundWidth[cloudBG[0]] * bgScale;
					bgTopY = (int)(num18 * 900.0 + 600.0) + (int)scAdj + num20;
					if (gameMenu)
					{
						bgTopY = -150 + num20;
					}
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, num6) - (double)(num6 / 2f) - (double)num6);
					bgStartX += (int)cloudBGX[0];
					bgLoops = screenWidth / (int)num6 + 2 + 2;
					ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * num5;
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					for (int j = 0; j < bgLoops; j++)
					{
						spriteBatch.Draw(TextureAssets.Background[cloudBG[0]].Value, new Vector2((float)bgStartX + num6 * (float)j, (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[cloudBG[0]], backgroundHeight[cloudBG[0]]), ColorOfSurfaceBackgroundsModified * num21, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
					}
					num5 = cloudBGAlpha * 1.5f;
					if (num5 > 1f)
					{
						num5 = 1f;
					}
					ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * num5;
					bgScale = 1.85f;
					bgParallax = 0.12;
					if (((Game)this).IsActive && !gamePaused)
					{
						cloudBGX[1] += windSpeedCurrent * (float)bgParallax * 9f * (float)desiredWorldEventsUpdateRate;
					}
					if (cloudBGX[1] > (float)backgroundWidth[cloudBG[1]] * bgScale)
					{
						cloudBGX[1] -= (float)backgroundWidth[cloudBG[1]] * bgScale;
					}
					if (cloudBGX[1] < (float)(-backgroundWidth[cloudBG[1]]) * bgScale)
					{
						cloudBGX[1] += (float)backgroundWidth[cloudBG[1]] * bgScale;
					}
					num6 = (float)backgroundWidth[cloudBG[1]] * bgScale;
					bgTopY = (int)(num18 * 1100.0 + 750.0) + (int)scAdj + num20;
					if (gameMenu)
					{
						bgTopY = -50 + num20;
					}
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, num6) - (double)(num6 / 2f) - (double)num6);
					bgStartX += (int)cloudBGX[1];
					bgLoops = screenWidth / (int)num6 + 2 + 2;
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					for (int k = 0; k < bgLoops; k++)
					{
						spriteBatch.Draw(TextureAssets.Background[cloudBG[1]].Value, new Vector2((float)bgStartX + num6 * (float)k, (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[cloudBG[1]], backgroundHeight[cloudBG[1]]), ColorOfSurfaceBackgroundsModified * num21, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
					}
				}
				DrawSurfaceBG_BackMountainsStep1(num18, num19, num20);
			}
			cTop = bgTopY - 50;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int l = 0; l < 200; l++)
				{
					if (cloud[l].active && (double)cloud[l].scale < 1.15 && cloud[l].scale >= 1f)
					{
						Color color2 = cloud[l].cloudColor(ColorOfTheSkies);
						if (atmo < 1f)
						{
							color2 *= atmo;
						}
						float num7 = cloud[l].position.Y * ((float)screenHeight / 600f);
						float num8 = (float)((double)(screenPosition.Y / 16f - 24f) / worldSurface);
						if (num8 < 0f)
						{
							num8 = 0f;
						}
						if (num8 > 1f)
						{
							num8 = 1f;
						}
						if (gameMenu)
						{
							num8 = 1f;
						}
						spriteBatch.Draw(TextureAssets.Cloud[cloud[l].type].Value, new Vector2(cloud[l].position.X + (float)TextureAssets.Cloud[cloud[l].type].Width() * 0.5f, num7 + (float)TextureAssets.Cloud[cloud[l].type].Height() * 0.5f + cTop + 200f), (Rectangle?)new Rectangle(0, 0, TextureAssets.Cloud[cloud[l].type].Width(), TextureAssets.Cloud[cloud[l].type].Height()), color2 * num21, cloud[l].rotation, new Vector2((float)TextureAssets.Cloud[cloud[l].type].Width() * 0.5f, (float)TextureAssets.Cloud[cloud[l].type].Height() * 0.5f), cloud[l].scale, cloud[l].spriteDir, 0f);
					}
				}
			}
			if (SceneMetrics.HolyTileCount > 0 && BackgroundEnabled)
			{
				bgParallax = 0.17;
				bgScale = 1.1f;
				bgTopY = (int)(num18 * 1400.0 + 900.0) + (int)scAdj + num20;
				SetBackgroundOffsets(18, num18, num20);
				bgScale *= num19;
				bgWidthScaled = (int)((double)(2100f * bgScale) * 1.05);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				bgLoops = screenWidth / bgWidthScaled + 2;
				if (gameMenu)
				{
					bgTopY = 230 + num20;
					bgStartX -= 500;
				}
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				Color color3 = colorOfSurfaceBackgroundsBase;
				float num9 = (float)(SceneMetrics.HolyTileCount - SceneMetrics.HallowTileThreshold) / (float)(SceneMetrics.HallowTileMax - SceneMetrics.HallowTileThreshold);
				if (num9 > 0.5f)
				{
					num9 = 0.5f;
				}
				else if (num9 < 0f)
				{
					num9 = 0f;
				}
				((Color)(ref color3)).R = (byte)((float)(int)((Color)(ref color3)).R * num9);
				((Color)(ref color3)).G = (byte)((float)(int)((Color)(ref color3)).G * num9);
				((Color)(ref color3)).B = (byte)((float)(int)((Color)(ref color3)).B * num9);
				((Color)(ref color3)).A = (byte)((float)(int)((Color)(ref color3)).A * num9 * 0.8f);
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					LoadBackground(18);
					LoadBackground(19);
					for (int m = 0; m < bgLoops; m++)
					{
						spriteBatch.Draw(TextureAssets.Background[18].Value, new Vector2((float)(bgStartX + bgWidthScaled * m), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[18], backgroundHeight[18]), color3, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
						spriteBatch.Draw(TextureAssets.Background[19].Value, new Vector2((float)(bgStartX + bgWidthScaled * m + 1900), (float)(bgTopY + 100)), (Rectangle?)new Rectangle(0, 0, backgroundWidth[19], backgroundHeight[19]), color3, 0f, default(Vector2), bgScale * 0.9f, (SpriteEffects)0, 0f);
					}
				}
			}
			if (treeMntBGSet1[1] > -1)
			{
				LoadBackground(treeMntBGSet1[1]);
				bgParallax = 0.2;
				bgScale = 1.15f;
				bgScale *= num19;
				int num10 = backgroundWidth[treeMntBGSet1[1]];
				if (num10 == 0)
				{
					num10 = 1;
				}
				bgWidthScaled = (int)((float)num10 * bgScale);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				bgLoops = screenWidth / bgWidthScaled + 2;
				if (treeMntBGSet1[1] == 172)
				{
					bgLoops++;
				}
				bgTopY = (int)(num18 * 1400.0 + 1260.0) + (int)scAdj + num20;
			}
			if (BackgroundEnabled)
			{
				DrawSurfaceBG_BackMountainsStep2(num20);
			}
			cTop = (float)bgTopY * 1.01f - 150f;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int n = 0; n < 200; n++)
				{
					if (cloud[n].active && cloud[n].scale >= 1.15f)
					{
						Color color4 = cloud[n].cloudColor(ColorOfTheSkies);
						if (atmo < 1f)
						{
							color4 *= atmo;
						}
						float num11 = cloud[n].position.Y * ((float)screenHeight / 600f) - 100f;
						float num13 = (float)((double)(screenPosition.Y / 16f - 24f) / worldSurface);
						if (num13 < 0f)
						{
							num13 = 0f;
						}
						if (num13 > 1f)
						{
							num13 = 1f;
						}
						if (gameMenu)
						{
							num13 = 1f;
						}
						spriteBatch.Draw(TextureAssets.Cloud[cloud[n].type].Value, new Vector2(cloud[n].position.X + (float)TextureAssets.Cloud[cloud[n].type].Width() * 0.5f, num11 + (float)TextureAssets.Cloud[cloud[n].type].Height() * 0.5f + cTop), (Rectangle?)new Rectangle(0, 0, TextureAssets.Cloud[cloud[n].type].Width(), TextureAssets.Cloud[cloud[n].type].Height()), color4 * num21, cloud[n].rotation, new Vector2((float)TextureAssets.Cloud[cloud[n].type].Width() * 0.5f, (float)TextureAssets.Cloud[cloud[n].type].Height() * 0.5f), cloud[n].scale, cloud[n].spriteDir, 0f);
					}
				}
			}
		}
		if (flag2)
		{
			num20 += num3;
		}
		if (flag)
		{
			for (int num14 = 0; num14 < bgAlphaFrontLayer.Length; num14++)
			{
				if (BackgroundEnabled)
				{
					ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFrontLayer[num14];
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 0)
					{
						DrawSurfaceBG_Forest(num18, num19, num20, treeBGSet1);
						DrawSurfaceBG_DrawChangeOverlay(0);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 10)
					{
						DrawSurfaceBG_Forest(num18, num19, num20, treeBGSet2);
						DrawSurfaceBG_DrawChangeOverlay(1);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 11)
					{
						DrawSurfaceBG_Forest(num18, num19, num20, treeBGSet3);
						DrawSurfaceBG_DrawChangeOverlay(2);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 12)
					{
						DrawSurfaceBG_Forest(num18, num19, num20, treeBGSet4);
						DrawSurfaceBG_DrawChangeOverlay(3);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 1)
					{
						int[] bgTexIndexes = corruptBG;
						DrawSurfaceBG_Corrupt(num18, num19, num20, bgTexIndexes);
						DrawSurfaceBG_DrawChangeOverlay(4);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 2)
					{
						int[] bgTexIndexes2 = desertBG;
						DrawSurfaceBG_Desert(num18, num19, num20, bgTexIndexes2);
						DrawSurfaceBG_DrawChangeOverlay(9);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 3)
					{
						int[] bgTexIndexes3 = jungleBG;
						DrawSurfaceBG_Jungle(num18, num19, num20, bgTexIndexes3);
						DrawSurfaceBG_DrawChangeOverlay(5);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 4)
					{
						DrawSurfaceBG_DrawChangeOverlay(10);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 5)
					{
						DrawSurfaceBG_GoodEvilDesert(num18, num19, num20);
						DrawSurfaceBG_DrawChangeOverlay(9);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 6)
					{
						int[] bgTexIndexes4 = hallowBG;
						DrawSurfaceBG_Hallow(num18, num19, num20, bgTexIndexes4);
						DrawSurfaceBG_DrawChangeOverlay(7);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 7)
					{
						int[] bgTexIndexes5 = snowBG;
						DrawSurfaceBG_Snow(num18, num19, num20, bgTexIndexes5);
						DrawSurfaceBG_DrawChangeOverlay(6);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 8)
					{
						int[] bgTexIndexes6 = crimsonBG;
						DrawSurfaceBG_Crimson(num18, num19, num20, bgTexIndexes6);
						DrawSurfaceBG_DrawChangeOverlay(8);
					}
					if (bgAlphaFrontLayer[num14] > 0f && num14 == 9)
					{
						int[] bgTexIndexes7 = mushroomBG;
						DrawSurfaceBG_Mushroom(num18, num19, num20, bgTexIndexes7);
						DrawSurfaceBG_DrawChangeOverlay(11);
					}
					if (num14 >= 14)
					{
						LoaderManager.Get<SurfaceBackgroundStylesLoader>().DrawCloseBackground(num14);
					}
				}
			}
		}
		if (flag2)
		{
			num20 -= num3;
		}
		float num15 = DrawSurfaceBG_GetFogPower();
		if (flag && num15 > 0f && !gameMenu && (double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			bgParallax = 0.1;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, backgroundWidth[background]) - (double)(backgroundWidth[background] / 2));
			bgLoops = screenWidth / backgroundWidth[background] + 2;
			bgStartY = 0;
			bgLoopsY = 0;
			bgTopY = (int)((double)(0f - screenPosition.Y) / (worldSurface * 16.0 - 600.0) * 200.0);
			Texture2D value = TextureAssets.Background[49].Value;
			for (int num16 = 0; num16 < bgLoops; num16++)
			{
				bgStartX = 0;
				Color color5 = ColorOfTheSkies * num15 * atmo;
				int height = Math.Max(screenHeight + 210, value.Height);
				spriteBatch.Draw(value, new Rectangle(bgStartX + value.Width * num16, bgTopY, value.Width, height), color5);
			}
		}
		if (!mapFullscreen)
		{
			SkyManager.Instance.DrawRemainingDepth(spriteBatch);
		}
	}

	private static float DrawSurfaceBG_GetFogPower()
	{
		return Math.Max(cloudAlpha, GraveyardVisualIntensity * 0.92f);
	}

	private void DrawSurfaceBG_DrawBackMountainsLayer(int bgTextureIndex)
	{
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		if (bgTextureIndex >= 0)
		{
			LoadBackground(bgTextureIndex);
			int num = DrawSurfaceBG_GetLayerYOffset(bgTextureIndex);
			bgTopY += num;
			for (int i = 0; i < bgLoops; i++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTextureIndex].Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), GetBackgroundRect(bgTextureIndex), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
			bgTopY -= num;
		}
	}

	private int DrawSurfaceBG_GetLayerYOffset(int bgTextureIndex)
	{
		switch (bgTextureIndex)
		{
		case 59:
			return -550;
		case 93:
		case 168:
		case 169:
		case 170:
			return -50;
		case 171:
			return -100;
		case 172:
			return 130;
		case 176:
			return -760;
		case 177:
			return -200;
		case 179:
			return -100;
		case 180:
		case 181:
		case 182:
		case 183:
			return -350;
		case 246:
			return -150;
		case 247:
			return -150;
		case 263:
			return -700;
		case 269:
			return -100;
		case 270:
			return -50;
		case 271:
			return -300;
		case 272:
			return -380;
		case 277:
			return -260;
		case 278:
			return -120;
		case 280:
			return -170;
		case 281:
			return -300;
		case 283:
			return -800;
		default:
			return 0;
		}
	}

	private float GetForestToForestBackgroundLerperValue()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		return (GlobalTimeWrappedHourly * ((float)Math.PI / 2f)).ToRotationVector2().X * 0.5f + 0.5f;
	}

	private void DrawSurfaceBG_BackMountainsStep1(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0266: Unknown result type (might be due to invalid IL or missing references)
		//IL_026b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		Color colorOfSurfaceBackgroundsBase = ColorOfSurfaceBackgroundsBase;
		bgScale = 1f;
		bgTopY = (int)(backgroundTopMagicNumber * 1300.0 + 1090.0) + (int)scAdj + pushBGTopHack;
		bgScale *= bgGlobalScaleMultiplier;
		bgParallax = 0.15;
		bgWidthScaled = (int)(1024f * bgScale);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		if (bgWidthScaled == 0)
		{
			bgWidthScaled = 1024;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if (gameMenu)
		{
			bgTopY = 100 + pushBGTopHack;
		}
		if (!((double)screenPosition.Y < worldSurface * 16.0 + 16.0))
		{
			return;
		}
		if (bgAlphaFarBackLayer[0] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[0];
			DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet1[0]);
		}
		if (bgAlphaFarBackLayer[10] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[10];
			DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet2[0]);
		}
		if (bgAlphaFarBackLayer[11] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[11];
			DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet3[0]);
		}
		if (bgAlphaFarBackLayer[12] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[12];
			DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet4[0]);
		}
		if (bgAlphaFarBackLayer[1] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[1];
			if (WorldGen.desertBG != 4)
			{
				DrawSurfaceBG_DrawBackMountainsLayer(23);
			}
		}
		if (bgAlphaFarBackLayer[2] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[2];
			DrawSurfaceBG_DrawBackMountainsLayer(24);
		}
		if (bgAlphaFarBackLayer[4] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[4];
			DrawSurfaceBG_DrawBackMountainsLayer(snowMntBG[0]);
		}
		if (bgAlphaFarBackLayer[5] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[5];
			if (WorldGen.crimsonBG != 5)
			{
				DrawSurfaceBG_DrawBackMountainsLayer(24);
			}
		}
		if (bgAlphaFarBackLayer[6] > 0f && WorldGen.hallowBG == 3)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[6];
			DrawSurfaceBG_DrawBackMountainsLayer(246);
		}
		LoaderManager.Get<SurfaceBackgroundStylesLoader>().DrawFarTexture();
		SkyManager.Instance.DrawToDepth(spriteBatch, 5f);
	}

	private void DrawSurfaceBG_BackMountainsStep2(int pushBGTopHack)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0249: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		if (gameMenu)
		{
			bgTopY = 230 + pushBGTopHack;
			bgStartX -= 500;
		}
		Color colorOfSurfaceBackgroundsBase = ColorOfSurfaceBackgroundsBase;
		UpdateOceanWaterLineForAmbience();
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		if (!((double)screenPosition.Y < worldSurface * 16.0 + 16.0))
		{
			return;
		}
		if (bgAlphaFarBackLayer[0] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[0];
			if (treeMntBGSet1[1] > -1)
			{
				DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet1[1]);
			}
		}
		if (bgAlphaFarBackLayer[1] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[1];
			if (WorldGen.desertBG != 4)
			{
				DrawSurfaceBG_DrawBackMountainsLayer(22);
			}
		}
		if (bgAlphaFarBackLayer[2] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[2];
			DrawSurfaceBG_DrawBackMountainsLayer(25);
		}
		if (bgAlphaFarBackLayer[3] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[3];
			DrawSurfaceBG_DrawBackMountainsLayer(oceanBG);
		}
		if (bgAlphaFarBackLayer[4] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[4];
			DrawSurfaceBG_DrawBackMountainsLayer(snowMntBG[1]);
		}
		if (bgAlphaFarBackLayer[5] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[5];
			if (WorldGen.crimsonBG != 5)
			{
				DrawSurfaceBG_DrawBackMountainsLayer(42);
			}
		}
		if (bgAlphaFarBackLayer[6] > 0f && WorldGen.hallowBG == 3)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[6];
			DrawSurfaceBG_DrawBackMountainsLayer(247);
		}
		if (bgAlphaFarBackLayer[10] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[10];
			if (treeMntBGSet2[1] > -1)
			{
				DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet2[1]);
			}
		}
		if (bgAlphaFarBackLayer[11] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[11];
			if (treeMntBGSet3[1] > -1)
			{
				DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet3[1]);
			}
		}
		if (bgAlphaFarBackLayer[12] > 0f)
		{
			ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[12];
			if (treeMntBGSet4[1] > -1)
			{
				DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet4[1]);
			}
		}
		LoaderManager.Get<SurfaceBackgroundStylesLoader>().DrawMiddleTexture();
	}

	private void UpdateOceanWaterLineForAmbience()
	{
		int num = DrawSurfaceBG_GetLayerYOffset(oceanBG);
		int num2 = 0;
		switch (oceanBG)
		{
		case 28:
		case 110:
		case 111:
		case 209:
		case 210:
			num2 = 102;
			break;
		case 283:
			num2 = 124;
			break;
		}
		float yScreenPosition = (float)(bgTopY + num) + (float)num2 * bgScale;
		AmbientSkyDrawCache.Instance.SetOceanLineInfo(yScreenPosition, bgAlphaFarBackLayer[3]);
	}

	private void DrawSurfaceBG_Mushroom(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
	{
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0312: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_0601: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_0636: Unknown result type (might be due to invalid IL or missing references)
		//IL_063f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0651: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_05df: Unknown result type (might be due to invalid IL or missing references)
		//IL_086a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0879: Unknown result type (might be due to invalid IL or missing references)
		//IL_0882: Unknown result type (might be due to invalid IL or missing references)
		//IL_0888: Unknown result type (might be due to invalid IL or missing references)
		float num = 0.33f;
		Vector3 vector = default(Vector3);
		((Vector3)(ref vector))._002Ector(0.1f, 0.15f, 0.3f);
		float num2 = 0.5f;
		Vector3 vector2 = default(Vector3);
		((Vector3)(ref vector2))._002Ector(0.1f, 0.175f, 0.3f);
		float num3 = 0.75f;
		Vector3 vector3 = default(Vector3);
		((Vector3)(ref vector3))._002Ector(0.125f, 0.2f, 0.3f);
		num = 0.5f;
		num2 = 0.625f;
		num3 = 0.75f;
		vector *= 3f;
		vector2 *= 3f;
		vector3 *= 3f;
		float num4 = (float)(int)((Color)(ref ColorOfSurfaceBackgroundsModified)).A / 255f;
		Color colorOfSurfaceBackgroundsModified = ColorOfSurfaceBackgroundsModified;
		float num5 = (float)rand.Next(28, 42) * 0.001f;
		num5 += (float)(270 - mouseTextColor) / 5000f;
		float x = vector.X;
		float num6 = vector.Y + num5 / 2f;
		float num7 = vector.Z + num5;
		x *= 255f;
		num6 *= 255f;
		num7 *= 255f;
		x *= num * num4;
		num6 *= num * num4;
		num7 *= num * num4;
		if (x > 255f)
		{
			x = 255f;
		}
		if (num6 > 255f)
		{
			num6 = 255f;
		}
		if (num7 > 255f)
		{
			num7 = 255f;
		}
		if (x > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).R)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).R = (byte)x;
		}
		if (num6 > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).G)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).G = (byte)num6;
		}
		if (num7 > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).B)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).B = (byte)num7;
		}
		bgScale = 1.25f;
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[0]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
		bgParallax = 0.4;
		SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1400.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
		if (gameMenu)
		{
			bgTopY = 320 + pushBGTopHack;
		}
		if (bgWidthScaled != 0)
		{
			bgLoops = screenWidth / bgWidthScaled + 2;
		}
		if (TextureAssets.Background[bgTexIndexes[0]].Value == null)
		{
			return;
		}
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int i = 0; i < bgLoops; i++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), GetBackgroundRect(bgTexIndexes[0]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
		colorOfSurfaceBackgroundsModified = ColorOfSurfaceBackgroundsModified;
		num5 = (float)rand.Next(28, 42) * 0.001f;
		num5 += (float)(270 - mouseTextColor) / 5000f;
		x = vector2.X;
		num6 = vector2.Y + num5 / 2f;
		num7 = vector2.Z + num5;
		x *= 255f;
		num6 *= 255f;
		num7 *= 255f;
		x *= num2 * num4;
		num6 *= num2 * num4;
		num7 *= num2 * num4;
		if (x > 255f)
		{
			x = 255f;
		}
		if (num6 > 255f)
		{
			num6 = 255f;
		}
		if (num7 > 255f)
		{
			num7 = 255f;
		}
		if (x > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).R)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).R = (byte)x;
		}
		if (num6 > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).G)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).G = (byte)num6;
		}
		if (num7 > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).B)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).B = (byte)num7;
		}
		bgScale = 1.32f;
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[1]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
		bgParallax = 0.43;
		SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1675.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
		if (gameMenu)
		{
			bgTopY = 400 + pushBGTopHack;
			bgStartX -= 80;
		}
		if (bgWidthScaled == 0)
		{
			return;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int j = 0; j < bgLoops; j++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), GetBackgroundRect(bgTexIndexes[1]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
		colorOfSurfaceBackgroundsModified = ColorOfSurfaceBackgroundsModified;
		num5 = (float)rand.Next(28, 42) * 0.001f;
		num5 += (float)(270 - mouseTextColor) / 3000f;
		x = vector3.X;
		num6 = vector3.Y + num5 / 2f;
		num7 = vector3.Z + num5;
		x *= 255f * num4 * num3;
		num6 *= 255f * num4 * num3;
		num7 *= 255f * num4 * num3;
		if (x > 255f)
		{
			x = 255f;
		}
		if (num6 > 255f)
		{
			num6 = 255f;
		}
		if (num7 > 255f)
		{
			num7 = 255f;
		}
		if (x > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).R)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).R = (byte)x;
		}
		if (num6 > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).G)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).G = (byte)num6;
		}
		if (num7 > (float)(int)((Color)(ref colorOfSurfaceBackgroundsModified)).B)
		{
			((Color)(ref colorOfSurfaceBackgroundsModified)).B = (byte)num7;
		}
		bgScale = 1.36f;
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[2]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
		bgParallax = 0.49;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 1950.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		if (bgWidthScaled == 0)
		{
			return;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int k = 0; k < bgLoops; k++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(bgStartX + bgWidthScaled * k), (float)bgTopY), GetBackgroundRect(bgTexIndexes[2]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f);
	}

	private void DrawSurfaceBG_Crimson(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
	{
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0375: Unknown result type (might be due to invalid IL or missing references)
		//IL_0528: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0559: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		if (bgTexIndexes[0] > -1)
		{
			bgScale = 1.25f;
			bgParallax = 0.4;
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[0]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (bgTexIndexes[0] == 105)
			{
				bgTopY += 50;
			}
			if (bgTexIndexes[0] == 174)
			{
				bgTopY -= 350;
			}
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[0]], backgroundHeight[bgTexIndexes[0]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
				}
			}
		}
		if (bgTexIndexes[1] > -1)
		{
			bgScale = 1.31f;
			bgParallax = 0.43;
			bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[1]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 400 + pushBGTopHack;
				bgStartX -= 80;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < bgLoops; j++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[1]], backgroundHeight[bgTexIndexes[1]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
				}
			}
		}
		bgScale = 1.34f;
		bgParallax = 0.49;
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[2]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if (bgTexIndexes[2] == 175)
		{
			bgStartX -= 1000;
			bgTopY -= 400;
			bgLoops++;
		}
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int k = 0; k < bgLoops; k++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(bgStartX + bgWidthScaled * k), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[2]], backgroundHeight[bgTexIndexes[2]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
	}

	private void DrawSurfaceBG_Snow(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
	{
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0504: Unknown result type (might be due to invalid IL or missing references)
		//IL_051f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0529: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		if (bgTexIndexes[0] >= 0)
		{
			bgScale = 1.25f;
			bgParallax = 0.4;
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[0]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[0]);
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[0]], backgroundHeight[bgTexIndexes[0]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
				}
			}
		}
		if (bgTexIndexes[1] >= 0)
		{
			bgScale = 1.31f;
			bgParallax = 0.43;
			bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[1]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 400 + pushBGTopHack;
				bgStartX -= 80;
			}
			bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[1]);
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < bgLoops; j++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[1]], backgroundHeight[bgTexIndexes[1]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
				}
			}
		}
		if (bgTexIndexes[2] < 0)
		{
			return;
		}
		bgScale = 1.34f;
		bgParallax = 0.49;
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[2]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[2]);
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int k = 0; k < bgLoops; k++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(bgStartX + bgWidthScaled * k), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[2]], backgroundHeight[bgTexIndexes[2]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
	}

	private void SetBackgroundOffsets(int backgroundID, double backgroundTopMagicNumber, int pushBGTopHack)
	{
		int num = 0;
		int num2 = 0;
		switch (backgroundID)
		{
		case 18:
			if (WorldGen.hallowBG == 3)
			{
				bgParallax = 0.17;
				bgScale = 1.1f;
				num = 1400;
				num2 = 1100;
			}
			break;
		case 258:
			bgScale = 1.25f;
			bgParallax = 0.23;
			num = 1800;
			num2 = 850;
			break;
		case 259:
			bgScale = 1.31f;
			bgParallax = 0.33;
			num = 1950;
			num2 = 1500;
			break;
		case 260:
			bgScale = 1.34f;
			bgParallax = 0.4;
			num = 2100;
			num2 = 1650;
			break;
		case 263:
			bgScale = 1.25f;
			bgParallax = 0.23;
			num = 1800;
			num2 = 1450;
			break;
		case 264:
			bgScale = 1.31f;
			bgParallax = 0.33;
			num = 1950;
			num2 = 1700;
			break;
		case 265:
			bgScale = 1.34f;
			bgParallax = 0.4;
			num = 2100;
			num2 = 2000;
			break;
		case 267:
			bgScale = 1.25f;
			bgParallax = 0.23;
			num = 1700;
			num2 = 1300;
			break;
		case 266:
			bgScale = 1.31f;
			bgParallax = 0.33;
			num = 1950;
			num2 = 1600;
			break;
		case 268:
			bgScale = 1.34f;
			bgParallax = 0.41;
			num = 2100;
			num2 = 1850;
			break;
		case 248:
			bgScale = 1.3f;
			bgParallax = 0.37;
			num = 1800;
			num2 = 1100;
			break;
		case 249:
			bgScale = 1.4f;
			bgParallax = 0.43;
			num = 1950;
			num2 = 1200;
			break;
		case 250:
			bgScale = 1.7f;
			bgParallax = 0.49;
			num = 2000;
			num2 = 1000;
			break;
		case 255:
			bgScale = 1.15f;
			bgParallax = 0.25;
			num = 1800;
			num2 = 1450;
			break;
		case 256:
			bgScale = 1.21f;
			bgParallax = 0.32;
			num = 1950;
			num2 = 1550;
			break;
		case 257:
			bgScale = 1.34f;
			bgParallax = 0.4;
			num = 2100;
			num2 = 1550;
			break;
		case 240:
			bgScale = 1.15f;
			bgParallax = 0.3;
			num = 1800;
			num2 = 1500;
			break;
		case 241:
			bgScale = 1.21f;
			bgParallax = 0.43;
			num = 1950;
			num2 = 1300;
			break;
		case 242:
			bgScale = 1.34f;
			bgParallax = 0.49;
			num = 2100;
			num2 = 1400;
			break;
		case 243:
			bgScale = 1.15f;
			bgParallax = 0.25;
			num = 1800;
			num2 = 1400;
			break;
		case 244:
			bgScale = 1.21f;
			bgParallax = 0.35;
			num = 1950;
			num2 = 1550;
			break;
		case 245:
			bgScale = 1.24f;
			bgParallax = 0.45;
			num = 2100;
			num2 = 1650;
			break;
		case 273:
			bgParallax = 0.49000000953674316;
			num = 2100;
			num2 = 1560;
			break;
		case 234:
			bgParallax = 0.23;
			num = 1700;
			num2 = 1150;
			break;
		case 235:
			bgParallax = 0.33;
			num = 1950;
			num2 = 1550;
			break;
		case 236:
			bgParallax = 0.41;
			num = 2100;
			num2 = 2000;
			break;
		case 279:
			bgScale = 2.5f;
			bgParallax = 0.3499999940395355;
			num = 1850;
			num2 = 1750;
			break;
		case 282:
			bgScale = 2.6f;
			bgParallax = 0.25;
			num = 1800;
			num2 = 1340;
			break;
		case 261:
			bgParallax = 0.27;
			break;
		case 262:
			bgParallax = 0.4;
			break;
		case 219:
			bgParallax = 0.25;
			break;
		case 220:
			bgParallax = 0.34;
			break;
		case 221:
			bgParallax = 0.43;
			break;
		case 222:
			num = 1800;
			num2 = 1400;
			break;
		case 223:
			num = 2150;
			num2 = 1850;
			break;
		case 224:
			num = 2500;
			num2 = 2400;
			break;
		case 237:
			num = 1800;
			num2 = 1500;
			break;
		case 238:
			num = 1950;
			num2 = 1500;
			break;
		case 239:
			num = 2100;
			num2 = 1900;
			break;
		case 284:
			bgParallax = 0.23;
			num = 1600;
			num2 = 900;
			break;
		case 285:
			bgParallax = 0.36;
			num = 1900;
			num2 = 960;
			break;
		case 286:
			bgParallax = 0.42;
			num = 2100;
			num2 = 1200;
			break;
		case 287:
			bgParallax = 0.21;
			num = 1700;
			num2 = 1560;
			break;
		case 288:
			bgParallax = 0.33;
			num = 1950;
			num2 = 1730;
			break;
		case 289:
			bgParallax = 0.41;
			num = 2100;
			num2 = 1400;
			break;
		case 207:
			bgParallax = 0.32;
			break;
		}
		if (num != 0 || num2 != 0)
		{
			bgTopY = (int)(backgroundTopMagicNumber * (double)num + (double)num2) + (int)scAdj + pushBGTopHack;
		}
	}

	private void DrawSurfaceBG_Hallow(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
	{
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_030f: Unknown result type (might be due to invalid IL or missing references)
		//IL_048a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0499: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		if (bgTexIndexes[0] > 0)
		{
			bgScale = 1.25f;
			bgParallax = 0.4;
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[0]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1.2f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), GetBackgroundRect(bgTexIndexes[0]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
				}
			}
		}
		if (bgTexIndexes[1] > 0)
		{
			bgScale = 1.31f;
			bgParallax = 0.43;
			bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[1]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 400 + pushBGTopHack;
				bgStartX -= 80;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < bgLoops; j++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), GetBackgroundRect(bgTexIndexes[1]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
				}
			}
		}
		if (bgTexIndexes[2] <= 0)
		{
			return;
		}
		bgScale = 1.34f;
		bgParallax = 0.49;
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[2]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int k = 0; k < bgLoops; k++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(bgStartX + bgWidthScaled * k), (float)bgTopY), GetBackgroundRect(bgTexIndexes[2]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
	}

	private void DrawSurfaceBG_GoodEvilDesert(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack)
	{
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		LoadBackground(26);
		bgScale = 1.25f;
		bgScale *= bgGlobalScaleMultiplier;
		bgWidthScaled = (int)((float)backgroundWidth[26] * bgScale);
		bgParallax = 0.37;
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1750.0) + (int)scAdj + pushBGTopHack;
		if (gameMenu)
		{
			bgTopY = 320 + pushBGTopHack;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int i = 0; i < bgLoops; i++)
			{
				spriteBatch.Draw(TextureAssets.Background[26].Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[26], backgroundHeight[26]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
		bgScale = 1.34f;
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(27);
		bgWidthScaled = (int)((float)backgroundWidth[27] * bgScale);
		bgParallax = 0.49;
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)scAdj + pushBGTopHack;
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int j = 0; j < bgLoops; j++)
			{
				spriteBatch.Draw(TextureAssets.Background[27].Value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[27], backgroundHeight[27]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
	}

	private void DrawSurfaceBG_Jungle(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
	{
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0375: Unknown result type (might be due to invalid IL or missing references)
		//IL_0525: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_0546: Unknown result type (might be due to invalid IL or missing references)
		LoadBackground(bgTexIndexes[0]);
		bgScale = 1.25f;
		bgScale *= bgGlobalScaleMultiplier;
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
		bgParallax = 0.4;
		SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1660.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
		if (gameMenu)
		{
			bgTopY = 320 + pushBGTopHack;
		}
		if (bgTexIndexes[0] == 59)
		{
			bgTopY -= 200;
		}
		bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[0]);
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int i = 0; i < bgLoops; i++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), GetBackgroundRect(bgTexIndexes[0]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
		LoadBackground(bgTexIndexes[1]);
		bgScale = 1.31f;
		bgScale *= bgGlobalScaleMultiplier;
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
		bgParallax = 0.43;
		SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1840.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
		if (gameMenu)
		{
			bgTopY = 400 + pushBGTopHack;
			bgStartX -= 80;
		}
		if (bgTexIndexes[1] == 60)
		{
			bgTopY -= 175;
		}
		bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[1]);
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int j = 0; j < bgLoops; j++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), GetBackgroundRect(bgTexIndexes[1]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)1, 0f);
			}
		}
		bgScale = 1.34f;
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[2]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
		bgParallax = 0.49;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2060.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		if (bgTexIndexes[2] == 61)
		{
			bgTopY -= 150;
		}
		bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[2]);
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int k = 0; k < bgLoops; k++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(bgStartX + bgWidthScaled * k), (float)bgTopY), GetBackgroundRect(bgTexIndexes[2]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
	}

	private void DrawSurfaceBG_Desert(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
	{
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0332: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e9: Unknown result type (might be due to invalid IL or missing references)
		if (bgTexIndexes[0] > 0)
		{
			bgScale = 1.25f;
			bgParallax = 0.37;
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1750.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			LoadBackground(bgTexIndexes[0]);
			bgScale *= bgGlobalScaleMultiplier;
			float num = (float)backgroundWidth[bgTexIndexes[0]] * bgScale;
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, num) - (double)(num / 2f));
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			bgLoops = screenWidth / (int)num + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)bgStartX + num * (float)i, (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[0]], backgroundHeight[bgTexIndexes[0]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
				}
			}
		}
		if (bgTexIndexes[1] > 0)
		{
			bgScale = 1.34f;
			bgParallax = 0.49;
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[1]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < bgLoops; j++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[1]], backgroundHeight[bgTexIndexes[1]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
				}
			}
		}
		if (bgTexIndexes[2] <= 0)
		{
			return;
		}
		bgScale = 1.34f;
		bgParallax = 0.49;
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[2]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int k = 0; k < bgLoops; k++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(bgStartX + bgWidthScaled * k), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[2]], backgroundHeight[bgTexIndexes[2]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
	}

	private void DrawSurfaceBG_DrawChangeOverlay(int backgroundAreaId)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.MagicPixel.Value;
		float flashPower = WorldGen.BackgroundsCache.GetFlashPower(backgroundAreaId);
		Color color = Color.Black * flashPower;
		spriteBatch.Draw(value, new Rectangle(0, 0, screenWidth, screenHeight), color);
	}

	private void DrawSurfaceBG_Corrupt(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
	{
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0535: Unknown result type (might be due to invalid IL or missing references)
		//IL_0550: Unknown result type (might be due to invalid IL or missing references)
		//IL_055a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0566: Unknown result type (might be due to invalid IL or missing references)
		//IL_056c: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		bgScale = 1.25f;
		bgParallax = 0.4;
		bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[0]);
		if (backgroundWidth[bgTexIndexes[0]] == 0 || backgroundHeight[bgTexIndexes[0]] == 0)
		{
			return;
		}
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		if (gameMenu)
		{
			bgTopY = 320 + pushBGTopHack;
		}
		if (bgTexIndexes[0] == 56)
		{
			bgTopY -= 100;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int i = 0; i < bgLoops; i++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[0]], backgroundHeight[bgTexIndexes[0]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
		bgScale = 1.31f;
		bgParallax = 0.43;
		bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[1]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		if (gameMenu)
		{
			bgTopY = 400 + pushBGTopHack;
			bgStartX -= 80;
		}
		if (bgTexIndexes[0] == 56)
		{
			bgTopY -= 100;
		}
		if (bgWidthScaled == 0)
		{
			bgWidthScaled = 1;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			try
			{
				Texture2D value = TextureAssets.Background[bgTexIndexes[1]].Value;
				if (value != null)
				{
					for (int j = 0; j < bgLoops; j++)
					{
						spriteBatch.Draw(value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[1]], backgroundHeight[bgTexIndexes[1]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)1, 0f);
					}
				}
			}
			catch
			{
				LoadBackground(bgTexIndexes[1]);
			}
		}
		bgScale = 1.34f;
		bgParallax = 0.49;
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		bgScale *= bgGlobalScaleMultiplier;
		LoadBackground(bgTexIndexes[2]);
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
		if (bgWidthScaled == 0)
		{
			bgWidthScaled = 150;
		}
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		if (bgTexIndexes[0] == 56)
		{
			bgTopY -= 100;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int k = 0; k < bgLoops; k++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(bgStartX + bgWidthScaled * k), (float)bgTopY), (Rectangle?)new Rectangle(0, 0, backgroundWidth[bgTexIndexes[2]], backgroundHeight[bgTexIndexes[2]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
	}

	private Rectangle? GetBackgroundRect(int backgroundTextureIndex)
	{
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector(0, 0, 1, 1);
		switch (backgroundTextureIndex)
		{
		case 235:
			num = (int)(GetBackgroundCounter() / 20) % 4;
			rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2);
			((Rectangle)(ref rectangle)).Inflate(0, -2);
			return rectangle;
		case 219:
		case 220:
		case 221:
		case 271:
		case 272:
		case 273:
			num = (int)(GetBackgroundCounter() / 15) % 4;
			rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2);
			((Rectangle)(ref rectangle)).Inflate(0, -2);
			return rectangle;
		case 281:
			num = (int)(GetBackgroundCounter() / 5) % 4;
			rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2);
			((Rectangle)(ref rectangle)).Inflate(0, -2);
			return rectangle;
		default:
			return null;
		}
	}

	private uint GetBackgroundCounter()
	{
		if (!gameMenu)
		{
			return GameUpdateCount;
		}
		return (uint)(GlobalTimeWrappedHourly * 40f);
	}

	private void DrawSurfaceBG_Forest(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
	{
		//IL_0536: Unknown result type (might be due to invalid IL or missing references)
		//IL_0545: Unknown result type (might be due to invalid IL or missing references)
		//IL_0551: Unknown result type (might be due to invalid IL or missing references)
		//IL_0557: Unknown result type (might be due to invalid IL or missing references)
		//IL_0769: Unknown result type (might be due to invalid IL or missing references)
		//IL_0778: Unknown result type (might be due to invalid IL or missing references)
		//IL_0784: Unknown result type (might be due to invalid IL or missing references)
		//IL_078a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		bgScale = 1.25f;
		bgParallax = 0.4;
		bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
		if (bgTexIndexes[0] == 91)
		{
			bgParallax = 0.27000001072883606;
			bgScale = 1.2f;
		}
		if (bgTexIndexes[0] == 173)
		{
			bgParallax = 0.25;
			bgScale = 1.3f;
		}
		if (bgTexIndexes[0] == 178)
		{
			bgParallax = 0.30000001192092896;
			bgScale = 1.2f;
		}
		if (bgTexIndexes[0] == 184)
		{
			bgParallax = 0.25;
			bgScale = 1.2f;
		}
		if (bgTexIndexes[0] == 282)
		{
			bgScale = 1.4f;
		}
		SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
		bgScale *= bgGlobalScaleMultiplier;
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		if (bgTexIndexes[0] >= 0)
		{
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			LoadBackground(bgTexIndexes[0]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (bgTexIndexes[0] == 91)
			{
				bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)scAdj + pushBGTopHack;
			}
			if (bgTexIndexes[0] == 173)
			{
				bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)scAdj + pushBGTopHack;
			}
			if (bgTexIndexes[0] == 184)
			{
				bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)scAdj + pushBGTopHack;
			}
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			if (bgTexIndexes[0] == 50)
			{
				bgTopY -= 50;
			}
			if (bgTexIndexes[0] == 53)
			{
				bgTopY -= 100;
			}
			if (bgTexIndexes[0] == 91)
			{
				bgTopY += 200;
			}
			if (bgTexIndexes[0] == 173)
			{
				bgTopY += 200;
			}
			if (bgTexIndexes[0] == 178)
			{
				bgTopY += 75;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					if (bgTexIndexes[0] != -1)
					{
						Asset<Texture2D> asset = TextureAssets.Background[bgTexIndexes[0]];
						if (bgTexIndexes[0] == 173)
						{
							int num2 = (int)(GetBackgroundCounter() / 10);
							num2 %= 4;
							int num3 = 251 + num2;
							LoadBackground(num3);
							asset = TextureAssets.Background[num3];
						}
						if (asset.Value != null)
						{
							spriteBatch.Draw(asset.Value, new Vector2((float)(bgStartX + bgWidthScaled * i), (float)bgTopY), GetBackgroundRect(bgTexIndexes[0]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
						}
					}
				}
			}
		}
		if (bgTexIndexes[1] >= 0)
		{
			LoadBackground(bgTexIndexes[1]);
			bgScale = 1.31f;
			bgScale *= bgGlobalScaleMultiplier;
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
			if (bgWidthScaled == 0)
			{
				bgWidthScaled = 1;
			}
			bgParallax = 0.43;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
			if (gameMenu)
			{
				bgTopY = 400 + pushBGTopHack;
				bgStartX -= 80;
			}
			if (bgTexIndexes[1] == 51)
			{
				bgTopY -= 50;
			}
			if (bgTexIndexes[1] == 54)
			{
				bgTopY -= 100;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < bgLoops; j++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2((float)(bgStartX + bgWidthScaled * j), (float)bgTopY), GetBackgroundRect(bgTexIndexes[1]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)1, 0f);
				}
			}
		}
		if (bgTexIndexes[2] < 0)
		{
			return;
		}
		LoadBackground(bgTexIndexes[2]);
		bgScale = 1.34f;
		bgScale *= bgGlobalScaleMultiplier;
		bgParallax = 0.49;
		SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
		SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
		if (bgTexIndexes[0] == 91)
		{
			bgScale = 1.3f;
			bgScale *= bgGlobalScaleMultiplier;
			bgParallax = 0.42;
		}
		if (bgTexIndexes[2] < 0 && WorldGen.drunkWorldGen)
		{
			return;
		}
		bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
		if (bgWidthScaled == 0)
		{
			bgWidthScaled = 1;
		}
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
		bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
		if (gameMenu)
		{
			bgTopY = 480 + pushBGTopHack;
			bgStartX -= 120;
		}
		if (bgTexIndexes[2] == 52)
		{
			bgTopY -= 50;
		}
		if (bgTexIndexes[2] == 55)
		{
			bgTopY -= 100;
		}
		if (bgTexIndexes[2] == 92)
		{
			bgTopY += 150;
		}
		bgLoops = screenWidth / bgWidthScaled + 2;
		if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
		{
			for (int k = 0; k < bgLoops; k++)
			{
				spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2((float)(bgStartX + bgWidthScaled * k), (float)bgTopY), GetBackgroundRect(bgTexIndexes[2]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, (SpriteEffects)0, 0f);
			}
		}
	}

	private void DrawBackgroundBlackFill()
	{
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		float value = (float)(worldSurface + 2.0) * 16f - screenPosition.Y;
		float value2 = (float)maxTilesY * 16f - 2880f - (screenPosition.Y + (float)screenHeight);
		value = MathHelper.Clamp(value, 0f, (float)screenHeight);
		value2 = MathHelper.Clamp(value2, 0f, (float)screenHeight);
		if (value2 - value > 0f)
		{
			spriteBatch.Draw(TextureAssets.BlackTile.Value, new Rectangle(0, (int)value, screenWidth, (int)(value2 - value)), Color.Black);
		}
	}

	public void DrawTileCracks(int crackType, HitTile hitter)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_036c: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_037d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0389: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = default(Vector2);
		((Vector2)(ref vector))._002Ector((float)offScreenRange, (float)offScreenRange);
		if (drawToScreen)
		{
			vector = Vector2.Zero;
		}
		bool flag = ShouldShowInvisibleWalls();
		Rectangle value = default(Rectangle);
		for (int i = 0; i < hitter.data.Length; i++)
		{
			if (hitter.data[i].type != crackType)
			{
				continue;
			}
			int damage = hitter.data[i].damage;
			if (damage < 20)
			{
				continue;
			}
			int x = hitter.data[i].X;
			int y = hitter.data[i].Y;
			if (!WorldGen.InWorld(x, y))
			{
				continue;
			}
			bool flag2 = tile[x, y] != null;
			if (flag2 && crackType == 1)
			{
				flag2 = flag2 && tile[x, y].active() && (flag || !tile[x, y].invisibleBlock());
			}
			if (flag2 && crackType == 2)
			{
				flag2 = flag2 && tile[x, y].wall != 0 && (flag || !tile[x, y].invisibleWall());
			}
			if (!flag2)
			{
				continue;
			}
			bool flag3 = false;
			bool flag4 = false;
			if (TileLoader.IsClosedDoor(tile[x, y]))
			{
				flag3 = false;
			}
			else if (tileSolid[tile[x, y].type] && !tileSolidTop[tile[x, y].type])
			{
				flag3 = true;
			}
			else if (WorldGen.IsTreeType(tile[x, y].type))
			{
				flag4 = true;
				int num = tile[x, y].frameX / 22;
				int num2 = tile[x, y].frameY / 22;
				if (num2 < 9)
				{
					flag3 = ((num != 1 && num != 2) || num2 < 6 || num2 > 8) && (num != 3 || num2 > 2) && (num != 4 || num2 < 3 || num2 > 5) && ((num != 5 || num2 < 6 || num2 > 8) ? true : false);
				}
			}
			else if (tile[x, y].type == 72)
			{
				flag4 = true;
				if (tile[x, y].frameX <= 34)
				{
					flag3 = true;
				}
			}
			if (flag3 && tile[x, y].slope() == 0 && !tile[x, y].halfBrick())
			{
				int num3 = 0;
				if (damage >= 80)
				{
					num3 = 3;
				}
				else if (damage >= 60)
				{
					num3 = 2;
				}
				else if (damage >= 40)
				{
					num3 = 1;
				}
				else if (damage >= 20)
				{
					num3 = 0;
				}
				((Rectangle)(ref value))._002Ector(hitter.data[i].crackStyle * 18, num3 * 18, 16, 16);
				if (flag4)
				{
					value.X = (4 + hitter.data[i].crackStyle / 2) * 18;
				}
				spriteBatch.Draw(TextureAssets.TileCrack.Value, new Vector2((float)(x * 16 - (int)screenPosition.X), (float)(y * 16 - (int)screenPosition.Y)) + vector, (Rectangle?)value, Lighting.GetColor(x, y), 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
		}
	}

	private static void CheckMonoliths()
	{
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		if (dedServ)
		{
			return;
		}
		bool flag = player[myPlayer].ZoneTowerVortex || player[myPlayer].ZoneTowerNebula || player[myPlayer].ZoneTowerStardust || player[myPlayer].ZoneTowerSolar;
		bool stardustMonolithShader = player[myPlayer].stardustMonolithShader;
		bool nebulaMonolithShader = player[myPlayer].nebulaMonolithShader;
		bool vortexMonolithShader = player[myPlayer].vortexMonolithShader;
		bool solarMonolithShader = player[myPlayer].solarMonolithShader;
		bool moonLordMonolithShader = player[myPlayer].moonLordMonolithShader;
		for (int i = 0; i < MonolithFilterNames.Length; i++)
		{
			bool flag2 = !flag && i == SceneMetrics.ActiveMonolithType;
			if ((i == 0 && vortexMonolithShader) || (i == 1 && nebulaMonolithShader) || (i == 2 && stardustMonolithShader) || (i == 3 && solarMonolithShader) || (i == 4 && moonLordMonolithShader))
			{
				flag2 = true;
			}
			if (flag2)
			{
				if (!Terraria.Graphics.Effects.Filters.Scene[MonolithFilterNames[i]].IsActive())
				{
					Terraria.Graphics.Effects.Filters.Scene.Activate(MonolithFilterNames[i], default(Vector2));
				}
				if (!SkyManager.Instance[MonolithSkyNames[i]].IsActive())
				{
					SkyManager.Instance.Activate(MonolithSkyNames[i], default(Vector2));
				}
			}
			else
			{
				if (Terraria.Graphics.Effects.Filters.Scene[MonolithFilterNames[i]].IsActive())
				{
					Terraria.Graphics.Effects.Filters.Scene.Deactivate(MonolithFilterNames[i]);
				}
				if (SkyManager.Instance[MonolithSkyNames[i]].IsActive())
				{
					SkyManager.Instance.Deactivate(MonolithSkyNames[i]);
				}
			}
		}
	}

	private void GraphicsDeviceLost(object sender, EventArgs evt)
	{
	}

	protected override void Draw(GameTime gameTime)
	{
		try
		{
			Draw_Inner(gameTime);
		}
		catch (Exception e)
		{
			Logging.Terraria.Error((object)e);
			throw;
		}
	}

	private void Draw_Inner(GameTime gameTime)
	{
		if (!_isDrawingOrUpdating && IsGraphicsDeviceAvailable)
		{
			_isDrawingOrUpdating = true;
			EnsureRenderTargetContent();
			DoDraw(gameTime);
			if (Main.OnPostDraw != null)
			{
				Main.OnPostDraw(gameTime);
			}
			Assets.TransferCompletedAssets();
			ModContent.TransferCompletedAssets();
			_isDrawingOrUpdating = false;
		}
	}

	private void DoDraw(GameTime gameTime)
	{
		//IL_18ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1720: Unknown result type (might be due to invalid IL or missing references)
		//IL_1734: Unknown result type (might be due to invalid IL or missing references)
		//IL_1739: Unknown result type (might be due to invalid IL or missing references)
		//IL_173e: Unknown result type (might be due to invalid IL or missing references)
		//IL_178a: Unknown result type (might be due to invalid IL or missing references)
		//IL_179e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_194a: Unknown result type (might be due to invalid IL or missing references)
		//IL_198c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a72: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d75: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_0973: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b81: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b86: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b87: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ce0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e39: Unknown result type (might be due to invalid IL or missing references)
		//IL_0efe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f43: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1108: Unknown result type (might be due to invalid IL or missing references)
		//IL_1119: Unknown result type (might be due to invalid IL or missing references)
		//IL_1123: Unknown result type (might be due to invalid IL or missing references)
		//IL_1128: Unknown result type (might be due to invalid IL or missing references)
		//IL_112d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1137: Unknown result type (might be due to invalid IL or missing references)
		//IL_113c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1141: Unknown result type (might be due to invalid IL or missing references)
		//IL_114b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1150: Unknown result type (might be due to invalid IL or missing references)
		//IL_1154: Unknown result type (might be due to invalid IL or missing references)
		//IL_1163: Unknown result type (might be due to invalid IL or missing references)
		//IL_1061: Unknown result type (might be due to invalid IL or missing references)
		//IL_118b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1190: Unknown result type (might be due to invalid IL or missing references)
		//IL_1195: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1209: Unknown result type (might be due to invalid IL or missing references)
		//IL_124f: Unknown result type (might be due to invalid IL or missing references)
		//IL_129a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1311: Unknown result type (might be due to invalid IL or missing references)
		//IL_1015: Unknown result type (might be due to invalid IL or missing references)
		//IL_1017: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_146e: Unknown result type (might be due to invalid IL or missing references)
		//IL_147d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1487: Unknown result type (might be due to invalid IL or missing references)
		//IL_1491: Unknown result type (might be due to invalid IL or missing references)
		//IL_149b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1508: Unknown result type (might be due to invalid IL or missing references)
		//IL_150d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1512: Unknown result type (might be due to invalid IL or missing references)
		//IL_1517: Unknown result type (might be due to invalid IL or missing references)
		//IL_139d: Unknown result type (might be due to invalid IL or missing references)
		//IL_13be: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_161a: Unknown result type (might be due to invalid IL or missing references)
		//IL_161f: Unknown result type (might be due to invalid IL or missing references)
		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();
		if (showSplash)
		{
			DrawSplash(gameTime);
			TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
			TimeLogger.EndDrawFrame();
			return;
		}
		if (_drawCycleCounter == 0L)
		{
			TileFrameSeed = Utils.RandomNextSeed(TileFrameSeed);
		}
		_drawCycleCounter = (_drawCycleCounter + 1) % 5;
		MenuUI.IsVisible = gameMenu && menuMode == 888;
		InGameUI.IsVisible = !gameMenu && InGameUI.CurrentState != null;
		PlayerInput.UpdateMainMouse();
		RefreshPlayerDrawOrder();
		CaptureManager.Instance.DrawTick();
		TimeLogger.NewDrawFrame();
		if (!gameMenu)
		{
			TilesRenderer.PreparePaintForTilesOnScreen();
		}
		for (int i = 0; i < ContentThatNeedsRenderTargets.Count; i++)
		{
			ContentThatNeedsRenderTargets[i].PrepareRenderTarget(((Game)this).GraphicsDevice, spriteBatch);
		}
		TilePaintSystem.PrepareAllRequests();
		TimeLogger.DetailedDrawTime(0);
		if (loadMap)
		{
			refreshMap = false;
			DrawToMap();
			TimeLogger.DetailedDrawTime(1);
		}
		if (Lighting.UpdateEveryFrame)
		{
			drawToScreen = true;
		}
		else
		{
			drawToScreen = false;
		}
		if (drawToScreen && targetSet)
		{
			ReleaseTargets();
		}
		if (!drawToScreen && !targetSet)
		{
			InitTargets();
		}
		fpsCount++;
		if (!((Game)this).IsActive)
		{
			maxQ = true;
		}
		if (!dedServ)
		{
			UpdateDisplaySettings();
			if (Main.OnPreDraw != null)
			{
				Main.OnPreDraw(gameTime);
			}
		}
		drawsCountedForFPS++;
		screenLastPosition = screenPosition;
		if (stackSplit == 0)
		{
			timesTriedToFastStack = 0;
			stackCounter = 0;
			stackDelay = 7;
			superFastStack = 0;
		}
		else
		{
			stackCounter++;
			int num = 30;
			num = ((stackDelay == 7) ? 30 : ((stackDelay == 6) ? 25 : ((stackDelay == 5) ? 20 : ((stackDelay == 4) ? 15 : ((stackDelay != 3) ? 5 : 10)))));
			if (stackCounter >= num)
			{
				stackDelay--;
				if (stackDelay < 2)
				{
					stackDelay = 2;
					superFastStack++;
				}
				if (timesTriedToFastStack < 10)
				{
					superFastStack = 0;
				}
				timesTriedToFastStack++;
				stackCounter = 0;
			}
		}
		if (myPlayer >= 0)
		{
			player[myPlayer].lastMouseInterface = player[myPlayer].mouseInterface;
			player[myPlayer].mouseInterface = false;
		}
		if (mapTime > 0)
		{
			mapTime--;
		}
		if (gameMenu)
		{
			mapTime = mapTimeMax;
		}
		HoverItem = new Item();
		DoDraw_UpdateCameraPosition();
		CheckMonoliths();
		sunCircle += 0.01f;
		if ((double)sunCircle > 6.285)
		{
			sunCircle -= 6.285f;
		}
		TimeLogger.DetailedDrawReset();
		if (!gameMenu)
		{
			waterfallManager.FindWaterfalls();
			TimeLogger.DetailedDrawTime(2);
			if (renderNow)
			{
				screenLastPosition = screenPosition;
				renderNow = false;
				renderCount = 99;
				((Game)this).Draw(gameTime);
				Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
				Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
				RenderTiles();
				sceneTilePos.X = screenPosition.X - (float)offScreenRange;
				sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
				RenderBackground();
				sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
				sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
				RenderWalls();
				sceneWallPos.X = screenPosition.X - (float)offScreenRange;
				sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
				RenderTiles2();
				sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
				sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
				RenderWater();
				sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
				sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
				renderCount = 99;
			}
			else
			{
				if (renderCount == 3)
				{
					RenderTiles();
					sceneTilePos.X = screenPosition.X - (float)offScreenRange;
					sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
				}
				if (renderCount == ((Lighting.LegacyEngine.Mode == 0) ? 2 : 3))
				{
					RenderTiles2();
					sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
					sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
				}
				if (renderCount == ((Lighting.LegacyEngine.Mode != 0) ? 3 : 0))
				{
					RenderWalls();
					sceneWallPos.X = screenPosition.X - (float)offScreenRange;
					sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
				}
				if (renderCount == 2)
				{
					RenderBackground();
					sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
					sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
				}
				if (renderCount == 1)
				{
					RenderWater();
					sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
					sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
				}
			}
			if (render && !gameMenu)
			{
				if (Math.Abs(sceneTilePos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneTilePos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
				{
					RenderTiles();
					sceneTilePos.X = screenPosition.X - (float)offScreenRange;
					sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
				}
				if (Math.Abs(sceneTile2Pos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneTile2Pos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
				{
					RenderTiles2();
					sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
					sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
				}
				if (Math.Abs(sceneBackgroundPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneBackgroundPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
				{
					RenderBackground();
					sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
					sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
				}
				if (Math.Abs(sceneWallPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneWallPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
				{
					RenderWalls();
					sceneWallPos.X = screenPosition.X - (float)offScreenRange;
					sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
				}
				if (Math.Abs(sceneWaterPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneWaterPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
				{
					RenderWater();
					sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
					sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
				}
			}
		}
		if (!loadMap)
		{
			if (!gameMenu)
			{
				TimeLogger.DetailedDrawReset();
				Stopwatch stopwatch2 = new Stopwatch();
				stopwatch2.Start();
				int num12 = 0;
				int x;
				int y;
				while (stopwatch2.ElapsedMilliseconds < 5 && sectionManager.GetNextMapDraw(player[myPlayer].position, out x, out y))
				{
					DrawToMap_Section(x, y);
					num12++;
				}
				TimeLogger.DetailedDrawTime(3);
			}
			if (updateMap)
			{
				if (((Game)this).IsActive || netMode == 1)
				{
					if (refreshMap)
					{
						refreshMap = false;
						sectionManager.ClearMapDraw();
					}
					DrawToMap();
					updateMap = false;
				}
				else if (MapHelper.numUpdateTile > 0)
				{
					DrawToMap();
				}
				TimeLogger.DetailedDrawTime(4);
			}
		}
		bgParallax = 0.1;
		bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, backgroundWidth[background]) - (double)(backgroundWidth[background] / 2));
		bgLoops = screenWidth / backgroundWidth[background] + 2;
		bgStartY = 0;
		bgLoopsY = 0;
		bgTopY = (int)((double)(0f - screenPosition.Y) / (worldSurface * 16.0 - 600.0) * 200.0);
		if (gameMenu || netMode == 2)
		{
			bgTopY = -200;
		}
		double num13 = desiredWorldEventsUpdateRate;
		float num14 = 0.0005f * (float)num13;
		if (gameMenu)
		{
			num14 *= 20f;
		}
		if (raining)
		{
			if (cloudAlpha > maxRaining)
			{
				cloudAlpha -= num14;
				if (cloudAlpha < maxRaining)
				{
					cloudAlpha = maxRaining;
				}
			}
			else if (cloudAlpha < maxRaining)
			{
				cloudAlpha += num14;
				if (cloudAlpha > maxRaining)
				{
					cloudAlpha = maxRaining;
				}
			}
		}
		else
		{
			cloudAlpha -= num14;
			if (cloudAlpha < 0f)
			{
				cloudAlpha = 0f;
			}
		}
		if (gameMenu || netMode == 2)
		{
			bgDelay = 1000;
			SceneMetrics.EvilTileCount = (int)(bgAlphaFrontLayer[1] * (float)SceneMetrics.CorruptionTileMax);
		}
		Color moonColor = Color.White;
		Color sunColor = Color.White;
		float num15 = SceneMetrics.MushroomTileCount / SceneMetrics.MushroomTileMax;
		float num16 = SmoothedMushroomLightInfluence;
		if (num15 > 0f)
		{
			if (num15 > num16)
			{
				num16 += 0.01f;
			}
			if (num15 < num16)
			{
				num16 -= 0.01f;
			}
		}
		else
		{
			num16 -= 0.02f;
		}
		if (num16 < 0f)
		{
			num16 = 0f;
		}
		if (num16 > 1f)
		{
			num16 = 1f;
		}
		SmoothedMushroomLightInfluence = num16;
		InfoToSetBackColor info = default(InfoToSetBackColor);
		info.isInGameMenuOrIsServer = gameMenu || netMode == 2;
		info.CorruptionBiomeInfluence = (float)SceneMetrics.EvilTileCount / (float)SceneMetrics.CorruptionTileMax;
		info.CrimsonBiomeInfluence = (float)SceneMetrics.BloodTileCount / (float)SceneMetrics.CrimsonTileMax;
		info.JungleBiomeInfluence = (float)SceneMetrics.JungleTileCount / (float)SceneMetrics.JungleTileMax;
		info.MushroomBiomeInfluence = SmoothedMushroomLightInfluence;
		info.GraveyardInfluence = GraveyardVisualIntensity;
		info.BloodMoonActive = bloodMoon || SceneMetrics.BloodMoonMonolith;
		info.LanternNightActive = LanternNight.LanternsUp;
		SetBackColor(info, out sunColor, out moonColor);
		if (gameMenu || netMode == 2)
		{
			bgTopY = 0;
		}
		ApplyColorOfTheSkiesToTiles();
		UpdateAtmosphereTransparencyToSkyColor();
		((Game)this).GraphicsDevice.Clear(Color.Black);
		((Game)this).Draw(gameTime);
		float val = (float)screenWidth / (Terraria.ModLoader.ModLoader.removeForcedMinimumZoom ? 8192f : MinimumZoomComparerX);
		float val2 = (float)screenHeight / (Terraria.ModLoader.ModLoader.removeForcedMinimumZoom ? 8192f : MinimumZoomComparerY);
		ForcedMinimumZoom = Math.Max(Math.Max(1f, val), val2);
		GameViewMatrix.Effects = (SpriteEffects)((!gameMenu && player[myPlayer].gravDir != 1f) ? 2 : 0);
		BackgroundViewMatrix.Effects = GameViewMatrix.Effects;
		BackgroundViewMatrix.Zoom = new Vector2(ForcedMinimumZoom);
		GameViewMatrix.Zoom = new Vector2(ForcedMinimumZoom * MathHelper.Clamp(GameZoomTarget, 1f, 2f));
		SystemLoader.ModifyTransformMatrix(ref GameViewMatrix);
		if (gameMenu || player[myPlayer].gravDir == 1f)
		{
			Rasterizer = RasterizerState.CullCounterClockwise;
		}
		else
		{
			Rasterizer = RasterizerState.CullClockwise;
		}
		bool flag = gameMenu;
		if (dontStarveWorld && WorldGen.generatingWorld)
		{
			if (!Terraria.Graphics.Effects.Filters.Scene["Sepia"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene.Activate("Sepia", default(Vector2));
			}
			flag = false;
		}
		else if (flag && Terraria.Graphics.Effects.Filters.Scene["Sepia"].IsActive())
		{
			Terraria.Graphics.Effects.Filters.Scene.Deactivate("Sepia");
		}
		if (Terraria.Graphics.Effects.Filters.Scene["Sepia"].IsInUse())
		{
			flag = false;
		}
		bool flag2 = !(drawToScreen || netMode == 2 || flag) && !mapFullscreen && Lighting.NotRetro && Terraria.Graphics.Effects.Filters.Scene.CanCapture();
		if (flag2)
		{
			Terraria.Graphics.Effects.Filters.Scene.BeginCapture(screenTarget, Color.Black);
		}
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, BackgroundViewMatrix.TransformationMatrix);
		TimeLogger.DetailedDrawReset();
		SceneArea sceneArea = default(SceneArea);
		sceneArea.bgTopY = bgTopY;
		sceneArea.totalHeight = screenHeight;
		sceneArea.totalWidth = screenWidth;
		sceneArea.SceneLocalScreenPositionOffset = Vector2.Zero;
		SceneArea sceneArea2 = sceneArea;
		if (!mapFullscreen)
		{
			unityMouseOver = false;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				Asset<Texture2D> asset = TextureAssets.Background[background];
				Rectangle destinationRectangle = default(Rectangle);
				((Rectangle)(ref destinationRectangle))._002Ector(bgStartX, bgTopY, asset.Width(), Math.Max(screenHeight, asset.Height()));
				if (((Rectangle)(ref destinationRectangle)).Bottom < asset.Height())
				{
					int num17 = asset.Height() - ((Rectangle)(ref destinationRectangle)).Bottom;
					destinationRectangle.Height += num17;
				}
				for (int j = 0; j < bgLoops; j++)
				{
					destinationRectangle.X = bgStartX + asset.Width() * j;
					spriteBatch.Draw(asset.Value, destinationRectangle, ColorOfTheSkies);
				}
				TimeLogger.DetailedDrawTime(6);
			}
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, BackgroundViewMatrix.EffectMatrix);
			if (shimmerAlpha != 1f)
			{
				DrawStarsInBackground(sceneArea2, artificial: false);
			}
			if ((double)(screenPosition.Y / 16f) < worldSurface + 2.0)
			{
				DrawSunAndMoon(sceneArea2, moonColor, sunColor, num16);
			}
			TimeLogger.DetailedDrawTime(7);
		}
		Overlays.Scene.Draw(spriteBatch, RenderLayers.Sky);
		spriteBatch.End();
		Vector2 val3 = screenPosition;
		int num19 = screenWidth;
		int num18 = screenHeight;
		screenWidth = (int)((float)screenWidth / BackgroundViewMatrix.Zoom.X);
		screenHeight = (int)((float)screenHeight / BackgroundViewMatrix.Zoom.Y);
		screenPosition += BackgroundViewMatrix.Translation;
		Matrix transformationMatrix = BackgroundViewMatrix.TransformationMatrix;
		Vector3 translation = ((Matrix)(ref transformationMatrix)).Translation;
		Matrix zoomMatrix = BackgroundViewMatrix.ZoomMatrix;
		((Matrix)(ref transformationMatrix)).Translation = translation - ((Matrix)(ref zoomMatrix)).Translation * new Vector3(1f, ((Enum)BackgroundViewMatrix.Effects).HasFlag((Enum)(object)(SpriteEffects)2) ? (-1f) : 1f, 1f);
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, (Effect)null, transformationMatrix);
		CurrentFrameFlags.Hacks.CurrentBackgroundMatrixForCreditsRoll = transformationMatrix;
		DrawBG();
		screenWidth = num19;
		screenHeight = num18;
		screenPosition = val3;
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, (Effect)null, GameViewMatrix.TransformationMatrix);
		DrawBackgroundBlackFill();
		spriteBatch.End();
		Overlays.Scene.Draw(spriteBatch, RenderLayers.Landscape, beginSpriteBatch: true);
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, (Effect)null, UIScaleMatrix);
		if (gameMenu || netMode == 2)
		{
			spriteBatch.End();
			PreDrawMenu(out var screenSizeCache, out var screenSizeCacheAfterScaling);
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, (Effect)null, UIScaleMatrix);
			DrawMenu(gameTime);
			PostDrawMenu(screenSizeCache, screenSizeCacheAfterScaling);
			TimeLogger.MenuDrawTime(stopwatch.Elapsed.TotalMilliseconds);
			TimeLogger.EndDrawFrame();
			if (flag2)
			{
				Terraria.Graphics.Effects.Filters.Scene.EndCapture(null, screenTarget, screenTargetSwap, Color.Black);
			}
			return;
		}
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		DoLightTiles();
		TimeLogger.DetailedDrawReset();
		if (mapFullscreen)
		{
			if (player[myPlayer].talkNPC >= 0 || player[myPlayer].sign >= 0 || (playerInventory && !CaptureManager.Instance.Active))
			{
				player[myPlayer].ToggleInv();
			}
			DrawMap(gameTime);
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, SamplerStateForCursor, (DepthStencilState)null, (RasterizerState)null, (Effect)null, UIScaleMatrix);
			PlayerInput.SetZoom_UI();
			DrawFPS();
			DrawPlayerChat();
			DrawPendingMouseText();
			DrawCursor(DrawThickCursor());
			PlayerInput.SetZoom_Unscaled();
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, (DepthStencilState)null, (RasterizerState)null, (Effect)null);
			TimeLogger.MapDrawTime(stopwatch.Elapsed.TotalMilliseconds);
			TimeLogger.EndDrawFrame();
			PlayerInput.SetDesiredZoomContext(ZoomContext.Unscaled);
			CaptureManager.Instance.Update();
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Draw(spriteBatch);
			}
			spriteBatch.End();
			if (mouseLeft)
			{
				mouseLeftRelease = false;
			}
			else
			{
				mouseLeftRelease = true;
			}
			return;
		}
		if (shimmerAlpha > 0f)
		{
			spriteBatch.Draw(TextureAssets.MagicPixel.Value, Vector2.Zero, (Rectangle?)null, Color.Black * shimmerAlpha, 0f, Vector2.Zero, new Vector2(Camera.UnscaledSize.X + (float)(offScreenRange * 2), Camera.UnscaledSize.Y + (float)(offScreenRange * 2)), (SpriteEffects)0, 0f);
		}
		Overlays.Scene.Draw(spriteBatch, RenderLayers.InWorldUI);
		_ = Color.White;
		if (drawToScreen)
		{
			DrawWaters(isBackground: true);
		}
		else
		{
			spriteBatch.Draw((Texture2D)(object)backWaterTarget, sceneBackgroundPos - screenPosition, Color.White);
			TimeLogger.DetailedDrawTime(11);
		}
		Overlays.Scene.Draw(spriteBatch, RenderLayers.BackgroundWater);
		float x2 = (sceneBackgroundPos.X - screenPosition.X + (float)offScreenRange) * caveParallax - (float)offScreenRange;
		if (shimmerAlpha > 0f)
		{
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, (DepthStencilState)null, (RasterizerState)null, (Effect)null);
			PlayerInput.SetZoom_Unscaled();
			DrawStarsInBackground(sceneArea2, artificial: true);
			spriteBatch.End();
			PlayerInput.SetDesiredZoomContext(ZoomContext.World);
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		}
		if (drawToScreen)
		{
			tileBatch.Begin();
			DrawBackground();
			tileBatch.End();
		}
		else
		{
			spriteBatch.Draw((Texture2D)(object)backgroundTarget, new Vector2(x2, sceneBackgroundPos.Y - screenPosition.Y), Color.White);
			TimeLogger.DetailedDrawTime(12);
		}
		Overlays.Scene.Draw(spriteBatch, RenderLayers.Background);
		ScreenDarkness.DrawBack(spriteBatch);
		magmaBGFrameCounter++;
		if (magmaBGFrameCounter >= 8)
		{
			magmaBGFrameCounter = 0;
			magmaBGFrame++;
			if (magmaBGFrame >= 3)
			{
				magmaBGFrame = 0;
			}
		}
		DoDraw_WallsTilesNPCs();
		Overlays.Scene.Draw(spriteBatch, RenderLayers.TilesAndNPCs);
		if (!mapFullscreen && mapStyle == 2)
		{
			try
			{
				DrawMap(gameTime);
			}
			catch (Exception e)
			{
				if (!ignoreErrors)
				{
					throw;
				}
				TimeLogger.DrawException(e);
			}
		}
		TimeLogger.DetailedDrawReset();
		spriteBatch.End();
		SystemLoader.PostDrawTiles();
		TimeLogger.DetailedDrawTime(35);
		HasInteractibleObjectThatIsNotATile = false;
		SortDrawCacheWorms();
		DrawSuperSpecialProjectiles(DrawCacheFirstFractals);
		DrawCachedProjs(DrawCacheProjsBehindProjectiles);
		DrawProjectiles();
		spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		ParticleSystem_World_BehindPlayers.Settings.AnchorPosition = -screenPosition;
		ParticleSystem_World_BehindPlayers.Draw(spriteBatch);
		spriteBatch.End();
		DrawPlayers_AfterProjectiles();
		DrawCachedProjs(DrawCacheProjsOverPlayers);
		spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		ParticleSystem_World_OverPlayers.Settings.AnchorPosition = -screenPosition;
		ParticleSystem_World_OverPlayers.Draw(spriteBatch);
		spriteBatch.End();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		DrawCachedNPCs(DrawCacheNPCsOverPlayers, behindTiles: false);
		if (!gamePaused)
		{
			essScale += (float)essDir * 0.01f;
			if (essScale > 1f)
			{
				essDir = -1;
				essScale = 1f;
			}
			if ((double)essScale < 0.7)
			{
				essDir = 1;
				essScale = 0.7f;
			}
		}
		DrawItems();
		TimeLogger.DetailedDrawTime(22);
		DrawRain();
		if (ignoreErrors)
		{
			try
			{
				DrawGore();
			}
			catch (Exception e2)
			{
				TimeLogger.DrawException(e2);
			}
		}
		else
		{
			DrawGore();
		}
		spriteBatch.End();
		DrawDust();
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		Overlays.Scene.Draw(spriteBatch, RenderLayers.Entities);
		if (drawToScreen)
		{
			DrawWaters();
			if (WiresUI.Settings.DrawWires)
			{
				DrawWires();
			}
		}
		else
		{
			spriteBatch.Draw((Texture2D)(object)waterTarget, sceneWaterPos - screenPosition, Color.White);
			if (WiresUI.Settings.DrawWires)
			{
				DrawWires();
			}
			TimeLogger.DetailedDrawTime(26);
		}
		if (shimmerAlpha > 0f)
		{
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, (DepthStencilState)null, (RasterizerState)null, (Effect)null, BackgroundViewMatrix.EffectMatrix);
			PlayerInput.SetZoom_Unscaled();
			DrawStarsInForeground(sceneArea2);
			spriteBatch.End();
			PlayerInput.SetDesiredZoomContext(ZoomContext.World);
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		}
		Overlays.Scene.Draw(spriteBatch, RenderLayers.ForegroundWater);
		DrawCachedProjs(DrawCacheProjsOverWiresUI, startSpriteBatch: false);
		DrawInfernoRings();
		ScreenDarkness.DrawFront(spriteBatch);
		MoonlordDeathDrama.DrawWhite(spriteBatch);
		ScreenObstruction.Draw(spriteBatch);
		TimeLogger.DetailedDrawReset();
		spriteBatch.End();
		Overlays.Scene.Draw(spriteBatch, RenderLayers.All, beginSpriteBatch: true);
		if (flag2)
		{
			Terraria.Graphics.Effects.Filters.Scene.EndCapture(null, screenTarget, screenTargetSwap, Color.Black);
		}
		TimeLogger.DetailedDrawTime(36);
		if (!hideUI)
		{
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, (DepthStencilState)null, (RasterizerState)null, (Effect)null, UIScaleMatrix);
			TimeLogger.DetailedDrawReset();
			DrawPlayerChatBubbles();
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, (DepthStencilState)null, (RasterizerState)null, (Effect)null, GameViewMatrix.ZoomMatrix);
			float targetScale = CombatText.TargetScale;
			Vector2 origin = default(Vector2);
			Color color = default(Color);
			for (int k = 0; k < 100; k++)
			{
				if (!combatText[k].active)
				{
					continue;
				}
				int num2 = 0;
				if (combatText[k].crit)
				{
					num2 = 1;
				}
				Vector2 vector2 = FontAssets.CombatText[num2].Value.MeasureString(combatText[k].text);
				((Vector2)(ref origin))._002Ector(vector2.X * 0.5f, vector2.Y * 0.5f);
				float num3 = combatText[k].scale / targetScale;
				float num4 = (int)((Color)(ref combatText[k].color)).R;
				float num5 = (int)((Color)(ref combatText[k].color)).G;
				float num6 = (int)((Color)(ref combatText[k].color)).B;
				float num7 = (int)((Color)(ref combatText[k].color)).A;
				num4 *= num3 * combatText[k].alpha * 0.3f;
				num6 *= num3 * combatText[k].alpha * 0.3f;
				num5 *= num3 * combatText[k].alpha * 0.3f;
				num7 *= num3 * combatText[k].alpha;
				((Color)(ref color))._002Ector((int)num4, (int)num5, (int)num6, (int)num7);
				for (int l = 0; l < 5; l++)
				{
					float num8 = 0f;
					float num9 = 0f;
					switch (l)
					{
					case 0:
						num8 -= targetScale;
						break;
					case 1:
						num8 += targetScale;
						break;
					case 2:
						num9 -= targetScale;
						break;
					case 3:
						num9 += targetScale;
						break;
					default:
						num4 = (float)(int)((Color)(ref combatText[k].color)).R * num3 * combatText[k].alpha;
						num6 = (float)(int)((Color)(ref combatText[k].color)).B * num3 * combatText[k].alpha;
						num5 = (float)(int)((Color)(ref combatText[k].color)).G * num3 * combatText[k].alpha;
						num7 = (float)(int)((Color)(ref combatText[k].color)).A * num3 * combatText[k].alpha;
						((Color)(ref color))._002Ector((int)num4, (int)num5, (int)num6, (int)num7);
						break;
					}
					if (player[myPlayer].gravDir == -1f)
					{
						float num10 = combatText[k].position.Y - screenPosition.Y;
						num10 = (float)screenHeight - num10;
						spriteBatch.DrawString(FontAssets.CombatText[num2].Value, combatText[k].text, new Vector2(combatText[k].position.X - screenPosition.X + num8 + origin.X, num10 + num9 + origin.Y), color, combatText[k].rotation, origin, combatText[k].scale, (SpriteEffects)0, 0f);
					}
					else
					{
						spriteBatch.DrawString(FontAssets.CombatText[num2].Value, combatText[k].text, new Vector2(combatText[k].position.X - screenPosition.X + num8 + origin.X, combatText[k].position.Y - screenPosition.Y + num9 + origin.Y), color, combatText[k].rotation, origin, combatText[k].scale, (SpriteEffects)0, 0f);
					}
				}
			}
			targetScale = PopupText.TargetScale;
			if (targetScale == 0f)
			{
				targetScale = 1f;
			}
			DrawItemTextPopups(targetScale);
			PlayerInput.SetZoom_UI();
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, (DepthStencilState)null, (RasterizerState)null, (Effect)null, UIScaleMatrix);
			DrawNetplayStatusText();
			DrawFPS();
			spriteBatch.End();
			spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, (DepthStencilState)null, (RasterizerState)null, (Effect)null, GameViewMatrix.ZoomMatrix);
			PlayerInput.SetZoom_World();
			if (BlackFadeIn > 0)
			{
				if (BlackFadeIn < 0)
				{
					BlackFadeIn = 0;
				}
				int num11 = BlackFadeIn;
				if (num11 > 255)
				{
					num11 = 255;
				}
				BlackFadeIn -= 25;
				spriteBatch.Draw(TextureAssets.SplashTexture16x9.Value, new Rectangle(0, 0, screenWidth, screenHeight), new Color(0, 0, 0, num11));
			}
			spriteBatch.End();
			if (!mapFullscreen)
			{
				if (ignoreErrors)
				{
					try
					{
						DrawInterface(gameTime);
					}
					catch (Exception e3)
					{
						TimeLogger.DrawException(e3);
					}
				}
				else
				{
					DrawInterface(gameTime);
				}
			}
			TimeLogger.DetailedDrawTime(27);
		}
		else
		{
			maxQ = true;
		}
		TimeLogger.DetailedDrawTime(37);
		if (mouseLeft)
		{
			mouseLeftRelease = false;
		}
		else
		{
			mouseLeftRelease = true;
		}
		if (mouseRight)
		{
			mouseRightRelease = false;
		}
		else
		{
			mouseRightRelease = true;
		}
		if (mouseMiddle)
		{
			mouseMiddleRelease = false;
		}
		else
		{
			mouseMiddleRelease = true;
		}
		if (mouseXButton1)
		{
			mouseXButton1Release = false;
		}
		else
		{
			mouseXButton1Release = true;
		}
		if (mouseXButton2)
		{
			mouseXButton2Release = false;
		}
		else
		{
			mouseXButton2Release = true;
		}
		if (!PlayerInput.Triggers.Current.MouseRight && !PlayerInput.Triggers.Current.MouseLeft && !preventStackSplitReset)
		{
			stackSplit = 0;
		}
		if (stackSplit > 0)
		{
			stackSplit--;
			if (stackSplit == 0)
			{
				preventStackSplitReset = false;
			}
		}
		TimeLogger.RenderTime(renderCount, stopwatch.Elapsed.TotalMilliseconds);
		TimeLogger.EndDrawFrame();
	}

	private static void DrawItemTextPopups(float scaleTarget)
	{
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_041c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0421: Unknown result type (might be due to invalid IL or missing references)
		//IL_0429: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_035f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0366: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_0498: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0501: Unknown result type (might be due to invalid IL or missing references)
		//IL_0510: Unknown result type (might be due to invalid IL or missing references)
		//IL_0518: Unknown result type (might be due to invalid IL or missing references)
		//IL_0524: Unknown result type (might be due to invalid IL or missing references)
		//IL_052e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_0549: Unknown result type (might be due to invalid IL or missing references)
		//IL_055c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0572: Unknown result type (might be due to invalid IL or missing references)
		//IL_0577: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_058e: Unknown result type (might be due to invalid IL or missing references)
		//IL_059a: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_049f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		Vector2 origin = default(Vector2);
		Color color = default(Color);
		Vector2 vector2 = default(Vector2);
		for (int i = 0; i < 20; i++)
		{
			PopupText popupText = Main.popupText[i];
			if (!popupText.active)
			{
				continue;
			}
			string text = popupText.name;
			if (popupText.stack > 1)
			{
				text = text + " (" + popupText.stack + ")";
			}
			Vector2 vector = FontAssets.MouseText.Value.MeasureString(text);
			((Vector2)(ref origin))._002Ector(vector.X * 0.5f, vector.Y * 0.5f);
			float num = popupText.scale / scaleTarget;
			int num5 = (int)(255f - 255f * num);
			float num6 = (int)((Color)(ref popupText.color)).R;
			float num7 = (int)((Color)(ref popupText.color)).G;
			float num8 = (int)((Color)(ref popupText.color)).B;
			float num9 = (int)((Color)(ref popupText.color)).A;
			num6 *= num * popupText.alpha * 0.3f;
			num8 *= num * popupText.alpha * 0.3f;
			num7 *= num * popupText.alpha * 0.3f;
			num9 *= num * popupText.alpha;
			((Color)(ref color))._002Ector((int)num6, (int)num7, (int)num8, (int)num9);
			Color color2 = Color.Black;
			float num10 = 1f;
			Texture2D texture2D = null;
			switch (popupText.context)
			{
			case PopupTextContext.ItemPickupToVoidContainer:
				color2 = new Color(127, 20, 255) * 0.4f;
				num10 = 0.8f;
				break;
			case PopupTextContext.SonarAlert:
				color2 = Color.Blue * 0.4f;
				if (popupText.npcNetID != 0)
				{
					color2 = Color.Red * 0.4f;
				}
				num10 = 1f;
				break;
			}
			float num11 = (float)num5 / 255f;
			for (int j = 0; j < 5; j++)
			{
				color = color2;
				float num12 = 0f;
				float num2 = 0f;
				switch (j)
				{
				case 0:
					num12 -= scaleTarget * 2f;
					break;
				case 1:
					num12 += scaleTarget * 2f;
					break;
				case 2:
					num2 -= scaleTarget * 2f;
					break;
				case 3:
					num2 += scaleTarget * 2f;
					break;
				default:
					color = popupText.color * num * popupText.alpha * num10;
					break;
				}
				if (j < 4)
				{
					num9 = (float)(int)((Color)(ref popupText.color)).A * num * popupText.alpha;
					((Color)(ref color))._002Ector(0, 0, 0, (int)num9);
				}
				if (color2 != Color.Black && j < 4)
				{
					num12 *= 1.3f + 1.3f * num11;
					num2 *= 1.3f + 1.3f * num11;
				}
				float num3 = popupText.position.Y - screenPosition.Y + num2;
				if (player[myPlayer].gravDir == -1f)
				{
					num3 = (float)screenHeight - num3;
				}
				if (color2 != Color.Black && j < 4)
				{
					Color color3 = color2;
					((Color)(ref color3)).A = (byte)MathHelper.Lerp(60f, 127f, Utils.GetLerpValue(0f, 255f, num9, clamped: true));
					spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2(popupText.position.X - screenPosition.X + num12 + origin.X, num3 + origin.Y), Color.Lerp(color, color3, 0.5f), popupText.rotation, origin, popupText.scale, (SpriteEffects)0, 0f);
					spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2(popupText.position.X - screenPosition.X + num12 + origin.X, num3 + origin.Y), color3, popupText.rotation, origin, popupText.scale, (SpriteEffects)0, 0f);
				}
				else
				{
					spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2(popupText.position.X - screenPosition.X + num12 + origin.X, num3 + origin.Y), color, popupText.rotation, origin, popupText.scale, (SpriteEffects)0, 0f);
				}
				if (texture2D != null)
				{
					float scale = (1.3f - num11) * popupText.scale * 0.7f;
					((Vector2)(ref vector2))._002Ector(popupText.position.X - screenPosition.X + num12 + origin.X, num3 + origin.Y);
					Color color4 = color2 * 0.6f;
					if (j == 4)
					{
						color4 = Color.White * 0.6f;
					}
					((Color)(ref color4)).A = (byte)((float)(int)((Color)(ref color4)).A * 0.5f);
					int num4 = 25;
					spriteBatch.Draw(texture2D, vector2 + new Vector2(origin.X * -0.5f - (float)num4 - texture2D.Size().X / 2f, 0f), (Rectangle?)null, color4 * popupText.scale, 0f, texture2D.Size() / 2f, scale, (SpriteEffects)0, 0f);
					spriteBatch.Draw(texture2D, vector2 + new Vector2(origin.X * 0.5f + (float)num4 + texture2D.Size().X / 2f, 0f), (Rectangle?)null, color4 * popupText.scale, 0f, texture2D.Size() / 2f, scale, (SpriteEffects)0, 0f);
				}
			}
		}
	}

	private static void DoDraw_UpdateCameraPosition()
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_089c: Unknown result type (might be due to invalid IL or missing references)
		//IL_089e: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0902: Unknown result type (might be due to invalid IL or missing references)
		//IL_0907: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_09ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_09f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0920: Unknown result type (might be due to invalid IL or missing references)
		//IL_0922: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0931: Unknown result type (might be due to invalid IL or missing references)
		//IL_0933: Unknown result type (might be due to invalid IL or missing references)
		//IL_0938: Unknown result type (might be due to invalid IL or missing references)
		//IL_093d: Unknown result type (might be due to invalid IL or missing references)
		//IL_093f: Unknown result type (might be due to invalid IL or missing references)
		//IL_094b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_031f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0324: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a52: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a57: Unknown result type (might be due to invalid IL or missing references)
		//IL_0986: Unknown result type (might be due to invalid IL or missing references)
		//IL_098b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a79: Unknown result type (might be due to invalid IL or missing references)
		//IL_09a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_09aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bcc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ae7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0af5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_0442: Unknown result type (might be due to invalid IL or missing references)
		//IL_044c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_0462: Unknown result type (might be due to invalid IL or missing references)
		//IL_046c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_0476: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0481: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ac6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		Vector3 vector = default(Vector3);
		((Vector3)(ref vector))._002Ector(1f, 1f, 1f);
		Vector3 vector2 = Vector3.One / vector;
		if (gameMenu || netMode == 2)
		{
			return;
		}
		int num = 21;
		if (cameraX != 0f && !Main.player[myPlayer].pulley)
		{
			cameraX = 0f;
		}
		if (cameraX > 0f)
		{
			cameraX -= 1f;
			if (cameraX < 0f)
			{
				cameraX = 0f;
			}
		}
		if (cameraX < 0f)
		{
			cameraX += 1f;
			if (cameraX > 0f)
			{
				cameraX = 0f;
			}
		}
		Vector2 value = screenPosition;
		screenPosition.X = Main.player[myPlayer].position.X + (float)Main.player[myPlayer].width * 0.5f - (float)(screenWidth / 2) * vector2.X + cameraX;
		screenPosition.Y = Main.player[myPlayer].position.Y + (float)Main.player[myPlayer].height - (float)num - (float)(screenHeight / 2) * vector2.Y + Main.player[myPlayer].gfxOffY;
		Vector2 vector3 = Vector2.Zero;
		float num10 = 0f;
		float num12 = 0f;
		float num13 = 36f;
		bool flag = false;
		Vector2 vector4 = Vector2.Zero;
		if (!Main.player[myPlayer].dead)
		{
			if (DroneCameraTracker.TryTracking(out var cameraPosition))
			{
				vector3 = cameraPosition - LocalPlayer.Center;
				if (LocalPlayer.gravDir == -1f)
				{
					vector3.Y *= -1f;
				}
				vector4 = vector3;
				vector3 = CurrentPan * 0.87f + vector3 * 0.13f;
				flag = true;
				_cameraPanHasBlackTransition = true;
			}
			else if (LocalGolfState != null && (LocalGolfState.ShouldCameraTrackBallLastKnownLocation || LocalGolfState.IsTrackingBall))
			{
				if (LocalGolfState.IsTrackingBall)
				{
					Projectile lastHitBall = LocalGolfState.GetLastHitBall();
					vector3 = lastHitBall.Center - LocalPlayer.Center;
					vector4 = vector3;
					_cameraPanHasBlackTransition = true;
					if (((Vector2)(ref lastHitBall.velocity)).Length() > 20f)
					{
						num13 *= 2f;
					}
					vector3 = CurrentPan * 0.87f + vector3 * 0.13f;
					flag = true;
				}
				else if (LocalGolfState.ShouldCameraTrackBallLastKnownLocation)
				{
					Vector2? lastBallLocation = LocalGolfState.GetLastBallLocation();
					if (lastBallLocation.HasValue)
					{
						vector3 = lastBallLocation.Value - LocalPlayer.Center;
						vector4 = vector3;
						_cameraPanHasBlackTransition = true;
						vector3 = CurrentPan * 0.87f + vector3 * 0.13f;
						flag = true;
					}
				}
			}
			else if ((Main.player[myPlayer].noThrow <= 0 && !Main.player[myPlayer].lastMouseInterface) || !(CurrentPan == Vector2.Zero))
			{
				if (PlayerInput.UsingGamepad)
				{
					Player player = Main.player[myPlayer];
					if (((Vector2)(ref PlayerInput.GamepadThumbstickRight)).Length() != 0f || !SmartCursorIsUsed)
					{
						float num14 = -1f;
						if (player.inventory[player.selectedItem].type == 1254 && player.scope)
						{
							num14 = 0.8f;
						}
						else if (player.inventory[player.selectedItem].type == 1254)
						{
							num14 = 2f / 3f;
						}
						else if (player.inventory[player.selectedItem].type == 1299)
						{
							num14 = 2f / 3f;
						}
						else if (player.scope)
						{
							num14 = 0.5f;
						}
						PlayerLoader.ModifyZoom(LocalPlayer, ref num14);
						Vector2 vector5 = (MouseScreen - new Vector2((float)screenWidth, (float)screenHeight) / 2f) / (new Vector2((float)screenWidth, (float)screenHeight) / 2f);
						num13 = 48f;
						if (vector5 != Vector2.Zero && num14 != -1f)
						{
							Vector2 vector6 = new Vector2((float)screenWidth, (float)screenHeight) * 0.5f * vector5 * num14;
							vector3.X = vector6.X;
							vector3.Y = vector6.Y;
							flag = true;
						}
					}
				}
				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1254 && Main.player[myPlayer].scope && mouseRight)
				{
					int num15 = mouseX;
					int num16 = mouseY;
					if (num15 > screenWidth)
					{
						num15 = screenWidth;
					}
					if (num15 < 0)
					{
						num15 = 0;
					}
					if (num16 > screenHeight)
					{
						num16 = screenHeight;
					}
					if (num16 < 0)
					{
						num16 = 0;
					}
					float zoom = 0.8f;
					PlayerLoader.ModifyZoom(LocalPlayer, ref zoom);
					vector3.X = (float)(num15 - screenWidth / 2) * zoom;
					vector3.Y = (float)(num16 - screenHeight / 2) * zoom;
					flag = true;
				}
				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1254 && mouseRight)
				{
					int num17 = mouseX;
					int num18 = mouseY;
					if (num17 > screenWidth)
					{
						num17 = screenWidth;
					}
					if (num17 < 0)
					{
						num17 = 0;
					}
					if (num18 > screenHeight)
					{
						num18 = screenHeight;
					}
					if (num18 < 0)
					{
						num18 = 0;
					}
					float zoom2 = 2f / 3f;
					PlayerLoader.ModifyZoom(LocalPlayer, ref zoom2);
					vector3.X = (float)(num17 - screenWidth / 2) * zoom2;
					vector3.Y = (float)(num18 - screenHeight / 2) * zoom2;
					flag = true;
				}
				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1299 && Main.player[myPlayer].selectedItem != 58)
				{
					int num2 = mouseX;
					int num3 = mouseY;
					if (num2 > screenWidth)
					{
						num2 = screenWidth;
					}
					if (num2 < 0)
					{
						num2 = 0;
					}
					if (num3 > screenHeight)
					{
						num3 = screenHeight;
					}
					if (num3 < 0)
					{
						num3 = 0;
					}
					float zoom3 = 2f / 3f;
					PlayerLoader.ModifyZoom(LocalPlayer, ref zoom3);
					vector3.X = (float)(num2 - screenWidth / 2) * zoom3;
					vector3.Y = (float)(num3 - screenHeight / 2) * zoom3;
					flag = true;
				}
				else if (Main.player[myPlayer].scope && mouseRight)
				{
					int num4 = mouseX;
					int num5 = mouseY;
					if (num4 > screenWidth)
					{
						num4 = screenWidth;
					}
					if (num4 < 0)
					{
						num4 = 0;
					}
					if (num5 > screenHeight)
					{
						num5 = screenHeight;
					}
					if (num5 < 0)
					{
						num5 = 0;
					}
					float zoom4 = 0.5f;
					PlayerLoader.ModifyZoom(Main.player[myPlayer], ref zoom4);
					vector3.X = (float)(num4 - screenWidth / 2) / 2f;
					vector3.Y = (float)(num5 - screenHeight / 2) / 2f;
					flag = true;
				}
				else
				{
					float zoom5 = -1f;
					PlayerLoader.ModifyZoom(LocalPlayer, ref zoom5);
					if (zoom5 != -1f)
					{
						int mouseXClamped = Utils.Clamp(mouseX, 0, screenWidth);
						int mouseYClamped = Utils.Clamp(mouseY, 0, screenHeight);
						vector3.X = (float)(mouseXClamped - screenWidth / 2) * zoom5;
						vector3.Y = (float)(mouseYClamped - screenHeight / 2) * zoom5;
						flag = true;
					}
				}
			}
		}
		if (float.IsNaN(CurrentPan.X))
		{
			CurrentPan.X = 0f;
		}
		if (float.IsNaN(CurrentPan.Y))
		{
			CurrentPan.Y = 0f;
		}
		Vector2 value2 = vector3 - CurrentPan;
		float num6 = ((Vector2)(ref value2)).Length();
		float amount = 1f;
		if (num12 > num10 + 0.0001f)
		{
			amount = MathHelper.Clamp((num6 - num10) / (num12 - num10), 0f, 1f);
		}
		float value3 = MathHelper.SmoothStep(0f, num6, amount);
		value3 = MathHelper.Clamp(value3, 0f, num13);
		Vector2 val;
		if (CurrentPan == Vector2.Zero && _cameraPanHasBlackTransition && vector4 != Vector2.Zero)
		{
			Vector2 vector7 = vector4 - CurrentPan;
			float num19 = Math.Abs(vector7.X);
			float num7 = Math.Abs(vector7.Y);
			float num8 = ((Vector2)(ref vector7)).Length();
			if (num19 >= (float)(screenWidth / 2) || num7 >= (float)(screenHeight / 2))
			{
				val = new Vector2((float)screenWidth, (float)screenHeight);
				if (num8 >= ((Vector2)(ref val)).Length() / 2f + 100f)
				{
					renderNow = true;
					CurrentPan = vector4;
					_cameraPanHasBlackTransition = false;
					NPC.ResetNetOffsets();
					BlackFadeIn = 255;
					if (mapTime < 5)
					{
						mapTime = 5;
					}
					maxQ = true;
					Lighting.Clear();
					instantBGTransitionCounter = 10;
					LocalPlayer.ForceUpdateBiomes();
				}
			}
		}
		if (vector3 == Vector2.Zero && !flag)
		{
			float num20 = Math.Abs(value2.X);
			float num9 = Math.Abs(value2.Y);
			float num11 = ((Vector2)(ref value2)).Length();
			if (num20 >= (float)(screenWidth / 2) || num9 >= (float)(screenHeight / 2))
			{
				renderNow = true;
				CurrentPan *= 0.9f;
				if (_cameraPanHasBlackTransition)
				{
					val = new Vector2((float)screenWidth, (float)screenHeight);
					if (num11 >= ((Vector2)(ref val)).Length() / 2f + 100f)
					{
						_cameraPanHasBlackTransition = false;
						NPC.ResetNetOffsets();
						BlackFadeIn = 255;
						if (mapTime < 5)
						{
							mapTime = 5;
						}
						maxQ = true;
						Lighting.Clear();
						CurrentPan = Vector2.Zero;
						instantBGTransitionCounter = 10;
						LocalPlayer.ForceUpdateBiomes();
					}
				}
			}
			else if (value3 > 0.0001f)
			{
				CurrentPan += Vector2.Normalize(value2) * value3;
			}
		}
		else if (value3 > 0.0001f)
		{
			CurrentPan += Vector2.Normalize(value2) * value3;
		}
		screenPosition.X += CurrentPan.X;
		screenPosition.Y += CurrentPan.Y * Main.player[myPlayer].gravDir;
		if (cameraLerp > 0f)
		{
			if (Vector2.Distance(value, screenPosition) - ((Vector2)(ref Main.player[myPlayer].velocity)).Length() < 0.25f || (cameraGamePadLerp && !PlayerInput.UsingGamepad))
			{
				cameraLerp = 0f;
				cameraGamePadLerp = false;
			}
			else
			{
				screenPosition = Vector2.Lerp(value, screenPosition, cameraLerp);
			}
		}
		instance.CameraModifiers.ApplyTo(ref screenPosition);
		PlayerLoader.ModifyScreenPosition(LocalPlayer);
		SystemLoader.ModifyScreenPosition();
		screenPosition.X = (int)screenPosition.X;
		screenPosition.Y = (int)screenPosition.Y;
		ClampScreenPositionToWorld();
	}

	public static bool IsItDay()
	{
		if (remixWorld)
		{
			return false;
		}
		return dayTime;
	}

	public static double starGameMath(double value = 1.0)
	{
		if (!starGame)
		{
			return 1.0;
		}
		double num = (double)starsHit / 200.0;
		if (num > 1.0)
		{
			num = 1.0;
		}
		return 1.0 + num * value;
	}

	private void DrawSunAndMoon(SceneArea sceneArea, Color moonColor, Color sunColor, float tempMushroomInfluence)
	{
		//IL_0835: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0500: Unknown result type (might be due to invalid IL or missing references)
		//IL_0505: Unknown result type (might be due to invalid IL or missing references)
		//IL_0513: Unknown result type (might be due to invalid IL or missing references)
		//IL_0519: Unknown result type (might be due to invalid IL or missing references)
		//IL_051e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0523: Unknown result type (might be due to invalid IL or missing references)
		//IL_083a: Unknown result type (might be due to invalid IL or missing references)
		//IL_083f: Unknown result type (might be due to invalid IL or missing references)
		//IL_084b: Unknown result type (might be due to invalid IL or missing references)
		//IL_053b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0553: Unknown result type (might be due to invalid IL or missing references)
		//IL_055d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05da: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0601: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_062e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0655: Unknown result type (might be due to invalid IL or missing references)
		//IL_065f: Unknown result type (might be due to invalid IL or missing references)
		//IL_067c: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0720: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_074b: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0451: Unknown result type (might be due to invalid IL or missing references)
		//IL_045b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0460: Unknown result type (might be due to invalid IL or missing references)
		//IL_046e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0474: Unknown result type (might be due to invalid IL or missing references)
		//IL_0479: Unknown result type (might be due to invalid IL or missing references)
		//IL_047e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0486: Unknown result type (might be due to invalid IL or missing references)
		//IL_0492: Unknown result type (might be due to invalid IL or missing references)
		//IL_0496: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ea: Unknown result type (might be due to invalid IL or missing references)
		Texture2D value = TextureAssets.Sun.Value;
		int num = moonType;
		if (!TextureAssets.Moon.IndexInRange(num))
		{
			num = Utils.Clamp(num, 0, 8);
		}
		Texture2D value2 = TextureAssets.Moon[num].Value;
		int num6 = sceneArea.bgTopY;
		int num7 = (int)(time / 54000.0 * (double)(sceneArea.totalWidth + (float)(value.Width * 2))) - value.Width;
		int num8 = 0;
		float num9 = 1f;
		float rotation = (float)(time / 54000.0) * 2f - 7.3f;
		int num10 = (int)(time / 32400.0 * (double)(sceneArea.totalWidth + (float)(value2.Width * 2))) - value2.Width;
		int num11 = 0;
		float num12 = 1f;
		float num13 = (float)(time / 32400.0) * 2f - 7.3f;
		if (dayTime)
		{
			double num2;
			if (time < 27000.0)
			{
				num2 = Math.Pow(1.0 - time / 54000.0 * 2.0, 2.0);
				num8 = (int)((double)num6 + num2 * 250.0 + 180.0);
			}
			else
			{
				num2 = Math.Pow((time / 54000.0 - 0.5) * 2.0, 2.0);
				num8 = (int)((double)num6 + num2 * 250.0 + 180.0);
			}
			num9 = (float)(1.2 - num2 * 0.4);
		}
		else
		{
			double num3;
			if (time < 16200.0)
			{
				num3 = Math.Pow(1.0 - time / 32400.0 * 2.0, 2.0);
				num11 = (int)((double)num6 + num3 * 250.0 + 180.0);
			}
			else
			{
				num3 = Math.Pow((time / 32400.0 - 0.5) * 2.0, 2.0);
				num11 = (int)((double)num6 + num3 * 250.0 + 180.0);
			}
			num12 = (float)(1.2 - num3 * 0.4);
		}
		num9 *= ForcedMinimumZoom;
		num12 *= ForcedMinimumZoom;
		if (starGame)
		{
			if (WorldGen.generatingWorld)
			{
				alreadyGrabbingSunOrMoon = true;
				if (rand.Next(60) == 0)
				{
					for (int i = 0; i < numStars; i++)
					{
						if (star[i].hidden)
						{
							Star.SpawnStars(i);
						}
					}
				}
				if (dayTime)
				{
					dayTime = false;
					time = 0.0;
				}
			}
			else
			{
				starGame = false;
			}
		}
		else
		{
			starsHit = 0;
		}
		if (dayTime)
		{
			if ((remixWorld && !gameMenu) || WorldGen.remixWorldGen)
			{
				return;
			}
			num9 *= 1.1f;
			float num4 = 1f - tempMushroomInfluence;
			num4 -= cloudAlpha * 1.5f * atmo;
			if (num4 < 0f)
			{
				num4 = 0f;
			}
			Color color = default(Color);
			((Color)(ref color))._002Ector((int)(byte)(255f * num4), (int)(byte)((float)(int)((Color)(ref sunColor)).G * num4), (int)(byte)((float)(int)((Color)(ref sunColor)).B * num4), (int)(byte)(255f * num4));
			Color color2 = default(Color);
			((Color)(ref color2))._002Ector((int)(byte)((float)(int)((Color)(ref sunColor)).R * num4), (int)(byte)((float)(int)((Color)(ref sunColor)).G * num4), (int)(byte)((float)(int)((Color)(ref sunColor)).B * num4), (int)(byte)((float)(int)((Color)(ref sunColor)).B * num4));
			bool flag = false;
			if (eclipse)
			{
				value = TextureAssets.Sun3.Value;
				flag = true;
			}
			else if (!gameMenu && player[myPlayer].head == 12)
			{
				value = TextureAssets.Sun2.Value;
				flag = true;
			}
			if (flag)
			{
				((Color)(ref color2))._002Ector((int)(byte)((float)(int)((Color)(ref sunColor)).R * num4), (int)(byte)((float)(int)((Color)(ref sunColor)).G * num4), (int)(byte)((float)(int)((Color)(ref sunColor)).B * num4), (int)(byte)((float)(((Color)(ref sunColor)).B - 60) * num4));
			}
			Vector2 origin = value.Size() / 2f;
			Vector2 position = new Vector2((float)num7, (float)(num8 + sunModY)) + sceneArea.SceneLocalScreenPositionOffset;
			spriteBatch.Draw(value, position, (Rectangle?)null, color, rotation, origin, num9, (SpriteEffects)0, 0f);
			spriteBatch.Draw(value, position, (Rectangle?)null, color2, rotation, origin, num9, (SpriteEffects)0, 0f);
		}
		if (!dayTime)
		{
			float num5 = 1f - cloudAlpha * 1.5f * atmo;
			if (num5 < 0f)
			{
				num5 = 0f;
			}
			moonColor *= num5;
			Vector2 position2 = new Vector2((float)num10, (float)(num11 + moonModY)) + sceneArea.SceneLocalScreenPositionOffset;
			if (WorldGen.drunkWorldGen)
			{
				spriteBatch.Draw(TextureAssets.SmileyMoon.Value, position2, (Rectangle?)new Rectangle(0, 0, TextureAssets.SmileyMoon.Width(), TextureAssets.SmileyMoon.Height()), moonColor, num13 / 2f + (float)Math.PI, new Vector2((float)(TextureAssets.SmileyMoon.Width() / 2), (float)(TextureAssets.SmileyMoon.Width() / 2)), num12, (SpriteEffects)0, 0f);
			}
			else if (pumpkinMoon)
			{
				spriteBatch.Draw(TextureAssets.PumpkinMoon.Value, position2, (Rectangle?)new Rectangle(0, TextureAssets.PumpkinMoon.Width() * moonPhase, TextureAssets.PumpkinMoon.Width(), TextureAssets.PumpkinMoon.Width()), moonColor, num13, new Vector2((float)(TextureAssets.PumpkinMoon.Width() / 2), (float)(TextureAssets.PumpkinMoon.Width() / 2)), num12, (SpriteEffects)0, 0f);
			}
			else if (snowMoon)
			{
				spriteBatch.Draw(TextureAssets.SnowMoon.Value, position2, (Rectangle?)new Rectangle(0, TextureAssets.SnowMoon.Width() * moonPhase, TextureAssets.SnowMoon.Width(), TextureAssets.SnowMoon.Width()), moonColor, num13, new Vector2((float)(TextureAssets.SnowMoon.Width() / 2), (float)(TextureAssets.SnowMoon.Width() / 2)), num12, (SpriteEffects)0, 0f);
			}
			else if (value2 != TextureAssets.Moon[num].Value)
			{
				spriteBatch.Draw(value2, position2, (Rectangle?)new Rectangle(0, 0, value2.Width, value2.Width), moonColor, num13, new Vector2((float)(value2.Width / 2)), num12, (SpriteEffects)0, 0f);
			}
			else
			{
				spriteBatch.Draw(TextureAssets.Moon[num].Value, position2, (Rectangle?)new Rectangle(0, TextureAssets.Moon[num].Width() * moonPhase, TextureAssets.Moon[num].Width(), TextureAssets.Moon[num].Width()), moonColor, num13, new Vector2((float)(TextureAssets.Moon[num].Width() / 2), (float)(TextureAssets.Moon[num].Width() / 2)), num12, (SpriteEffects)0, 0f);
			}
		}
		Rectangle value3 = ((!dayTime) ? new Rectangle((int)((double)num10 - (double)TextureAssets.Moon[num].Width() * 0.5 * (double)num12), (int)((double)num11 - (double)TextureAssets.Moon[num].Width() * 0.5 * (double)num12 + (double)moonModY), (int)((float)TextureAssets.Moon[num].Width() * num12), (int)((float)TextureAssets.Moon[num].Width() * num12)) : new Rectangle((int)((double)num7 - (double)TextureAssets.Sun.Width() * 0.5 * (double)num9), (int)((double)num8 - (double)TextureAssets.Sun.Height() * 0.5 * (double)num9 + (double)sunModY), (int)((float)TextureAssets.Sun.Width() * num9), (int)((float)TextureAssets.Sun.Width() * num9)));
		((Rectangle)(ref value3)).Offset((int)sceneArea.SceneLocalScreenPositionOffset.X, (int)sceneArea.SceneLocalScreenPositionOffset.Y);
		Rectangle rectangle = default(Rectangle);
		((Rectangle)(ref rectangle))._002Ector(mouseX, mouseY, 1, 1);
		sunModY = (short)((double)sunModY * 0.999);
		moonModY = (short)((double)moonModY * 0.999);
		if (!gameMenu || netMode == 1)
		{
			return;
		}
		if (((Rectangle)(ref rectangle)).Intersects(value3) || alreadyGrabbingSunOrMoon)
		{
			player[myPlayer].mouseInterface = true;
		}
		if ((mouseLeft || starGame) && hasFocus)
		{
			if (!((Rectangle)(ref rectangle)).Intersects(value3) && !alreadyGrabbingSunOrMoon)
			{
				return;
			}
			if (dayTime)
			{
				time = 54000.0 * (double)((float)(mouseX + TextureAssets.Sun.Width()) / ((float)screenWidth + (float)(TextureAssets.Sun.Width() * 2)));
				sunModY = (short)(mouseY - num8);
				if (time > 53990.0)
				{
					time = 53990.0;
				}
			}
			else
			{
				time = 32400.0 * (double)((float)(mouseX + TextureAssets.Moon[num].Width()) / ((float)screenWidth + (float)(TextureAssets.Moon[num].Width() * 2)));
				moonModY = (short)(mouseY - num11);
				if (time > 32390.0)
				{
					time = 32390.0;
				}
			}
			if (time < 10.0)
			{
				time = 10.0;
			}
			alreadyGrabbingSunOrMoon = true;
		}
		else
		{
			alreadyGrabbingSunOrMoon = false;
		}
	}

	private void DrawStarsInBackground(SceneArea sceneArea, bool artificial)
	{
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		if (netMode == 2 || ((double)screenPosition.Y >= worldSurface * 16.0 + 16.0 && shimmerAlpha == 0f))
		{
			return;
		}
		float num = 1f;
		if (GraveyardVisualIntensity > 0f)
		{
			float num2 = 1f - GraveyardVisualIntensity * 1.4f;
			if (num2 <= 0f)
			{
				return;
			}
			num *= num2;
		}
		Color colorOfTheSkies = ColorOfTheSkies;
		if (shimmerAlpha > 0f)
		{
			colorOfTheSkies *= 1f - shimmerAlpha;
		}
		if (remixWorld || !(255f * (1f - cloudAlpha * atmo) - (float)(int)((Color)(ref colorOfTheSkies)).R - 25f <= 0f))
		{
			for (int i = 0; i < numStars; i++)
			{
				DrawStar(ref sceneArea, num, colorOfTheSkies, i, star[i], artificial);
			}
		}
	}

	private void DrawStarsInForeground(SceneArea sceneArea)
	{
	}

	private void DrawStar(ref SceneArea sceneArea, float starOpacity, Color bgColorForStars, int i, Star theStar, bool artificial, bool foreground = false)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_035c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_029f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0303: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0536: Unknown result type (might be due to invalid IL or missing references)
		//IL_0542: Unknown result type (might be due to invalid IL or missing references)
		//IL_054a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_0406: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_0417: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0479: Unknown result type (might be due to invalid IL or missing references)
		//IL_047e: Unknown result type (might be due to invalid IL or missing references)
		//IL_049d: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		if (theStar == null || theStar.hidden)
		{
			return;
		}
		float num = shimmerAlpha;
		Color color = default(Color);
		float num3 = 1f - theStar.fadeIn;
		int num4 = (int)((float)(255 - ((Color)(ref bgColorForStars)).R - 100) * theStar.twinkle * num3);
		int num5 = (int)((float)(255 - ((Color)(ref bgColorForStars)).G - 100) * theStar.twinkle * num3);
		int num6 = (int)((float)(255 - ((Color)(ref bgColorForStars)).B - 100) * theStar.twinkle * num3);
		num4 = (num4 + num6 + num5) / 3;
		if (num4 <= 0)
		{
			return;
		}
		num4 = (int)((double)num4 * 1.4);
		if (num4 > 255)
		{
			num4 = 255;
		}
		num5 = num4;
		num6 = num4;
		((Color)(ref color)).R = (byte)num4;
		((Color)(ref color)).G = (byte)num5;
		((Color)(ref color)).B = (byte)num6;
		color *= starOpacity;
		if (num > 0f)
		{
			Color value = color;
			if (i % 3 == 0)
			{
				((Color)(ref value)).G = (byte)((float)(int)((Color)(ref color)).G * (1f - num * 0f) * theStar.twinkle * theStar.twinkle);
			}
			else if (i % 3 == 1)
			{
				((Color)(ref value)).B = (byte)((float)(int)((Color)(ref color)).B * (1f - num * 0f) * theStar.twinkle * theStar.twinkle);
			}
			else if (i % 3 == 2)
			{
				((Color)(ref value)).R = (byte)((float)(int)((Color)(ref color)).R * (1f - num * 0f) * theStar.twinkle * theStar.twinkle);
			}
			color = Color.Lerp(color, value, num);
			color = ((!artificial) ? (color * (1f - num)) : (color * num));
		}
		Vector2 vector = new Vector2(theStar.position.X / 1920f, theStar.position.Y / 1200f) * new Vector2(sceneArea.totalWidth, sceneArea.totalHeight) + new Vector2(0f, (float)sceneArea.bgTopY) + sceneArea.SceneLocalScreenPositionOffset;
		if (!theStar.falling)
		{
			if (vector.X < 0f)
			{
				vector.X += screenWidth;
			}
			if (vector.X > (float)screenWidth)
			{
				vector.X -= screenWidth;
			}
			if (vector.Y < 0f)
			{
				vector.Y += screenHeight;
			}
			if (vector.Y > (float)screenHeight)
			{
				vector.Y -= screenHeight;
			}
		}
		if (foreground)
		{
			Vector2 val = vector / ScreenSize.ToVector2();
			float fromMax = 0.35f;
			float num7 = Utils.Remap(Vector2.Distance(val, new Vector2(0.5f, 0.5f)), 0f, fromMax, 0f, 1f);
			color *= num7;
			Color color2 = Lighting.GetColor((vector + screenPosition).ToTileCoordinates());
			float num8 = (float)(int)Math.Max(Math.Max(((Color)(ref color2)).R, ((Color)(ref color2)).G), ((Color)(ref color2)).B) / 255f;
			color *= 1f - num8;
		}
		Texture2D value2 = TextureAssets.Star[theStar.type].Value;
		Vector2 origin = value2.Size() / 2f;
		if (theStar.falling)
		{
			theStar.fadeIn = 0f;
			double num9 = theStar.fallTime;
			float num10 = 30f;
			if ((float)num9 > num10)
			{
				num9 = (int)num10;
			}
			for (int j = 1; (double)j < num9; j++)
			{
				Vector2 vector2 = theStar.fallSpeed * (float)j * 0.4f;
				float num2 = theStar.scale * (1f - (float)j * 1f / num10);
				Color color3 = color;
				_ = theStar.rotation;
				color3 *= 1f - (float)j * 1f / num10;
				spriteBatch.Draw(value2, vector - vector2, (Rectangle?)null, color3, theStar.rotation, origin, num2 * theStar.twinkle * ForcedMinimumZoom, (SpriteEffects)0, 0f);
			}
			if (starGame && theStar.fallSpeed.Y > 0f && Vector2.Distance(new Vector2((float)mouseX, (float)mouseY), vector) < 70f)
			{
				starsHit++;
				theStar.fallSpeed = vector - new Vector2((float)mouseX, (float)mouseY);
				((Vector2)(ref theStar.fallSpeed)).Normalize();
				theStar.fallSpeed *= 10f;
				if (theStar.fallSpeed.Y > 0f)
				{
					theStar.fallSpeed.Y *= -1f;
				}
				SoundEngine.PlaySound(38);
				SoundEngine.PlaySound(37);
			}
		}
		spriteBatch.Draw(value2, vector, (Rectangle?)null, color, theStar.rotation, origin, theStar.scale * theStar.twinkle * ForcedMinimumZoom, (SpriteEffects)0, 0f);
	}

	private static void ApplyColorOfTheSkiesToTiles()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		Color colorOfTheSkies = ColorOfTheSkies;
		((Color)(ref tileColor)).A = byte.MaxValue;
		((Color)(ref tileColor)).R = (byte)((((Color)(ref colorOfTheSkies)).R + ((Color)(ref colorOfTheSkies)).G + ((Color)(ref colorOfTheSkies)).B + ((Color)(ref colorOfTheSkies)).R * 7) / 10);
		((Color)(ref tileColor)).G = (byte)((((Color)(ref colorOfTheSkies)).R + ((Color)(ref colorOfTheSkies)).G + ((Color)(ref colorOfTheSkies)).B + ((Color)(ref colorOfTheSkies)).G * 7) / 10);
		((Color)(ref tileColor)).B = (byte)((((Color)(ref colorOfTheSkies)).R + ((Color)(ref colorOfTheSkies)).G + ((Color)(ref colorOfTheSkies)).B + ((Color)(ref colorOfTheSkies)).B * 7) / 10);
		tileColor = SkyManager.Instance.ProcessTileColor(tileColor);
		SystemLoader.ModifySunLightColor(ref tileColor, ref ColorOfTheSkies);
	}

	private static void UpdateAtmosphereTransparencyToSkyColor()
	{
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		float num = (float)maxTilesX / 4200f;
		num *= num;
		atmo = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num)) / (worldSurface / 5.0));
		if (atmo < 0f)
		{
			atmo = 0f;
		}
		if (atmo > 1f)
		{
			atmo = 1f;
		}
		if (gameMenu || netMode == 2)
		{
			atmo = 1f;
		}
		Color colorOfTheSkies = ColorOfTheSkies;
		((Color)(ref colorOfTheSkies)).R = (byte)((float)(int)((Color)(ref colorOfTheSkies)).R * atmo);
		((Color)(ref colorOfTheSkies)).G = (byte)((float)(int)((Color)(ref colorOfTheSkies)).G * atmo);
		((Color)(ref colorOfTheSkies)).B = (byte)((float)(int)((Color)(ref colorOfTheSkies)).B * atmo);
		if ((double)atmo <= 0.01)
		{
			colorOfTheSkies = Color.Transparent;
		}
		ColorOfTheSkies = colorOfTheSkies;
	}

	private void Debug_PrettifyMap()
	{
	}

	private static void DrawNetplayStatusText()
	{
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		if (netMode == 1 && !string.IsNullOrWhiteSpace(Netplay.Connection.StatusText))
		{
			string text = Netplay.Connection.StatusText;
			if (!Netplay.Connection.HideStatusTextPercent)
			{
				text = text + ": " + (int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f) + "%";
			}
			if (_netplayStatusTextSnippets == null || _oldNetplayStatusText != text)
			{
				_netplayStatusTextSnippets = ChatManager.ParseMessage(text, Color.White).ToArray();
				_oldNetplayStatusText = text;
			}
			Vector2 position = default(Vector2);
			((Vector2)(ref position))._002Ector(628f - ChatManager.GetStringSize(FontAssets.MouseText.Value, _netplayStatusTextSnippets, Vector2.One).X * 0.5f + (float)(screenWidth - 800), 84f);
			int hoveredSnippet;
			if (Netplay.Connection.StatusTextHasShadows)
			{
				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, _netplayStatusTextSnippets, position, 0f, Vector2.Zero, Vector2.One, out hoveredSnippet);
			}
			else
			{
				ChatManager.DrawColorCodedString(spriteBatch, FontAssets.MouseText.Value, _netplayStatusTextSnippets, position, new Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor), 0f, Vector2.Zero, Vector2.One, out hoveredSnippet, -1f);
			}
		}
	}

	private void DrawPlayerChatBubbles()
	{
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < 255; i++)
		{
			if (player[i].active && player[i].chatOverhead.timeLeft > 0 && !player[i].dead)
			{
				Vector2 messageSize = player[i].chatOverhead.messageSize;
				Vector2 vec = player[i].Top.ToScreenPosition();
				vec.Y -= messageSize.Y + 2f;
				if (player[myPlayer].gravDir == -1f)
				{
					vec.Y += 2f;
				}
				vec.X -= messageSize.X / 2f;
				vec.Y += player[i].gfxOffY;
				vec = vec.Floor();
				int hoveredSnippet = 0;
				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, player[i].chatOverhead.snippets, vec, 0f, player[i].chatOverhead.color, Vector2.Zero, Vector2.One, out hoveredSnippet);
			}
		}
	}

	private void DrawRainInMenu()
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		bool flag = ((Game)this).IsActive;
		Rectangle[] array = (Rectangle[])(object)new Rectangle[6];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = new Rectangle(i * 4, 0, 2, 40);
		}
		Color color = ColorOfTheSkies * 0.85f;
		for (int j = 0; j < maxRain; j++)
		{
			if (Main.rain[j].active)
			{
				Rain rain = Main.rain[j];
				spriteBatch.Draw(TextureAssets.Rain.Value, rain.position - screenPosition, (Rectangle?)array[rain.type], color, rain.rotation, Vector2.Zero, rain.scale, (SpriteEffects)0, 0f);
				if (flag)
				{
					rain.Update();
				}
			}
		}
	}

	private void DoDraw_WallsTilesNPCs()
	{
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			CacheNPCDraws();
			CacheProjDraws();
			DrawCachedNPCs(DrawCacheNPCsMoonMoon, behindTiles: true);
			DoDraw_WallsAndBlacks();
			DrawWoF();
			DrawBackGore();
			MoonlordDeathDrama.DrawPieces(spriteBatch);
			MoonlordDeathDrama.DrawExplosions(spriteBatch);
			DrawCachedNPCs(DrawCacheNPCsBehindNonSolidTiles, behindTiles: true);
			DoDraw_Tiles_NonSolid();
			tileBatch.Begin(Rasterizer, Transform);
			DoDraw_Waterfalls();
			tileBatch.End();
		}
		catch (Exception e)
		{
			TimeLogger.DrawException(e);
		}
		spriteBatch.End();
		try
		{
			bool detectCreature = player[myPlayer].detectCreature;
			if (!detectCreature)
			{
				DoDraw_DrawNPCsBehindTiles();
			}
			DoDraw_Tiles_Solid();
			if (detectCreature)
			{
				DoDraw_DrawNPCsBehindTiles();
			}
			DrawPlayers_BehindNPCs();
			DoDraw_DrawNPCsOverTiles();
			TimeLogger.DetailedDrawReset();
		}
		catch (Exception e2)
		{
			TimeLogger.DrawException(e2);
		}
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
	}

	private void DoDraw_Waterfalls()
	{
		waterfallManager.Draw(spriteBatch);
		TimeLogger.DetailedDrawTime(16);
	}

	private void DoDraw_Tiles_Solid()
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		TilesRenderer.PreDrawTiles(solidLayer: true, !drawToScreen, intoRenderTargets: false);
		tileBatch.Begin(Rasterizer, Transform);
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		try
		{
			if (drawToScreen)
			{
				DrawTiles(solidLayer: true, !drawToScreen, intoRenderTargets: false);
			}
			else
			{
				spriteBatch.Draw((Texture2D)(object)tileTarget, sceneTilePos - screenPosition, Color.White);
				TimeLogger.DetailedDrawTime(17);
			}
		}
		catch (Exception e)
		{
			TimeLogger.DrawException(e);
		}
		tileBatch.End();
		spriteBatch.End();
		DrawTileEntities(solidLayer: true, !drawToScreen, intoRenderTargets: false);
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		try
		{
			player[myPlayer].hitReplace.DrawFreshAnimations(spriteBatch);
			player[myPlayer].hitTile.DrawFreshAnimations(spriteBatch);
		}
		catch (Exception e2)
		{
			TimeLogger.DrawException(e2);
		}
		spriteBatch.End();
	}

	private void DoDraw_Tiles_NonSolid()
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		TilesRenderer.PreDrawTiles(solidLayer: false, !drawToScreen, intoRenderTargets: false);
		if (drawToScreen)
		{
			DrawTiles(solidLayer: false, !drawToScreen, intoRenderTargets: false);
			TimeLogger.DetailedDrawReset();
		}
		else
		{
			spriteBatch.Draw((Texture2D)(object)tile2Target, sceneTile2Pos - screenPosition, Color.White);
			TimeLogger.DetailedDrawTime(15);
		}
		spriteBatch.End();
		try
		{
			DrawTileEntities(solidLayer: false, !drawToScreen, intoRenderTargets: false);
		}
		catch (Exception e)
		{
			TimeLogger.DrawException(e);
		}
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
	}

	private void DoDraw_DrawNPCsOverTiles()
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		DrawCachedProjs(DrawCacheProjsBehindNPCs);
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		try
		{
			DrawNPCs();
			DrawCachedNPCs(DrawCacheNPCProjectiles, behindTiles: false);
			TimeLogger.DetailedDrawTime(19);
		}
		catch (Exception e)
		{
			TimeLogger.DrawException(e);
		}
		spriteBatch.End();
	}

	private void DoDraw_DrawNPCsBehindTiles()
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		DrawCachedProjs(DrawCacheProjsBehindNPCsAndTiles);
		spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, (Effect)null, Transform);
		try
		{
			DrawNPCs(behindTiles: true);
			TimeLogger.DetailedDrawTime(18);
		}
		catch (Exception e)
		{
			TimeLogger.DrawException(e);
		}
		spriteBatch.End();
	}

	private void DrawBackGore()
	{
		if (!drawBackGore)
		{
			return;
		}
		drawBackGore = false;
		if (ignoreErrors)
		{
			try
			{
				DrawGoreBehind();
				return;
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
				return;
			}
		}
		DrawGoreBehind();
	}

	private void DoDraw_WallsAndBlacks()
	{
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		if (drawToScreen)
		{
			DrawBlack();
			tileBatch.Begin();
			DrawWalls();
			tileBatch.End();
		}
		else
		{
			spriteBatch.Draw((Texture2D)(object)blackTarget, sceneTilePos - screenPosition, Color.White);
			TimeLogger.DetailedDrawTime(13);
			spriteBatch.Draw((Texture2D)(object)wallTarget, sceneWallPos - screenPosition, Color.White);
			TimeLogger.DetailedDrawTime(14);
		}
		Overlays.Scene.Draw(spriteBatch, RenderLayers.Walls);
	}

	private static void SetBackColor(InfoToSetBackColor info, out Color sunColor, out Color moonColor)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fe9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fee: Unknown result type (might be due to invalid IL or missing references)
		double num = time;
		Color bgColorToSet = Color.White;
		sunColor = Color.White;
		moonColor = Color.White;
		float num7 = 0f;
		bool isInGameMenuOrIsServer = info.isInGameMenuOrIsServer;
		if (dayTime)
		{
			if (num < 13500.0)
			{
				num7 = (float)(num / 13500.0);
				((Color)(ref sunColor)).R = (byte)(num7 * 200f + 55f);
				((Color)(ref sunColor)).G = (byte)(num7 * 180f + 75f);
				((Color)(ref sunColor)).B = (byte)(num7 * 250f + 5f);
				((Color)(ref bgColorToSet)).R = (byte)(num7 * 230f + 25f);
				((Color)(ref bgColorToSet)).G = (byte)(num7 * 220f + 35f);
				((Color)(ref bgColorToSet)).B = (byte)(num7 * 220f + 35f);
			}
			if (num > 45900.0)
			{
				num7 = (float)(1.0 - (num / 54000.0 - 0.85) * 6.666666666666667);
				((Color)(ref sunColor)).R = (byte)(num7 * 120f + 55f);
				((Color)(ref sunColor)).G = (byte)(num7 * 100f + 25f);
				((Color)(ref sunColor)).B = (byte)(num7 * 120f + 55f);
				((Color)(ref bgColorToSet)).R = (byte)(num7 * 200f + 35f);
				((Color)(ref bgColorToSet)).G = (byte)(num7 * 85f + 35f);
				((Color)(ref bgColorToSet)).B = (byte)(num7 * 135f + 35f);
			}
			else if (num > 37800.0)
			{
				num7 = (float)(1.0 - (num / 54000.0 - 0.7) * 6.666666666666667);
				((Color)(ref sunColor)).R = (byte)(num7 * 80f + 175f);
				((Color)(ref sunColor)).G = (byte)(num7 * 130f + 125f);
				((Color)(ref sunColor)).B = (byte)(num7 * 100f + 155f);
				((Color)(ref bgColorToSet)).R = (byte)(num7 * 20f + 235f);
				((Color)(ref bgColorToSet)).G = (byte)(num7 * 135f + 120f);
				((Color)(ref bgColorToSet)).B = (byte)(num7 * 85f + 170f);
			}
		}
		if (!dayTime)
		{
			if (info.BloodMoonActive)
			{
				if (num < 16200.0)
				{
					num7 = (float)(1.0 - num / 16200.0);
					((Color)(ref moonColor)).R = (byte)(num7 * 10f + 205f);
					((Color)(ref moonColor)).G = (byte)(num7 * 170f + 55f);
					((Color)(ref moonColor)).B = (byte)(num7 * 200f + 55f);
					((Color)(ref bgColorToSet)).R = (byte)(40f - num7 * 40f + 35f);
					((Color)(ref bgColorToSet)).G = (byte)(num7 * 20f + 15f);
					((Color)(ref bgColorToSet)).B = (byte)(num7 * 20f + 15f);
				}
				else if (num >= 16200.0)
				{
					num7 = (float)((num / 32400.0 - 0.5) * 2.0);
					((Color)(ref moonColor)).R = (byte)(num7 * 50f + 205f);
					((Color)(ref moonColor)).G = (byte)(num7 * 100f + 155f);
					((Color)(ref moonColor)).B = (byte)(num7 * 100f + 155f);
					((Color)(ref moonColor)).R = (byte)(num7 * 10f + 205f);
					((Color)(ref moonColor)).G = (byte)(num7 * 170f + 55f);
					((Color)(ref moonColor)).B = (byte)(num7 * 200f + 55f);
					((Color)(ref bgColorToSet)).R = (byte)(40f - num7 * 40f + 35f);
					((Color)(ref bgColorToSet)).G = (byte)(num7 * 20f + 15f);
					((Color)(ref bgColorToSet)).B = (byte)(num7 * 20f + 15f);
				}
			}
			else if (num < 16200.0)
			{
				num7 = (float)(1.0 - num / 16200.0);
				((Color)(ref moonColor)).R = (byte)(num7 * 10f + 205f);
				((Color)(ref moonColor)).G = (byte)(num7 * 70f + 155f);
				((Color)(ref moonColor)).B = (byte)(num7 * 100f + 155f);
				((Color)(ref bgColorToSet)).R = (byte)(num7 * 30f + 5f);
				((Color)(ref bgColorToSet)).G = (byte)(num7 * 30f + 5f);
				((Color)(ref bgColorToSet)).B = (byte)(num7 * 30f + 5f);
			}
			else if (num >= 16200.0)
			{
				num7 = (float)((num / 32400.0 - 0.5) * 2.0);
				((Color)(ref moonColor)).R = (byte)(num7 * 50f + 205f);
				((Color)(ref moonColor)).G = (byte)(num7 * 100f + 155f);
				((Color)(ref moonColor)).B = (byte)(num7 * 100f + 155f);
				((Color)(ref bgColorToSet)).R = (byte)(num7 * 20f + 5f);
				((Color)(ref bgColorToSet)).G = (byte)(num7 * 30f + 5f);
				((Color)(ref bgColorToSet)).B = (byte)(num7 * 30f + 5f);
			}
			if (dontStarveWorld)
			{
				DontStarveSeed.ModifyNightColor(ref bgColorToSet, ref moonColor);
			}
		}
		if (cloudAlpha > 0f && !remixWorld)
		{
			float num8 = 1f - cloudAlpha * 0.9f * atmo;
			((Color)(ref bgColorToSet)).R = (byte)((float)(int)((Color)(ref bgColorToSet)).R * num8);
			((Color)(ref bgColorToSet)).G = (byte)((float)(int)((Color)(ref bgColorToSet)).G * num8);
			((Color)(ref bgColorToSet)).B = (byte)((float)(int)((Color)(ref bgColorToSet)).B * num8);
		}
		if (info.GraveyardInfluence > 0f && !remixWorld)
		{
			float num9 = 1f - info.GraveyardInfluence * 0.6f;
			((Color)(ref bgColorToSet)).R = (byte)((float)(int)((Color)(ref bgColorToSet)).R * num9);
			((Color)(ref bgColorToSet)).G = (byte)((float)(int)((Color)(ref bgColorToSet)).G * num9);
			((Color)(ref bgColorToSet)).B = (byte)((float)(int)((Color)(ref bgColorToSet)).B * num9);
		}
		if (isInGameMenuOrIsServer && !dayTime)
		{
			((Color)(ref bgColorToSet)).R = 35;
			((Color)(ref bgColorToSet)).G = 35;
			((Color)(ref bgColorToSet)).B = 35;
		}
		if (info.CorruptionBiomeInfluence > 0f)
		{
			float num10 = info.CorruptionBiomeInfluence;
			if (num10 > 1f)
			{
				num10 = 1f;
			}
			int r = ((Color)(ref bgColorToSet)).R;
			int g = ((Color)(ref bgColorToSet)).G;
			int b = ((Color)(ref bgColorToSet)).B;
			r -= (int)(90f * num10 * ((float)(int)((Color)(ref bgColorToSet)).R / 255f));
			g -= (int)(140f * num10 * ((float)(int)((Color)(ref bgColorToSet)).G / 255f));
			b -= (int)(70f * num10 * ((float)(int)((Color)(ref bgColorToSet)).B / 255f));
			if (r < 15)
			{
				r = 15;
			}
			if (g < 15)
			{
				g = 15;
			}
			if (b < 15)
			{
				b = 15;
			}
			DontStarveSeed.FixBiomeDarkness(ref bgColorToSet, ref r, ref g, ref b);
			((Color)(ref bgColorToSet)).R = (byte)r;
			((Color)(ref bgColorToSet)).G = (byte)g;
			((Color)(ref bgColorToSet)).B = (byte)b;
			r = ((Color)(ref sunColor)).R;
			g = ((Color)(ref sunColor)).G;
			b = ((Color)(ref sunColor)).B;
			r -= (int)(100f * num10 * ((float)(int)((Color)(ref sunColor)).R / 255f));
			g -= (int)(100f * num10 * ((float)(int)((Color)(ref sunColor)).G / 255f));
			b -= (int)(0f * num10 * ((float)(int)((Color)(ref sunColor)).B / 255f));
			if (r < 15)
			{
				r = 15;
			}
			if (g < 15)
			{
				g = 15;
			}
			if (b < 15)
			{
				b = 15;
			}
			((Color)(ref sunColor)).R = (byte)r;
			((Color)(ref sunColor)).G = (byte)g;
			((Color)(ref sunColor)).B = (byte)b;
		}
		if (info.CrimsonBiomeInfluence > 0f)
		{
			float num11 = info.CrimsonBiomeInfluence;
			if (num11 > 1f)
			{
				num11 = 1f;
			}
			int r2 = ((Color)(ref bgColorToSet)).R;
			int g2 = ((Color)(ref bgColorToSet)).G;
			int b2 = ((Color)(ref bgColorToSet)).B;
			r2 -= (int)(40f * num11 * ((float)(int)((Color)(ref bgColorToSet)).G / 255f));
			g2 -= (int)(110f * num11 * ((float)(int)((Color)(ref bgColorToSet)).G / 255f));
			b2 -= (int)(140f * num11 * ((float)(int)((Color)(ref bgColorToSet)).B / 255f));
			if (r2 < 15)
			{
				r2 = 15;
			}
			if (g2 < 15)
			{
				g2 = 15;
			}
			if (b2 < 15)
			{
				b2 = 15;
			}
			DontStarveSeed.FixBiomeDarkness(ref bgColorToSet, ref r2, ref g2, ref b2);
			((Color)(ref bgColorToSet)).R = (byte)r2;
			((Color)(ref bgColorToSet)).G = (byte)g2;
			((Color)(ref bgColorToSet)).B = (byte)b2;
			r2 = ((Color)(ref sunColor)).R;
			g2 = ((Color)(ref sunColor)).G;
			b2 = ((Color)(ref sunColor)).B;
			g2 -= (int)(90f * num11 * ((float)(int)((Color)(ref sunColor)).G / 255f));
			b2 -= (int)(110f * num11 * ((float)(int)((Color)(ref sunColor)).B / 255f));
			if (r2 < 15)
			{
				r2 = 15;
			}
			if (g2 < 15)
			{
				g2 = 15;
			}
			if (b2 < 15)
			{
				b2 = 15;
			}
			((Color)(ref sunColor)).R = (byte)r2;
			((Color)(ref sunColor)).G = (byte)g2;
			((Color)(ref sunColor)).B = (byte)b2;
		}
		if (info.JungleBiomeInfluence > 0f)
		{
			float num12 = info.JungleBiomeInfluence;
			if (num12 > 1f)
			{
				num12 = 1f;
			}
			int r3 = ((Color)(ref bgColorToSet)).R;
			int G = ((Color)(ref bgColorToSet)).G;
			int b3 = ((Color)(ref bgColorToSet)).B;
			r3 -= (int)(40f * num12 * ((float)(int)((Color)(ref bgColorToSet)).R / 255f));
			b3 -= (int)(70f * num12 * ((float)(int)((Color)(ref bgColorToSet)).B / 255f));
			if (G > 255)
			{
				G = 255;
			}
			if (G < 15)
			{
				G = 15;
			}
			if (r3 > 255)
			{
				r3 = 255;
			}
			if (r3 < 15)
			{
				r3 = 15;
			}
			if (b3 < 15)
			{
				b3 = 15;
			}
			DontStarveSeed.FixBiomeDarkness(ref bgColorToSet, ref r3, ref G, ref b3);
			((Color)(ref bgColorToSet)).R = (byte)r3;
			((Color)(ref bgColorToSet)).G = (byte)G;
			((Color)(ref bgColorToSet)).B = (byte)b3;
			r3 = ((Color)(ref sunColor)).R;
			G = ((Color)(ref sunColor)).G;
			b3 = ((Color)(ref sunColor)).B;
			r3 -= (int)(30f * num12 * ((float)(int)((Color)(ref sunColor)).R / 255f));
			b3 -= (int)(10f * num12 * ((float)(int)((Color)(ref sunColor)).B / 255f));
			if (r3 < 15)
			{
				r3 = 15;
			}
			if (G < 15)
			{
				G = 15;
			}
			if (b3 < 15)
			{
				b3 = 15;
			}
			((Color)(ref sunColor)).R = (byte)r3;
			((Color)(ref sunColor)).G = (byte)G;
			((Color)(ref sunColor)).B = (byte)b3;
		}
		if (info.MushroomBiomeInfluence > 0f)
		{
			float mushroomBiomeInfluence = info.MushroomBiomeInfluence;
			int r4 = ((Color)(ref bgColorToSet)).R;
			int g3 = ((Color)(ref bgColorToSet)).G;
			int b4 = ((Color)(ref bgColorToSet)).B;
			g3 -= (int)(250f * mushroomBiomeInfluence * ((float)(int)((Color)(ref bgColorToSet)).G / 255f));
			r4 -= (int)(250f * mushroomBiomeInfluence * ((float)(int)((Color)(ref bgColorToSet)).R / 255f));
			b4 -= (int)(250f * mushroomBiomeInfluence * ((float)(int)((Color)(ref bgColorToSet)).B / 255f));
			if (g3 < 15)
			{
				g3 = 15;
			}
			if (r4 < 15)
			{
				r4 = 15;
			}
			if (b4 < 15)
			{
				b4 = 15;
			}
			DontStarveSeed.FixBiomeDarkness(ref bgColorToSet, ref r4, ref g3, ref b4);
			((Color)(ref bgColorToSet)).R = (byte)r4;
			((Color)(ref bgColorToSet)).G = (byte)g3;
			((Color)(ref bgColorToSet)).B = (byte)b4;
			r4 = ((Color)(ref sunColor)).R;
			g3 = ((Color)(ref sunColor)).G;
			b4 = ((Color)(ref sunColor)).B;
			g3 -= (int)(10f * mushroomBiomeInfluence * ((float)(int)((Color)(ref sunColor)).G / 255f));
			r4 -= (int)(30f * mushroomBiomeInfluence * ((float)(int)((Color)(ref sunColor)).R / 255f));
			b4 -= (int)(10f * mushroomBiomeInfluence * ((float)(int)((Color)(ref sunColor)).B / 255f));
			if (r4 < 15)
			{
				r4 = 15;
			}
			if (g3 < 15)
			{
				g3 = 15;
			}
			if (b4 < 15)
			{
				b4 = 15;
			}
			((Color)(ref sunColor)).R = (byte)r4;
			((Color)(ref sunColor)).G = (byte)g3;
			((Color)(ref sunColor)).B = (byte)b4;
			r4 = ((Color)(ref moonColor)).R;
			g3 = ((Color)(ref moonColor)).G;
			b4 = ((Color)(ref moonColor)).B;
			g3 -= (int)(140f * mushroomBiomeInfluence * ((float)(int)((Color)(ref moonColor)).R / 255f));
			r4 -= (int)(170f * mushroomBiomeInfluence * ((float)(int)((Color)(ref moonColor)).G / 255f));
			b4 -= (int)(190f * mushroomBiomeInfluence * ((float)(int)((Color)(ref moonColor)).B / 255f));
			if (r4 < 15)
			{
				r4 = 15;
			}
			if (g3 < 15)
			{
				g3 = 15;
			}
			if (b4 < 15)
			{
				b4 = 15;
			}
			((Color)(ref moonColor)).R = (byte)r4;
			((Color)(ref moonColor)).G = (byte)g3;
			((Color)(ref moonColor)).B = (byte)b4;
		}
		byte minimalLight = 15;
		switch (GetMoonPhase())
		{
		case MoonPhase.Empty:
			minimalLight = 11;
			break;
		case MoonPhase.QuarterAtLeft:
		case MoonPhase.QuarterAtRight:
			minimalLight = 13;
			break;
		case MoonPhase.HalfAtLeft:
		case MoonPhase.HalfAtRight:
			minimalLight = 15;
			break;
		case MoonPhase.ThreeQuartersAtLeft:
		case MoonPhase.ThreeQuartersAtRight:
			minimalLight = 17;
			break;
		case MoonPhase.Full:
			minimalLight = 19;
			break;
		}
		if (dontStarveWorld)
		{
			DontStarveSeed.ModifyMinimumLightColorAtNight(ref minimalLight);
		}
		if (((Color)(ref bgColorToSet)).R < minimalLight)
		{
			((Color)(ref bgColorToSet)).R = minimalLight;
		}
		if (((Color)(ref bgColorToSet)).G < minimalLight)
		{
			((Color)(ref bgColorToSet)).G = minimalLight;
		}
		if (((Color)(ref bgColorToSet)).B < minimalLight)
		{
			((Color)(ref bgColorToSet)).B = minimalLight;
		}
		if (info.BloodMoonActive)
		{
			if (((Color)(ref bgColorToSet)).R < 25)
			{
				((Color)(ref bgColorToSet)).R = 25;
			}
			if (((Color)(ref bgColorToSet)).G < 25)
			{
				((Color)(ref bgColorToSet)).G = 25;
			}
			if (((Color)(ref bgColorToSet)).B < 25)
			{
				((Color)(ref bgColorToSet)).B = 25;
			}
		}
		if (eclipse && dayTime)
		{
			float num13 = 1242f;
			eclipseLight = (float)(num / (double)num13);
			if (eclipseLight > 1f)
			{
				eclipseLight = 1f;
			}
		}
		else if (eclipseLight > 0f)
		{
			eclipseLight -= 0.01f;
			if (eclipseLight < 0f)
			{
				eclipseLight = 0f;
			}
		}
		if (eclipseLight > 0f)
		{
			float num14 = 1f - 0.925f * eclipseLight;
			float num2 = 1f - 0.96f * eclipseLight;
			float num3 = 1f - 1f * eclipseLight;
			int num4 = (int)((float)(int)((Color)(ref bgColorToSet)).R * num14);
			int num5 = (int)((float)(int)((Color)(ref bgColorToSet)).G * num2);
			int num6 = (int)((float)(int)((Color)(ref bgColorToSet)).B * num3);
			((Color)(ref bgColorToSet)).R = (byte)num4;
			((Color)(ref bgColorToSet)).G = (byte)num5;
			((Color)(ref bgColorToSet)).B = (byte)num6;
			((Color)(ref sunColor)).R = byte.MaxValue;
			((Color)(ref sunColor)).G = 127;
			((Color)(ref sunColor)).B = 67;
			if (((Color)(ref bgColorToSet)).R < 20)
			{
				((Color)(ref bgColorToSet)).R = 20;
			}
			if (((Color)(ref bgColorToSet)).G < 10)
			{
				((Color)(ref bgColorToSet)).G = 10;
			}
			if (!Lighting.NotRetro)
			{
				if (((Color)(ref bgColorToSet)).R < 20)
				{
					((Color)(ref bgColorToSet)).R = 20;
				}
				if (((Color)(ref bgColorToSet)).G < 14)
				{
					((Color)(ref bgColorToSet)).G = 14;
				}
				if (((Color)(ref bgColorToSet)).B < 6)
				{
					((Color)(ref bgColorToSet)).B = 6;
				}
			}
		}
		if ((remixWorld && !gameMenu) || WorldGen.remixWorldGen)
		{
			((Color)(ref bgColorToSet)).R = 1;
			((Color)(ref bgColorToSet)).G = 1;
			((Color)(ref bgColorToSet)).B = 1;
		}
		if (lightning > 0f)
		{
			float value = (float)(int)((Color)(ref bgColorToSet)).R / 255f;
			float value2 = (float)(int)((Color)(ref bgColorToSet)).G / 255f;
			float value3 = (float)(int)((Color)(ref bgColorToSet)).B / 255f;
			value = MathHelper.Lerp(value, 1f, lightning);
			value2 = MathHelper.Lerp(value2, 1f, lightning);
			value3 = MathHelper.Lerp(value3, 1f, lightning);
			((Color)(ref bgColorToSet)).R = (byte)(value * 255f);
			((Color)(ref bgColorToSet)).G = (byte)(value2 * 255f);
			((Color)(ref bgColorToSet)).B = (byte)(value3 * 255f);
		}
		if (!info.BloodMoonActive)
		{
			moonColor = Color.White;
		}
		ColorOfTheSkies = bgColorToSet;
	}

	private void DoLightTiles()
	{
		GetAreaToLight(out firstTileX, out lastTileX, out firstTileY, out lastTileY);
		if (!drawSkip)
		{
			Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
		}
	}

	public static void GetAreaToLight(out int firstTileX, out int lastTileX, out int firstTileY, out int lastTileY)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		Vector2 vector = Camera.ScaledPosition;
		Vector2 vector2 = Camera.ScaledSize;
		if (!Lighting.UsingNewLighting)
		{
			vector = Camera.UnscaledPosition;
			vector2 = Camera.UnscaledSize;
		}
		firstTileX = (int)Math.Floor(vector.X / 16f) - 1;
		lastTileX = (int)Math.Floor((vector.X + vector2.X) / 16f) + 2;
		firstTileY = (int)Math.Floor(vector.Y / 16f) - 1;
		lastTileY = (int)Math.Floor((vector.Y + vector2.Y) / 16f) + 2;
	}

	private static void ClampScreenPositionToWorld()
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		Vector2 input = new Vector2(leftWorld + 656f, topWorld + 656f) - GameViewMatrix.Translation;
		Vector2 input2 = new Vector2(rightWorld - (float)screenWidth / GameViewMatrix.Zoom.X - 672f, bottomWorld - (float)screenHeight / GameViewMatrix.Zoom.Y - 672f) - GameViewMatrix.Translation;
		input = Utils.Round(input);
		input2 = Utils.Round(input2);
		screenPosition = Vector2.Clamp(screenPosition, input, input2);
	}

	private void DrawBG()
	{
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		float num = Math.Min(PlayerInput.RealScreenHeight, LogicCheckScreenHeight);
		float num2 = screenPosition.Y + (float)(screenHeight / 2) - num / 2f;
		scAdj = (float)(worldSurface * 16.0) / (num2 + num);
		float num3 = (float)maxTilesY * 0.15f * 16f;
		num3 -= num2;
		if (num3 < 0f)
		{
			num3 = 0f;
		}
		num3 *= 0.00025f;
		float num4 = num3 * num3;
		scAdj *= 0.45f - num4;
		if (maxTilesY <= 1200)
		{
			scAdj *= -500f;
		}
		else if (maxTilesY <= 1800)
		{
			scAdj *= -300f;
		}
		else
		{
			scAdj *= -150f;
		}
		float num5 = screenHeight;
		screenOff = num5 - 600f;
		bgTopY = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1200.0 + 1190.0) + (int)scAdj;
		cTop = bgTopY - 50;
		if (resetClouds)
		{
			Cloud.resetClouds();
			resetClouds = false;
		}
		bgScale = 1f;
		bgWidthScaled = (int)((float)backgroundWidth[treeMntBGSet1[0]] * bgScale);
		ColorOfSurfaceBackgroundsModified = ColorOfTheSkies;
		ColorOfSurfaceBackgroundsBase = ColorOfTheSkies;
		int preferredBGStyleForPlayer = GetPreferredBGStyleForPlayer();
		int num6 = 30;
		backgroundLayerTransitionSpeed = 0.05f;
		if (preferredBGStyleForPlayer == 0)
		{
			num6 = 60;
		}
		if (bgDelay < 0)
		{
			bgDelay++;
		}
		else if (preferredBGStyleForPlayer != bgStyle)
		{
			bgDelay++;
			if (bgDelay > num6)
			{
				bgDelay = -60;
				bgStyle = preferredBGStyleForPlayer;
				if (preferredBGStyleForPlayer == 0)
				{
					bgDelay = 0;
				}
			}
		}
		else if (bgDelay > 0)
		{
			bgDelay--;
		}
		if (gameMenu)
		{
			backgroundLayerTransitionSpeed = 0.02f;
			if (!dayTime)
			{
				bgStyle = 1;
			}
			else
			{
				bgStyle = 0;
			}
			preferredBGStyleForPlayer = bgStyle;
			if (WorldGen.drunkWorldGen)
			{
				bgStyle = 9;
			}
			ModSurfaceBackgroundStyle menuBackgroundStyle = MenuLoader.CurrentMenu.MenuBackgroundStyle;
			if (menuBackgroundStyle != null)
			{
				bgStyle = menuBackgroundStyle.Slot;
			}
		}
		if (instantBGTransitionCounter > 0)
		{
			instantBGTransitionCounter--;
			bgStyle = preferredBGStyleForPlayer;
			backgroundLayerTransitionSpeed = 1f;
		}
		UpdateBGVisibility_BackLayer(null, null);
		UpdateBGVisibility_FrontLayer(null, null);
		LoaderManager.Get<SurfaceBackgroundStylesLoader>().ModifyFarFades(bgStyle, bgAlphaFrontLayer, backgroundLayerTransitionSpeed);
		try
		{
			DrawSurfaceBG();
			if (BackgroundEnabled)
			{
				DrawUnderworldBackground(flat: false);
			}
		}
		catch (Exception ex)
		{
			if (!ignoreErrors)
			{
				throw ex;
			}
			TimeLogger.DrawException(ex);
		}
		TimeLogger.DetailedDrawTime(8);
	}

	private void UpdateBGVisibility_FrontLayer(int? targetBiomeOverride, float? transitionAmountOverride)
	{
		int value = bgStyle;
		if (targetBiomeOverride.HasValue)
		{
			value = targetBiomeOverride.Value;
		}
		float value2 = backgroundLayerTransitionSpeed;
		if (transitionAmountOverride.HasValue)
		{
			value2 = transitionAmountOverride.Value;
		}
		for (int i = 0; i < bgAlphaFrontLayer.Length; i++)
		{
			if (value == i)
			{
				bgAlphaFrontLayer[i] += value2;
				if (bgAlphaFrontLayer[i] > 1f)
				{
					bgAlphaFrontLayer[i] = 1f;
				}
			}
			else
			{
				bgAlphaFrontLayer[i] -= value2;
				if (bgAlphaFrontLayer[i] < 0f)
				{
					bgAlphaFrontLayer[i] = 0f;
				}
			}
		}
	}

	private void UpdateBGVisibility_BackLayer(int? targetBiomeOverride, float? transitionAmountOverride)
	{
		int value = bgStyle;
		if (targetBiomeOverride.HasValue)
		{
			value = targetBiomeOverride.Value;
		}
		_ = backgroundLayerTransitionSpeed;
		if (transitionAmountOverride.HasValue)
		{
			_ = transitionAmountOverride.Value;
		}
		switch (value)
		{
		case 2:
			DrawBG_ModifyBGFarBackLayerAlpha(1, null, transitionAmountOverride);
			break;
		case 3:
			if (WorldGen.jungleBG == 5)
			{
				DrawBG_ModifyBGFarBackLayerAlpha(13, null, transitionAmountOverride);
			}
			else
			{
				DrawBG_ModifyBGFarBackLayerAlpha(0, null, transitionAmountOverride);
			}
			break;
		case 1:
		case 5:
			DrawBG_ModifyBGFarBackLayerAlpha(2, null, transitionAmountOverride);
			break;
		case 6:
			if (WorldGen.hallowBG == 3)
			{
				DrawBG_ModifyBGFarBackLayerAlpha(6, null, transitionAmountOverride);
			}
			else
			{
				DrawBG_ModifyBGFarBackLayerAlpha(2, null, transitionAmountOverride);
			}
			break;
		case 4:
			DrawBG_ModifyBGFarBackLayerAlpha(3, null, transitionAmountOverride);
			break;
		case 7:
			DrawBG_ModifyBGFarBackLayerAlpha(4, null, transitionAmountOverride);
			break;
		case 8:
			DrawBG_ModifyBGFarBackLayerAlpha(5, null, transitionAmountOverride);
			break;
		case 9:
			DrawBG_ModifyBGFarBackLayerAlpha(0, 6, transitionAmountOverride);
			break;
		case 10:
		case 11:
		case 12:
			DrawBG_ModifyBGFarBackLayerAlpha(value, null, transitionAmountOverride);
			break;
		default:
			if (value >= 14)
			{
				DrawBG_ModifyBGFarBackLayerAlpha(value, null, transitionAmountOverride);
			}
			else
			{
				DrawBG_ModifyBGFarBackLayerAlpha(0, null, transitionAmountOverride);
			}
			break;
		}
	}

	public static int GetPreferredBGStyleForPlayer()
	{
		int num = bgStyle;
		int num2 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
		LoaderManager.Get<SurfaceBackgroundStylesLoader>().ChooseStyle(out var modBG, out var priority);
		if (priority >= SceneEffectPriority.BiomeHigh)
		{
			num = modBG;
		}
		else if (WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
		{
			num = (player[myPlayer].ZoneHallow ? 6 : ((!player[myPlayer].ZoneCorrupt) ? (player[myPlayer].ZoneCrimson ? 8 : ((SceneMetrics.HoneyBlockCount <= 400) ? 4 : 3)) : ((SceneMetrics.BloodTileCount <= SceneMetrics.EvilTileCount) ? 1 : 8)));
		}
		else if (player[myPlayer].ZoneGlowshroom)
		{
			num = 9;
		}
		else if (player[myPlayer].ZoneDesert)
		{
			num = (player[myPlayer].ZoneCorrupt ? 5 : (player[myPlayer].ZoneCrimson ? 5 : ((!player[myPlayer].ZoneHallow) ? 2 : 5)));
		}
		else if (player[myPlayer].ZoneHallow)
		{
			num = 6;
		}
		else if (player[myPlayer].ZoneCorrupt)
		{
			num = ((SceneMetrics.BloodTileCount <= SceneMetrics.EvilTileCount) ? 1 : 8);
		}
		else if (player[myPlayer].ZoneCrimson)
		{
			num = 8;
		}
		else if (priority >= SceneEffectPriority.BiomeMedium)
		{
			num = modBG;
		}
		else if (player[myPlayer].ZoneJungle)
		{
			num = 3;
		}
		else if (player[myPlayer].ZoneSnow)
		{
			num = 7;
		}
		else if (priority >= SceneEffectPriority.BiomeLow)
		{
			num = modBG;
		}
		else
		{
			num = 0;
			if (num2 >= treeX[0])
			{
				if (WorldGen.treeBG1 != WorldGen.treeBG2 && num2 < treeX[1])
				{
					num = 10;
				}
				else if (WorldGen.treeBG1 != WorldGen.treeBG3 && num2 < treeX[2])
				{
					num = 11;
				}
				else if (WorldGen.treeBG1 != WorldGen.treeBG4)
				{
					num = 12;
				}
			}
		}
		if (GlobalBackgroundStyleLoader.loaded)
		{
			GlobalBackgroundStyleLoader.DelegateChooseSurfaceBackgroundStyle[] hookChooseSurfaceBackgroundStyle = GlobalBackgroundStyleLoader.HookChooseSurfaceBackgroundStyle;
			for (int i = 0; i < hookChooseSurfaceBackgroundStyle.Length; i++)
			{
				hookChooseSurfaceBackgroundStyle[i](ref num);
			}
		}
		return num;
	}

	private void DrawBG_ModifyBGFarBackLayerAlpha(int desiredBG, int? desiredBG2 = null, float? transitionAmountOverride = null)
	{
		float value = backgroundLayerTransitionSpeed;
		if (transitionAmountOverride.HasValue)
		{
			value = transitionAmountOverride.Value;
		}
		for (int i = 0; i < bgAlphaFarBackLayer.Length; i++)
		{
			bool flag = desiredBG == i;
			flag |= desiredBG2.HasValue && desiredBG2 == i;
			bgAlphaFarBackLayer[i] = MathHelper.Clamp(bgAlphaFarBackLayer[i] + (flag ? value : (0f - value)), 0f, 1f);
		}
	}

	public void DrawInfernoRings()
	{
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < 255; i++)
		{
			if (!player[i].active || player[i].outOfRange || !player[i].inferno || player[i].dead)
			{
				continue;
			}
			LoadFlameRing();
			float num = 1f;
			float num2 = 0.1f;
			float num3 = 0.9f;
			if (!gamePaused && ((Game)this).IsActive)
			{
				player[i].flameRingScale += 0.004f;
			}
			if (player[i].flameRingScale < 1f)
			{
				num = player[i].flameRingScale;
			}
			else
			{
				player[i].flameRingScale = 0.8f;
				num = player[i].flameRingScale;
			}
			if (!gamePaused && ((Game)this).IsActive)
			{
				player[i].flameRingRot += 0.05f;
			}
			if (player[i].flameRingRot > (float)Math.PI * 2f)
			{
				player[i].flameRingRot -= (float)Math.PI * 2f;
			}
			if (player[i].flameRingRot < (float)Math.PI * -2f)
			{
				player[i].flameRingRot += (float)Math.PI * 2f;
			}
			for (int j = 0; j < 3; j++)
			{
				float num4 = num + num2 * (float)j;
				if (num4 > 1f)
				{
					num4 -= num2 * 2f;
				}
				float num5 = MathHelper.Lerp(0.8f, 0f, Math.Abs(num4 - num3) * 10f);
				spriteBatch.Draw(TextureAssets.FlameRing.Value, player[i].Center - screenPosition, (Rectangle?)new Rectangle(0, 400 * j, 400, 400), new Color(num5, num5, num5, num5 / 2f), player[i].flameRingRot + (float)Math.PI / 3f * (float)j, new Vector2(200f, 200f), num4, (SpriteEffects)0, 0f);
			}
		}
	}

	private static void UpdateInvasion()
	{
		SystemLoader.PreUpdateInvasions();
		UpdateInvasion_Inner();
		SystemLoader.PostUpdateInvasions();
	}

	private static void UpdateInvasion_Inner()
	{
		if (invasionType <= 0)
		{
			return;
		}
		if (invasionSize <= 0)
		{
			if (invasionType == 1)
			{
				NPC.SetEventFlagCleared(ref NPC.downedGoblins, 0);
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
				AchievementsHelper.NotifyProgressionEvent(10);
			}
			else if (invasionType == 2)
			{
				NPC.SetEventFlagCleared(ref NPC.downedFrost, 1);
				AchievementsHelper.NotifyProgressionEvent(12);
			}
			else if (invasionType == 3)
			{
				NPC.SetEventFlagCleared(ref NPC.downedPirates, 2);
				AchievementsHelper.NotifyProgressionEvent(11);
			}
			else if (invasionType == 4)
			{
				NPC.SetEventFlagCleared(ref NPC.downedMartians, 3);
				AchievementsHelper.NotifyProgressionEvent(13);
			}
			InvasionWarning();
			invasionType = 0;
			invasionDelay = 0;
		}
		if (invasionX == (double)spawnTileX)
		{
			return;
		}
		double num = desiredWorldEventsUpdateRate;
		if (num < 0.0)
		{
			num = 0.0;
		}
		if (invasionX > (double)spawnTileX)
		{
			invasionX -= num;
			if (invasionX <= (double)spawnTileX)
			{
				invasionX = spawnTileX;
				InvasionWarning();
			}
			else if (num > 0.0)
			{
				invasionWarn--;
			}
		}
		else if (invasionX < (double)spawnTileX)
		{
			invasionX += num;
			if (invasionX >= (double)spawnTileX)
			{
				invasionX = spawnTileX;
				InvasionWarning();
			}
			else if (num > 0.0)
			{
				invasionWarn--;
			}
		}
		if (invasionWarn <= 0)
		{
			invasionWarn = 3600;
			InvasionWarning();
		}
	}

	private static void InvasionWarning()
	{
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		LocalizedText empty = LocalizedText.Empty;
		empty = ((invasionSize > 0) ? ((!(invasionX < (double)spawnTileX)) ? ((!(invasionX > (double)spawnTileX)) ? ((invasionType == 2) ? Lang.misc[7] : ((invasionType == 3) ? Lang.misc[27] : ((invasionType == 4) ? Lang.misc[41] : (empty = Lang.misc[3])))) : ((invasionType == 2) ? Lang.misc[6] : ((invasionType == 3) ? Lang.misc[26] : ((invasionType == 4) ? LocalizedText.Empty : (empty = Lang.misc[2]))))) : ((invasionType == 2) ? Lang.misc[5] : ((invasionType == 3) ? Lang.misc[25] : ((invasionType == 4) ? LocalizedText.Empty : (empty = Lang.misc[1]))))) : ((invasionType == 2) ? Lang.misc[4] : ((invasionType == 3) ? Lang.misc[24] : ((invasionType == 4) ? Lang.misc[42] : (empty = Lang.misc[0])))));
		if (netMode == 0)
		{
			NewText(empty.ToString(), 175, 75);
		}
		else if (netMode == 2 && empty.Value != "")
		{
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey(empty.Key), new Color(175, 75, 255));
		}
	}

	public static bool CanStartInvasion(int type = 1, bool ignoreDelay = false)
	{
		if (invasionType != 0)
		{
			return false;
		}
		if (invasionDelay != 0 && !ignoreDelay)
		{
			return false;
		}
		int num = 0;
		for (int i = 0; i < 255; i++)
		{
			if (player[i].active && player[i].ConsumedLifeCrystals >= 5)
			{
				num++;
			}
		}
		return num > 0;
	}

	public static void StartInvasion(int type = 1)
	{
		if (invasionType != 0 && invasionSize == 0)
		{
			invasionType = 0;
		}
		if (invasionType != 0)
		{
			return;
		}
		int num = 0;
		for (int i = 0; i < 255; i++)
		{
			if (player[i].active && player[i].ConsumedLifeCrystals >= 5)
			{
				num++;
			}
		}
		if (num > 0)
		{
			invasionType = type;
			invasionSize = 80 + 40 * num;
			if (type == 3)
			{
				invasionSize += 40 + 20 * num;
			}
			if (type == 4)
			{
				invasionSize = 160 + 40 * num;
			}
			invasionSizeStart = invasionSize;
			invasionProgress = 0;
			invasionProgressIcon = type + 3;
			invasionProgressWave = 0;
			invasionProgressMax = invasionSizeStart;
			invasionWarn = 0;
			if (type == 4)
			{
				invasionX = spawnTileX - 1;
				invasionWarn = 2;
			}
			else if (rand.Next(2) == 0)
			{
				invasionX = 0.0;
			}
			else
			{
				invasionX = maxTilesX;
			}
		}
	}

	public static void FakeLoadInvasionStart()
	{
		int num = 0;
		int num2 = 0;
		switch (invasionType)
		{
		case 1:
		case 2:
			num = 80;
			num2 = 40;
			break;
		case 3:
			num = 120;
			num2 = 60;
			break;
		case 4:
			num = 160;
			num2 = 40;
			break;
		}
		int num3 = (int)Math.Ceiling((float)(invasionSize - num) / (float)num2);
		invasionSizeStart = num;
		if (num3 > 0)
		{
			invasionSizeStart += num3 * num2;
		}
	}

	private static void UpdateClient()
	{
		if (myPlayer == 255)
		{
			Netplay.Disconnect = true;
		}
		netPlayCounter++;
		if (netPlayCounter > 3600)
		{
			netPlayCounter = 0;
		}
		if (netPlayCounter % 420 == 0)
		{
			NetMessage.SendData(13, -1, -1, null, myPlayer);
		}
		if (netPlayCounter % 900 == 0)
		{
			NetMessage.SendData(36, -1, -1, null, myPlayer);
			NetMessage.SendData(16, -1, -1, null, myPlayer);
			NetMessage.SendData(40, -1, -1, null, myPlayer);
		}
		if (Netplay.Connection.IsActive)
		{
			Netplay.Connection.TimeOutTimer++;
			if (!stopTimeOuts && Netplay.Connection.TimeOutTimer > 7200)
			{
				statusText = Lang.inter[43].Value;
				Netplay.Disconnect = true;
			}
		}
		for (int i = 0; i < 400; i++)
		{
			if (item[i].active && item[i].playerIndexTheItemIsReservedFor == myPlayer)
			{
				item[i].FindOwner(i);
			}
		}
	}

	private static void UpdateServer()
	{
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		netPlayCounter++;
		if (netPlayCounter % 3600 == 0)
		{
			NetMessage.SendData(7);
			netPlayCounter = 0;
		}
		for (int i = 0; i < maxNetPlayers; i++)
		{
			if (player[i].active && Netplay.Clients[i].IsActive)
			{
				Netplay.Clients[i].SpamUpdate();
			}
		}
		if (Math.IEEERemainder(netPlayCounter, 900.0) == 0.0)
		{
			bool flag = true;
			int num = lastItemUpdate;
			int num2 = 0;
			while (flag)
			{
				num++;
				if (num >= 400)
				{
					num = 0;
				}
				num2++;
				if (!Main.item[num].active || Main.item[num].playerIndexTheItemIsReservedFor == 255)
				{
					NetMessage.SendData(21, -1, -1, null, num);
				}
				if (num2 >= maxItemUpdates || num == lastItemUpdate)
				{
					flag = false;
				}
			}
			lastItemUpdate = num;
		}
		for (int j = 0; j < 400; j++)
		{
			Item item = Main.item[j];
			if (item.active && (item.playerIndexTheItemIsReservedFor == 255 || !player[item.playerIndexTheItemIsReservedFor].active))
			{
				item.FindOwner(j);
			}
		}
		for (int k = 0; k < 255; k++)
		{
			if (Netplay.Clients[k].IsActive)
			{
				Netplay.Clients[k].TimeOutTimer++;
				if (Netplay.Clients[k].State == 0)
				{
					Netplay.Clients[k].TimeOutTimer += 3;
				}
				if (!stopTimeOuts && Netplay.Clients[k].TimeOutTimer > 7200)
				{
					Netplay.Clients[k].SetPendingTermination("Timeout");
					Netplay.Clients[k].PendingTerminationApproved = true;
				}
			}
			if (player[k].active)
			{
				RemoteClient.CheckSection(k, player[k].position);
			}
		}
	}

	/// <inheritdoc cref="M:Terraria.Main.NewText(System.String,System.Byte,System.Byte,System.Byte)" />
	public static void NewText(object o, Color? color = null)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Color c = (Color)(((_003F?)color) ?? Color.White);
		NewText(o.ToString(), ((Color)(ref c)).R, ((Color)(ref c)).G, ((Color)(ref c)).B);
	}

	/// <summary>
	/// Spawns chat text on the local client. Does nothing on the server. <br />
	/// For floating text, such as damage, see <see cref="T:Terraria.CombatText" /> <br />
	/// <VariousTextOptionsSummary>
	///         <br />Summary of options to display text to the user:<br />
	///         â¢ <see cref="M:Terraria.Main.NewText(System.String,System.Byte,System.Byte,System.Byte)" /> to display a message in chat. <br />
	///         â¢ <see cref="T:Terraria.CombatText" /> to display floating damage numbers in-game. Used for damage and healing numbers. <br />
	///         â¢ <see cref="T:Terraria.PopupText" /> to display non-overlapping floating in-game text. Used for reforge and item pickup messages. <br />
	///     </VariousTextOptionsSummary>
	/// </summary>
	public static void NewText(string newText, byte R = byte.MaxValue, byte G = byte.MaxValue, byte B = byte.MaxValue)
	{
		chatMonitor.NewText(newText, R, G, B);
		SoundEngine.PlaySound(12);
	}

	public static void NewTextMultiline(string text, bool force = false, Color c = default(Color), int WidthLimit = -1)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		chatMonitor.NewTextMultiline(text, force, c, WidthLimit);
		SoundEngine.PlaySound(12);
	}

	/// <summary>
	/// Stops rain. Should be called on the server (netMode != client) - vanilla syncs it using <see cref="M:Terraria.Main.SyncRain" />.
	/// <br>You can also call this on the client to update visuals immediately, assuming it was called serverside as well (Journey Mode rain slider does this).</br>
	/// </summary>
	public static void StopRain()
	{
		rainTime = 0.0;
		raining = false;
		maxRaining = 0f;
	}

	/// <summary>
	/// Starts rain for a random amount of time. Should be called on the server (netMode != client) - vanilla syncs it using <see cref="M:Terraria.Main.SyncRain" />.
	/// <br>You can also call this on the client to update visuals immediately, assuming it was/will be called serverside as well (Journey Mode rain slider does this).</br>
	/// </summary>
	public static void StartRain()
	{
		int num = 86400;
		int num2 = num / 24;
		int num3 = rand.Next(num2 * 8, num);
		if (rand.Next(3) == 0)
		{
			num3 += rand.Next(0, num2);
		}
		if (rand.Next(4) == 0)
		{
			num3 += rand.Next(0, num2 * 2);
		}
		if (rand.Next(5) == 0)
		{
			num3 += rand.Next(0, num2 * 2);
		}
		if (rand.Next(6) == 0)
		{
			num3 += rand.Next(0, num2 * 3);
		}
		if (rand.Next(7) == 0)
		{
			num3 += rand.Next(0, num2 * 4);
		}
		if (rand.Next(8) == 0)
		{
			num3 += rand.Next(0, num2 * 5);
		}
		float num4 = 1f;
		if (rand.Next(2) == 0)
		{
			num4 += 0.05f;
		}
		if (rand.Next(3) == 0)
		{
			num4 += 0.1f;
		}
		if (rand.Next(4) == 0)
		{
			num4 += 0.15f;
		}
		if (rand.Next(5) == 0)
		{
			num4 += 0.2f;
		}
		rainTime = (int)((float)num3 * num4);
		ChangeRain();
		raining = true;
	}

	private static void ChangeRain()
	{
		maxRaining = ((!(cloudBGActive >= 1f) && !((double)numClouds > 150.0)) ? ((!((double)numClouds > 100.0)) ? ((rand.Next(3) != 0) ? ((float)rand.Next(5, 31) * 0.01f) : ((float)rand.Next(5, 41) * 0.01f)) : ((rand.Next(3) != 0) ? ((float)rand.Next(20, 61) * 0.01f) : ((float)rand.Next(10, 71) * 0.01f))) : ((rand.Next(3) != 0) ? ((float)rand.Next(40, 91) * 0.01f) : ((float)rand.Next(20, 91) * 0.01f)));
	}

	public static void StartSlimeRain(bool announce = true)
	{
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		if (remixWorld || slimeRain)
		{
			return;
		}
		if (netMode == 1)
		{
			slimeRainTime = 54000.0;
			slimeRain = true;
			SkyManager.Instance.Activate("Slime", default(Vector2));
		}
		else
		{
			if (raining)
			{
				return;
			}
			if (slimeRainTime <= 0.0)
			{
				slimeRainTime = rand.Next(32400, 54000);
			}
			slimeRain = true;
			slimeRainKillCount = 0;
			if (netMode == 0)
			{
				SkyManager.Instance.Activate("Slime", default(Vector2));
				if (announce)
				{
					slimeWarningTime = slimeWarningDelay;
				}
			}
			else if (announce)
			{
				slimeWarningTime = slimeWarningDelay;
				NetMessage.SendData(7);
			}
		}
	}

	public static void StopSlimeRain(bool announce = true)
	{
		if (!slimeRain)
		{
			return;
		}
		if (netMode == 1)
		{
			slimeRainTime = 0.0;
			slimeRain = false;
			SkyManager.Instance.Deactivate("Slime");
			return;
		}
		int num = 604800;
		if (hardMode)
		{
			num *= 2;
		}
		slimeRainTime = -rand.Next(3024, 6048) * 100;
		slimeRain = false;
		if (netMode == 0)
		{
			if (announce)
			{
				slimeWarningTime = slimeWarningDelay;
			}
			SkyManager.Instance.Deactivate("Slime");
		}
		else if (announce)
		{
			slimeWarningTime = slimeWarningDelay;
			NetMessage.SendData(7);
		}
	}

	private static void UpdateTime()
	{
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ff: Unknown result type (might be due to invalid IL or missing references)
		if (LanternNight.LanternsUp)
		{
			cloudBGActive = 0f;
			if (numClouds > 30)
			{
				numClouds = 30;
			}
		}
		if (ladyBugRainBoost > 0.0)
		{
			ladyBugRainBoost -= desiredWorldEventsUpdateRate;
		}
		if (pumpkinMoon)
		{
			bloodMoon = false;
			snowMoon = false;
		}
		if (snowMoon)
		{
			bloodMoon = false;
		}
		if ((netMode != 1 && !gameMenu) || netMode == 2)
		{
			if (slimeRainTime > 0.0)
			{
				slimeRainTime -= desiredWorldEventsUpdateRate;
				if (slimeRainTime <= 0.0)
				{
					StopSlimeRain();
				}
			}
			else if (slimeRainTime < 0.0)
			{
				slimeRainTime += desiredWorldEventsUpdateRate;
				if (slimeRainTime > 0.0)
				{
					slimeRainTime = 0.0;
				}
			}
			if (raining)
			{
				if (!CreativePowerManager.Instance.GetPower<CreativePowers.FreezeRainPower>().Enabled)
				{
					if (LanternNight.LanternsUp)
					{
						StopRain();
					}
					else
					{
						rainTime -= desiredWorldEventsUpdateRate;
						if (desiredWorldEventsUpdateRate > 0.0)
						{
							double num = 86400.0 / desiredWorldEventsUpdateRate / 24.0;
							if (rainTime <= 0.0)
							{
								StopRain();
							}
							else if (rand.NextDouble() <= 1.0 / (num * 2.0))
							{
								ChangeRain();
							}
						}
					}
				}
			}
			else if (!slimeRain && !LanternNight.LanternsUp && !LanternNight.NextNightIsLanternNight)
			{
				double num2 = 86400.0 / desiredWorldEventsUpdateRate;
				if (!CreativePowerManager.Instance.GetPower<CreativePowers.FreezeRainPower>().Enabled && desiredWorldEventsUpdateRate != 0.0)
				{
					if (rand.NextDouble() <= 1.0 / (num2 * 5.75))
					{
						StartRain();
					}
					else if (cloudBGActive >= 1f && rand.NextDouble() <= 1.0 / (num2 * 4.25))
					{
						StartRain();
					}
					else if (ladyBugRainBoost > 0.0 && rand.NextDouble() <= 1.0 / num2)
					{
						StartRain();
					}
				}
				if (!raining && !NPC.BusyWithAnyInvasionOfSorts() && dayTime && time < 27000.0 && desiredWorldEventsUpdateRate > 0.0)
				{
					double num3 = 450000.00000000006 / desiredWorldEventsUpdateRate;
					if (!NPC.downedSlimeKing)
					{
						num3 /= 2.0;
					}
					if (hardMode)
					{
						num3 *= 1.5;
					}
					bool flag = AnyPlayerReadyToFightKingSlime();
					if (!flag)
					{
						num3 *= 5.0;
					}
					if (num3 > 0.0 && (flag || expertMode) && rand.NextDouble() <= 1.0 / num3)
					{
						StartSlimeRain();
					}
				}
			}
		}
		if (maxRaining != oldMaxRaining)
		{
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
			oldMaxRaining = maxRaining;
		}
		UpdateTimeRate();
		double num4 = time;
		time += dayRate;
		CultistRitual.UpdateTime();
		BirthdayParty.UpdateTime();
		LanternNight.UpdateTime();
		Sandstorm.UpdateTime();
		DD2Event.UpdateTime();
		CreditsRollEvent.UpdateTime();
		WorldGen.mysticLogsEvent.UpdateTime();
		PylonSystem.Update();
		if (!dedServ)
		{
			if (NPC.MoonLordCountdown > 0)
			{
				float num5 = MathHelper.Clamp((float)Math.Sin((float)NPC.MoonLordCountdown / 60f * 0.5f) * 2f, 0f, 1f);
				num5 *= 0.75f - 0.5f * ((float)NPC.MoonLordCountdown / (float)NPC.MaxMoonLordCountdown);
				if (!Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
				{
					Terraria.Graphics.Effects.Filters.Scene.Activate("MoonLordShake", Main.player[myPlayer].position);
				}
				Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].GetShader().UseIntensity(num5);
			}
			else if (Terraria.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
			{
				Terraria.Graphics.Effects.Filters.Scene.Deactivate("MoonLordShake");
			}
		}
		if (NPC.MoonLordCountdown > 0)
		{
			NPC.MoonLordCountdown--;
			if (NPC.MoonLordCountdown <= 0 && netMode != 1)
			{
				NPC.SpawnOnPlayer(Player.FindClosest(new Vector2((float)(maxTilesX / 2), (float)worldSurface / 2f) * 16f, 0, 0), 398);
			}
		}
		if (NPC.taxCollector && netMode != 2 && !gameMenu)
		{
			Main.player[myPlayer].taxTimer += dayRate;
			if (Main.player[myPlayer].taxTimer >= Player.taxRate)
			{
				Main.player[myPlayer].taxTimer -= Player.taxRate;
				Main.player[myPlayer].CollectTaxes();
			}
		}
		if (netMode != 1)
		{
			UpdateSlimeRainWarning();
		}
		if (netMode != 1)
		{
			if (NPC.travelNPC)
			{
				if (!dayTime || time > 48600.0)
				{
					WorldGen.UnspawnTravelNPC();
				}
			}
			else if (!IsFastForwardingTime() && dayTime && time < 27000.0 && rand.NextDouble() < dayRate / 108000.0)
			{
				int num6 = 0;
				for (int i = 0; i < 200; i++)
				{
					if (npc[i].active && npc[i].townNPC && npc[i].type != 37 && npc[i].type != 453)
					{
						num6++;
					}
				}
				if (num6 >= 2)
				{
					WorldGen.SpawnTravelNPC();
				}
			}
			NPC.travelNPC = false;
		}
		bool stopEvents = ShouldNormalEventsBeAbleToStart();
		if (!dayTime)
		{
			eclipse = false;
			if (!IsFastForwardingTime() && !stopEvents)
			{
				if (WorldGen.spawnEye && netMode != 1 && time > 4860.0)
				{
					for (int j = 0; j < 255; j++)
					{
						if (Main.player[j].active && !Main.player[j].dead && ((double)Main.player[j].position.Y < worldSurface * 16.0 || remixWorld))
						{
							NPC.SpawnOnPlayer(j, 4);
							WorldGen.spawnEye = false;
							break;
						}
					}
				}
				if (WorldGen.spawnHardBoss > 0 && netMode != 1 && time > 4860.0)
				{
					bool flag2 = false;
					for (int k = 0; k < 200; k++)
					{
						if (npc[k].active && npc[k].boss)
						{
							flag2 = true;
						}
					}
					if (!flag2)
					{
						for (int l = 0; l < 255; l++)
						{
							if (Main.player[l].active && !Main.player[l].dead && ((double)Main.player[l].position.Y < worldSurface * 16.0 || remixWorld))
							{
								if (remixWorld && getGoodWorld)
								{
									NPC.SpawnMechQueen(l);
								}
								else if (WorldGen.spawnHardBoss == 1)
								{
									NPC.SpawnOnPlayer(l, 134);
								}
								else if (WorldGen.spawnHardBoss == 2)
								{
									NPC.SpawnOnPlayer(l, 125);
									NPC.SpawnOnPlayer(l, 126);
								}
								else if (WorldGen.spawnHardBoss == 3)
								{
									NPC.SpawnOnPlayer(l, 127);
								}
								break;
							}
						}
					}
					WorldGen.spawnHardBoss = 0;
				}
				if (netMode != 1)
				{
					double num7 = 16200.0;
					bool num8 = num4 < num7 && time >= num7;
					bool flag3 = raining;
					if (num8 && flag3 && (!NPC.downedDeerclops || rand.Next(4) == 0))
					{
						for (int m = 0; m < 255; m++)
						{
							Player player = Main.player[m];
							if (player.active && !player.dead && !((double)player.position.Y >= worldSurface * 16.0) && player.ZoneSnow && !(player.townNPCs > 0f) && (player.statLifeMax2 >= 200 || (int)player.statDefense >= 9) && !NPC.AnyDanger())
							{
								NPC.SpawnOnPlayer(m, 668);
								break;
							}
						}
					}
				}
			}
			if (time > 32400.0)
			{
				UpdateTime_StartDay(ref stopEvents);
			}
			HandleMeteorFall();
		}
		else
		{
			WorldGen.spawnHardBoss = 0;
			WorldGen.spawnEye = false;
			bloodMoon = false;
			stopMoonEvent();
			if (time > 54000.0)
			{
				UpdateTime_StartNight(ref stopEvents);
			}
			UpdateTime_SpawnTownNPCs();
		}
	}

	public static bool AnyPlayerReadyToFightKingSlime()
	{
		for (int i = 0; i < 255; i++)
		{
			if (player[i].active && player[i].ConsumedLifeCrystals > 2 && (int)player[i].statDefense > 8)
			{
				return true;
			}
		}
		return false;
	}

	public static void SkipToTime(int timeToSet, bool setIsDayTime)
	{
		_ = time;
		_ = dayTime;
		while (setIsDayTime != dayTime)
		{
			bool stopEvents = ShouldNormalEventsBeAbleToStart();
			if (dayTime)
			{
				UpdateTime_StartNight(ref stopEvents);
			}
			else
			{
				UpdateTime_StartDay(ref stopEvents);
			}
		}
		time = timeToSet;
		if (netMode == 2)
		{
			NetMessage.TrySendData(7);
		}
	}

	public static bool ShouldNormalEventsBeAbleToStart()
	{
		if (!NPC.LunarApocalypseIsUp && !NPC.AnyNPCs(398) && NPC.MoonLordCountdown <= 0)
		{
			return LanternNight.LanternsUp;
		}
		return true;
	}

	public static void UpdateTime_StartNight(ref bool stopEvents)
	{
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0554: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		if (fastForwardTimeToDusk)
		{
			fastForwardTimeToDusk = false;
			UpdateTimeRate();
		}
		if (moondialCooldown > 0)
		{
			moondialCooldown--;
		}
		NPC.ResetBadgerHatTime();
		NPC.freeCake = false;
		Star.NightSetup();
		NPC.setFireFlyChance();
		BirthdayParty.CheckNight();
		LanternNight.CheckNight();
		WorldGen.mysticLogsEvent.StartNight();
		WorldGen.prioritizedTownNPCType = 0;
		checkForSpawns = 0;
		if (rand.Next(50) == 0 && netMode != 1 && NPC.downedBoss2)
		{
			WorldGen.spawnMeteor = true;
		}
		if (LanternNight.LanternsUp)
		{
			stopEvents = true;
		}
		if (eclipse && netMode != 1)
		{
			AchievementsHelper.NotifyProgressionEvent(3);
		}
		eclipse = false;
		if (netMode != 1)
		{
			AchievementsHelper.NotifyProgressionEvent(0);
		}
		if (!IsFastForwardingTime() && !stopEvents)
		{
			if (!NPC.downedBoss1 && netMode != 1)
			{
				bool flag = false;
				for (int i = 0; i < 255; i++)
				{
					if (player[i].active && player[i].ConsumedLifeCrystals >= 5 && (int)player[i].statDefense > 10)
					{
						flag = true;
						break;
					}
				}
				if (flag && rand.Next(3) == 0)
				{
					int num = 0;
					for (int j = 0; j < 200; j++)
					{
						if (npc[j].active && npc[j].townNPC)
						{
							num++;
						}
					}
					if (num >= 4)
					{
						WorldGen.spawnEye = true;
						if (netMode == 0)
						{
							NewText(Lang.misc[9].Value, 50, byte.MaxValue, 130);
						}
						else if (netMode == 2)
						{
							ChatHelper.BroadcastChatMessage(Lang.misc[9].ToNetworkText(), new Color(50, 255, 130));
						}
					}
				}
			}
			if (netMode != 1 && !pumpkinMoon && !DD2Event.Ongoing && !snowMoon && WorldGen.altarCount > 0 && hardMode && !WorldGen.spawnEye && rand.Next(10) == 0)
			{
				bool flag2 = false;
				for (int k = 0; k < 200; k++)
				{
					if (npc[k].active && npc[k].boss)
					{
						flag2 = true;
					}
				}
				if (!flag2 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
				{
					if (remixWorld && getGoodWorld)
					{
						if (rand.Next(2) == 0)
						{
							WorldGen.spawnHardBoss = rand.Next(3) + 1;
							if (netMode == 0)
							{
								NewText(Lang.misc[108].Value, 50, byte.MaxValue, 130);
							}
							else if (netMode == 2)
							{
								ChatHelper.BroadcastChatMessage(Lang.misc[108].ToNetworkText(), new Color(50, 255, 130));
							}
						}
					}
					else
					{
						for (int l = 0; l < 1000; l++)
						{
							int num2 = rand.Next(3) + 1;
							if (num2 == 1 && !NPC.downedMechBoss1)
							{
								WorldGen.spawnHardBoss = num2;
								if (netMode == 0)
								{
									NewText(Lang.misc[28].Value, 50, byte.MaxValue, 130);
								}
								else if (netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(Lang.misc[28].ToNetworkText(), new Color(50, 255, 130));
								}
								break;
							}
							if (num2 == 2 && !NPC.downedMechBoss2)
							{
								WorldGen.spawnHardBoss = num2;
								if (netMode == 0)
								{
									NewText(Lang.misc[29].Value, 50, byte.MaxValue, 130);
								}
								else if (netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(Lang.misc[29].ToNetworkText(), new Color(50, 255, 130));
								}
								break;
							}
							if (num2 == 3 && !NPC.downedMechBoss3)
							{
								WorldGen.spawnHardBoss = num2;
								if (netMode == 0)
								{
									NewText(Lang.misc[30].Value, 50, byte.MaxValue, 130);
								}
								else if (netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(Lang.misc[30].ToNetworkText(), new Color(50, 255, 130));
								}
								break;
							}
						}
					}
				}
			}
			int maxValue = 9;
			if (tenthAnniversaryWorld)
			{
				maxValue = 6;
			}
			if (!WorldGen.spawnEye && moonPhase != 4 && rand.Next(maxValue) == 0 && netMode != 1)
			{
				for (int m = 0; m < 255; m++)
				{
					if (player[m].active && player[m].ConsumedLifeCrystals > 1)
					{
						bloodMoon = true;
						break;
					}
				}
				if (bloodMoon)
				{
					sundialCooldown = 0;
					moondialCooldown = 0;
					AchievementsHelper.NotifyProgressionEvent(4);
					if (netMode == 0)
					{
						NewText(Lang.misc[8].Value, 50, byte.MaxValue, 130);
					}
					else if (netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(Lang.misc[8].ToNetworkText(), new Color(50, 255, 130));
					}
				}
			}
		}
		time = 0.0;
		dayTime = false;
		if (netMode == 2)
		{
			NetMessage.SendData(7);
		}
	}

	public static void UpdateTime_StartDay(ref bool stopEvents)
	{
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		WorldGen.ResetTreeShakes();
		if (fastForwardTimeToDawn)
		{
			fastForwardTimeToDawn = false;
			UpdateTimeRate();
		}
		AnglerQuestSwap();
		BirthdayParty.CheckMorning();
		LanternNight.CheckMorning();
		if (invasionDelay > 0)
		{
			invasionDelay--;
		}
		WorldGen.prioritizedTownNPCType = 0;
		checkForSpawns = 0;
		time = 0.0;
		if (bloodMoon && netMode != 1)
		{
			AchievementsHelper.NotifyProgressionEvent(5);
		}
		bloodMoon = false;
		CheckForMoonEventsScoreDisplay();
		CheckForMoonEventsStartingTemporarySeasons();
		checkXMas();
		checkHalloween();
		stopMoonEvent();
		dayTime = true;
		if (sundialCooldown > 0)
		{
			sundialCooldown--;
		}
		moonPhase++;
		if (moonPhase >= 8)
		{
			moonPhase = 0;
		}
		if (drunkWorld && netMode != 1)
		{
			WorldGen.crimson = !WorldGen.crimson;
		}
		if (netMode == 2)
		{
			NetMessage.SendData(7);
		}
		if (netMode == 1)
		{
			return;
		}
		AchievementsHelper.NotifyProgressionEvent(1);
		if (stopEvents)
		{
			return;
		}
		if (hardMode && NPC.downedMechBossAny && rand.Next(20) == 0)
		{
			sundialCooldown = 0;
			moondialCooldown = 0;
			eclipse = true;
			AchievementsHelper.NotifyProgressionEvent(2);
			if (eclipse)
			{
				if (remixWorld)
				{
					if (netMode == 0)
					{
						NewText(Lang.misc[106].Value, 50, byte.MaxValue, 130);
					}
					else if (netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(Lang.misc[106].ToNetworkText(), new Color(50, 255, 130));
					}
				}
				else if (netMode == 0)
				{
					NewText(Lang.misc[20].Value, 50, byte.MaxValue, 130);
				}
				else if (netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(Lang.misc[20].ToNetworkText(), new Color(50, 255, 130));
				}
			}
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
		}
		else
		{
			if (snowMoon || pumpkinMoon || DD2Event.Ongoing)
			{
				return;
			}
			if (WorldGen.shadowOrbSmashed)
			{
				if (!NPC.downedGoblins)
				{
					if (rand.Next(3) == 0)
					{
						StartInvasion();
					}
				}
				else if ((hardMode && rand.Next(60) == 0) || (!hardMode && rand.Next(30) == 0))
				{
					StartInvasion();
				}
			}
			if (invasionType == 0 && hardMode && WorldGen.altarCount > 0 && ((NPC.downedPirates && rand.Next(60) == 0) || (!NPC.downedPirates && rand.Next(30) == 0)))
			{
				StartInvasion(3);
			}
		}
	}

	private static void HandleMeteorFall()
	{
		if (netMode != 1 && WorldGen.spawnMeteor)
		{
			if (time < 15000.0)
			{
				_canShowMeteorFall = true;
			}
			else
			{
				if (_canShowMeteorFall && time <= 16200.0)
				{
					AmbienceServer.ForceEntitySpawn(new AmbienceServer.AmbienceSpawnInfo
					{
						skyEntityType = SkyEntityType.Meteor,
						targetPlayer = -1
					});
				}
				_canShowMeteorFall = false;
			}
		}
		if (time > 16200.0 && WorldGen.spawnMeteor)
		{
			WorldGen.spawnMeteor = false;
			WorldGen.dropMeteor();
		}
	}

	private static void UpdateSlimeRainWarning()
	{
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		if (slimeWarningTime <= 0)
		{
			return;
		}
		slimeWarningTime--;
		if (slimeWarningTime > 0)
		{
			return;
		}
		if (netMode == 0)
		{
			if (slimeRainTime > 0.0)
			{
				NewText(Lang.gen[74].Value, 50, byte.MaxValue, 130);
			}
			else
			{
				NewText(Lang.gen[75].Value, 50, byte.MaxValue, 130);
			}
		}
		else if (slimeRainTime > 0.0)
		{
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[74].Key), new Color(50, 255, 130));
		}
		else
		{
			ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[75].Key), new Color(50, 255, 130));
		}
	}

	public static BestiaryUnlockProgressReport GetBestiaryProgressReport()
	{
		List<BestiaryEntry> vanillaEntries = BestiaryDB.GetBestiaryEntriesByMod(null);
		BestiaryUnlockProgressReport result = default(BestiaryUnlockProgressReport);
		result.EntriesTotal = vanillaEntries.Count;
		result.CompletionAmountTotal = vanillaEntries.Count((BestiaryEntry e) => e.UIInfoProvider.GetEntryUICollectionInfo().UnlockState > BestiaryEntryUnlockState.NotKnownAtAll_0);
		return result;
	}

	private static void UpdateTime_SpawnTownNPCs()
	{
		double worldUpdateRate = WorldGen.GetWorldUpdateRate();
		if (netMode == 1 || worldUpdateRate <= 0.0)
		{
			return;
		}
		checkForSpawns++;
		if ((double)checkForSpawns < 7200.0 / worldUpdateRate)
		{
			return;
		}
		checkForSpawns = 0;
		int num = 0;
		for (int i = 0; i < 255; i++)
		{
			if (player[i].active)
			{
				num++;
			}
		}
		for (int j = 0; j < townNPCCanSpawn.Length; j++)
		{
			townNPCCanSpawn[j] = false;
		}
		WorldGen.prioritizedTownNPCType = 0;
		int num12 = 0;
		int num23 = 0;
		int num34 = 0;
		int num38 = 0;
		int num39 = 0;
		int num40 = 0;
		int num41 = 0;
		int num42 = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		int num5 = 0;
		int num6 = 0;
		int num7 = 0;
		int num8 = 0;
		int num9 = 0;
		int num10 = 0;
		int num11 = 0;
		int num13 = 0;
		int num14 = 0;
		int num15 = 0;
		int num16 = 0;
		int num17 = 0;
		int num18 = 0;
		int num19 = 0;
		int num20 = 0;
		int num21 = 0;
		int num22 = 0;
		int num24 = 0;
		int num25 = 0;
		int num26 = 0;
		int num27 = 0;
		int num28 = 0;
		int num29 = 0;
		int num30 = 0;
		int num31 = 0;
		int num32 = 0;
		int num33 = 0;
		int num35 = 0;
		for (int k = 0; k < 200; k++)
		{
			if (npc[k].active && npc[k].townNPC)
			{
				if (npc[k].type != 368 && npc[k].type != 37 && npc[k].type != 453 && !npc[k].homeless)
				{
					WorldGen.QuickFindHome(k);
				}
				if (npc[k].type == 37)
				{
					num40++;
				}
				if (npc[k].type == 17)
				{
					num12++;
				}
				if (npc[k].type == 18)
				{
					num23++;
				}
				if (npc[k].type == 19)
				{
					num38++;
				}
				if (npc[k].type == 20)
				{
					num34++;
				}
				if (npc[k].type == 22)
				{
					num39++;
				}
				if (npc[k].type == 38)
				{
					num41++;
				}
				if (npc[k].type == 54)
				{
					num42++;
				}
				if (npc[k].type == 107)
				{
					num3++;
				}
				if (npc[k].type == 108)
				{
					num2++;
				}
				if (npc[k].type == 124)
				{
					num4++;
				}
				if (npc[k].type == 142)
				{
					num5++;
				}
				if (npc[k].type == 160)
				{
					num6++;
				}
				if (npc[k].type == 178)
				{
					num7++;
				}
				if (npc[k].type == 207)
				{
					num8++;
				}
				if (npc[k].type == 208)
				{
					num9++;
				}
				if (npc[k].type == 209)
				{
					num10++;
				}
				if (npc[k].type == 227)
				{
					num11++;
				}
				if (npc[k].type == 228)
				{
					num13++;
				}
				if (npc[k].type == 229)
				{
					num14++;
				}
				if (npc[k].type == 353)
				{
					num15++;
				}
				if (npc[k].type == 369)
				{
					num16++;
				}
				if (npc[k].type == 441)
				{
					num17++;
				}
				if (npc[k].type == 550)
				{
					num18++;
				}
				if (npc[k].type == 588)
				{
					num19++;
				}
				if (npc[k].type == 633)
				{
					num20++;
				}
				if (npc[k].type == 637)
				{
					num21++;
				}
				if (npc[k].type == 638)
				{
					num22++;
				}
				if (npc[k].type == 656)
				{
					num24++;
				}
				if (npc[k].type == 670)
				{
					num25++;
				}
				if (npc[k].type == 678)
				{
					num26++;
				}
				if (npc[k].type == 679)
				{
					num27++;
				}
				if (npc[k].type == 680)
				{
					num28++;
				}
				if (npc[k].type == 681)
				{
					num29++;
				}
				if (npc[k].type == 682)
				{
					num30++;
				}
				if (npc[k].type == 683)
				{
					num31++;
				}
				if (npc[k].type == 684)
				{
					num32++;
				}
				if (npc[k].type == 663)
				{
					num33++;
				}
				num35++;
			}
		}
		if (WorldGen.prioritizedTownNPCType == 0)
		{
			bool flag = NPC.SpawnAllowed_Merchant();
			bool flag2 = NPC.SpawnAllowed_ArmsDealer();
			bool flag3 = NPC.SpawnAllowed_Nurse();
			bool flag4 = NPC.SpawnAllowed_DyeTrader();
			bool flag5 = NPC.SpawnAllowed_Demolitionist();
			BestiaryUnlockProgressReport bestiaryProgressReport = GetBestiaryProgressReport();
			if (!NPC.downedBoss3 && num40 == 0)
			{
				int num36 = NPC.NewNPC(NPC.GetSpawnSourceForTownSpawn(), dungeonX * 16 + 8, dungeonY * 16, 37);
				npc[num36].homeless = false;
				npc[num36].homeTileX = dungeonX;
				npc[num36].homeTileY = dungeonY;
			}
			bool flag6 = false;
			if (rand.Next(40) == 0)
			{
				flag6 = true;
			}
			bool flag7 = flag6 && num35 >= 14;
			if (NPC.unlockedPartyGirlSpawn)
			{
				flag7 = true;
			}
			bool flag8 = BirthdayParty.GenuineParty;
			if (NPC.unlockedSlimeGreenSpawn)
			{
				flag8 = true;
			}
			if (num39 < 1)
			{
				townNPCCanSpawn[22] = true;
			}
			if (flag && num12 < 1)
			{
				townNPCCanSpawn[17] = true;
			}
			if (flag3 && num23 < 1 && num12 > 0)
			{
				townNPCCanSpawn[18] = true;
			}
			if (flag2 && num38 < 1)
			{
				townNPCCanSpawn[19] = true;
			}
			if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num34 < 1)
			{
				townNPCCanSpawn[20] = true;
			}
			if (flag5 && num12 > 0 && num41 < 1)
			{
				townNPCCanSpawn[38] = true;
			}
			if (NPC.savedStylist && num15 < 1)
			{
				townNPCCanSpawn[353] = true;
			}
			if (NPC.savedAngler && num16 < 1)
			{
				townNPCCanSpawn[369] = true;
			}
			if (NPC.downedBoss3 && num42 < 1)
			{
				townNPCCanSpawn[54] = true;
			}
			if (NPC.savedGoblin && num3 < 1)
			{
				townNPCCanSpawn[107] = true;
			}
			if (NPC.savedTaxCollector && num17 < 1)
			{
				townNPCCanSpawn[441] = true;
			}
			if (NPC.savedWizard && num2 < 1)
			{
				townNPCCanSpawn[108] = true;
			}
			if (NPC.savedMech && num4 < 1)
			{
				townNPCCanSpawn[124] = true;
			}
			if (NPC.downedFrost && num5 < 1 && xMas)
			{
				townNPCCanSpawn[142] = true;
			}
			if (((tenthAnniversaryWorld && !remixWorld) || NPC.downedMechBossAny) && num7 < 1)
			{
				townNPCCanSpawn[178] = true;
			}
			if (flag4 && num8 < 1 && num35 >= 4)
			{
				townNPCCanSpawn[207] = true;
			}
			if (NPC.downedQueenBee && num13 < 1)
			{
				townNPCCanSpawn[228] = true;
			}
			if (NPC.downedPirates && num14 < 1)
			{
				townNPCCanSpawn[229] = true;
			}
			if (num6 < 1 && hardMode)
			{
				townNPCCanSpawn[160] = true;
			}
			if (hardMode && NPC.downedPlantBoss && num10 < 1)
			{
				townNPCCanSpawn[209] = true;
			}
			if (num35 >= 8 && num11 < 1)
			{
				townNPCCanSpawn[227] = true;
			}
			if (flag7 && num9 < 1)
			{
				townNPCCanSpawn[208] = true;
			}
			if (NPC.savedBartender && num18 < 1)
			{
				townNPCCanSpawn[550] = true;
			}
			if (NPC.savedGolfer && num19 < 1)
			{
				townNPCCanSpawn[588] = true;
			}
			if (bestiaryProgressReport.CompletionPercent >= 0.1f && num20 < 1)
			{
				townNPCCanSpawn[633] = true;
			}
			if (NPC.boughtCat && num21 < 1)
			{
				townNPCCanSpawn[637] = true;
			}
			if (NPC.boughtDog && num22 < 1)
			{
				townNPCCanSpawn[638] = true;
			}
			if (NPC.boughtBunny && num24 < 1)
			{
				townNPCCanSpawn[656] = true;
			}
			if (NPC.unlockedSlimeBlueSpawn && num25 < 1)
			{
				townNPCCanSpawn[670] = true;
			}
			if (flag8 && num26 < 1)
			{
				townNPCCanSpawn[678] = true;
			}
			if (NPC.unlockedSlimeOldSpawn && num27 < 1)
			{
				townNPCCanSpawn[679] = true;
			}
			if (NPC.unlockedSlimePurpleSpawn && num28 < 1)
			{
				townNPCCanSpawn[680] = true;
			}
			if (NPC.unlockedSlimeRainbowSpawn && num29 < 1)
			{
				townNPCCanSpawn[681] = true;
			}
			if (NPC.unlockedSlimeRedSpawn && num30 < 1)
			{
				townNPCCanSpawn[682] = true;
			}
			if (NPC.unlockedSlimeYellowSpawn && num31 < 1)
			{
				townNPCCanSpawn[683] = true;
			}
			if (NPC.unlockedSlimeCopperSpawn && num32 < 1)
			{
				townNPCCanSpawn[684] = true;
			}
			bool flag9 = num12 > 0 && num23 > 0 && num34 > 0 && num38 > 0 && num39 > 0 && num41 > 0 && num42 > 0 && num2 > 0 && num3 > 0 && num4 > 0 && num6 > 0 && num7 > 0 && num8 > 0 && num9 > 0 && num10 > 0 && num11 > 0 && num13 > 0 && num14 > 0 && num15 > 0 && num16 > 0 && num17 > 0 && num18 > 0 && num19 > 0 && num20 > 0;
			if (tenthAnniversaryWorld && !remixWorld)
			{
				flag9 = true;
			}
			if (NPC.unlockedPrincessSpawn)
			{
				flag9 = true;
			}
			if (flag9 && num33 < 1)
			{
				townNPCCanSpawn[663] = true;
			}
			int num37 = WorldGen.prioritizedTownNPCType;
			if (num37 == 0 && NPC.boughtCat && num21 < 1)
			{
				num37 = 637;
			}
			if (num37 == 0 && NPC.boughtDog && num22 < 1)
			{
				num37 = 638;
			}
			if (num37 == 0 && NPC.boughtBunny && num24 < 1)
			{
				num37 = 656;
			}
			if (num37 == 0 && NPC.unlockedSlimeBlueSpawn && num25 < 1)
			{
				num37 = 670;
			}
			if (num37 == 0 && flag8 && num26 < 1)
			{
				num37 = 678;
			}
			if (num37 == 0 && NPC.unlockedSlimeOldSpawn && num27 < 1)
			{
				num37 = 679;
			}
			if (num37 == 0 && NPC.unlockedSlimePurpleSpawn && num28 < 1)
			{
				num37 = 680;
			}
			if (num37 == 0 && NPC.unlockedSlimeRainbowSpawn && num29 < 1)
			{
				num37 = 681;
			}
			if (num37 == 0 && NPC.unlockedSlimeRedSpawn && num30 < 1)
			{
				num37 = 682;
			}
			if (num37 == 0 && NPC.unlockedSlimeYellowSpawn && num31 < 1)
			{
				num37 = 683;
			}
			if (num37 == 0 && NPC.unlockedSlimeCopperSpawn && num32 < 1)
			{
				num37 = 684;
			}
			if (num37 == 0 && num39 < 1)
			{
				num37 = 22;
			}
			if (num37 == 0 && flag && num12 < 1)
			{
				num37 = 17;
			}
			if (num37 == 0 && flag3 && num23 < 1 && num12 > 0)
			{
				num37 = 18;
			}
			if (num37 == 0 && flag2 && num38 < 1)
			{
				num37 = 19;
			}
			if (num37 == 0 && NPC.savedGoblin && num3 < 1)
			{
				num37 = 107;
			}
			if (num37 == 0 && NPC.savedTaxCollector && num17 < 1)
			{
				num37 = 441;
			}
			if (num37 == 0 && NPC.savedWizard && num2 < 1)
			{
				num37 = 108;
			}
			if (num37 == 0 && hardMode && num6 < 1)
			{
				num37 = 160;
			}
			if (num37 == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num34 < 1)
			{
				num37 = 20;
			}
			if (num37 == 0 && flag5 && num12 > 0 && num41 < 1)
			{
				num37 = 38;
			}
			if (num37 == 0 && NPC.downedQueenBee && num13 < 1)
			{
				num37 = 228;
			}
			if (num37 == 0 && NPC.downedMechBossAny && num7 < 1)
			{
				num37 = 178;
			}
			if (num37 == 0 && NPC.savedMech && num4 < 1)
			{
				num37 = 124;
			}
			if (num37 == 0 && NPC.savedAngler && num16 < 1)
			{
				num37 = 369;
			}
			if (num37 == 0 && hardMode && NPC.downedPlantBoss && num10 < 1)
			{
				num37 = 209;
			}
			if (num37 == 0 && NPC.downedPirates && num14 < 1)
			{
				num37 = 229;
			}
			if (num37 == 0 && NPC.downedBoss3 && num42 < 1)
			{
				num37 = 54;
			}
			if (num37 == 0 && NPC.savedStylist && num15 < 1)
			{
				num37 = 353;
			}
			if (num37 == 0 && num35 >= 4 && flag4 && num8 < 1)
			{
				num37 = 207;
			}
			if (num37 == 0 && num35 >= 8 && num11 < 1)
			{
				num37 = 227;
			}
			if (num37 == 0 && flag7 && num9 < 1)
			{
				num37 = 208;
			}
			if (num37 == 0 && NPC.downedFrost && num5 < 1 && xMas)
			{
				num37 = 142;
			}
			if (num37 == 0 && NPC.savedBartender && num18 < 1)
			{
				num37 = 550;
			}
			if (num37 == 0 && NPC.savedGolfer && num19 < 1)
			{
				num37 = 588;
			}
			if (num37 == 0 && bestiaryProgressReport.CompletionPercent >= 0.1f && num20 < 1)
			{
				num37 = 633;
			}
			if (num37 == 0 && flag9 && num33 < 1)
			{
				num37 = 663;
			}
			WorldGen.prioritizedTownNPCType = num37;
		}
		NPCLoader.CanTownNPCSpawn(num35);
	}

	/// <summary>
	/// Multiplies the input damage by a random value between <c>0.85f</c> and <c>1.15f</c>.
	/// </summary>
	/// <param name="dmg">The damage to vary.</param>
	/// <param name="luck">
	/// How lucky the damager is, in the range [-1f, 1f].
	/// <br /> If <c><paramref name="luck" /> &gt; 0f</c>, there is a <c><paramref name="luck" /></c>% chance that damage variation is rerolled, with the higher value being used.
	/// <br /> If <c><paramref name="luck" /> &lt; 0f</c>, there is a <c>-<paramref name="luck" /></c>% chance that damage variation is rerolled, with the lower value being used.
	/// </param>
	/// <returns>The varied damage value, rounded to the nearest integer.</returns>
	public static int DamageVar(float dmg, float luck = 0f)
	{
		return DamageVar(dmg, DefaultDamageVariationPercent, luck);
	}

	public static int DamageVar(float dmg, int percent, float luck = 0f)
	{
		float num = dmg * (1f + (float)rand.Next(-percent, percent + 1) * 0.01f);
		if (luck > 0f)
		{
			if (rand.NextFloat() < luck)
			{
				float num2 = dmg * (1f + (float)rand.Next(-percent, percent + 1) * 0.01f);
				if (num2 > num)
				{
					num = num2;
				}
			}
		}
		else if (luck < 0f && rand.NextFloat() < 0f - luck)
		{
			float num3 = dmg * (1f + (float)rand.Next(-percent, percent + 1) * 0.01f);
			if (num3 < num)
			{
				num = num3;
			}
		}
		return (int)Math.Round(num);
	}

	public void OnTileChangeEvent(int x, int y, int count, TileChangeType eventType)
	{
		WorldGen.PlayLiquidChangeSound(eventType, x, y, count);
	}

	public static void ClearPendingPlayerSelectCallbacks()
	{
		_pendingCharacterSelect = null;
	}

	public static void SelectPlayer(PlayerFileData data)
	{
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		if (_pendingCharacterSelect != null)
		{
			_pendingCharacterSelect(data);
			_pendingCharacterSelect = null;
		}
		else if (menuMultiplayer)
		{
			ServerSideCharacter = false;
			data.SetAsActive();
			SoundEngine.PlaySound(10);
			if (autoJoin)
			{
				if (Netplay.SetRemoteIP(getIP))
				{
					menuMode = 10;
					Netplay.StartTcpClient();
				}
				autoJoin = false;
			}
			else if (menuServer)
			{
				LoadWorlds();
				menuMode = 6;
			}
			else
			{
				menuMode = 13;
				clrInput();
			}
		}
		else
		{
			ServerSideCharacter = false;
			myPlayer = 0;
			data.SetAsActive();
			player[myPlayer].position = Vector2.Zero;
			LoadWorlds();
			SoundEngine.PlaySound(10);
			menuMode = 6;
		}
	}

	public static void ToggleFullScreen()
	{
		SetFullScreen(!graphics.IsFullScreen);
	}

	public static void SetFullScreen(bool fullscreen)
	{
		SetDisplayMode(PendingResolutionWidth, BorderedHeight(PendingResolutionHeight, fullscreen), fullscreen);
	}

	public static void SetResolution(int width, int height)
	{
		SetDisplayMode(width, height, graphics.IsFullScreen);
	}

	public static void SetDisplayMode(int width, int height, bool fullscreen)
	{
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		screenMaximized = false;
		screenMaximized = false;
		bool flag2 = false;
		Viewport viewport;
		int num3;
		int num4;
		if (screenBorderless || screenMaximized || graphics.IsFullScreen || fullscreen)
		{
			if (PlayerInput.SteamDeckIsUsed && !fullscreen && !graphics.IsFullScreen)
			{
				width = 1280;
				height = 800;
				TryPickingDefaultUIScale(800f);
			}
			if (width > maxScreenW)
			{
				float num5 = (float)height / (float)width;
				width = maxScreenW;
				height = (int)(num5 * (float)width);
			}
			if (height > maxScreenH)
			{
				float num6 = (float)width / (float)height;
				height = maxScreenH;
				width = (int)(num6 * (float)height);
			}
			if (!graphics.IsFullScreen)
			{
				int preferredBackBufferWidth = graphics.PreferredBackBufferWidth;
				viewport = graphics.GraphicsDevice.Viewport;
				num3 = Math.Max(preferredBackBufferWidth, ((Viewport)(ref viewport)).Width);
				int preferredBackBufferHeight = graphics.PreferredBackBufferHeight;
				viewport = graphics.GraphicsDevice.Viewport;
				num4 = Math.Max(preferredBackBufferHeight, ((Viewport)(ref viewport)).Height);
				if (num3 != graphics.PreferredBackBufferWidth || num4 != graphics.PreferredBackBufferHeight)
				{
					flag2 = true;
				}
			}
			else
			{
				num3 = graphics.PreferredBackBufferWidth;
				num4 = graphics.PreferredBackBufferHeight;
			}
		}
		else
		{
			PlayerInput.RawMouseScale = Vector2.One;
			width = Math.Min(width, maxScreenW);
			height = Math.Min(height, maxScreenH);
			viewport = graphics.GraphicsDevice.Viewport;
			num3 = ((Viewport)(ref viewport)).Width;
			viewport = graphics.GraphicsDevice.Viewport;
			num4 = ((Viewport)(ref viewport)).Height;
			int preferredBackBufferWidth2 = graphics.PreferredBackBufferWidth;
			viewport = graphics.GraphicsDevice.Viewport;
			int num7;
			if (preferredBackBufferWidth2 == ((Viewport)(ref viewport)).Width)
			{
				int preferredBackBufferHeight2 = graphics.PreferredBackBufferHeight;
				viewport = graphics.GraphicsDevice.Viewport;
				num7 = ((preferredBackBufferHeight2 != ((Viewport)(ref viewport)).Height) ? 1 : 0);
			}
			else
			{
				num7 = 1;
			}
			flag2 = (byte)num7 != 0;
		}
		width = Math.Max(width, minScreenW);
		height = Math.Max(height, minScreenH);
		if (graphics.IsFullScreen != fullscreen)
		{
			graphics.PreferredBackBufferWidth = width;
			graphics.PreferredBackBufferHeight = height;
			graphics.ApplyChanges();
			graphics.ToggleFullScreen();
		}
		if (width != num3 || height != num4 || flag2)
		{
			mapTime = 0;
			if (gamePaused)
			{
				renderNow = true;
			}
			screenWidth = width;
			screenHeight = height;
			graphics.PreferredBackBufferWidth = screenWidth;
			graphics.PreferredBackBufferHeight = screenHeight;
			if (width != num3 || height != num4)
			{
				graphics.ApplyChanges();
			}
			PlayerInput.CacheOriginalScreenDimensions();
			FixUIScale();
			if (Main.OnResolutionChanged != null)
			{
				Main.OnResolutionChanged(new Vector2((float)screenWidth, (float)screenHeight));
			}
			PendingResolutionWidth = screenWidth;
			PendingResolutionHeight = screenHeight;
			PlayerInput.CacheOriginalScreenDimensions();
			Lighting.Initialize();
			if (!drawToScreen && !_isResizingAndRemakingTargets)
			{
				_isResizingAndRemakingTargets = true;
				instance.InitTargets();
				_isResizingAndRemakingTargets = false;
			}
			UserInterface.ActiveInstance.Recalculate();
			instance._needsMenuUIRecalculation = true;
			Console.WriteLine(Language.GetTextValue("Misc.ResolutionChanged", width, height));
			chatMonitor.OnResolutionChange();
		}
		if (!graphics.SynchronizeWithVerticalRetrace)
		{
			graphics.SynchronizeWithVerticalRetrace = true;
			graphics.ApplyChanges();
		}
	}

	public static void FixUIScale()
	{
		UIScale = UIScaleWanted;
	}

	public void FullscreenStartup()
	{
		startFullscreen = false;
		int currentValue = graphics.PreferredBackBufferWidth;
		int currentValue2 = graphics.PreferredBackBufferHeight;
		Configuration.Get("DisplayWidth", ref currentValue);
		Configuration.Get("DisplayHeight", ref currentValue2);
		SetDisplayMode(currentValue, currentValue2, fullscreen: true);
	}

	public void UpdateDisplaySettings()
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		if (startFullscreen)
		{
			FullscreenStartup();
		}
		Viewport viewport = ((Game)this).GraphicsDevice.Viewport;
		int width = ((Viewport)(ref viewport)).Width;
		viewport = ((Game)this).GraphicsDevice.Viewport;
		SetResolution(width, ((Viewport)(ref viewport)).Height);
	}

	public static void OpenPlayerSelect(OnPlayerSelected method)
	{
		if ((gameMenu && (menuMode == 10 || menuMode == 14)) || WorldGen.gen)
		{
			return;
		}
		if (!gameMenu)
		{
			WorldGen.SaveAndQuit(delegate
			{
				menuMode = 888;
				_blockFancyUIWhileLoading = true;
				LoadPlayers();
				MenuUI.SetState(_characterSelectMenu);
				_blockFancyUIWhileLoading = false;
				_pendingCharacterSelect = method;
			});
		}
		else
		{
			menuMode = 888;
			_blockFancyUIWhileLoading = true;
			LoadPlayers();
			MenuUI.SetState(_characterSelectMenu);
			_blockFancyUIWhileLoading = false;
			_pendingCharacterSelect = method;
		}
	}

	public static void SwitchNetMode(int mode)
	{
		if (mode >= 0 && mode <= 2)
		{
			_targetNetMode = mode;
			_hasPendingNetmodeChange = true;
		}
	}

	public static void WeGameRequireExitGame()
	{
		GameAskedToQuit = true;
	}

	private static int BorderedHeight(int height, bool state)
	{
		return (int)((double)height * (state ? 1.0 : (153.0 / 160.0)));
	}

	/// <summary>
	/// Checks if a tile at the given coordinates counts towards tile coloring from the Spelunker buff, and is detected by various pets.
	/// </summary>
	public static bool IsTileSpelunkable(int tileX, int tileY)
	{
		Tile tile = Main.tile[tileX, tileY];
		return IsTileSpelunkable(tileX, tileY, tile.type, tile.frameX, tile.frameY);
	}

	/// <summary>
	/// Checks if a tile at the given coordinates counts towards tile coloring from the Biome Sight buff.
	/// </summary>
	public static bool IsTileBiomeSightable(int tileX, int tileY, ref Color sightColor)
	{
		Tile tile = Main.tile[tileX, tileY];
		return IsTileBiomeSightable(tileX, tileY, tile.type, tile.frameX, tile.frameY, ref sightColor);
	}

	public static void InfoDisplayPageHandler(int startX, ref string mouseText, out int startingDisplay, out int endingDisplay)
	{
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_032a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_0340: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_037e: Unknown result type (might be due to invalid IL or missing references)
		//IL_038d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0399: Unknown result type (might be due to invalid IL or missing references)
		//IL_039f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0253: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		startingDisplay = 0;
		endingDisplay = InfoDisplayLoader.InfoDisplayCount;
		if (!playerInventory || InfoDisplayLoader.ActiveDisplays() <= 12)
		{
			return;
		}
		startingDisplay = 12 * InfoDisplayLoader.InfoDisplayPage;
		if (InfoDisplayLoader.ActiveDisplays() - startingDisplay <= 12)
		{
			endingDisplay = InfoDisplayLoader.ActiveDisplays();
		}
		else
		{
			endingDisplay = startingDisplay + 12;
		}
		if (startingDisplay >= 8)
		{
			startingDisplay++;
		}
		endingDisplay++;
		Texture2D buttonTexture = UICommon.InfoDisplayPageArrowTexture.Value;
		bool hovering = false;
		GetInfoAccIconPosition(11, startX, out var X, out var Y);
		Vector2 buttonPosition = default(Vector2);
		((Vector2)(ref buttonPosition))._002Ector((float)X, (float)(Y + 20));
		if ((float)mouseX >= buttonPosition.X && (float)mouseY >= buttonPosition.Y && (float)mouseX <= buttonPosition.X + (float)buttonTexture.Width && (float)mouseY <= buttonPosition.Y + (float)buttonTexture.Height && !PlayerInput.IgnoreMouseInterface)
		{
			hovering = true;
			player[myPlayer].mouseInterface = true;
			if (mouseLeft && mouseLeftRelease)
			{
				SoundEngine.PlaySound(12);
				mouseLeftRelease = false;
				if (InfoDisplayLoader.ActivePages() != InfoDisplayLoader.InfoDisplayPage + 1)
				{
					InfoDisplayLoader.InfoDisplayPage++;
				}
				else
				{
					InfoDisplayLoader.InfoDisplayPage = 0;
				}
			}
			if (!Main.mouseText)
			{
				mouseText = ((InfoDisplayLoader.ActivePages() != InfoDisplayLoader.InfoDisplayPage + 1) ? Language.GetTextValue("tModLoader.NextInfoAccPage") : Language.GetTextValue("tModLoader.FirstInfoAccPage"));
				Main.mouseText = true;
			}
		}
		spriteBatch.Draw(buttonTexture, buttonPosition, (Rectangle?)new Rectangle(0, 0, buttonTexture.Width, buttonTexture.Height), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		if (hovering)
		{
			spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, buttonPosition - Vector2.One * 2f, (Rectangle?)null, OurFavoriteColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
		hovering = false;
		GetInfoAccIconPosition(0, startX, out X, out var _);
		((Vector2)(ref buttonPosition))._002Ector((float)X, (float)(Y + 20));
		if ((float)mouseX >= buttonPosition.X && (float)mouseY >= buttonPosition.Y && (float)mouseX <= buttonPosition.X + (float)buttonTexture.Width && (float)mouseY <= buttonPosition.Y + (float)buttonTexture.Height && !PlayerInput.IgnoreMouseInterface)
		{
			hovering = true;
			player[myPlayer].mouseInterface = true;
			if (mouseLeft && mouseLeftRelease)
			{
				SoundEngine.PlaySound(12);
				mouseLeftRelease = false;
				if (InfoDisplayLoader.InfoDisplayPage != 0)
				{
					InfoDisplayLoader.InfoDisplayPage--;
				}
				else
				{
					InfoDisplayLoader.InfoDisplayPage = InfoDisplayLoader.ActivePages() - 1;
				}
			}
			if (!Main.mouseText)
			{
				mouseText = ((InfoDisplayLoader.InfoDisplayPage != 0) ? Language.GetTextValue("tModLoader.PreviousInfoAccPage") : Language.GetTextValue("tModLoader.LastInfoAccPage"));
				Main.mouseText = true;
			}
		}
		spriteBatch.Draw(buttonTexture, buttonPosition, (Rectangle?)new Rectangle(0, 0, buttonTexture.Width, buttonTexture.Height), Color.White, 0f, default(Vector2), 1f, (SpriteEffects)1, 0f);
		if (hovering)
		{
			spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, buttonPosition - Vector2.One * 2f, (Rectangle?)null, OurFavoriteColor, 0f, default(Vector2), 1f, (SpriteEffects)0, 0f);
		}
	}

	public static void BuilderTogglePageHandler(int startY, int activeToggles, out bool moveDownForButton, out int startIndex, out int endIndex)
	{
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0414: Unknown result type (might be due to invalid IL or missing references)
		//IL_0423: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0372: Unknown result type (might be due to invalid IL or missing references)
		//IL_037c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0381: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a8: Unknown result type (might be due to invalid IL or missing references)
		startIndex = 0;
		endIndex = activeToggles;
		moveDownForButton = false;
		string text = "";
		if (activeToggles <= 12)
		{
			return;
		}
		startIndex = 12 * BuilderToggleLoader.BuilderTogglePage;
		if (activeToggles - startIndex < 12)
		{
			endIndex = activeToggles;
		}
		else if (startIndex == 0)
		{
			endIndex = startIndex + 12;
		}
		else
		{
			endIndex = startIndex + 11;
		}
		Texture2D buttonTexture = UICommon.InfoDisplayPageArrowTexture.Value;
		bool hover = false;
		Vector2 buttonPosition = default(Vector2);
		((Vector2)(ref buttonPosition))._002Ector(3f, (float)startY - 6f);
		if (BuilderToggleLoader.BuilderTogglePage != 0)
		{
			moveDownForButton = true;
			spriteBatch.Draw(buttonTexture, buttonPosition + new Vector2(0f, 13f), (Rectangle?)new Rectangle(0, 0, buttonTexture.Width, buttonTexture.Height), Color.White, -(float)Math.PI / 2f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			if ((float)mouseX >= buttonPosition.X && (float)mouseY >= buttonPosition.Y && (float)mouseX <= buttonPosition.X + (float)buttonTexture.Width && (float)mouseY <= buttonPosition.Y + (float)buttonTexture.Height && !PlayerInput.IgnoreMouseInterface)
			{
				hover = true;
				player[myPlayer].mouseInterface = true;
				text = "Previous Page";
				mouseText = true;
				if (mouseLeft && mouseLeftRelease)
				{
					SoundEngine.PlaySound(in SoundID.MenuTick);
					mouseLeftRelease = false;
					if (BuilderToggleLoader.BuilderTogglePage > 0)
					{
						BuilderToggleLoader.BuilderTogglePage--;
					}
				}
				spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, buttonPosition + new Vector2(0f, 17f) - Vector2.One * 2f, (Rectangle?)null, OurFavoriteColor, -(float)Math.PI / 2f, default(Vector2), 1f, (SpriteEffects)0, 0f);
			}
		}
		((Vector2)(ref buttonPosition))._002Ector(3f, (float)startY + (float)(endIndex - startIndex + (BuilderToggleLoader.BuilderTogglePage != 0).ToInt()) * 24f - 6f);
		if (BuilderToggleLoader.BuilderTogglePage != activeToggles / 12)
		{
			spriteBatch.Draw(buttonTexture, buttonPosition + new Vector2(0f, 12f), (Rectangle?)new Rectangle(0, 0, buttonTexture.Width, buttonTexture.Height), Color.White, (float)Math.PI / 2f, new Vector2((float)buttonTexture.Width, (float)buttonTexture.Height), 1f, (SpriteEffects)0, 0f);
			if ((float)mouseX >= buttonPosition.X && (float)mouseY >= buttonPosition.Y && (float)mouseX <= buttonPosition.X + (float)buttonTexture.Width && (float)mouseY <= buttonPosition.Y + (float)buttonTexture.Height && !PlayerInput.IgnoreMouseInterface)
			{
				hover = true;
				player[myPlayer].mouseInterface = true;
				text = "Next Page";
				mouseText = true;
				if (mouseLeft && mouseLeftRelease)
				{
					SoundEngine.PlaySound(in SoundID.MenuTick);
					mouseLeftRelease = false;
					if (BuilderToggleLoader.BuilderTogglePage < activeToggles / 12)
					{
						BuilderToggleLoader.BuilderTogglePage++;
					}
				}
				spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, buttonPosition + new Vector2(4f, 12f) - Vector2.One * 2f, (Rectangle?)null, OurFavoriteColor, (float)Math.PI / 2f, new Vector2((float)buttonTexture.Width, (float)buttonTexture.Height), 1f, (SpriteEffects)0, 0f);
			}
		}
		if (mouseText && hover)
		{
			float colorByte = (float)(int)mouseTextColor / 255f;
			Color textColor = default(Color);
			((Color)(ref textColor))._002Ector(colorByte, colorByte, colorByte);
			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)(mouseX + 14), (float)(mouseY + 14)), textColor, 0f, Vector2.Zero, Vector2.One);
			mouseText = false;
		}
	}

	private void DrawBuilderAccToggles_Inner(Vector2 start)
	{
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02db: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0441: Unknown result type (might be due to invalid IL or missing references)
		//IL_0446: Unknown result type (might be due to invalid IL or missing references)
		//IL_044d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0452: Unknown result type (might be due to invalid IL or missing references)
		//IL_0461: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_033d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_0351: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		Player player = Main.player[myPlayer];
		int[] builderAccStatus = player.builderAccStatus;
		List<BuilderToggle> activeToggles = BuilderToggleLoader.ActiveBuilderTogglesList();
		bool shiftHotbarLock = activeToggles.Count / 12 != BuilderToggleLoader.BuilderTogglePage || activeToggles.Count % 12 >= 10;
		Vector2 startPosition = start - new Vector2(0f, (float)(shiftHotbarLock ? 42 : 21));
		string text = "";
		BuilderTogglePageHandler((int)startPosition.Y, activeToggles.Count, out var moveDownForButton, out var startIndex, out var endIndex);
		Rectangle rectangle = default(Rectangle);
		Color textColor = default(Color);
		for (int i = startIndex; i < endIndex; i++)
		{
			BuilderToggle builderToggle = activeToggles[i];
			Texture2D texture = ModContent.Request<Texture2D>(builderToggle.Texture).Value;
			((Rectangle)(ref rectangle))._002Ector(0, 0, texture.Width, texture.Height);
			Color color = builderToggle.DisplayColorTexture();
			Vector2 position = startPosition + new Vector2(0f, (float)(moveDownForButton ? 24 : 0)) + new Vector2(0f, (float)(i % 12 * 24));
			text = builderToggle.DisplayValue();
			int numberOfStates = builderToggle.NumberOfStates;
			int toggleType = builderToggle.Type;
			Rectangle val = Utils.CenteredRectangle(position, new Vector2(14f));
			bool hover = ((Rectangle)(ref val)).Contains(MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface;
			bool num = hover && mouseLeft && mouseLeftRelease;
			if (toggleType == BuilderToggle.BlockSwap.Type || toggleType == BuilderToggle.TorchBiome.Type)
			{
				rectangle = ((toggleType != BuilderToggle.BlockSwap.Type) ? texture.Frame(4, 1, (builderToggle.CurrentState == 0) ? 1 : 0) : texture.Frame(3, 1, (builderToggle.CurrentState != 0) ? 1 : 0));
				position += new Vector2(1f, 0f);
			}
			else
			{
				rectangle = (Rectangle)((builderToggle.Type < 10) ? new Rectangle(builderToggle.Type * 16, 16, 14, 14) : rectangle);
			}
			spriteBatch.Draw(texture, position, (Rectangle?)rectangle, color, 0f, rectangle.Size() / 2f, 1f, (SpriteEffects)0, 0f);
			if (hover)
			{
				player.mouseInterface = true;
				mouseText = true;
				if (toggleType != BuilderToggle.BlockSwap.Type && toggleType != BuilderToggle.TorchBiome.Type)
				{
					Asset<Texture2D> iconHover = ModContent.Request<Texture2D>(builderToggle.HoverTexture);
					spriteBatch.Draw(iconHover.Value, position, (Rectangle?)null, OurFavoriteColor, 0f, iconHover.Value.Size() / 2f, 1f, (SpriteEffects)0, 0f);
				}
				else if (toggleType == BuilderToggle.BlockSwap.Type)
				{
					spriteBatch.Draw(texture, position, (Rectangle?)texture.Frame(3, 1, 2), OurFavoriteColor, 0f, rectangle.Size() / 2f, 0.9f, (SpriteEffects)0, 0f);
				}
				else if (toggleType == BuilderToggle.TorchBiome.Type)
				{
					spriteBatch.Draw(texture, position, (Rectangle?)texture.Frame(4, 1, (builderToggle.CurrentState == 0) ? 3 : 2), OurFavoriteColor, 0f, rectangle.Size() / 2f, 0.9f, (SpriteEffects)0, 0f);
				}
			}
			if (num)
			{
				builderAccStatus[toggleType] = (builderAccStatus[toggleType] + 1) % numberOfStates;
				SoundStyle style = ((toggleType == BuilderToggle.BlockSwap.Type || toggleType == BuilderToggle.TorchBiome.Type) ? SoundID.Unlock : SoundID.MenuTick);
				SoundEngine.PlaySound(in style);
				mouseLeftRelease = false;
			}
			UILinkPointNavigator.SetPosition(6000 + i % 12, position + rectangle.Size() * 0.15f);
			if (mouseText && hover && HoverItem.type <= 0)
			{
				float colorByte = (float)(int)mouseTextColor / 255f;
				((Color)(ref textColor))._002Ector(colorByte, colorByte, colorByte);
				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text, new Vector2((float)(mouseX + 14), (float)(mouseY + 14)), textColor, 0f, Vector2.Zero, Vector2.One);
				mouseText = false;
			}
		}
		UILinkPointNavigator.Shortcuts.BUILDERACCCOUNT = endIndex - startIndex;
	}

	/// <summary>
	/// Syncs rain state if <see cref="M:Terraria.Main.StartRain" /> or <see cref="M:Terraria.Main.StopRain" /> were called in the same tick and caused a change to <seealso cref="F:Terraria.Main.maxRaining" />.
	/// <br>Can be called on any side, but only the server will actually sync it.</br>
	/// </summary>
	public static void SyncRain()
	{
		if (maxRaining != oldMaxRaining)
		{
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
			oldMaxRaining = maxRaining;
		}
	}

	internal void InitTMLContentManager()
	{
		if (dedServ)
		{
			return;
		}
		string vanillaContentFolder;
		if (SocialAPI.Mode == SocialMode.Steam)
		{
			vanillaContentFolder = Path.Combine(Steam.GetSteamTerrariaInstallDir(), "Content");
		}
		else
		{
			vanillaContentFolder = (Platform.IsOSX ? "../Terraria/Terraria.app/Contents/Resources/Content" : "../Terraria/Content");
			if (!Directory.Exists(vanillaContentFolder))
			{
				vanillaContentFolder = (Platform.IsOSX ? "../Terraria.app/Contents/Resources/Content" : "../Content");
			}
			Logging.tML.Info((object)("Content folder of Terraria GOG Install Location assumed to be: " + Path.GetFullPath(vanillaContentFolder)));
		}
		if (!Directory.Exists(vanillaContentFolder))
		{
			ErrorReporting.FatalExit(Language.GetTextValue("tModLoader.ContentFolderNotFound"));
		}
		if (!File.Exists(Path.Combine(vanillaContentFolder, "Images", "Projectile_981.xnb")))
		{
			ErrorReporting.FatalExit(Language.GetTextValue("tModLoader.TerrariaOutOfDateMessage"));
		}
		TMLContentManager localOverrideContentManager = null;
		if (Directory.Exists(Path.Combine("Content", "Images")))
		{
			localOverrideContentManager = new TMLContentManager(((Game)this).Content.ServiceProvider, "Content", null);
		}
		((Game)this).Content = (ContentManager)(object)new TMLContentManager(((Game)this).Content.ServiceProvider, vanillaContentFolder, localOverrideContentManager);
	}

	private static void DrawtModLoaderSocialMediaButtons(Color menuColor, float upBump)
	{
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		List<TitleLinkButton> titleLinks = tModLoaderTitleLinks;
		Vector2 anchorPosition = default(Vector2);
		((Vector2)(ref anchorPosition))._002Ector(18f, (float)(screenHeight - 26 - 22) - upBump);
		for (int i = 0; i < titleLinks.Count; i++)
		{
			titleLinks[i].Draw(spriteBatch, anchorPosition);
			anchorPosition.X += 30f;
		}
	}

	/// <summary>
	/// Wait for an action to be performed on the main thread.
	/// </summary>
	/// <param name="action"></param>
	public static Task RunOnMainThread(Action action)
	{
		TaskCompletionSource tcs = new TaskCompletionSource();
		QueueMainThreadAction(delegate
		{
			action();
			tcs.SetResult();
		});
		return tcs.Task;
	}

	/// <summary>
	/// Wait for an action to be performed on the main thread.
	/// </summary>
	/// <param name="func"></param>
	public static Task<T> RunOnMainThread<T>(Func<T> func)
	{
		TaskCompletionSource<T> tcs = new TaskCompletionSource<T>();
		QueueMainThreadAction(delegate
		{
			tcs.SetResult(func());
		});
		return tcs.Task;
	}

	public static void AddSignalTraps()
	{
		SIGINTHandler = PosixSignalRegistration.Create(PosixSignal.SIGINT, Handle);
		SIGTERMHandler = PosixSignalRegistration.Create(PosixSignal.SIGTERM, Handle);
		static void Handle(PosixSignalContext ctx)
		{
			ctx.Cancel = true;
			Logging.tML.Info((object)$"Signal {ctx.Signal}, Closing Server...");
			Netplay.Disconnect = true;
		}
	}

	static Main()
	{
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Expected O, but got Unknown
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0306: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0332: Unknown result type (might be due to invalid IL or missing references)
		//IL_0337: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_036a: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0380: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_0396: Unknown result type (might be due to invalid IL or missing references)
		//IL_039b: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0404: Unknown result type (might be due to invalid IL or missing references)
		//IL_0409: Unknown result type (might be due to invalid IL or missing references)
		//IL_041b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0420: Unknown result type (might be due to invalid IL or missing references)
		//IL_0432: Unknown result type (might be due to invalid IL or missing references)
		//IL_0437: Unknown result type (might be due to invalid IL or missing references)
		//IL_0449: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0460: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_0477: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_048e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0493: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0501: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_0523: Unknown result type (might be due to invalid IL or missing references)
		//IL_0528: Unknown result type (might be due to invalid IL or missing references)
		//IL_0539: Unknown result type (might be due to invalid IL or missing references)
		//IL_053e: Unknown result type (might be due to invalid IL or missing references)
		//IL_054f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0554: Unknown result type (might be due to invalid IL or missing references)
		//IL_0565: Unknown result type (might be due to invalid IL or missing references)
		//IL_056a: Unknown result type (might be due to invalid IL or missing references)
		//IL_057b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0580: Unknown result type (might be due to invalid IL or missing references)
		//IL_0591: Unknown result type (might be due to invalid IL or missing references)
		//IL_0596: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0601: Unknown result type (might be due to invalid IL or missing references)
		//IL_0606: Unknown result type (might be due to invalid IL or missing references)
		//IL_0618: Unknown result type (might be due to invalid IL or missing references)
		//IL_061d: Unknown result type (might be due to invalid IL or missing references)
		//IL_062f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0634: Unknown result type (might be due to invalid IL or missing references)
		//IL_0646: Unknown result type (might be due to invalid IL or missing references)
		//IL_064b: Unknown result type (might be due to invalid IL or missing references)
		//IL_065d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0662: Unknown result type (might be due to invalid IL or missing references)
		//IL_0674: Unknown result type (might be due to invalid IL or missing references)
		//IL_0679: Unknown result type (might be due to invalid IL or missing references)
		//IL_068b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0690: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06be: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0708: Unknown result type (might be due to invalid IL or missing references)
		//IL_070d: Unknown result type (might be due to invalid IL or missing references)
		//IL_071e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0723: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0739: Unknown result type (might be due to invalid IL or missing references)
		//IL_074a: Unknown result type (might be due to invalid IL or missing references)
		//IL_074f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0760: Unknown result type (might be due to invalid IL or missing references)
		//IL_0765: Unknown result type (might be due to invalid IL or missing references)
		//IL_0776: Unknown result type (might be due to invalid IL or missing references)
		//IL_077b: Unknown result type (might be due to invalid IL or missing references)
		//IL_078c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0791: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_07be: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_07fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0803: Unknown result type (might be due to invalid IL or missing references)
		//IL_0815: Unknown result type (might be due to invalid IL or missing references)
		//IL_081a: Unknown result type (might be due to invalid IL or missing references)
		//IL_082c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0831: Unknown result type (might be due to invalid IL or missing references)
		//IL_0843: Unknown result type (might be due to invalid IL or missing references)
		//IL_0848: Unknown result type (might be due to invalid IL or missing references)
		//IL_085a: Unknown result type (might be due to invalid IL or missing references)
		//IL_085f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0871: Unknown result type (might be due to invalid IL or missing references)
		//IL_0876: Unknown result type (might be due to invalid IL or missing references)
		//IL_0888: Unknown result type (might be due to invalid IL or missing references)
		//IL_088d: Unknown result type (might be due to invalid IL or missing references)
		//IL_089f: Unknown result type (might be due to invalid IL or missing references)
		//IL_08a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_08b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ccb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d60: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d79: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0db6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e22: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e2c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e31: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e36: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e40: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b33: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b38: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e66: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_2024: Unknown result type (might be due to invalid IL or missing references)
		//IL_2029: Unknown result type (might be due to invalid IL or missing references)
		//IL_203f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2044: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_2167: Unknown result type (might be due to invalid IL or missing references)
		//IL_216c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2171: Unknown result type (might be due to invalid IL or missing references)
		//IL_2176: Unknown result type (might be due to invalid IL or missing references)
		Keys val = (Keys)0;
		blockKey = ((object)(Keys)(ref val)).ToString();
		defaultChestName = string.Empty;
		npcChatText = "";
		shopSellbackHelper = new ItemShopSellbackHelper();
		travelShop = new int[40];
		anglerWhoFinishedToday = new List<string>();
		anglerQuestItemNetIDs = new int[41]
		{
			2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459,
			2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469,
			2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479,
			2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 4393,
			4394
		};
		LocalGolfState = new GolfState();
		DroneCameraTracker = new DroneCameraTracker();
		WorkshopPublishingIndicator = new WorkshopPublishingIndicator();
		IssueReporterIndicator = new IssueReportsIndicator();
		Support4K = true;
		MinimumZoomComparerX = 1920f;
		MinimumZoomComparerY = 1200f;
		_renderTargetMaxSize = 2048;
		_selectedGraphicsProfile = (GraphicsProfile)(!Program.IsXna);
		_currentGraphicsProfile = _selectedGraphicsProfile;
		LogicCheckScreenWidth = 1920;
		LogicCheckScreenHeight = 1200;
		_worldPreparationState = WorldPreparationState.AwaitingData;
		temporaryGUIScaleSlider = -1f;
		temporaryGUIScaleSliderUpdate = false;
		HoverItem = new Item();
		motd = "";
		displayWidth = new int[99];
		displayHeight = new int[99];
		gameMenu = true;
		menuBGChangedDay = false;
		menuBGChangedNight = false;
		lockMenuBGChange = false;
		maxLoadPlayer = 1000;
		maxLoadWorld = 1000;
		PlayerList = new List<PlayerFileData>();
		ActivePlayerFileData = new PlayerFileData();
		PendingPlayer = null;
		WorldList = new List<WorldFileData>();
		ActiveWorldFileData = new WorldFileData();
		WorldPath = Path.Combine(SavePath, "Worlds");
		CloudWorldPath = Program.SaveFolderName + "/worlds";
		PlayerPath = Path.Combine(SavePath, "Players");
		CloudPlayerPath = Program.SaveFolderName + "/players";
		Configuration = new Preferences(SavePath + Path.DirectorySeparatorChar + "config.json");
		InputProfiles = new Preferences(SavePath + Path.DirectorySeparatorChar + "input profiles.json");
		PendingResolutionWidth = 800;
		PendingResolutionHeight = 600;
		invasionProgressMode = 2;
		HasInteractibleObjectThatIsNotATile = false;
		npcFrameCount = new int[688]
		{
			1, 2, 2, 3, 6, 2, 2, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 2, 25, 23, 25,
			21, 15, 26, 2, 10, 1, 16, 16, 16, 3,
			1, 15, 3, 1, 3, 1, 1, 21, 25, 1,
			1, 1, 3, 3, 15, 3, 7, 7, 6, 5,
			6, 5, 3, 3, 23, 6, 3, 6, 6, 2,
			5, 6, 5, 7, 7, 4, 5, 8, 1, 5,
			1, 2, 4, 16, 5, 4, 4, 15, 16, 16,
			16, 2, 4, 6, 6, 18, 16, 1, 1, 1,
			1, 1, 1, 4, 3, 1, 1, 1, 1, 1,
			1, 5, 6, 7, 16, 1, 1, 25, 23, 12,
			20, 21, 1, 2, 2, 3, 6, 1, 1, 1,
			15, 4, 11, 1, 23, 6, 6, 6, 1, 2,
			2, 1, 3, 4, 1, 2, 1, 4, 2, 1,
			15, 3, 25, 4, 5, 7, 3, 2, 12, 12,
			4, 4, 4, 8, 8, 13, 5, 6, 4, 15,
			23, 3, 15, 8, 5, 4, 13, 15, 12, 4,
			14, 14, 3, 2, 5, 3, 2, 3, 23, 5,
			14, 16, 5, 2, 2, 12, 3, 3, 3, 3,
			2, 2, 2, 2, 2, 7, 14, 15, 16, 8,
			3, 15, 15, 16, 2, 3, 20, 25, 23, 26,
			4, 4, 16, 16, 20, 20, 20, 2, 2, 2,
			2, 8, 12, 3, 4, 2, 4, 25, 26, 26,
			6, 3, 3, 3, 3, 3, 5, 4, 4, 5,
			4, 6, 7, 15, 4, 7, 6, 1, 1, 2,
			4, 3, 5, 3, 3, 3, 4, 5, 6, 4,
			2, 1, 8, 4, 4, 1, 8, 1, 4, 15,
			15, 15, 15, 15, 15, 16, 15, 15, 15, 15,
			15, 3, 3, 3, 3, 3, 3, 16, 3, 6,
			12, 21, 21, 20, 16, 15, 15, 5, 5, 6,
			6, 5, 2, 7, 2, 6, 6, 6, 6, 6,
			15, 15, 15, 15, 15, 11, 4, 2, 2, 3,
			3, 3, 16, 15, 16, 10, 14, 12, 1, 10,
			8, 3, 3, 2, 2, 2, 2, 7, 15, 15,
			15, 6, 3, 10, 10, 6, 9, 8, 9, 8,
			20, 10, 6, 23, 1, 4, 24, 2, 4, 6,
			6, 13, 15, 15, 15, 15, 4, 4, 26, 23,
			8, 2, 4, 4, 4, 4, 2, 2, 4, 12,
			12, 9, 9, 9, 1, 9, 11, 2, 2, 9,
			5, 6, 4, 18, 8, 11, 1, 4, 5, 8,
			4, 1, 1, 1, 1, 4, 2, 5, 4, 11,
			5, 11, 1, 1, 1, 10, 10, 15, 8, 17,
			6, 6, 1, 12, 12, 13, 15, 9, 5, 10,
			7, 7, 7, 7, 7, 7, 7, 4, 4, 16,
			16, 25, 5, 7, 3, 13, 2, 6, 2, 19,
			19, 19, 20, 26, 3, 1, 1, 1, 1, 1,
			16, 21, 9, 16, 7, 6, 18, 13, 20, 12,
			12, 20, 6, 14, 14, 14, 14, 6, 1, 3,
			25, 19, 20, 22, 2, 4, 4, 4, 11, 9,
			8, 1, 9, 1, 8, 8, 12, 12, 11, 11,
			11, 11, 11, 11, 11, 11, 11, 1, 6, 9,
			1, 1, 1, 1, 1, 1, 4, 1, 10, 1,
			8, 4, 1, 5, 8, 8, 8, 8, 9, 9,
			5, 4, 8, 16, 8, 2, 3, 3, 6, 6,
			7, 13, 4, 4, 4, 4, 1, 1, 1, 8,
			25, 11, 14, 14, 14, 17, 17, 17, 5, 5,
			5, 14, 14, 14, 9, 9, 9, 9, 17, 17,
			16, 16, 18, 18, 10, 10, 10, 10, 4, 1,
			6, 9, 6, 4, 4, 4, 14, 4, 25, 13,
			3, 7, 6, 6, 1, 4, 4, 4, 4, 4,
			4, 4, 15, 15, 8, 8, 2, 6, 15, 15,
			6, 13, 5, 5, 7, 5, 14, 14, 4, 6,
			21, 1, 1, 1, 11, 12, 6, 6, 17, 6,
			16, 21, 16, 23, 5, 16, 2, 28, 28, 6,
			6, 6, 6, 6, 6, 6, 7, 7, 7, 7,
			7, 7, 7, 3, 4, 6, 27, 16, 2, 2,
			4, 3, 4, 23, 6, 1, 1, 2, 8, 8,
			14, 6, 6, 6, 6, 6, 2, 4, 14, 14,
			14, 14, 14, 14, 14, 1, 1, 13
		};
		npcLifeBytes = new Dictionary<int, byte>();
		exitScale = 0.8f;
		reforgeScale = 0.8f;
		clientPlayer = new Player();
		getIP = defaultIP;
		getPort = Convert.ToString(Netplay.ListenPort);
		maxNPCUpdates = 5;
		maxItemUpdates = 5;
		cUp = "W";
		cLeft = "A";
		cDown = "S";
		cRight = "D";
		cJump = "Space";
		cThrowItem = "T";
		cHeal = "H";
		cMana = "J";
		cBuff = "B";
		cHook = "E";
		cTorch = "LeftShift";
		cInv = "Escape";
		cSmart = "LeftControl";
		cMount = "R";
		cFavoriteKey = "LeftAlt";
		cSmartCursorModeIsToggleAndNotHold = true;
		SmartCursorWanted_Mouse = false;
		SmartCursorWanted_GamePad = false;
		SmartCursorShowing = false;
		SmartInteractTileCoords = new List<Point>();
		SmartInteractTileCoordsSelected = new List<Point>();
		TileInteractionLX = -1;
		TileInteractionLY = -1;
		TileInteractionHX = -1;
		TileInteractionHY = -1;
		cursorOverride = -1;
		signHover = -1;
		cMapZoomIn = "Add";
		cMapZoomOut = "Subtract";
		cMapAlphaUp = "PageUp";
		cMapAlphaDown = "PageDown";
		cMapFull = "M";
		cMapStyle = "Tab";
		FavoriteKey = (Keys)164;
		mouseColorSlider = new ColorSlidersSet();
		mouseBorderColorSlider = new ColorSlidersSet();
		mouseColor = new Color(255, 50, 95);
		cursorColor = Color.White;
		cursorColorDirection = 1;
		signX = 0;
		signY = 0;
		FrameSkipMode = FrameSkipMode.Subtle;
		terrariasFixedTiming = true;
		ParticleSystem_World_OverPlayers = new ParticleRenderer();
		ParticleSystem_World_BehindPlayers = new ParticleRenderer();
		shouldSetDefaultUIScale = true;
		newDefaultUIScale = 0f;
		startFullscreen = false;
		oldStatusText = "";
		autoGenFileLocation = null;
		splashTimer = new Stopwatch();
		PreventUpdatingTargets = true;
		_shouldUseWindyDayMusic = false;
		_shouldUseStormMusic = false;
		_minWind = 0.34f;
		_maxWind = 0.4f;
		_minRain = 0.4f;
		_maxRain = 0.5f;
		ambientWaterfallX = -1f;
		ambientWaterfallY = -1f;
		ambientWaterfallStrength = 0f;
		ambientLavafallX = -1f;
		ambientLavafallY = -1f;
		ambientLavafallStrength = 0f;
		ambientLavaX = -1f;
		ambientLavaY = -1f;
		chatMonitor = new RemadeChatMonitor();
		ProjectileUpdateLoopIndex = -1;
		weatherVaneBobframe = 0;
		maxMenuItems = 16;
		selectedPlayer = 0;
		menuMode = 10002;
		_needsLanguageSelect = true;
		tooltipPrefixComparisonItem = new Item();
		newWorldName = "";
		shimmerShine = new Vector3(1f, 0.5f, 1f);
		specX = new int[1000];
		specY = new int[1000];
		_multiplyBlendState = null;
		_tempSeededRandom = new UnifiedRandom();
		_lastHoveredLoadoutIndex = -1;
		_requiredObjecsForCraftingText = new List<string>();
		_currentRecipeBeingCrafted = -1;
		hidePVPIcons = false;
		hoverItemName = "";
		inventoryBack = new Color(220, 220, 220, 220);
		oldClothesColor = (Color[])(object)new Color[6];
		_cannotDrawAccessoriesHorizontally = false;
		selColor = Color.White;
		setKey = -1;
		menuFocus = 0;
		hBar = -1f;
		sBar = -1f;
		lBar = 1f;
		aBar = 1f;
		GamepadCursorAlpha = 0f;
		MenuXMovement = 0f;
		InitialMapScale = 1f;
		MapScale = 1f;
		_minimapTopRightAnchorOffsetTowardsLeft = 52;
		_minimapTopRightAnchorOffsetTowardsBottom = 90;
		cancelWormHole = false;
		_glowPaintColors = new VertexColors(Color.White);
		lightningDecay = 1f;
		lightningSpeed = 0f;
		MonolithFilterNames = new string[5] { "MonolithVortex", "MonolithNebula", "MonolithStardust", "MonolithSolar", "MonolithMoonLord" };
		MonolithSkyNames = new string[5] { "MonolithVortex", "MonolithNebula", "MonolithStardust", "MonolithSolar", "MonolithMoonLord" };
		backgroundLayerTransitionSpeed = 0.05f;
		bgScale = 1f;
		bgWidthScaled = (int)(1024f * bgScale);
		ColorOfSurfaceBackgroundsBase = Color.White;
		ColorOfSurfaceBackgroundsModified = Color.White;
		ContentThatNeedsRenderTargets = new List<INeedRenderTargetContent>();
		_cameraPanHasBlackTransition = false;
		starGame = false;
		starsHit = 0;
		ladyBugRainBoost = 0.0;
		_isResizingAndRemakingTargets = false;
		DefaultDamageVariationPercent = 15;
		Support8K = true;
		desiredWorldEventsUpdateRate = 1.0;
		tModLoaderTitleLinks = new List<TitleLinkButton>();
	}
}
